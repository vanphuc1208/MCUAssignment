
Assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b88  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08004c94  08004c94  00014c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d18  08004d18  000200a4  2**0
                  CONTENTS
  4 .ARM          00000000  08004d18  08004d18  000200a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004d18  08004d18  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d18  08004d18  00014d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d1c  08004d1c  00014d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08004d20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  200000a4  08004dc4  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  08004dc4  00020220  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011a5c  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002896  00000000  00000000  00031b29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc8  00000000  00000000  000343c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c98  00000000  00000000  00035188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c78  00000000  00000000  00035e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011130  00000000  00000000  0004ea98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b3fb  00000000  00000000  0005fbc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000eafc3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003adc  00000000  00000000  000eb018  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a4 	.word	0x200000a4
 8000128:	00000000 	.word	0x00000000
 800012c:	08004c7c 	.word	0x08004c7c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a8 	.word	0x200000a8
 8000148:	08004c7c 	.word	0x08004c7c

0800014c <button_reading>:
//we define a flag for a button pressed more than 1 second.
//we define counter for automatically increasing the value
//after the button is pressed more than 1 second.
int buttonFlag[N0_OF_BUTTONS] = {0};
void button_reading(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	for(int i = 0; i < N0_OF_BUTTONS; i ++)
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e076      	b.n	8000246 <button_reading+0xfa>
	{
		debounceButtonBuffer3[i] =debounceButtonBuffer2[i];
 8000158:	4a3f      	ldr	r2, [pc, #252]	; (8000258 <button_reading+0x10c>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	4413      	add	r3, r2
 800015e:	7819      	ldrb	r1, [r3, #0]
 8000160:	4a3e      	ldr	r2, [pc, #248]	; (800025c <button_reading+0x110>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	4413      	add	r3, r2
 8000166:	460a      	mov	r2, r1
 8000168:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer2[i] =debounceButtonBuffer1[i];
 800016a:	4a3d      	ldr	r2, [pc, #244]	; (8000260 <button_reading+0x114>)
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	4413      	add	r3, r2
 8000170:	7819      	ldrb	r1, [r3, #0]
 8000172:	4a39      	ldr	r2, [pc, #228]	; (8000258 <button_reading+0x10c>)
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	4413      	add	r3, r2
 8000178:	460a      	mov	r2, r1
 800017a:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(buttonGPIO[i], buttonPin[i]);
 800017c:	4a39      	ldr	r2, [pc, #228]	; (8000264 <button_reading+0x118>)
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000184:	4938      	ldr	r1, [pc, #224]	; (8000268 <button_reading+0x11c>)
 8000186:	687b      	ldr	r3, [r7, #4]
 8000188:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800018c:	b29b      	uxth	r3, r3
 800018e:	4619      	mov	r1, r3
 8000190:	4610      	mov	r0, r2
 8000192:	f001 ff17 	bl	8001fc4 <HAL_GPIO_ReadPin>
 8000196:	4603      	mov	r3, r0
 8000198:	4619      	mov	r1, r3
 800019a:	4a31      	ldr	r2, [pc, #196]	; (8000260 <button_reading+0x114>)
 800019c:	687b      	ldr	r3, [r7, #4]
 800019e:	4413      	add	r3, r2
 80001a0:	460a      	mov	r2, r1
 80001a2:	701a      	strb	r2, [r3, #0]
		if(debounceButtonBuffer1[i] == debounceButtonBuffer2[i] && debounceButtonBuffer2[i] == debounceButtonBuffer3[i])
 80001a4:	4a2e      	ldr	r2, [pc, #184]	; (8000260 <button_reading+0x114>)
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	4413      	add	r3, r2
 80001aa:	781a      	ldrb	r2, [r3, #0]
 80001ac:	492a      	ldr	r1, [pc, #168]	; (8000258 <button_reading+0x10c>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	440b      	add	r3, r1
 80001b2:	781b      	ldrb	r3, [r3, #0]
 80001b4:	429a      	cmp	r2, r3
 80001b6:	d12d      	bne.n	8000214 <button_reading+0xc8>
 80001b8:	4a27      	ldr	r2, [pc, #156]	; (8000258 <button_reading+0x10c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	4413      	add	r3, r2
 80001be:	781a      	ldrb	r2, [r3, #0]
 80001c0:	4926      	ldr	r1, [pc, #152]	; (800025c <button_reading+0x110>)
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	440b      	add	r3, r1
 80001c6:	781b      	ldrb	r3, [r3, #0]
 80001c8:	429a      	cmp	r2, r3
 80001ca:	d123      	bne.n	8000214 <button_reading+0xc8>
		{
			if(debounceButtonBuffer1[i] != buttonBuffer[i])
 80001cc:	4a24      	ldr	r2, [pc, #144]	; (8000260 <button_reading+0x114>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	4413      	add	r3, r2
 80001d2:	781a      	ldrb	r2, [r3, #0]
 80001d4:	4925      	ldr	r1, [pc, #148]	; (800026c <button_reading+0x120>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	440b      	add	r3, r1
 80001da:	781b      	ldrb	r3, [r3, #0]
 80001dc:	429a      	cmp	r2, r3
 80001de:	d02e      	beq.n	800023e <button_reading+0xf2>
			{
				buttonBuffer[i] = debounceButtonBuffer1[i];
 80001e0:	4a1f      	ldr	r2, [pc, #124]	; (8000260 <button_reading+0x114>)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	4413      	add	r3, r2
 80001e6:	7819      	ldrb	r1, [r3, #0]
 80001e8:	4a20      	ldr	r2, [pc, #128]	; (800026c <button_reading+0x120>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	4413      	add	r3, r2
 80001ee:	460a      	mov	r2, r1
 80001f0:	701a      	strb	r2, [r3, #0]
						if(buttonBuffer[i] == BUTTON_IS_PRESSED)
 80001f2:	4a1e      	ldr	r2, [pc, #120]	; (800026c <button_reading+0x120>)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	4413      	add	r3, r2
 80001f8:	781b      	ldrb	r3, [r3, #0]
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d11f      	bne.n	800023e <button_reading+0xf2>
						{
							buttonFlag[i] = 1;
 80001fe:	4a1c      	ldr	r2, [pc, #112]	; (8000270 <button_reading+0x124>)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	2101      	movs	r1, #1
 8000204:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							buttonTimeOut[i] = DURATION_FOR_AUTO_INCREASING;
 8000208:	4a1a      	ldr	r2, [pc, #104]	; (8000274 <button_reading+0x128>)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	2164      	movs	r1, #100	; 0x64
 800020e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if(debounceButtonBuffer1[i] != buttonBuffer[i])
 8000212:	e014      	b.n	800023e <button_reading+0xf2>
						}
			}
		}
		else
		{
			buttonTimeOut[i]--;
 8000214:	4a17      	ldr	r2, [pc, #92]	; (8000274 <button_reading+0x128>)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800021c:	1e5a      	subs	r2, r3, #1
 800021e:	4915      	ldr	r1, [pc, #84]	; (8000274 <button_reading+0x128>)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(buttonTimeOut[i] <= 0)
 8000226:	4a13      	ldr	r2, [pc, #76]	; (8000274 <button_reading+0x128>)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800022e:	2b00      	cmp	r3, #0
 8000230:	dc06      	bgt.n	8000240 <button_reading+0xf4>
					buttonBuffer[i] = BUTTON_IS_RELEASED;
 8000232:	4a0e      	ldr	r2, [pc, #56]	; (800026c <button_reading+0x120>)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	4413      	add	r3, r2
 8000238:	2201      	movs	r2, #1
 800023a:	701a      	strb	r2, [r3, #0]
 800023c:	e000      	b.n	8000240 <button_reading+0xf4>
			if(debounceButtonBuffer1[i] != buttonBuffer[i])
 800023e:	bf00      	nop
	for(int i = 0; i < N0_OF_BUTTONS; i ++)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	3301      	adds	r3, #1
 8000244:	607b      	str	r3, [r7, #4]
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	2b03      	cmp	r3, #3
 800024a:	dd85      	ble.n	8000158 <button_reading+0xc>
		}
	}
}
 800024c:	bf00      	nop
 800024e:	bf00      	nop
 8000250:	3708      	adds	r7, #8
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}
 8000256:	bf00      	nop
 8000258:	200000d4 	.word	0x200000d4
 800025c:	200000d8 	.word	0x200000d8
 8000260:	200000d0 	.word	0x200000d0
 8000264:	20000004 	.word	0x20000004
 8000268:	20000014 	.word	0x20000014
 800026c:	20000000 	.word	0x20000000
 8000270:	200000dc 	.word	0x200000dc
 8000274:	200000c0 	.word	0x200000c0

08000278 <is_button_pressed>:

int is_button_pressed(int index)
{
 8000278:	b480      	push	{r7}
 800027a:	b083      	sub	sp, #12
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
	if(index >= N0_OF_BUTTONS || index < 0) return 0;
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	2b03      	cmp	r3, #3
 8000284:	dc02      	bgt.n	800028c <is_button_pressed+0x14>
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	2b00      	cmp	r3, #0
 800028a:	da01      	bge.n	8000290 <is_button_pressed+0x18>
 800028c:	2300      	movs	r3, #0
 800028e:	e00d      	b.n	80002ac <is_button_pressed+0x34>
		if(buttonFlag[index] == 1)
 8000290:	4a09      	ldr	r2, [pc, #36]	; (80002b8 <is_button_pressed+0x40>)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000298:	2b01      	cmp	r3, #1
 800029a:	d106      	bne.n	80002aa <is_button_pressed+0x32>
		{
			buttonFlag[index] = 0;
 800029c:	4a06      	ldr	r2, [pc, #24]	; (80002b8 <is_button_pressed+0x40>)
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	2100      	movs	r1, #0
 80002a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			return 1;
 80002a6:	2301      	movs	r3, #1
 80002a8:	e000      	b.n	80002ac <is_button_pressed+0x34>
		}
		return 0;
 80002aa:	2300      	movs	r3, #0
}
 80002ac:	4618      	mov	r0, r3
 80002ae:	370c      	adds	r7, #12
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bc80      	pop	{r7}
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	200000dc 	.word	0x200000dc

080002bc <buzzer>:
 */

#include "buzzer.h"

void buzzer()
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
	 htim3.Instance->CCR1=buzzerValue;
 80002c0:	4b04      	ldr	r3, [pc, #16]	; (80002d4 <buzzer+0x18>)
 80002c2:	681a      	ldr	r2, [r3, #0]
 80002c4:	4b04      	ldr	r3, [pc, #16]	; (80002d8 <buzzer+0x1c>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80002ca:	bf00      	nop
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bc80      	pop	{r7}
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
 80002d4:	200000f4 	.word	0x200000f4
 80002d8:	2000010c 	.word	0x2000010c

080002dc <clearAllLed1>:
 */
#include "main.h"
#include "displayLed.h"

void clearAllLed1()
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 80002e0:	2200      	movs	r2, #0
 80002e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002e6:	4805      	ldr	r0, [pc, #20]	; (80002fc <clearAllLed1+0x20>)
 80002e8:	f001 fe83 	bl	8001ff2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 80002ec:	2200      	movs	r2, #0
 80002ee:	2108      	movs	r1, #8
 80002f0:	4803      	ldr	r0, [pc, #12]	; (8000300 <clearAllLed1+0x24>)
 80002f2:	f001 fe7e 	bl	8001ff2 <HAL_GPIO_WritePin>
}
 80002f6:	bf00      	nop
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	40010800 	.word	0x40010800
 8000300:	40010c00 	.word	0x40010c00

08000304 <clearAllLed2>:

void clearAllLed2()
{
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 8000308:	2200      	movs	r2, #0
 800030a:	2120      	movs	r1, #32
 800030c:	4804      	ldr	r0, [pc, #16]	; (8000320 <clearAllLed2+0x1c>)
 800030e:	f001 fe70 	bl	8001ff2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8000312:	2200      	movs	r2, #0
 8000314:	2110      	movs	r1, #16
 8000316:	4802      	ldr	r0, [pc, #8]	; (8000320 <clearAllLed2+0x1c>)
 8000318:	f001 fe6b 	bl	8001ff2 <HAL_GPIO_WritePin>
}
 800031c:	bf00      	nop
 800031e:	bd80      	pop	{r7, pc}
 8000320:	40010c00 	.word	0x40010c00

08000324 <displayRed1>:
void displayRed1()
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000328:	2201      	movs	r2, #1
 800032a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800032e:	4805      	ldr	r0, [pc, #20]	; (8000344 <displayRed1+0x20>)
 8000330:	f001 fe5f 	bl	8001ff2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8000334:	2200      	movs	r2, #0
 8000336:	2108      	movs	r1, #8
 8000338:	4803      	ldr	r0, [pc, #12]	; (8000348 <displayRed1+0x24>)
 800033a:	f001 fe5a 	bl	8001ff2 <HAL_GPIO_WritePin>

}
 800033e:	bf00      	nop
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	40010800 	.word	0x40010800
 8000348:	40010c00 	.word	0x40010c00

0800034c <displayYellow1>:

void displayYellow1()
{
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000350:	2201      	movs	r2, #1
 8000352:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000356:	4805      	ldr	r0, [pc, #20]	; (800036c <displayYellow1+0x20>)
 8000358:	f001 fe4b 	bl	8001ff2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 800035c:	2201      	movs	r2, #1
 800035e:	2108      	movs	r1, #8
 8000360:	4803      	ldr	r0, [pc, #12]	; (8000370 <displayYellow1+0x24>)
 8000362:	f001 fe46 	bl	8001ff2 <HAL_GPIO_WritePin>
}
 8000366:	bf00      	nop
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	40010800 	.word	0x40010800
 8000370:	40010c00 	.word	0x40010c00

08000374 <displayGreen1>:

void displayGreen1()
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8000378:	2200      	movs	r2, #0
 800037a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800037e:	4805      	ldr	r0, [pc, #20]	; (8000394 <displayGreen1+0x20>)
 8000380:	f001 fe37 	bl	8001ff2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000384:	2201      	movs	r2, #1
 8000386:	2108      	movs	r1, #8
 8000388:	4803      	ldr	r0, [pc, #12]	; (8000398 <displayGreen1+0x24>)
 800038a:	f001 fe32 	bl	8001ff2 <HAL_GPIO_WritePin>
}
 800038e:	bf00      	nop
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	40010800 	.word	0x40010800
 8000398:	40010c00 	.word	0x40010c00

0800039c <displayRed2>:

void displayRed2()
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 80003a0:	2201      	movs	r2, #1
 80003a2:	2120      	movs	r1, #32
 80003a4:	4804      	ldr	r0, [pc, #16]	; (80003b8 <displayRed2+0x1c>)
 80003a6:	f001 fe24 	bl	8001ff2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 80003aa:	2200      	movs	r2, #0
 80003ac:	2110      	movs	r1, #16
 80003ae:	4802      	ldr	r0, [pc, #8]	; (80003b8 <displayRed2+0x1c>)
 80003b0:	f001 fe1f 	bl	8001ff2 <HAL_GPIO_WritePin>
}
 80003b4:	bf00      	nop
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	40010c00 	.word	0x40010c00

080003bc <displayYellow2>:


void displayYellow2()
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 80003c0:	2201      	movs	r2, #1
 80003c2:	2120      	movs	r1, #32
 80003c4:	4804      	ldr	r0, [pc, #16]	; (80003d8 <displayYellow2+0x1c>)
 80003c6:	f001 fe14 	bl	8001ff2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 80003ca:	2201      	movs	r2, #1
 80003cc:	2110      	movs	r1, #16
 80003ce:	4802      	ldr	r0, [pc, #8]	; (80003d8 <displayYellow2+0x1c>)
 80003d0:	f001 fe0f 	bl	8001ff2 <HAL_GPIO_WritePin>
}
 80003d4:	bf00      	nop
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	40010c00 	.word	0x40010c00

080003dc <displayGreen2>:

void displayGreen2()
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 80003e0:	2200      	movs	r2, #0
 80003e2:	2120      	movs	r1, #32
 80003e4:	4804      	ldr	r0, [pc, #16]	; (80003f8 <displayGreen2+0x1c>)
 80003e6:	f001 fe04 	bl	8001ff2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 80003ea:	2201      	movs	r2, #1
 80003ec:	2110      	movs	r1, #16
 80003ee:	4802      	ldr	r0, [pc, #8]	; (80003f8 <displayGreen2+0x1c>)
 80003f0:	f001 fdff 	bl	8001ff2 <HAL_GPIO_WritePin>
}
 80003f4:	bf00      	nop
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	40010c00 	.word	0x40010c00

080003fc <toggleRed>:

void toggleRed()
{	// Remember to clear all led before toggle
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(D2_GPIO_Port, D2_Pin);
 8000400:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000404:	4804      	ldr	r0, [pc, #16]	; (8000418 <toggleRed+0x1c>)
 8000406:	f001 fe0c 	bl	8002022 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);
 800040a:	2120      	movs	r1, #32
 800040c:	4803      	ldr	r0, [pc, #12]	; (800041c <toggleRed+0x20>)
 800040e:	f001 fe08 	bl	8002022 <HAL_GPIO_TogglePin>
}
 8000412:	bf00      	nop
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	40010800 	.word	0x40010800
 800041c:	40010c00 	.word	0x40010c00

08000420 <toggleYellow>:

void toggleYellow()
{	// Remember to clear all led before toggle
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(D2_GPIO_Port, D2_Pin);
 8000424:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000428:	4808      	ldr	r0, [pc, #32]	; (800044c <toggleYellow+0x2c>)
 800042a:	f001 fdfa 	bl	8002022 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
 800042e:	2108      	movs	r1, #8
 8000430:	4807      	ldr	r0, [pc, #28]	; (8000450 <toggleYellow+0x30>)
 8000432:	f001 fdf6 	bl	8002022 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);
 8000436:	2120      	movs	r1, #32
 8000438:	4805      	ldr	r0, [pc, #20]	; (8000450 <toggleYellow+0x30>)
 800043a:	f001 fdf2 	bl	8002022 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D5_GPIO_Port, D5_Pin);
 800043e:	2110      	movs	r1, #16
 8000440:	4803      	ldr	r0, [pc, #12]	; (8000450 <toggleYellow+0x30>)
 8000442:	f001 fdee 	bl	8002022 <HAL_GPIO_TogglePin>
}
 8000446:	bf00      	nop
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	40010800 	.word	0x40010800
 8000450:	40010c00 	.word	0x40010c00

08000454 <toggleGreen>:

void toggleGreen()
{	// Remember to clear all led before toggle
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
 8000458:	2108      	movs	r1, #8
 800045a:	4804      	ldr	r0, [pc, #16]	; (800046c <toggleGreen+0x18>)
 800045c:	f001 fde1 	bl	8002022 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D5_GPIO_Port, D5_Pin);
 8000460:	2110      	movs	r1, #16
 8000462:	4802      	ldr	r0, [pc, #8]	; (800046c <toggleGreen+0x18>)
 8000464:	f001 fddd 	bl	8002022 <HAL_GPIO_TogglePin>
}
 8000468:	bf00      	nop
 800046a:	bd80      	pop	{r7, pc}
 800046c:	40010c00 	.word	0x40010c00

08000470 <clearPedestrian>:

void clearPedestrian()
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8000474:	2200      	movs	r2, #0
 8000476:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800047a:	4805      	ldr	r0, [pc, #20]	; (8000490 <clearPedestrian+0x20>)
 800047c:	f001 fdb9 	bl	8001ff2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 8000480:	2200      	movs	r2, #0
 8000482:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000486:	4803      	ldr	r0, [pc, #12]	; (8000494 <clearPedestrian+0x24>)
 8000488:	f001 fdb3 	bl	8001ff2 <HAL_GPIO_WritePin>
}
 800048c:	bf00      	nop
 800048e:	bd80      	pop	{r7, pc}
 8000490:	40010c00 	.word	0x40010c00
 8000494:	40010800 	.word	0x40010800

08000498 <displayPedestrianRed>:

void displayPedestrianRed()
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
 800049c:	2201      	movs	r2, #1
 800049e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004a2:	4805      	ldr	r0, [pc, #20]	; (80004b8 <displayPedestrianRed+0x20>)
 80004a4:	f001 fda5 	bl	8001ff2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 80004a8:	2200      	movs	r2, #0
 80004aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004ae:	4803      	ldr	r0, [pc, #12]	; (80004bc <displayPedestrianRed+0x24>)
 80004b0:	f001 fd9f 	bl	8001ff2 <HAL_GPIO_WritePin>
}
 80004b4:	bf00      	nop
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	40010c00 	.word	0x40010c00
 80004bc:	40010800 	.word	0x40010800

080004c0 <displayPedestrianGreen>:
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
}

void displayPedestrianGreen()
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 80004c4:	2200      	movs	r2, #0
 80004c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004ca:	4805      	ldr	r0, [pc, #20]	; (80004e0 <displayPedestrianGreen+0x20>)
 80004cc:	f001 fd91 	bl	8001ff2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 80004d0:	2201      	movs	r2, #1
 80004d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004d6:	4803      	ldr	r0, [pc, #12]	; (80004e4 <displayPedestrianGreen+0x24>)
 80004d8:	f001 fd8b 	bl	8001ff2 <HAL_GPIO_WritePin>
}
 80004dc:	bf00      	nop
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	40010c00 	.word	0x40010c00
 80004e4:	40010800 	.word	0x40010800

080004e8 <increase>:
 */

#include "global.h"

void increase()
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
	time1++;
 80004ec:	4b07      	ldr	r3, [pc, #28]	; (800050c <increase+0x24>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	3301      	adds	r3, #1
 80004f2:	4a06      	ldr	r2, [pc, #24]	; (800050c <increase+0x24>)
 80004f4:	6013      	str	r3, [r2, #0]
	if(time1 > 99)
 80004f6:	4b05      	ldr	r3, [pc, #20]	; (800050c <increase+0x24>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	2b63      	cmp	r3, #99	; 0x63
 80004fc:	dd02      	ble.n	8000504 <increase+0x1c>
		time1 = 1;
 80004fe:	4b03      	ldr	r3, [pc, #12]	; (800050c <increase+0x24>)
 8000500:	2201      	movs	r2, #1
 8000502:	601a      	str	r2, [r3, #0]
}
 8000504:	bf00      	nop
 8000506:	46bd      	mov	sp, r7
 8000508:	bc80      	pop	{r7}
 800050a:	4770      	bx	lr
 800050c:	20000108 	.word	0x20000108

08000510 <balance>:

void balance(int RED, int AMBER, int GREEN)
{
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
 8000516:	60f8      	str	r0, [r7, #12]
 8000518:	60b9      	str	r1, [r7, #8]
 800051a:	607a      	str	r2, [r7, #4]
	if(RED > timeRed)
 800051c:	4b5c      	ldr	r3, [pc, #368]	; (8000690 <balance+0x180>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	68fa      	ldr	r2, [r7, #12]
 8000522:	429a      	cmp	r2, r3
 8000524:	dd19      	ble.n	800055a <balance+0x4a>
	{
		timeYellow = timeYellow * (RED / timeRed);
 8000526:	4b5a      	ldr	r3, [pc, #360]	; (8000690 <balance+0x180>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	68fa      	ldr	r2, [r7, #12]
 800052c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000530:	4a58      	ldr	r2, [pc, #352]	; (8000694 <balance+0x184>)
 8000532:	6812      	ldr	r2, [r2, #0]
 8000534:	fb02 f303 	mul.w	r3, r2, r3
 8000538:	4a56      	ldr	r2, [pc, #344]	; (8000694 <balance+0x184>)
 800053a:	6013      	str	r3, [r2, #0]
		timeGreen = timeGreen * (RED / timeRed);
 800053c:	4b54      	ldr	r3, [pc, #336]	; (8000690 <balance+0x180>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	68fa      	ldr	r2, [r7, #12]
 8000542:	fb92 f3f3 	sdiv	r3, r2, r3
 8000546:	4a54      	ldr	r2, [pc, #336]	; (8000698 <balance+0x188>)
 8000548:	6812      	ldr	r2, [r2, #0]
 800054a:	fb02 f303 	mul.w	r3, r2, r3
 800054e:	4a52      	ldr	r2, [pc, #328]	; (8000698 <balance+0x188>)
 8000550:	6013      	str	r3, [r2, #0]
		timeRed = RED;
 8000552:	4a4f      	ldr	r2, [pc, #316]	; (8000690 <balance+0x180>)
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	6013      	str	r3, [r2, #0]
	{
		timeRed = (GREEN / 3) * 5;
		timeYellow = (GREEN / 3) * 2;
		timeGreen = GREEN;
	}
}
 8000558:	e094      	b.n	8000684 <balance+0x174>
	else if(AMBER > timeYellow)
 800055a:	4b4e      	ldr	r3, [pc, #312]	; (8000694 <balance+0x184>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	68ba      	ldr	r2, [r7, #8]
 8000560:	429a      	cmp	r2, r3
 8000562:	dd19      	ble.n	8000598 <balance+0x88>
		timeRed = timeRed * (AMBER / timeYellow);
 8000564:	4b4b      	ldr	r3, [pc, #300]	; (8000694 <balance+0x184>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	68ba      	ldr	r2, [r7, #8]
 800056a:	fb92 f3f3 	sdiv	r3, r2, r3
 800056e:	4a48      	ldr	r2, [pc, #288]	; (8000690 <balance+0x180>)
 8000570:	6812      	ldr	r2, [r2, #0]
 8000572:	fb02 f303 	mul.w	r3, r2, r3
 8000576:	4a46      	ldr	r2, [pc, #280]	; (8000690 <balance+0x180>)
 8000578:	6013      	str	r3, [r2, #0]
		timeGreen = timeGreen * (AMBER / timeYellow);
 800057a:	4b46      	ldr	r3, [pc, #280]	; (8000694 <balance+0x184>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	68ba      	ldr	r2, [r7, #8]
 8000580:	fb92 f3f3 	sdiv	r3, r2, r3
 8000584:	4a44      	ldr	r2, [pc, #272]	; (8000698 <balance+0x188>)
 8000586:	6812      	ldr	r2, [r2, #0]
 8000588:	fb02 f303 	mul.w	r3, r2, r3
 800058c:	4a42      	ldr	r2, [pc, #264]	; (8000698 <balance+0x188>)
 800058e:	6013      	str	r3, [r2, #0]
		timeYellow = AMBER;
 8000590:	4a40      	ldr	r2, [pc, #256]	; (8000694 <balance+0x184>)
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	6013      	str	r3, [r2, #0]
}
 8000596:	e075      	b.n	8000684 <balance+0x174>
	else if(GREEN > timeGreen)
 8000598:	4b3f      	ldr	r3, [pc, #252]	; (8000698 <balance+0x188>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	687a      	ldr	r2, [r7, #4]
 800059e:	429a      	cmp	r2, r3
 80005a0:	dd18      	ble.n	80005d4 <balance+0xc4>
		timeRed = timeRed * (GREEN / timeGreen);
 80005a2:	4b3d      	ldr	r3, [pc, #244]	; (8000698 <balance+0x188>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	687a      	ldr	r2, [r7, #4]
 80005a8:	fb92 f3f3 	sdiv	r3, r2, r3
 80005ac:	4a38      	ldr	r2, [pc, #224]	; (8000690 <balance+0x180>)
 80005ae:	6812      	ldr	r2, [r2, #0]
 80005b0:	fb02 f303 	mul.w	r3, r2, r3
 80005b4:	4a36      	ldr	r2, [pc, #216]	; (8000690 <balance+0x180>)
 80005b6:	6013      	str	r3, [r2, #0]
		timeYellow = AMBER * (GREEN / timeGreen);
 80005b8:	4b37      	ldr	r3, [pc, #220]	; (8000698 <balance+0x188>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	687a      	ldr	r2, [r7, #4]
 80005be:	fb92 f3f3 	sdiv	r3, r2, r3
 80005c2:	68ba      	ldr	r2, [r7, #8]
 80005c4:	fb02 f303 	mul.w	r3, r2, r3
 80005c8:	4a32      	ldr	r2, [pc, #200]	; (8000694 <balance+0x184>)
 80005ca:	6013      	str	r3, [r2, #0]
		timeGreen = GREEN;
 80005cc:	4a32      	ldr	r2, [pc, #200]	; (8000698 <balance+0x188>)
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	6013      	str	r3, [r2, #0]
}
 80005d2:	e057      	b.n	8000684 <balance+0x174>
	else if(RED < timeRed)
 80005d4:	4b2e      	ldr	r3, [pc, #184]	; (8000690 <balance+0x180>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	68fa      	ldr	r2, [r7, #12]
 80005da:	429a      	cmp	r2, r3
 80005dc:	da19      	bge.n	8000612 <balance+0x102>
		timeYellow = (RED / 5) * 2;
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	4a2e      	ldr	r2, [pc, #184]	; (800069c <balance+0x18c>)
 80005e2:	fb82 1203 	smull	r1, r2, r2, r3
 80005e6:	1052      	asrs	r2, r2, #1
 80005e8:	17db      	asrs	r3, r3, #31
 80005ea:	1ad3      	subs	r3, r2, r3
 80005ec:	005b      	lsls	r3, r3, #1
 80005ee:	4a29      	ldr	r2, [pc, #164]	; (8000694 <balance+0x184>)
 80005f0:	6013      	str	r3, [r2, #0]
		timeGreen = (RED / 5) * 3;
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	4a29      	ldr	r2, [pc, #164]	; (800069c <balance+0x18c>)
 80005f6:	fb82 1203 	smull	r1, r2, r2, r3
 80005fa:	1052      	asrs	r2, r2, #1
 80005fc:	17db      	asrs	r3, r3, #31
 80005fe:	1ad2      	subs	r2, r2, r3
 8000600:	4613      	mov	r3, r2
 8000602:	005b      	lsls	r3, r3, #1
 8000604:	4413      	add	r3, r2
 8000606:	4a24      	ldr	r2, [pc, #144]	; (8000698 <balance+0x188>)
 8000608:	6013      	str	r3, [r2, #0]
		timeRed = RED;
 800060a:	4a21      	ldr	r2, [pc, #132]	; (8000690 <balance+0x180>)
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	6013      	str	r3, [r2, #0]
}
 8000610:	e038      	b.n	8000684 <balance+0x174>
	else if(AMBER < timeYellow)
 8000612:	4b20      	ldr	r3, [pc, #128]	; (8000694 <balance+0x184>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	68ba      	ldr	r2, [r7, #8]
 8000618:	429a      	cmp	r2, r3
 800061a:	da17      	bge.n	800064c <balance+0x13c>
		timeRed = (AMBER / 2) * 5;
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	0fda      	lsrs	r2, r3, #31
 8000620:	4413      	add	r3, r2
 8000622:	105b      	asrs	r3, r3, #1
 8000624:	461a      	mov	r2, r3
 8000626:	4613      	mov	r3, r2
 8000628:	009b      	lsls	r3, r3, #2
 800062a:	4413      	add	r3, r2
 800062c:	4a18      	ldr	r2, [pc, #96]	; (8000690 <balance+0x180>)
 800062e:	6013      	str	r3, [r2, #0]
		timeGreen = (AMBER / 2) * 3;
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	0fda      	lsrs	r2, r3, #31
 8000634:	4413      	add	r3, r2
 8000636:	105b      	asrs	r3, r3, #1
 8000638:	461a      	mov	r2, r3
 800063a:	4613      	mov	r3, r2
 800063c:	005b      	lsls	r3, r3, #1
 800063e:	4413      	add	r3, r2
 8000640:	4a15      	ldr	r2, [pc, #84]	; (8000698 <balance+0x188>)
 8000642:	6013      	str	r3, [r2, #0]
		timeYellow = AMBER;
 8000644:	4a13      	ldr	r2, [pc, #76]	; (8000694 <balance+0x184>)
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	6013      	str	r3, [r2, #0]
}
 800064a:	e01b      	b.n	8000684 <balance+0x174>
	else if(GREEN < timeGreen)
 800064c:	4b12      	ldr	r3, [pc, #72]	; (8000698 <balance+0x188>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	687a      	ldr	r2, [r7, #4]
 8000652:	429a      	cmp	r2, r3
 8000654:	da16      	bge.n	8000684 <balance+0x174>
		timeRed = (GREEN / 3) * 5;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	4a11      	ldr	r2, [pc, #68]	; (80006a0 <balance+0x190>)
 800065a:	fb82 1203 	smull	r1, r2, r2, r3
 800065e:	17db      	asrs	r3, r3, #31
 8000660:	1ad2      	subs	r2, r2, r3
 8000662:	4613      	mov	r3, r2
 8000664:	009b      	lsls	r3, r3, #2
 8000666:	4413      	add	r3, r2
 8000668:	4a09      	ldr	r2, [pc, #36]	; (8000690 <balance+0x180>)
 800066a:	6013      	str	r3, [r2, #0]
		timeYellow = (GREEN / 3) * 2;
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	4a0c      	ldr	r2, [pc, #48]	; (80006a0 <balance+0x190>)
 8000670:	fb82 1203 	smull	r1, r2, r2, r3
 8000674:	17db      	asrs	r3, r3, #31
 8000676:	1ad3      	subs	r3, r2, r3
 8000678:	005b      	lsls	r3, r3, #1
 800067a:	4a06      	ldr	r2, [pc, #24]	; (8000694 <balance+0x184>)
 800067c:	6013      	str	r3, [r2, #0]
		timeGreen = GREEN;
 800067e:	4a06      	ldr	r2, [pc, #24]	; (8000698 <balance+0x188>)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	6013      	str	r3, [r2, #0]
}
 8000684:	bf00      	nop
 8000686:	3714      	adds	r7, #20
 8000688:	46bd      	mov	sp, r7
 800068a:	bc80      	pop	{r7}
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	20000024 	.word	0x20000024
 8000694:	20000028 	.word	0x20000028
 8000698:	2000002c 	.word	0x2000002c
 800069c:	66666667 	.word	0x66666667
 80006a0:	55555556 	.word	0x55555556

080006a4 <normalState>:

void normalState(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08e      	sub	sp, #56	; 0x38
 80006a8:	af00      	add	r7, sp, #0
	char str[50];
	switch(status)
 80006aa:	4ba6      	ldr	r3, [pc, #664]	; (8000944 <normalState+0x2a0>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	2b0c      	cmp	r3, #12
 80006b0:	f200 83c6 	bhi.w	8000e40 <normalState+0x79c>
 80006b4:	a201      	add	r2, pc, #4	; (adr r2, 80006bc <normalState+0x18>)
 80006b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ba:	bf00      	nop
 80006bc:	080006f1 	.word	0x080006f1
 80006c0:	0800072b 	.word	0x0800072b
 80006c4:	08000831 	.word	0x08000831
 80006c8:	0800096d 	.word	0x0800096d
 80006cc:	08000a9f 	.word	0x08000a9f
 80006d0:	08000e41 	.word	0x08000e41
 80006d4:	08000e41 	.word	0x08000e41
 80006d8:	08000e41 	.word	0x08000e41
 80006dc:	08000e41 	.word	0x08000e41
 80006e0:	08000e41 	.word	0x08000e41
 80006e4:	08000c19 	.word	0x08000c19
 80006e8:	08000ccd 	.word	0x08000ccd
 80006ec:	08000d81 	.word	0x08000d81
	{
	case INIT:
		clearAllLed1();
 80006f0:	f7ff fdf4 	bl	80002dc <clearAllLed1>
		clearAllLed2();
 80006f4:	f7ff fe06 	bl	8000304 <clearAllLed2>
		status = RedGreen;
 80006f8:	4b92      	ldr	r3, [pc, #584]	; (8000944 <normalState+0x2a0>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	601a      	str	r2, [r3, #0]
		setTimer(0, timeGreen * 100);
 80006fe:	4b92      	ldr	r3, [pc, #584]	; (8000948 <normalState+0x2a4>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	2264      	movs	r2, #100	; 0x64
 8000704:	fb02 f303 	mul.w	r3, r2, r3
 8000708:	4619      	mov	r1, r3
 800070a:	2000      	movs	r0, #0
 800070c:	f000 fece 	bl	80014ac <setTimer>
		setTimer(1, 1);
 8000710:	2101      	movs	r1, #1
 8000712:	2001      	movs	r0, #1
 8000714:	f000 feca 	bl	80014ac <setTimer>
		time1 = timeRed;
 8000718:	4b8c      	ldr	r3, [pc, #560]	; (800094c <normalState+0x2a8>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a8c      	ldr	r2, [pc, #560]	; (8000950 <normalState+0x2ac>)
 800071e:	6013      	str	r3, [r2, #0]
		time2 = timeGreen;
 8000720:	4b89      	ldr	r3, [pc, #548]	; (8000948 <normalState+0x2a4>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a8b      	ldr	r2, [pc, #556]	; (8000954 <normalState+0x2b0>)
 8000726:	6013      	str	r3, [r2, #0]
		break;
 8000728:	e393      	b.n	8000e52 <normalState+0x7ae>
	case RedGreen:
		displayRed1();
 800072a:	f7ff fdfb 	bl	8000324 <displayRed1>
		displayGreen2();
 800072e:	f7ff fe55 	bl	80003dc <displayGreen2>

		if(IsTimerUp(1) == 1)
 8000732:	2001      	movs	r0, #1
 8000734:	f000 fea6 	bl	8001484 <IsTimerUp>
 8000738:	4603      	mov	r3, r0
 800073a:	2b01      	cmp	r3, #1
 800073c:	d12b      	bne.n	8000796 <normalState+0xf2>
		{	// Update Time
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "\r\n!7SEG1: %d#\r\n",time1), 500);
 800073e:	4b84      	ldr	r3, [pc, #528]	; (8000950 <normalState+0x2ac>)
 8000740:	681a      	ldr	r2, [r3, #0]
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	4984      	ldr	r1, [pc, #528]	; (8000958 <normalState+0x2b4>)
 8000746:	4618      	mov	r0, r3
 8000748:	f003 ff14 	bl	8004574 <siprintf>
 800074c:	4603      	mov	r3, r0
 800074e:	b29a      	uxth	r2, r3
 8000750:	1d39      	adds	r1, r7, #4
 8000752:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000756:	4881      	ldr	r0, [pc, #516]	; (800095c <normalState+0x2b8>)
 8000758:	f003 f840 	bl	80037dc <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "\r\n!7SEG2: %d#\r\n\n\n",time2), 500);
 800075c:	4b7d      	ldr	r3, [pc, #500]	; (8000954 <normalState+0x2b0>)
 800075e:	681a      	ldr	r2, [r3, #0]
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	497f      	ldr	r1, [pc, #508]	; (8000960 <normalState+0x2bc>)
 8000764:	4618      	mov	r0, r3
 8000766:	f003 ff05 	bl	8004574 <siprintf>
 800076a:	4603      	mov	r3, r0
 800076c:	b29a      	uxth	r2, r3
 800076e:	1d39      	adds	r1, r7, #4
 8000770:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000774:	4879      	ldr	r0, [pc, #484]	; (800095c <normalState+0x2b8>)
 8000776:	f003 f831 	bl	80037dc <HAL_UART_Transmit>
			setTimer(1, 100);
 800077a:	2164      	movs	r1, #100	; 0x64
 800077c:	2001      	movs	r0, #1
 800077e:	f000 fe95 	bl	80014ac <setTimer>
			time1--;
 8000782:	4b73      	ldr	r3, [pc, #460]	; (8000950 <normalState+0x2ac>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	3b01      	subs	r3, #1
 8000788:	4a71      	ldr	r2, [pc, #452]	; (8000950 <normalState+0x2ac>)
 800078a:	6013      	str	r3, [r2, #0]
			time2--;
 800078c:	4b71      	ldr	r3, [pc, #452]	; (8000954 <normalState+0x2b0>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	3b01      	subs	r3, #1
 8000792:	4a70      	ldr	r2, [pc, #448]	; (8000954 <normalState+0x2b0>)
 8000794:	6013      	str	r3, [r2, #0]
		}

		if(IsTimerUp(0) == 1)
 8000796:	2000      	movs	r0, #0
 8000798:	f000 fe74 	bl	8001484 <IsTimerUp>
 800079c:	4603      	mov	r3, r0
 800079e:	2b01      	cmp	r3, #1
 80007a0:	d117      	bne.n	80007d2 <normalState+0x12e>
		{	// Transit State
			status = RedAm;
 80007a2:	4b68      	ldr	r3, [pc, #416]	; (8000944 <normalState+0x2a0>)
 80007a4:	2202      	movs	r2, #2
 80007a6:	601a      	str	r2, [r3, #0]
			setTimer(0, timeYellow * 100);
 80007a8:	4b6e      	ldr	r3, [pc, #440]	; (8000964 <normalState+0x2c0>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	2264      	movs	r2, #100	; 0x64
 80007ae:	fb02 f303 	mul.w	r3, r2, r3
 80007b2:	4619      	mov	r1, r3
 80007b4:	2000      	movs	r0, #0
 80007b6:	f000 fe79 	bl	80014ac <setTimer>
			setTimer(1, 1);
 80007ba:	2101      	movs	r1, #1
 80007bc:	2001      	movs	r0, #1
 80007be:	f000 fe75 	bl	80014ac <setTimer>
			time1 = timeYellow;
 80007c2:	4b68      	ldr	r3, [pc, #416]	; (8000964 <normalState+0x2c0>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4a62      	ldr	r2, [pc, #392]	; (8000950 <normalState+0x2ac>)
 80007c8:	6013      	str	r3, [r2, #0]
			time2 = timeYellow;
 80007ca:	4b66      	ldr	r3, [pc, #408]	; (8000964 <normalState+0x2c0>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4a61      	ldr	r2, [pc, #388]	; (8000954 <normalState+0x2b0>)
 80007d0:	6013      	str	r3, [r2, #0]
		}


		if(is_button_pressed(1))
 80007d2:	2001      	movs	r0, #1
 80007d4:	f7ff fd50 	bl	8000278 <is_button_pressed>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d011      	beq.n	8000802 <normalState+0x15e>
		{
			status = ManRed;
 80007de:	4b59      	ldr	r3, [pc, #356]	; (8000944 <normalState+0x2a0>)
 80007e0:	220a      	movs	r2, #10
 80007e2:	601a      	str	r2, [r3, #0]
			time1 = timeRed;
 80007e4:	4b59      	ldr	r3, [pc, #356]	; (800094c <normalState+0x2a8>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a59      	ldr	r2, [pc, #356]	; (8000950 <normalState+0x2ac>)
 80007ea:	6013      	str	r3, [r2, #0]
			time2 = 2;
 80007ec:	4b59      	ldr	r3, [pc, #356]	; (8000954 <normalState+0x2b0>)
 80007ee:	2202      	movs	r2, #2
 80007f0:	601a      	str	r2, [r3, #0]
			clearAllLed1();
 80007f2:	f7ff fd73 	bl	80002dc <clearAllLed1>
			clearAllLed2();
 80007f6:	f7ff fd85 	bl	8000304 <clearAllLed2>
			setTimer(2, 25);
 80007fa:	2119      	movs	r1, #25
 80007fc:	2002      	movs	r0, #2
 80007fe:	f000 fe55 	bl	80014ac <setTimer>
		}
		if(is_button_pressed(0))
 8000802:	2000      	movs	r0, #0
 8000804:	f7ff fd38 	bl	8000278 <is_button_pressed>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	f000 831a 	beq.w	8000e44 <normalState+0x7a0>
		{
			pedestrian_flag = Pedestrian_RED;
 8000810:	4b55      	ldr	r3, [pc, #340]	; (8000968 <normalState+0x2c4>)
 8000812:	2208      	movs	r2, #8
 8000814:	601a      	str	r2, [r3, #0]
			setTimer(3, (timeRed + timeGreen) * 100);
 8000816:	4b4d      	ldr	r3, [pc, #308]	; (800094c <normalState+0x2a8>)
 8000818:	681a      	ldr	r2, [r3, #0]
 800081a:	4b4b      	ldr	r3, [pc, #300]	; (8000948 <normalState+0x2a4>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4413      	add	r3, r2
 8000820:	2264      	movs	r2, #100	; 0x64
 8000822:	fb02 f303 	mul.w	r3, r2, r3
 8000826:	4619      	mov	r1, r3
 8000828:	2003      	movs	r0, #3
 800082a:	f000 fe3f 	bl	80014ac <setTimer>
		}

		break;
 800082e:	e309      	b.n	8000e44 <normalState+0x7a0>
	case RedAm:
		displayRed1();
 8000830:	f7ff fd78 	bl	8000324 <displayRed1>
		displayYellow2();
 8000834:	f7ff fdc2 	bl	80003bc <displayYellow2>

		if(IsTimerUp(1) == 1)
 8000838:	2001      	movs	r0, #1
 800083a:	f000 fe23 	bl	8001484 <IsTimerUp>
 800083e:	4603      	mov	r3, r0
 8000840:	2b01      	cmp	r3, #1
 8000842:	d12b      	bne.n	800089c <normalState+0x1f8>
		{	// Update Time
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "\r\n!7SEG1: %d#\r\n",time1), 500);
 8000844:	4b42      	ldr	r3, [pc, #264]	; (8000950 <normalState+0x2ac>)
 8000846:	681a      	ldr	r2, [r3, #0]
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	4943      	ldr	r1, [pc, #268]	; (8000958 <normalState+0x2b4>)
 800084c:	4618      	mov	r0, r3
 800084e:	f003 fe91 	bl	8004574 <siprintf>
 8000852:	4603      	mov	r3, r0
 8000854:	b29a      	uxth	r2, r3
 8000856:	1d39      	adds	r1, r7, #4
 8000858:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800085c:	483f      	ldr	r0, [pc, #252]	; (800095c <normalState+0x2b8>)
 800085e:	f002 ffbd 	bl	80037dc <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "\r\n!7SEG2: %d#\r\n\n\n",time2), 500);
 8000862:	4b3c      	ldr	r3, [pc, #240]	; (8000954 <normalState+0x2b0>)
 8000864:	681a      	ldr	r2, [r3, #0]
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	493d      	ldr	r1, [pc, #244]	; (8000960 <normalState+0x2bc>)
 800086a:	4618      	mov	r0, r3
 800086c:	f003 fe82 	bl	8004574 <siprintf>
 8000870:	4603      	mov	r3, r0
 8000872:	b29a      	uxth	r2, r3
 8000874:	1d39      	adds	r1, r7, #4
 8000876:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800087a:	4838      	ldr	r0, [pc, #224]	; (800095c <normalState+0x2b8>)
 800087c:	f002 ffae 	bl	80037dc <HAL_UART_Transmit>
			time1--;
 8000880:	4b33      	ldr	r3, [pc, #204]	; (8000950 <normalState+0x2ac>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	3b01      	subs	r3, #1
 8000886:	4a32      	ldr	r2, [pc, #200]	; (8000950 <normalState+0x2ac>)
 8000888:	6013      	str	r3, [r2, #0]
			time2--;
 800088a:	4b32      	ldr	r3, [pc, #200]	; (8000954 <normalState+0x2b0>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	3b01      	subs	r3, #1
 8000890:	4a30      	ldr	r2, [pc, #192]	; (8000954 <normalState+0x2b0>)
 8000892:	6013      	str	r3, [r2, #0]
			setTimer(1, 100);
 8000894:	2164      	movs	r1, #100	; 0x64
 8000896:	2001      	movs	r0, #1
 8000898:	f000 fe08 	bl	80014ac <setTimer>
		}

		if(IsTimerUp(0)==1)
 800089c:	2000      	movs	r0, #0
 800089e:	f000 fdf1 	bl	8001484 <IsTimerUp>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	d11e      	bne.n	80008e6 <normalState+0x242>
		{	// Transit State
			status = GreenRed;
 80008a8:	4b26      	ldr	r3, [pc, #152]	; (8000944 <normalState+0x2a0>)
 80008aa:	2203      	movs	r2, #3
 80008ac:	601a      	str	r2, [r3, #0]
			setTimer(0, timeGreen * 100);
 80008ae:	4b26      	ldr	r3, [pc, #152]	; (8000948 <normalState+0x2a4>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	2264      	movs	r2, #100	; 0x64
 80008b4:	fb02 f303 	mul.w	r3, r2, r3
 80008b8:	4619      	mov	r1, r3
 80008ba:	2000      	movs	r0, #0
 80008bc:	f000 fdf6 	bl	80014ac <setTimer>
			setTimer(1, 1);
 80008c0:	2101      	movs	r1, #1
 80008c2:	2001      	movs	r0, #1
 80008c4:	f000 fdf2 	bl	80014ac <setTimer>
			time1 = timeGreen;
 80008c8:	4b1f      	ldr	r3, [pc, #124]	; (8000948 <normalState+0x2a4>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a20      	ldr	r2, [pc, #128]	; (8000950 <normalState+0x2ac>)
 80008ce:	6013      	str	r3, [r2, #0]
			time2 = timeRed;
 80008d0:	4b1e      	ldr	r3, [pc, #120]	; (800094c <normalState+0x2a8>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a1f      	ldr	r2, [pc, #124]	; (8000954 <normalState+0x2b0>)
 80008d6:	6013      	str	r3, [r2, #0]
			if(pedestrian_flag == Pedestrian_RED)
 80008d8:	4b23      	ldr	r3, [pc, #140]	; (8000968 <normalState+0x2c4>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	2b08      	cmp	r3, #8
 80008de:	d102      	bne.n	80008e6 <normalState+0x242>
				pedestrian_flag = Pedestrian_GREEN;
 80008e0:	4b21      	ldr	r3, [pc, #132]	; (8000968 <normalState+0x2c4>)
 80008e2:	2209      	movs	r2, #9
 80008e4:	601a      	str	r2, [r3, #0]
		}


		if(is_button_pressed(1))
 80008e6:	2001      	movs	r0, #1
 80008e8:	f7ff fcc6 	bl	8000278 <is_button_pressed>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d011      	beq.n	8000916 <normalState+0x272>
		{
			status = ManRed;
 80008f2:	4b14      	ldr	r3, [pc, #80]	; (8000944 <normalState+0x2a0>)
 80008f4:	220a      	movs	r2, #10
 80008f6:	601a      	str	r2, [r3, #0]
			time1 = timeRed;
 80008f8:	4b14      	ldr	r3, [pc, #80]	; (800094c <normalState+0x2a8>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a14      	ldr	r2, [pc, #80]	; (8000950 <normalState+0x2ac>)
 80008fe:	6013      	str	r3, [r2, #0]
			time2 = 2;
 8000900:	4b14      	ldr	r3, [pc, #80]	; (8000954 <normalState+0x2b0>)
 8000902:	2202      	movs	r2, #2
 8000904:	601a      	str	r2, [r3, #0]
			clearAllLed1();
 8000906:	f7ff fce9 	bl	80002dc <clearAllLed1>
			clearAllLed2();
 800090a:	f7ff fcfb 	bl	8000304 <clearAllLed2>
			setTimer(2, 25);
 800090e:	2119      	movs	r1, #25
 8000910:	2002      	movs	r0, #2
 8000912:	f000 fdcb 	bl	80014ac <setTimer>
		}

		if(is_button_pressed(0))
 8000916:	2000      	movs	r0, #0
 8000918:	f7ff fcae 	bl	8000278 <is_button_pressed>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	f000 8292 	beq.w	8000e48 <normalState+0x7a4>
		{
			pedestrian_flag = Pedestrian_RED;
 8000924:	4b10      	ldr	r3, [pc, #64]	; (8000968 <normalState+0x2c4>)
 8000926:	2208      	movs	r2, #8
 8000928:	601a      	str	r2, [r3, #0]
			setTimer(3, (timeRed + timeGreen) * 100);
 800092a:	4b08      	ldr	r3, [pc, #32]	; (800094c <normalState+0x2a8>)
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	4b06      	ldr	r3, [pc, #24]	; (8000948 <normalState+0x2a4>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4413      	add	r3, r2
 8000934:	2264      	movs	r2, #100	; 0x64
 8000936:	fb02 f303 	mul.w	r3, r2, r3
 800093a:	4619      	mov	r1, r3
 800093c:	2003      	movs	r0, #3
 800093e:	f000 fdb5 	bl	80014ac <setTimer>
		}

		break;
 8000942:	e281      	b.n	8000e48 <normalState+0x7a4>
 8000944:	200000ec 	.word	0x200000ec
 8000948:	2000002c 	.word	0x2000002c
 800094c:	20000024 	.word	0x20000024
 8000950:	20000108 	.word	0x20000108
 8000954:	200000f0 	.word	0x200000f0
 8000958:	08004c94 	.word	0x08004c94
 800095c:	2000019c 	.word	0x2000019c
 8000960:	08004ca4 	.word	0x08004ca4
 8000964:	20000028 	.word	0x20000028
 8000968:	20000030 	.word	0x20000030
	case GreenRed:
		displayGreen1();
 800096c:	f7ff fd02 	bl	8000374 <displayGreen1>
		displayRed2();
 8000970:	f7ff fd14 	bl	800039c <displayRed2>
		if(IsTimerUp(1)==1)
 8000974:	2001      	movs	r0, #1
 8000976:	f000 fd85 	bl	8001484 <IsTimerUp>
 800097a:	4603      	mov	r3, r0
 800097c:	2b01      	cmp	r3, #1
 800097e:	d12b      	bne.n	80009d8 <normalState+0x334>
		{	// Update Time
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "\r\n!7SEG1: %d#\r\n",time1), 500);
 8000980:	4b9a      	ldr	r3, [pc, #616]	; (8000bec <normalState+0x548>)
 8000982:	681a      	ldr	r2, [r3, #0]
 8000984:	1d3b      	adds	r3, r7, #4
 8000986:	499a      	ldr	r1, [pc, #616]	; (8000bf0 <normalState+0x54c>)
 8000988:	4618      	mov	r0, r3
 800098a:	f003 fdf3 	bl	8004574 <siprintf>
 800098e:	4603      	mov	r3, r0
 8000990:	b29a      	uxth	r2, r3
 8000992:	1d39      	adds	r1, r7, #4
 8000994:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000998:	4896      	ldr	r0, [pc, #600]	; (8000bf4 <normalState+0x550>)
 800099a:	f002 ff1f 	bl	80037dc <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "\r\n!7SEG2: %d#\r\n\n\n",time2), 500);
 800099e:	4b96      	ldr	r3, [pc, #600]	; (8000bf8 <normalState+0x554>)
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	1d3b      	adds	r3, r7, #4
 80009a4:	4995      	ldr	r1, [pc, #596]	; (8000bfc <normalState+0x558>)
 80009a6:	4618      	mov	r0, r3
 80009a8:	f003 fde4 	bl	8004574 <siprintf>
 80009ac:	4603      	mov	r3, r0
 80009ae:	b29a      	uxth	r2, r3
 80009b0:	1d39      	adds	r1, r7, #4
 80009b2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80009b6:	488f      	ldr	r0, [pc, #572]	; (8000bf4 <normalState+0x550>)
 80009b8:	f002 ff10 	bl	80037dc <HAL_UART_Transmit>
			setTimer(1, 100);
 80009bc:	2164      	movs	r1, #100	; 0x64
 80009be:	2001      	movs	r0, #1
 80009c0:	f000 fd74 	bl	80014ac <setTimer>
			time1--;
 80009c4:	4b89      	ldr	r3, [pc, #548]	; (8000bec <normalState+0x548>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	3b01      	subs	r3, #1
 80009ca:	4a88      	ldr	r2, [pc, #544]	; (8000bec <normalState+0x548>)
 80009cc:	6013      	str	r3, [r2, #0]
			time2--;
 80009ce:	4b8a      	ldr	r3, [pc, #552]	; (8000bf8 <normalState+0x554>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	3b01      	subs	r3, #1
 80009d4:	4a88      	ldr	r2, [pc, #544]	; (8000bf8 <normalState+0x554>)
 80009d6:	6013      	str	r3, [r2, #0]
		}

		if(IsTimerUp(0) == 1)
 80009d8:	2000      	movs	r0, #0
 80009da:	f000 fd53 	bl	8001484 <IsTimerUp>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d117      	bne.n	8000a14 <normalState+0x370>
		{	// Transit State
			status = AmRed;
 80009e4:	4b86      	ldr	r3, [pc, #536]	; (8000c00 <normalState+0x55c>)
 80009e6:	2204      	movs	r2, #4
 80009e8:	601a      	str	r2, [r3, #0]
			setTimer(0, timeYellow * 100);
 80009ea:	4b86      	ldr	r3, [pc, #536]	; (8000c04 <normalState+0x560>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	2264      	movs	r2, #100	; 0x64
 80009f0:	fb02 f303 	mul.w	r3, r2, r3
 80009f4:	4619      	mov	r1, r3
 80009f6:	2000      	movs	r0, #0
 80009f8:	f000 fd58 	bl	80014ac <setTimer>
			setTimer(1, 1);
 80009fc:	2101      	movs	r1, #1
 80009fe:	2001      	movs	r0, #1
 8000a00:	f000 fd54 	bl	80014ac <setTimer>
			time1 = timeYellow;
 8000a04:	4b7f      	ldr	r3, [pc, #508]	; (8000c04 <normalState+0x560>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a78      	ldr	r2, [pc, #480]	; (8000bec <normalState+0x548>)
 8000a0a:	6013      	str	r3, [r2, #0]
			time2 = timeYellow;
 8000a0c:	4b7d      	ldr	r3, [pc, #500]	; (8000c04 <normalState+0x560>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a79      	ldr	r2, [pc, #484]	; (8000bf8 <normalState+0x554>)
 8000a12:	6013      	str	r3, [r2, #0]
		}


		if(timeYellow < 5 && time1 <= 5 - timeYellow) {
 8000a14:	4b7b      	ldr	r3, [pc, #492]	; (8000c04 <normalState+0x560>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	2b04      	cmp	r3, #4
 8000a1a:	dc11      	bgt.n	8000a40 <normalState+0x39c>
 8000a1c:	4b79      	ldr	r3, [pc, #484]	; (8000c04 <normalState+0x560>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f1c3 0205 	rsb	r2, r3, #5
 8000a24:	4b71      	ldr	r3, [pc, #452]	; (8000bec <normalState+0x548>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	db09      	blt.n	8000a40 <normalState+0x39c>
				buzzerValue= 512*(5- timeYellow - time1);
 8000a2c:	4b75      	ldr	r3, [pc, #468]	; (8000c04 <normalState+0x560>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f1c3 0205 	rsb	r2, r3, #5
 8000a34:	4b6d      	ldr	r3, [pc, #436]	; (8000bec <normalState+0x548>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	1ad3      	subs	r3, r2, r3
 8000a3a:	025b      	lsls	r3, r3, #9
 8000a3c:	4a72      	ldr	r2, [pc, #456]	; (8000c08 <normalState+0x564>)
 8000a3e:	6013      	str	r3, [r2, #0]
		}

		if(is_button_pressed(1))
 8000a40:	2001      	movs	r0, #1
 8000a42:	f7ff fc19 	bl	8000278 <is_button_pressed>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d011      	beq.n	8000a70 <normalState+0x3cc>
		{
			status = ManRed;
 8000a4c:	4b6c      	ldr	r3, [pc, #432]	; (8000c00 <normalState+0x55c>)
 8000a4e:	220a      	movs	r2, #10
 8000a50:	601a      	str	r2, [r3, #0]
			time1 = timeRed;
 8000a52:	4b6e      	ldr	r3, [pc, #440]	; (8000c0c <normalState+0x568>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a65      	ldr	r2, [pc, #404]	; (8000bec <normalState+0x548>)
 8000a58:	6013      	str	r3, [r2, #0]
			time2 = 2;
 8000a5a:	4b67      	ldr	r3, [pc, #412]	; (8000bf8 <normalState+0x554>)
 8000a5c:	2202      	movs	r2, #2
 8000a5e:	601a      	str	r2, [r3, #0]
			clearAllLed1();
 8000a60:	f7ff fc3c 	bl	80002dc <clearAllLed1>
			clearAllLed2();
 8000a64:	f7ff fc4e 	bl	8000304 <clearAllLed2>
			setTimer(2, 25);
 8000a68:	2119      	movs	r1, #25
 8000a6a:	2002      	movs	r0, #2
 8000a6c:	f000 fd1e 	bl	80014ac <setTimer>
		}

		if(is_button_pressed(0))
 8000a70:	2000      	movs	r0, #0
 8000a72:	f7ff fc01 	bl	8000278 <is_button_pressed>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	f000 81e7 	beq.w	8000e4c <normalState+0x7a8>
		{
			pedestrian_flag = Pedestrian_GREEN;
 8000a7e:	4b64      	ldr	r3, [pc, #400]	; (8000c10 <normalState+0x56c>)
 8000a80:	2209      	movs	r2, #9
 8000a82:	601a      	str	r2, [r3, #0]
			setTimer(3, (timeRed + timeGreen) * 100);
 8000a84:	4b61      	ldr	r3, [pc, #388]	; (8000c0c <normalState+0x568>)
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	4b62      	ldr	r3, [pc, #392]	; (8000c14 <normalState+0x570>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	2264      	movs	r2, #100	; 0x64
 8000a90:	fb02 f303 	mul.w	r3, r2, r3
 8000a94:	4619      	mov	r1, r3
 8000a96:	2003      	movs	r0, #3
 8000a98:	f000 fd08 	bl	80014ac <setTimer>
		}

		break;
 8000a9c:	e1d6      	b.n	8000e4c <normalState+0x7a8>
	case AmRed:
		displayYellow1();
 8000a9e:	f7ff fc55 	bl	800034c <displayYellow1>
		displayRed2();
 8000aa2:	f7ff fc7b 	bl	800039c <displayRed2>
		if(IsTimerUp(1) == 1)
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	f000 fcec 	bl	8001484 <IsTimerUp>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d12b      	bne.n	8000b0a <normalState+0x466>
		{	// Update Time
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "\r\n!7SEG1: %d#\r\n",time1), 500);
 8000ab2:	4b4e      	ldr	r3, [pc, #312]	; (8000bec <normalState+0x548>)
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	1d3b      	adds	r3, r7, #4
 8000ab8:	494d      	ldr	r1, [pc, #308]	; (8000bf0 <normalState+0x54c>)
 8000aba:	4618      	mov	r0, r3
 8000abc:	f003 fd5a 	bl	8004574 <siprintf>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	b29a      	uxth	r2, r3
 8000ac4:	1d39      	adds	r1, r7, #4
 8000ac6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000aca:	484a      	ldr	r0, [pc, #296]	; (8000bf4 <normalState+0x550>)
 8000acc:	f002 fe86 	bl	80037dc <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "\r\n!7SEG2: %d#\r\n\n\n",time2), 500);
 8000ad0:	4b49      	ldr	r3, [pc, #292]	; (8000bf8 <normalState+0x554>)
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	1d3b      	adds	r3, r7, #4
 8000ad6:	4949      	ldr	r1, [pc, #292]	; (8000bfc <normalState+0x558>)
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f003 fd4b 	bl	8004574 <siprintf>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	b29a      	uxth	r2, r3
 8000ae2:	1d39      	adds	r1, r7, #4
 8000ae4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ae8:	4842      	ldr	r0, [pc, #264]	; (8000bf4 <normalState+0x550>)
 8000aea:	f002 fe77 	bl	80037dc <HAL_UART_Transmit>
			time1--;
 8000aee:	4b3f      	ldr	r3, [pc, #252]	; (8000bec <normalState+0x548>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	3b01      	subs	r3, #1
 8000af4:	4a3d      	ldr	r2, [pc, #244]	; (8000bec <normalState+0x548>)
 8000af6:	6013      	str	r3, [r2, #0]
			time2--;
 8000af8:	4b3f      	ldr	r3, [pc, #252]	; (8000bf8 <normalState+0x554>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	3b01      	subs	r3, #1
 8000afe:	4a3e      	ldr	r2, [pc, #248]	; (8000bf8 <normalState+0x554>)
 8000b00:	6013      	str	r3, [r2, #0]
			setTimer(1, 100);
 8000b02:	2164      	movs	r1, #100	; 0x64
 8000b04:	2001      	movs	r0, #1
 8000b06:	f000 fcd1 	bl	80014ac <setTimer>
		}

		if(IsTimerUp(0) == 1)
 8000b0a:	2000      	movs	r0, #0
 8000b0c:	f000 fcba 	bl	8001484 <IsTimerUp>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d11e      	bne.n	8000b54 <normalState+0x4b0>
		{	// Transit State
			status = RedGreen;
 8000b16:	4b3a      	ldr	r3, [pc, #232]	; (8000c00 <normalState+0x55c>)
 8000b18:	2201      	movs	r2, #1
 8000b1a:	601a      	str	r2, [r3, #0]
			setTimer(0, timeGreen * 100);
 8000b1c:	4b3d      	ldr	r3, [pc, #244]	; (8000c14 <normalState+0x570>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2264      	movs	r2, #100	; 0x64
 8000b22:	fb02 f303 	mul.w	r3, r2, r3
 8000b26:	4619      	mov	r1, r3
 8000b28:	2000      	movs	r0, #0
 8000b2a:	f000 fcbf 	bl	80014ac <setTimer>
			setTimer(1, 1);
 8000b2e:	2101      	movs	r1, #1
 8000b30:	2001      	movs	r0, #1
 8000b32:	f000 fcbb 	bl	80014ac <setTimer>
			time1 = timeRed;
 8000b36:	4b35      	ldr	r3, [pc, #212]	; (8000c0c <normalState+0x568>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a2c      	ldr	r2, [pc, #176]	; (8000bec <normalState+0x548>)
 8000b3c:	6013      	str	r3, [r2, #0]
			time2 = timeGreen;
 8000b3e:	4b35      	ldr	r3, [pc, #212]	; (8000c14 <normalState+0x570>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a2d      	ldr	r2, [pc, #180]	; (8000bf8 <normalState+0x554>)
 8000b44:	6013      	str	r3, [r2, #0]
			if(pedestrian_flag == Pedestrian_GREEN)
 8000b46:	4b32      	ldr	r3, [pc, #200]	; (8000c10 <normalState+0x56c>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	2b09      	cmp	r3, #9
 8000b4c:	d102      	bne.n	8000b54 <normalState+0x4b0>
				pedestrian_flag = Pedestrian_RED;
 8000b4e:	4b30      	ldr	r3, [pc, #192]	; (8000c10 <normalState+0x56c>)
 8000b50:	2208      	movs	r2, #8
 8000b52:	601a      	str	r2, [r3, #0]
		}

		if (timeYellow >=5 && time1 <=5) {
 8000b54:	4b2b      	ldr	r3, [pc, #172]	; (8000c04 <normalState+0x560>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2b04      	cmp	r3, #4
 8000b5a:	dd0a      	ble.n	8000b72 <normalState+0x4ce>
 8000b5c:	4b23      	ldr	r3, [pc, #140]	; (8000bec <normalState+0x548>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2b05      	cmp	r3, #5
 8000b62:	dc06      	bgt.n	8000b72 <normalState+0x4ce>
			buzzerValue= 512*(5 - time1);
 8000b64:	4b21      	ldr	r3, [pc, #132]	; (8000bec <normalState+0x548>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f1c3 0305 	rsb	r3, r3, #5
 8000b6c:	025b      	lsls	r3, r3, #9
 8000b6e:	4a26      	ldr	r2, [pc, #152]	; (8000c08 <normalState+0x564>)
 8000b70:	6013      	str	r3, [r2, #0]
		}

		if(timeYellow < 5) {
 8000b72:	4b24      	ldr	r3, [pc, #144]	; (8000c04 <normalState+0x560>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	2b04      	cmp	r3, #4
 8000b78:	dc09      	bgt.n	8000b8e <normalState+0x4ea>
			buzzerValue+=256*(5 - time1);
 8000b7a:	4b1c      	ldr	r3, [pc, #112]	; (8000bec <normalState+0x548>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f1c3 0305 	rsb	r3, r3, #5
 8000b82:	021a      	lsls	r2, r3, #8
 8000b84:	4b20      	ldr	r3, [pc, #128]	; (8000c08 <normalState+0x564>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4413      	add	r3, r2
 8000b8a:	4a1f      	ldr	r2, [pc, #124]	; (8000c08 <normalState+0x564>)
 8000b8c:	6013      	str	r3, [r2, #0]
		}


		if(is_button_pressed(1))
 8000b8e:	2001      	movs	r0, #1
 8000b90:	f7ff fb72 	bl	8000278 <is_button_pressed>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d011      	beq.n	8000bbe <normalState+0x51a>
		{
			status = ManRed;
 8000b9a:	4b19      	ldr	r3, [pc, #100]	; (8000c00 <normalState+0x55c>)
 8000b9c:	220a      	movs	r2, #10
 8000b9e:	601a      	str	r2, [r3, #0]
			time1 = timeRed;
 8000ba0:	4b1a      	ldr	r3, [pc, #104]	; (8000c0c <normalState+0x568>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a11      	ldr	r2, [pc, #68]	; (8000bec <normalState+0x548>)
 8000ba6:	6013      	str	r3, [r2, #0]
			time2 = 2;
 8000ba8:	4b13      	ldr	r3, [pc, #76]	; (8000bf8 <normalState+0x554>)
 8000baa:	2202      	movs	r2, #2
 8000bac:	601a      	str	r2, [r3, #0]
			clearAllLed1();
 8000bae:	f7ff fb95 	bl	80002dc <clearAllLed1>
			clearAllLed2();
 8000bb2:	f7ff fba7 	bl	8000304 <clearAllLed2>
			setTimer(2, 25);
 8000bb6:	2119      	movs	r1, #25
 8000bb8:	2002      	movs	r0, #2
 8000bba:	f000 fc77 	bl	80014ac <setTimer>
		}

		if(is_button_pressed(0))
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	f7ff fb5a 	bl	8000278 <is_button_pressed>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f000 8142 	beq.w	8000e50 <normalState+0x7ac>
		{
			pedestrian_flag = Pedestrian_GREEN;
 8000bcc:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <normalState+0x56c>)
 8000bce:	2209      	movs	r2, #9
 8000bd0:	601a      	str	r2, [r3, #0]
			setTimer(3, (timeRed + timeGreen) * 100);
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <normalState+0x568>)
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <normalState+0x570>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4413      	add	r3, r2
 8000bdc:	2264      	movs	r2, #100	; 0x64
 8000bde:	fb02 f303 	mul.w	r3, r2, r3
 8000be2:	4619      	mov	r1, r3
 8000be4:	2003      	movs	r0, #3
 8000be6:	f000 fc61 	bl	80014ac <setTimer>
		}

		break;
 8000bea:	e131      	b.n	8000e50 <normalState+0x7ac>
 8000bec:	20000108 	.word	0x20000108
 8000bf0:	08004c94 	.word	0x08004c94
 8000bf4:	2000019c 	.word	0x2000019c
 8000bf8:	200000f0 	.word	0x200000f0
 8000bfc:	08004ca4 	.word	0x08004ca4
 8000c00:	200000ec 	.word	0x200000ec
 8000c04:	20000028 	.word	0x20000028
 8000c08:	200000f4 	.word	0x200000f4
 8000c0c:	20000024 	.word	0x20000024
 8000c10:	20000030 	.word	0x20000030
 8000c14:	2000002c 	.word	0x2000002c
	case ManRed:
		if(IsTimerUp(2) == 1)
 8000c18:	2002      	movs	r0, #2
 8000c1a:	f000 fc33 	bl	8001484 <IsTimerUp>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d105      	bne.n	8000c30 <normalState+0x58c>
		{
			setTimer(2, 25);
 8000c24:	2119      	movs	r1, #25
 8000c26:	2002      	movs	r0, #2
 8000c28:	f000 fc40 	bl	80014ac <setTimer>
			toggleRed();
 8000c2c:	f7ff fbe6 	bl	80003fc <toggleRed>
		}
		if(is_button_pressed(2))
 8000c30:	2002      	movs	r0, #2
 8000c32:	f7ff fb21 	bl	8000278 <is_button_pressed>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <normalState+0x59c>
			increase();
 8000c3c:	f7ff fc54 	bl	80004e8 <increase>

		if(is_button_pressed(3))
 8000c40:	2003      	movs	r0, #3
 8000c42:	f7ff fb19 	bl	8000278 <is_button_pressed>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d008      	beq.n	8000c5e <normalState+0x5ba>
			balance(time1, timeYellow, timeGreen);
 8000c4c:	4b83      	ldr	r3, [pc, #524]	; (8000e5c <normalState+0x7b8>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a83      	ldr	r2, [pc, #524]	; (8000e60 <normalState+0x7bc>)
 8000c52:	6811      	ldr	r1, [r2, #0]
 8000c54:	4a83      	ldr	r2, [pc, #524]	; (8000e64 <normalState+0x7c0>)
 8000c56:	6812      	ldr	r2, [r2, #0]
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff fc59 	bl	8000510 <balance>

		if(is_button_pressed(1))
 8000c5e:	2001      	movs	r0, #1
 8000c60:	f7ff fb0a 	bl	8000278 <is_button_pressed>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d011      	beq.n	8000c8e <normalState+0x5ea>
		{
			status = ManAm;
 8000c6a:	4b7f      	ldr	r3, [pc, #508]	; (8000e68 <normalState+0x7c4>)
 8000c6c:	220b      	movs	r2, #11
 8000c6e:	601a      	str	r2, [r3, #0]
			time1 = timeYellow;
 8000c70:	4b7b      	ldr	r3, [pc, #492]	; (8000e60 <normalState+0x7bc>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a79      	ldr	r2, [pc, #484]	; (8000e5c <normalState+0x7b8>)
 8000c76:	6013      	str	r3, [r2, #0]
			time2 = 3;
 8000c78:	4b7c      	ldr	r3, [pc, #496]	; (8000e6c <normalState+0x7c8>)
 8000c7a:	2203      	movs	r2, #3
 8000c7c:	601a      	str	r2, [r3, #0]
			clearAllLed1();
 8000c7e:	f7ff fb2d 	bl	80002dc <clearAllLed1>
			clearAllLed2();
 8000c82:	f7ff fb3f 	bl	8000304 <clearAllLed2>
			setTimer(2, 25);
 8000c86:	2119      	movs	r1, #25
 8000c88:	2002      	movs	r0, #2
 8000c8a:	f000 fc0f 	bl	80014ac <setTimer>
		}
		HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "\r\n!7SEG1: %d#\r\n",time1), 500);
 8000c8e:	4b73      	ldr	r3, [pc, #460]	; (8000e5c <normalState+0x7b8>)
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	1d3b      	adds	r3, r7, #4
 8000c94:	4976      	ldr	r1, [pc, #472]	; (8000e70 <normalState+0x7cc>)
 8000c96:	4618      	mov	r0, r3
 8000c98:	f003 fc6c 	bl	8004574 <siprintf>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	b29a      	uxth	r2, r3
 8000ca0:	1d39      	adds	r1, r7, #4
 8000ca2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ca6:	4873      	ldr	r0, [pc, #460]	; (8000e74 <normalState+0x7d0>)
 8000ca8:	f002 fd98 	bl	80037dc <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "\r\n!7SEG2: %d#\r\n\n\n",time2), 500);
 8000cac:	4b6f      	ldr	r3, [pc, #444]	; (8000e6c <normalState+0x7c8>)
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	1d3b      	adds	r3, r7, #4
 8000cb2:	4971      	ldr	r1, [pc, #452]	; (8000e78 <normalState+0x7d4>)
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f003 fc5d 	bl	8004574 <siprintf>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	b29a      	uxth	r2, r3
 8000cbe:	1d39      	adds	r1, r7, #4
 8000cc0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000cc4:	486b      	ldr	r0, [pc, #428]	; (8000e74 <normalState+0x7d0>)
 8000cc6:	f002 fd89 	bl	80037dc <HAL_UART_Transmit>
		break;
 8000cca:	e0c2      	b.n	8000e52 <normalState+0x7ae>
	case ManAm:
		if(IsTimerUp(2) == 1)
 8000ccc:	2002      	movs	r0, #2
 8000cce:	f000 fbd9 	bl	8001484 <IsTimerUp>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d105      	bne.n	8000ce4 <normalState+0x640>
		{
			setTimer(2, 25);
 8000cd8:	2119      	movs	r1, #25
 8000cda:	2002      	movs	r0, #2
 8000cdc:	f000 fbe6 	bl	80014ac <setTimer>
			toggleYellow();
 8000ce0:	f7ff fb9e 	bl	8000420 <toggleYellow>
		}
		if(is_button_pressed(2))
 8000ce4:	2002      	movs	r0, #2
 8000ce6:	f7ff fac7 	bl	8000278 <is_button_pressed>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <normalState+0x650>
			increase();
 8000cf0:	f7ff fbfa 	bl	80004e8 <increase>

		if(is_button_pressed(3))
 8000cf4:	2003      	movs	r0, #3
 8000cf6:	f7ff fabf 	bl	8000278 <is_button_pressed>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d008      	beq.n	8000d12 <normalState+0x66e>
			balance(timeRed, time1, timeGreen);
 8000d00:	4b5e      	ldr	r3, [pc, #376]	; (8000e7c <normalState+0x7d8>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a55      	ldr	r2, [pc, #340]	; (8000e5c <normalState+0x7b8>)
 8000d06:	6811      	ldr	r1, [r2, #0]
 8000d08:	4a56      	ldr	r2, [pc, #344]	; (8000e64 <normalState+0x7c0>)
 8000d0a:	6812      	ldr	r2, [r2, #0]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff fbff 	bl	8000510 <balance>

		if(is_button_pressed(1))
 8000d12:	2001      	movs	r0, #1
 8000d14:	f7ff fab0 	bl	8000278 <is_button_pressed>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d011      	beq.n	8000d42 <normalState+0x69e>
		{
			status = ManGreen;
 8000d1e:	4b52      	ldr	r3, [pc, #328]	; (8000e68 <normalState+0x7c4>)
 8000d20:	220c      	movs	r2, #12
 8000d22:	601a      	str	r2, [r3, #0]
			time1 = timeGreen;
 8000d24:	4b4f      	ldr	r3, [pc, #316]	; (8000e64 <normalState+0x7c0>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a4c      	ldr	r2, [pc, #304]	; (8000e5c <normalState+0x7b8>)
 8000d2a:	6013      	str	r3, [r2, #0]
			time2 = 4;
 8000d2c:	4b4f      	ldr	r3, [pc, #316]	; (8000e6c <normalState+0x7c8>)
 8000d2e:	2204      	movs	r2, #4
 8000d30:	601a      	str	r2, [r3, #0]
			clearAllLed1();
 8000d32:	f7ff fad3 	bl	80002dc <clearAllLed1>
			clearAllLed2();
 8000d36:	f7ff fae5 	bl	8000304 <clearAllLed2>
			setTimer(2, 25);
 8000d3a:	2119      	movs	r1, #25
 8000d3c:	2002      	movs	r0, #2
 8000d3e:	f000 fbb5 	bl	80014ac <setTimer>
		}
		HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "\r\n!7SEG1: %d#\r\n",time1), 500);
 8000d42:	4b46      	ldr	r3, [pc, #280]	; (8000e5c <normalState+0x7b8>)
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	1d3b      	adds	r3, r7, #4
 8000d48:	4949      	ldr	r1, [pc, #292]	; (8000e70 <normalState+0x7cc>)
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f003 fc12 	bl	8004574 <siprintf>
 8000d50:	4603      	mov	r3, r0
 8000d52:	b29a      	uxth	r2, r3
 8000d54:	1d39      	adds	r1, r7, #4
 8000d56:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d5a:	4846      	ldr	r0, [pc, #280]	; (8000e74 <normalState+0x7d0>)
 8000d5c:	f002 fd3e 	bl	80037dc <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "\r\n!7SEG2: %d#\r\n\n\n",time2), 500);
 8000d60:	4b42      	ldr	r3, [pc, #264]	; (8000e6c <normalState+0x7c8>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	1d3b      	adds	r3, r7, #4
 8000d66:	4944      	ldr	r1, [pc, #272]	; (8000e78 <normalState+0x7d4>)
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f003 fc03 	bl	8004574 <siprintf>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	b29a      	uxth	r2, r3
 8000d72:	1d39      	adds	r1, r7, #4
 8000d74:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d78:	483e      	ldr	r0, [pc, #248]	; (8000e74 <normalState+0x7d0>)
 8000d7a:	f002 fd2f 	bl	80037dc <HAL_UART_Transmit>
		break;
 8000d7e:	e068      	b.n	8000e52 <normalState+0x7ae>
	case ManGreen:
		if(IsTimerUp(2) == 1)
 8000d80:	2002      	movs	r0, #2
 8000d82:	f000 fb7f 	bl	8001484 <IsTimerUp>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d105      	bne.n	8000d98 <normalState+0x6f4>
		{
			setTimer(2, 25);
 8000d8c:	2119      	movs	r1, #25
 8000d8e:	2002      	movs	r0, #2
 8000d90:	f000 fb8c 	bl	80014ac <setTimer>
			toggleGreen();
 8000d94:	f7ff fb5e 	bl	8000454 <toggleGreen>
		}
		if(is_button_pressed(2))
 8000d98:	2002      	movs	r0, #2
 8000d9a:	f7ff fa6d 	bl	8000278 <is_button_pressed>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <normalState+0x704>
			increase();
 8000da4:	f7ff fba0 	bl	80004e8 <increase>

		if(is_button_pressed(3))
 8000da8:	2003      	movs	r0, #3
 8000daa:	f7ff fa65 	bl	8000278 <is_button_pressed>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d008      	beq.n	8000dc6 <normalState+0x722>
			balance(timeRed, timeYellow, time1);
 8000db4:	4b31      	ldr	r3, [pc, #196]	; (8000e7c <normalState+0x7d8>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a29      	ldr	r2, [pc, #164]	; (8000e60 <normalState+0x7bc>)
 8000dba:	6811      	ldr	r1, [r2, #0]
 8000dbc:	4a27      	ldr	r2, [pc, #156]	; (8000e5c <normalState+0x7b8>)
 8000dbe:	6812      	ldr	r2, [r2, #0]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff fba5 	bl	8000510 <balance>

		if(is_button_pressed(1))
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	f7ff fa56 	bl	8000278 <is_button_pressed>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d017      	beq.n	8000e02 <normalState+0x75e>
		{
			status = RedGreen;
 8000dd2:	4b25      	ldr	r3, [pc, #148]	; (8000e68 <normalState+0x7c4>)
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	601a      	str	r2, [r3, #0]
			setTimer(0, timeGreen * 100);
 8000dd8:	4b22      	ldr	r3, [pc, #136]	; (8000e64 <normalState+0x7c0>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2264      	movs	r2, #100	; 0x64
 8000dde:	fb02 f303 	mul.w	r3, r2, r3
 8000de2:	4619      	mov	r1, r3
 8000de4:	2000      	movs	r0, #0
 8000de6:	f000 fb61 	bl	80014ac <setTimer>
			setTimer(1, 1);
 8000dea:	2101      	movs	r1, #1
 8000dec:	2001      	movs	r0, #1
 8000dee:	f000 fb5d 	bl	80014ac <setTimer>
			time1 = timeRed;
 8000df2:	4b22      	ldr	r3, [pc, #136]	; (8000e7c <normalState+0x7d8>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a19      	ldr	r2, [pc, #100]	; (8000e5c <normalState+0x7b8>)
 8000df8:	6013      	str	r3, [r2, #0]
			time2 = timeGreen;
 8000dfa:	4b1a      	ldr	r3, [pc, #104]	; (8000e64 <normalState+0x7c0>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a1b      	ldr	r2, [pc, #108]	; (8000e6c <normalState+0x7c8>)
 8000e00:	6013      	str	r3, [r2, #0]
		}
		HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "\r\n!7SEG1: %d#\r\n",time1), 500);
 8000e02:	4b16      	ldr	r3, [pc, #88]	; (8000e5c <normalState+0x7b8>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	1d3b      	adds	r3, r7, #4
 8000e08:	4919      	ldr	r1, [pc, #100]	; (8000e70 <normalState+0x7cc>)
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f003 fbb2 	bl	8004574 <siprintf>
 8000e10:	4603      	mov	r3, r0
 8000e12:	b29a      	uxth	r2, r3
 8000e14:	1d39      	adds	r1, r7, #4
 8000e16:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000e1a:	4816      	ldr	r0, [pc, #88]	; (8000e74 <normalState+0x7d0>)
 8000e1c:	f002 fcde 	bl	80037dc <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "\r\n!7SEG2: %d#\r\n\n\n",time2), 500);
 8000e20:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <normalState+0x7c8>)
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	1d3b      	adds	r3, r7, #4
 8000e26:	4914      	ldr	r1, [pc, #80]	; (8000e78 <normalState+0x7d4>)
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f003 fba3 	bl	8004574 <siprintf>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	b29a      	uxth	r2, r3
 8000e32:	1d39      	adds	r1, r7, #4
 8000e34:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000e38:	480e      	ldr	r0, [pc, #56]	; (8000e74 <normalState+0x7d0>)
 8000e3a:	f002 fccf 	bl	80037dc <HAL_UART_Transmit>
		break;
 8000e3e:	e008      	b.n	8000e52 <normalState+0x7ae>
	default:
		break;
 8000e40:	bf00      	nop
 8000e42:	e006      	b.n	8000e52 <normalState+0x7ae>
		break;
 8000e44:	bf00      	nop
 8000e46:	e004      	b.n	8000e52 <normalState+0x7ae>
		break;
 8000e48:	bf00      	nop
 8000e4a:	e002      	b.n	8000e52 <normalState+0x7ae>
		break;
 8000e4c:	bf00      	nop
 8000e4e:	e000      	b.n	8000e52 <normalState+0x7ae>
		break;
 8000e50:	bf00      	nop
	}
}
 8000e52:	bf00      	nop
 8000e54:	3738      	adds	r7, #56	; 0x38
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000108 	.word	0x20000108
 8000e60:	20000028 	.word	0x20000028
 8000e64:	2000002c 	.word	0x2000002c
 8000e68:	200000ec 	.word	0x200000ec
 8000e6c:	200000f0 	.word	0x200000f0
 8000e70:	08004c94 	.word	0x08004c94
 8000e74:	2000019c 	.word	0x2000019c
 8000e78:	08004ca4 	.word	0x08004ca4
 8000e7c:	20000024 	.word	0x20000024

08000e80 <fsm_pedestrian>:
 */

#include "global.h"

void fsm_pedestrian(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
	switch(pedestrian_flag)
 8000e84:	4b19      	ldr	r3, [pc, #100]	; (8000eec <fsm_pedestrian+0x6c>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2b09      	cmp	r3, #9
 8000e8a:	d01f      	beq.n	8000ecc <fsm_pedestrian+0x4c>
 8000e8c:	2b09      	cmp	r3, #9
 8000e8e:	dc2b      	bgt.n	8000ee8 <fsm_pedestrian+0x68>
 8000e90:	2b07      	cmp	r3, #7
 8000e92:	d002      	beq.n	8000e9a <fsm_pedestrian+0x1a>
 8000e94:	2b08      	cmp	r3, #8
 8000e96:	d008      	beq.n	8000eaa <fsm_pedestrian+0x2a>
			}
			buzzer();
			displayPedestrianGreen();
			break;
	}
}
 8000e98:	e026      	b.n	8000ee8 <fsm_pedestrian+0x68>
			buzzerValue = 0;
 8000e9a:	4b15      	ldr	r3, [pc, #84]	; (8000ef0 <fsm_pedestrian+0x70>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
			clearPedestrian();
 8000ea0:	f7ff fae6 	bl	8000470 <clearPedestrian>
			buzzer();
 8000ea4:	f7ff fa0a 	bl	80002bc <buzzer>
			break;
 8000ea8:	e01e      	b.n	8000ee8 <fsm_pedestrian+0x68>
			if(IsTimerUp(3) == 1)
 8000eaa:	2003      	movs	r0, #3
 8000eac:	f000 faea 	bl	8001484 <IsTimerUp>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d102      	bne.n	8000ebc <fsm_pedestrian+0x3c>
				pedestrian_flag = Pedestrian_INIT;
 8000eb6:	4b0d      	ldr	r3, [pc, #52]	; (8000eec <fsm_pedestrian+0x6c>)
 8000eb8:	2207      	movs	r2, #7
 8000eba:	601a      	str	r2, [r3, #0]
			displayPedestrianRed();
 8000ebc:	f7ff faec 	bl	8000498 <displayPedestrianRed>
			buzzerValue = 0;
 8000ec0:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <fsm_pedestrian+0x70>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
			buzzer();
 8000ec6:	f7ff f9f9 	bl	80002bc <buzzer>
			break;
 8000eca:	e00d      	b.n	8000ee8 <fsm_pedestrian+0x68>
			if(IsTimerUp(3) == 1)
 8000ecc:	2003      	movs	r0, #3
 8000ece:	f000 fad9 	bl	8001484 <IsTimerUp>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d102      	bne.n	8000ede <fsm_pedestrian+0x5e>
				pedestrian_flag = Pedestrian_INIT;
 8000ed8:	4b04      	ldr	r3, [pc, #16]	; (8000eec <fsm_pedestrian+0x6c>)
 8000eda:	2207      	movs	r2, #7
 8000edc:	601a      	str	r2, [r3, #0]
			buzzer();
 8000ede:	f7ff f9ed 	bl	80002bc <buzzer>
			displayPedestrianGreen();
 8000ee2:	f7ff faed 	bl	80004c0 <displayPedestrianGreen>
			break;
 8000ee6:	bf00      	nop
}
 8000ee8:	bf00      	nop
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20000030 	.word	0x20000030
 8000ef0:	200000f4 	.word	0x200000f4

08000ef4 <HAL_TIM_PeriodElapsedCallback>:
//		HAL_UART_Receive_IT(&huart2, data_recev, 1);
//	}
//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
	timerRun();
 8000efc:	f000 faee 	bl	80014dc <timerRun>
	SCH_Update();
 8000f00:	f000 fa7c 	bl	80013fc <SCH_Update>
	button_reading();
 8000f04:	f7ff f922 	bl	800014c <button_reading>
}
 8000f08:	bf00      	nop
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f14:	f000 fcb0 	bl	8001878 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f18:	f000 f824 	bl	8000f64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f1c:	f000 f950 	bl	80011c0 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000f20:	f000 f8ae 	bl	8001080 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000f24:	f000 f860 	bl	8000fe8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000f28:	f000 f920 	bl	800116c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
 HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4809      	ldr	r0, [pc, #36]	; (8000f54 <main+0x44>)
 8000f30:	f001 fd98 	bl	8002a64 <HAL_TIM_PWM_Start>
 //HAL_UART_Receive_IT(&huart2, data_recev, 1);
 HAL_TIM_Base_Start_IT(&htim2);
 8000f34:	4808      	ldr	r0, [pc, #32]	; (8000f58 <main+0x48>)
 8000f36:	f001 fceb 	bl	8002910 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
// uint8_t value=0;
// htim3.Instance->CCR1=2048;

// SCH_Add_Task(timerRun, 0, 1);
 SCH_Add_Task(normalState, 1, 1);
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	4807      	ldr	r0, [pc, #28]	; (8000f5c <main+0x4c>)
 8000f40:	f000 fa3e 	bl	80013c0 <SCH_Add_Task>
 SCH_Add_Task(fsm_pedestrian, 1, 1);
 8000f44:	2201      	movs	r2, #1
 8000f46:	2101      	movs	r1, #1
 8000f48:	4805      	ldr	r0, [pc, #20]	; (8000f60 <main+0x50>)
 8000f4a:	f000 fa39 	bl	80013c0 <SCH_Add_Task>
  while (1)
  {
    /* USER CODE END WHILE */
	  SCH_Dispatch_Tasks();
 8000f4e:	f000 fa71 	bl	8001434 <SCH_Dispatch_Tasks>
 8000f52:	e7fc      	b.n	8000f4e <main+0x3e>
 8000f54:	2000010c 	.word	0x2000010c
 8000f58:	20000154 	.word	0x20000154
 8000f5c:	080006a5 	.word	0x080006a5
 8000f60:	08000e81 	.word	0x08000e81

08000f64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b090      	sub	sp, #64	; 0x40
 8000f68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f6a:	f107 0318 	add.w	r3, r7, #24
 8000f6e:	2228      	movs	r2, #40	; 0x28
 8000f70:	2100      	movs	r1, #0
 8000f72:	4618      	mov	r0, r3
 8000f74:	f003 fa40 	bl	80043f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f78:	1d3b      	adds	r3, r7, #4
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	605a      	str	r2, [r3, #4]
 8000f80:	609a      	str	r2, [r3, #8]
 8000f82:	60da      	str	r2, [r3, #12]
 8000f84:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f86:	2302      	movs	r3, #2
 8000f88:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f8e:	2310      	movs	r3, #16
 8000f90:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f92:	2302      	movs	r3, #2
 8000f94:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000f96:	2300      	movs	r3, #0
 8000f98:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000f9a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa0:	f107 0318 	add.w	r3, r7, #24
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f001 f855 	bl	8002054 <HAL_RCC_OscConfig>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000fb0:	f000 f974 	bl	800129c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fb4:	230f      	movs	r3, #15
 8000fb6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fc4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fca:	1d3b      	adds	r3, r7, #4
 8000fcc:	2102      	movs	r1, #2
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f001 fac0 	bl	8002554 <HAL_RCC_ClockConfig>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000fda:	f000 f95f 	bl	800129c <Error_Handler>
  }
}
 8000fde:	bf00      	nop
 8000fe0:	3740      	adds	r7, #64	; 0x40
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
	...

08000fe8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fee:	f107 0308 	add.w	r3, r7, #8
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]
 8000ffa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ffc:	463b      	mov	r3, r7
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001004:	4b1d      	ldr	r3, [pc, #116]	; (800107c <MX_TIM2_Init+0x94>)
 8001006:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800100a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6399;
 800100c:	4b1b      	ldr	r3, [pc, #108]	; (800107c <MX_TIM2_Init+0x94>)
 800100e:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8001012:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001014:	4b19      	ldr	r3, [pc, #100]	; (800107c <MX_TIM2_Init+0x94>)
 8001016:	2200      	movs	r2, #0
 8001018:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 800101a:	4b18      	ldr	r3, [pc, #96]	; (800107c <MX_TIM2_Init+0x94>)
 800101c:	2263      	movs	r2, #99	; 0x63
 800101e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001020:	4b16      	ldr	r3, [pc, #88]	; (800107c <MX_TIM2_Init+0x94>)
 8001022:	2200      	movs	r2, #0
 8001024:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001026:	4b15      	ldr	r3, [pc, #84]	; (800107c <MX_TIM2_Init+0x94>)
 8001028:	2200      	movs	r2, #0
 800102a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800102c:	4813      	ldr	r0, [pc, #76]	; (800107c <MX_TIM2_Init+0x94>)
 800102e:	f001 fc1f 	bl	8002870 <HAL_TIM_Base_Init>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001038:	f000 f930 	bl	800129c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800103c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001040:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001042:	f107 0308 	add.w	r3, r7, #8
 8001046:	4619      	mov	r1, r3
 8001048:	480c      	ldr	r0, [pc, #48]	; (800107c <MX_TIM2_Init+0x94>)
 800104a:	f001 ff77 	bl	8002f3c <HAL_TIM_ConfigClockSource>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001054:	f000 f922 	bl	800129c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001058:	2300      	movs	r3, #0
 800105a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800105c:	2300      	movs	r3, #0
 800105e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001060:	463b      	mov	r3, r7
 8001062:	4619      	mov	r1, r3
 8001064:	4805      	ldr	r0, [pc, #20]	; (800107c <MX_TIM2_Init+0x94>)
 8001066:	f002 faf9 	bl	800365c <HAL_TIMEx_MasterConfigSynchronization>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001070:	f000 f914 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001074:	bf00      	nop
 8001076:	3718      	adds	r7, #24
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20000154 	.word	0x20000154

08001080 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b08e      	sub	sp, #56	; 0x38
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001086:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]
 8001090:	609a      	str	r2, [r3, #8]
 8001092:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001094:	f107 0320 	add.w	r3, r7, #32
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800109e:	1d3b      	adds	r3, r7, #4
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
 80010ac:	615a      	str	r2, [r3, #20]
 80010ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010b0:	4b2c      	ldr	r3, [pc, #176]	; (8001164 <MX_TIM3_Init+0xe4>)
 80010b2:	4a2d      	ldr	r2, [pc, #180]	; (8001168 <MX_TIM3_Init+0xe8>)
 80010b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80010b6:	4b2b      	ldr	r3, [pc, #172]	; (8001164 <MX_TIM3_Init+0xe4>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010bc:	4b29      	ldr	r3, [pc, #164]	; (8001164 <MX_TIM3_Init+0xe4>)
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80010c2:	4b28      	ldr	r3, [pc, #160]	; (8001164 <MX_TIM3_Init+0xe4>)
 80010c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010c8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ca:	4b26      	ldr	r3, [pc, #152]	; (8001164 <MX_TIM3_Init+0xe4>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010d0:	4b24      	ldr	r3, [pc, #144]	; (8001164 <MX_TIM3_Init+0xe4>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010d6:	4823      	ldr	r0, [pc, #140]	; (8001164 <MX_TIM3_Init+0xe4>)
 80010d8:	f001 fbca 	bl	8002870 <HAL_TIM_Base_Init>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80010e2:	f000 f8db 	bl	800129c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ea:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80010ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010f0:	4619      	mov	r1, r3
 80010f2:	481c      	ldr	r0, [pc, #112]	; (8001164 <MX_TIM3_Init+0xe4>)
 80010f4:	f001 ff22 	bl	8002f3c <HAL_TIM_ConfigClockSource>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80010fe:	f000 f8cd 	bl	800129c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001102:	4818      	ldr	r0, [pc, #96]	; (8001164 <MX_TIM3_Init+0xe4>)
 8001104:	f001 fc56 	bl	80029b4 <HAL_TIM_PWM_Init>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800110e:	f000 f8c5 	bl	800129c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001112:	2300      	movs	r3, #0
 8001114:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001116:	2300      	movs	r3, #0
 8001118:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800111a:	f107 0320 	add.w	r3, r7, #32
 800111e:	4619      	mov	r1, r3
 8001120:	4810      	ldr	r0, [pc, #64]	; (8001164 <MX_TIM3_Init+0xe4>)
 8001122:	f002 fa9b 	bl	800365c <HAL_TIMEx_MasterConfigSynchronization>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800112c:	f000 f8b6 	bl	800129c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001130:	2360      	movs	r3, #96	; 0x60
 8001132:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001134:	2300      	movs	r3, #0
 8001136:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001138:	2300      	movs	r3, #0
 800113a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800113c:	2300      	movs	r3, #0
 800113e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001140:	1d3b      	adds	r3, r7, #4
 8001142:	2200      	movs	r2, #0
 8001144:	4619      	mov	r1, r3
 8001146:	4807      	ldr	r0, [pc, #28]	; (8001164 <MX_TIM3_Init+0xe4>)
 8001148:	f001 fe36 	bl	8002db8 <HAL_TIM_PWM_ConfigChannel>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001152:	f000 f8a3 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001156:	4803      	ldr	r0, [pc, #12]	; (8001164 <MX_TIM3_Init+0xe4>)
 8001158:	f000 fa62 	bl	8001620 <HAL_TIM_MspPostInit>

}
 800115c:	bf00      	nop
 800115e:	3738      	adds	r7, #56	; 0x38
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	2000010c 	.word	0x2000010c
 8001168:	40000400 	.word	0x40000400

0800116c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001170:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <MX_USART2_UART_Init+0x4c>)
 8001172:	4a12      	ldr	r2, [pc, #72]	; (80011bc <MX_USART2_UART_Init+0x50>)
 8001174:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001176:	4b10      	ldr	r3, [pc, #64]	; (80011b8 <MX_USART2_UART_Init+0x4c>)
 8001178:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800117c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800117e:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <MX_USART2_UART_Init+0x4c>)
 8001180:	2200      	movs	r2, #0
 8001182:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001184:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <MX_USART2_UART_Init+0x4c>)
 8001186:	2200      	movs	r2, #0
 8001188:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800118a:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <MX_USART2_UART_Init+0x4c>)
 800118c:	2200      	movs	r2, #0
 800118e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001190:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <MX_USART2_UART_Init+0x4c>)
 8001192:	220c      	movs	r2, #12
 8001194:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001196:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <MX_USART2_UART_Init+0x4c>)
 8001198:	2200      	movs	r2, #0
 800119a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800119c:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <MX_USART2_UART_Init+0x4c>)
 800119e:	2200      	movs	r2, #0
 80011a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011a2:	4805      	ldr	r0, [pc, #20]	; (80011b8 <MX_USART2_UART_Init+0x4c>)
 80011a4:	f002 faca 	bl	800373c <HAL_UART_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011ae:	f000 f875 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	2000019c 	.word	0x2000019c
 80011bc:	40004400 	.word	0x40004400

080011c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c6:	f107 0308 	add.w	r3, r7, #8
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	609a      	str	r2, [r3, #8]
 80011d2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d4:	4b2e      	ldr	r3, [pc, #184]	; (8001290 <MX_GPIO_Init+0xd0>)
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	4a2d      	ldr	r2, [pc, #180]	; (8001290 <MX_GPIO_Init+0xd0>)
 80011da:	f043 0304 	orr.w	r3, r3, #4
 80011de:	6193      	str	r3, [r2, #24]
 80011e0:	4b2b      	ldr	r3, [pc, #172]	; (8001290 <MX_GPIO_Init+0xd0>)
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	f003 0304 	and.w	r3, r3, #4
 80011e8:	607b      	str	r3, [r7, #4]
 80011ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ec:	4b28      	ldr	r3, [pc, #160]	; (8001290 <MX_GPIO_Init+0xd0>)
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	4a27      	ldr	r2, [pc, #156]	; (8001290 <MX_GPIO_Init+0xd0>)
 80011f2:	f043 0308 	orr.w	r3, r3, #8
 80011f6:	6193      	str	r3, [r2, #24]
 80011f8:	4b25      	ldr	r3, [pc, #148]	; (8001290 <MX_GPIO_Init+0xd0>)
 80011fa:	699b      	ldr	r3, [r3, #24]
 80011fc:	f003 0308 	and.w	r3, r3, #8
 8001200:	603b      	str	r3, [r7, #0]
 8001202:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8001204:	2200      	movs	r2, #0
 8001206:	f44f 6186 	mov.w	r1, #1072	; 0x430
 800120a:	4822      	ldr	r0, [pc, #136]	; (8001294 <MX_GPIO_Init+0xd4>)
 800120c:	f000 fef1 	bl	8001ff2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_Pin|D2_Pin, GPIO_PIN_RESET);
 8001210:	2200      	movs	r2, #0
 8001212:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8001216:	4820      	ldr	r0, [pc, #128]	; (8001298 <MX_GPIO_Init+0xd8>)
 8001218:	f000 feeb 	bl	8001ff2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin;
 800121c:	2313      	movs	r3, #19
 800121e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001220:	2300      	movs	r3, #0
 8001222:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001228:	f107 0308 	add.w	r3, r7, #8
 800122c:	4619      	mov	r1, r3
 800122e:	481a      	ldr	r0, [pc, #104]	; (8001298 <MX_GPIO_Init+0xd8>)
 8001230:	f000 fd44 	bl	8001cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : A3_Pin D3_Pin */
  GPIO_InitStruct.Pin = A3_Pin|D3_Pin;
 8001234:	2309      	movs	r3, #9
 8001236:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001238:	2300      	movs	r3, #0
 800123a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001240:	f107 0308 	add.w	r3, r7, #8
 8001244:	4619      	mov	r1, r3
 8001246:	4813      	ldr	r0, [pc, #76]	; (8001294 <MX_GPIO_Init+0xd4>)
 8001248:	f000 fd38 	bl	8001cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D5_Pin|D4_Pin;
 800124c:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8001250:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001252:	2301      	movs	r3, #1
 8001254:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125a:	2302      	movs	r3, #2
 800125c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800125e:	f107 0308 	add.w	r3, r7, #8
 8001262:	4619      	mov	r1, r3
 8001264:	480b      	ldr	r0, [pc, #44]	; (8001294 <MX_GPIO_Init+0xd4>)
 8001266:	f000 fd29 	bl	8001cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D2_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D2_Pin;
 800126a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800126e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001270:	2301      	movs	r3, #1
 8001272:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001278:	2302      	movs	r3, #2
 800127a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127c:	f107 0308 	add.w	r3, r7, #8
 8001280:	4619      	mov	r1, r3
 8001282:	4805      	ldr	r0, [pc, #20]	; (8001298 <MX_GPIO_Init+0xd8>)
 8001284:	f000 fd1a 	bl	8001cbc <HAL_GPIO_Init>

}
 8001288:	bf00      	nop
 800128a:	3718      	adds	r7, #24
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40021000 	.word	0x40021000
 8001294:	40010c00 	.word	0x40010c00
 8001298:	40010800 	.word	0x40010800

0800129c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a0:	b672      	cpsid	i
}
 80012a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012a4:	e7fe      	b.n	80012a4 <Error_Handler+0x8>
	...

080012a8 <addNode>:
{
	head = NULL;
}

void addNode(sTask newTask)
{
 80012a8:	b590      	push	{r4, r7, lr}
 80012aa:	b087      	sub	sp, #28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	463c      	mov	r4, r7
 80012b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
 80012b4:	2014      	movs	r0, #20
 80012b6:	f003 f88f 	bl	80043d8 <malloc>
 80012ba:	4603      	mov	r3, r0
 80012bc:	613b      	str	r3, [r7, #16]
	newNode->data.pTask = newTask.pTask;
 80012be:	683a      	ldr	r2, [r7, #0]
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	601a      	str	r2, [r3, #0]
	newNode->data.Delay = newTask.Delay;
 80012c4:	687a      	ldr	r2, [r7, #4]
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	605a      	str	r2, [r3, #4]
	newNode->data.Period = newTask.Period;
 80012ca:	68ba      	ldr	r2, [r7, #8]
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	609a      	str	r2, [r3, #8]
	newNode->data.RunMe = newTask.RunMe;
 80012d0:	7b3a      	ldrb	r2, [r7, #12]
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	731a      	strb	r2, [r3, #12]
	newNode->next = NULL;
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	2200      	movs	r2, #0
 80012da:	611a      	str	r2, [r3, #16]
	//list is empty just addNode
	if(head == NULL)
 80012dc:	4b2b      	ldr	r3, [pc, #172]	; (800138c <addNode+0xe4>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d103      	bne.n	80012ec <addNode+0x44>
	{
		head=newNode;
 80012e4:	4a29      	ldr	r2, [pc, #164]	; (800138c <addNode+0xe4>)
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	6013      	str	r3, [r2, #0]
		return;
 80012ea:	e04c      	b.n	8001386 <addNode+0xde>
	}
	struct Node* tmp = head;
 80012ec:	4b27      	ldr	r3, [pc, #156]	; (800138c <addNode+0xe4>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	617b      	str	r3, [r7, #20]
	//if the list has A5 B3 C2  we add D3 -> D3 A2 B3 C2
	if(newNode->data.Delay < tmp->data.Delay )
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	685a      	ldr	r2, [r3, #4]
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d21e      	bcs.n	800133c <addNode+0x94>
	{
		tmp->data.Delay -= newNode->data.Delay;
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	685a      	ldr	r2, [r3, #4]
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	1ad2      	subs	r2, r2, r3
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	605a      	str	r2, [r3, #4]
		newNode->next = tmp;
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	697a      	ldr	r2, [r7, #20]
 8001310:	611a      	str	r2, [r3, #16]
		head = newNode;
 8001312:	4a1e      	ldr	r2, [pc, #120]	; (800138c <addNode+0xe4>)
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	6013      	str	r3, [r2, #0]
		return;
 8001318:	e035      	b.n	8001386 <addNode+0xde>
	}

	// if the list has A5 B3 C2 we add D9 -> A5 B3 D1 C1
	while(tmp->next != NULL)
	{
		newNode->data.Delay -= tmp->data.Delay;
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	685a      	ldr	r2, [r3, #4]
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	1ad2      	subs	r2, r2, r3
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	605a      	str	r2, [r3, #4]
		if(newNode->data.Delay <= tmp->next->data.Delay)
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	685a      	ldr	r2, [r3, #4]
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	691b      	ldr	r3, [r3, #16]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	429a      	cmp	r2, r3
 8001334:	d907      	bls.n	8001346 <addNode+0x9e>
			break;

		tmp = tmp->next;
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	691b      	ldr	r3, [r3, #16]
 800133a:	617b      	str	r3, [r7, #20]
	while(tmp->next != NULL)
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	691b      	ldr	r3, [r3, #16]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d1ea      	bne.n	800131a <addNode+0x72>
 8001344:	e000      	b.n	8001348 <addNode+0xa0>
			break;
 8001346:	bf00      	nop
	}
	// tmp dang o B3 va D tro thanh D1
	if(tmp->next == NULL)
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	691b      	ldr	r3, [r3, #16]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d10a      	bne.n	8001366 <addNode+0xbe>
	{
		newNode->data.Delay -= tmp->data.Delay;
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	685a      	ldr	r2, [r3, #4]
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	1ad2      	subs	r2, r2, r3
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	605a      	str	r2, [r3, #4]
		tmp->next = newNode;
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	611a      	str	r2, [r3, #16]
 8001364:	e00f      	b.n	8001386 <addNode+0xde>
	}
	else
	{
		tmp->next->data.Delay -= newNode->data.Delay; // chuyen C2 thanh C1
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	691b      	ldr	r3, [r3, #16]
 800136a:	6859      	ldr	r1, [r3, #4]
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	685a      	ldr	r2, [r3, #4]
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	691b      	ldr	r3, [r3, #16]
 8001374:	1a8a      	subs	r2, r1, r2
 8001376:	605a      	str	r2, [r3, #4]
		newNode->next = tmp->next;
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	691a      	ldr	r2, [r3, #16]
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	611a      	str	r2, [r3, #16]
		tmp->next = newNode;
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	611a      	str	r2, [r3, #16]
	}
}
 8001386:	371c      	adds	r7, #28
 8001388:	46bd      	mov	sp, r7
 800138a:	bd90      	pop	{r4, r7, pc}
 800138c:	200000f8 	.word	0x200000f8

08001390 <deleteBegin>:

void deleteBegin()
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
	struct Node* tmp = head;
 8001396:	4b09      	ldr	r3, [pc, #36]	; (80013bc <deleteBegin+0x2c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	607b      	str	r3, [r7, #4]
	if(tmp == NULL) return;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d008      	beq.n	80013b4 <deleteBegin+0x24>
	head = head->next;
 80013a2:	4b06      	ldr	r3, [pc, #24]	; (80013bc <deleteBegin+0x2c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	691b      	ldr	r3, [r3, #16]
 80013a8:	4a04      	ldr	r2, [pc, #16]	; (80013bc <deleteBegin+0x2c>)
 80013aa:	6013      	str	r3, [r2, #0]
	free(tmp);
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f003 f81b 	bl	80043e8 <free>
 80013b2:	e000      	b.n	80013b6 <deleteBegin+0x26>
	if(tmp == NULL) return;
 80013b4:	bf00      	nop
}
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	200000f8 	.word	0x200000f8

080013c0 <SCH_Add_Task>:

void SCH_Add_Task(void (*p_function)(), uint32_t DELAY, uint32_t PERIOD)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b088      	sub	sp, #32
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
	sTask newTask;
	newTask.pTask = p_function;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	613b      	str	r3, [r7, #16]
	newTask.Delay = DELAY;
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	617b      	str	r3, [r7, #20]
	newTask.Period = PERIOD;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	61bb      	str	r3, [r7, #24]
	if(newTask.Delay == 0)
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d102      	bne.n	80013e4 <SCH_Add_Task+0x24>
		newTask.RunMe = 1;
 80013de:	2301      	movs	r3, #1
 80013e0:	773b      	strb	r3, [r7, #28]
 80013e2:	e001      	b.n	80013e8 <SCH_Add_Task+0x28>
	else
		newTask.RunMe = 0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	773b      	strb	r3, [r7, #28]

	addNode(newTask);
 80013e8:	f107 0310 	add.w	r3, r7, #16
 80013ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013ee:	f7ff ff5b 	bl	80012a8 <addNode>
}
 80013f2:	bf00      	nop
 80013f4:	3720      	adds	r7, #32
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
	...

080013fc <SCH_Update>:

void SCH_Update(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
	if(head == NULL) return;
 8001400:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <SCH_Update+0x34>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d00f      	beq.n	8001428 <SCH_Update+0x2c>
	if(head->data.Delay <= 0)
 8001408:	4b09      	ldr	r3, [pc, #36]	; (8001430 <SCH_Update+0x34>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d104      	bne.n	800141c <SCH_Update+0x20>
		head->data.RunMe = 1;
 8001412:	4b07      	ldr	r3, [pc, #28]	; (8001430 <SCH_Update+0x34>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2201      	movs	r2, #1
 8001418:	731a      	strb	r2, [r3, #12]
 800141a:	e006      	b.n	800142a <SCH_Update+0x2e>
	else
		head->data.Delay--;
 800141c:	4b04      	ldr	r3, [pc, #16]	; (8001430 <SCH_Update+0x34>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	685a      	ldr	r2, [r3, #4]
 8001422:	3a01      	subs	r2, #1
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	e000      	b.n	800142a <SCH_Update+0x2e>
	if(head == NULL) return;
 8001428:	bf00      	nop
}
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr
 8001430:	200000f8 	.word	0x200000f8

08001434 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void)
{
 8001434:	b590      	push	{r4, r7, lr}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
	if(head == NULL) return;
 800143a:	4b11      	ldr	r3, [pc, #68]	; (8001480 <SCH_Dispatch_Tasks+0x4c>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d01a      	beq.n	8001478 <SCH_Dispatch_Tasks+0x44>
	if(head->data.RunMe > 0)
 8001442:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <SCH_Dispatch_Tasks+0x4c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	7b1b      	ldrb	r3, [r3, #12]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d016      	beq.n	800147a <SCH_Dispatch_Tasks+0x46>
	{
		(*head->data.pTask)();
 800144c:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <SCH_Dispatch_Tasks+0x4c>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4798      	blx	r3
		sTask newTask = head->data;
 8001454:	4b0a      	ldr	r3, [pc, #40]	; (8001480 <SCH_Dispatch_Tasks+0x4c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	463c      	mov	r4, r7
 800145a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800145c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		deleteBegin();
 8001460:	f7ff ff96 	bl	8001390 <deleteBegin>
		if(newTask.Period != 0)
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d007      	beq.n	800147a <SCH_Dispatch_Tasks+0x46>
			SCH_Add_Task(newTask.pTask, newTask.Period, newTask.Period);
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	68b9      	ldr	r1, [r7, #8]
 800146e:	68ba      	ldr	r2, [r7, #8]
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff ffa5 	bl	80013c0 <SCH_Add_Task>
 8001476:	e000      	b.n	800147a <SCH_Dispatch_Tasks+0x46>
	if(head == NULL) return;
 8001478:	bf00      	nop
	}
}
 800147a:	3714      	adds	r7, #20
 800147c:	46bd      	mov	sp, r7
 800147e:	bd90      	pop	{r4, r7, pc}
 8001480:	200000f8 	.word	0x200000f8

08001484 <IsTimerUp>:

int timer_counter[TIMER];
int timer_flag[TIMER];

int IsTimerUp(int timer)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
	return (timer_flag[timer] == 1);
 800148c:	4a06      	ldr	r2, [pc, #24]	; (80014a8 <IsTimerUp+0x24>)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001494:	2b01      	cmp	r3, #1
 8001496:	bf0c      	ite	eq
 8001498:	2301      	moveq	r3, #1
 800149a:	2300      	movne	r3, #0
 800149c:	b2db      	uxtb	r3, r3
}
 800149e:	4618      	mov	r0, r3
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr
 80014a8:	200001f8 	.word	0x200001f8

080014ac <setTimer>:

void setTimer(int timer, int duration)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
	timer_counter[timer] = duration;
 80014b6:	4907      	ldr	r1, [pc, #28]	; (80014d4 <setTimer+0x28>)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	683a      	ldr	r2, [r7, #0]
 80014bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[timer] = 0;
 80014c0:	4a05      	ldr	r2, [pc, #20]	; (80014d8 <setTimer+0x2c>)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2100      	movs	r1, #0
 80014c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bc80      	pop	{r7}
 80014d2:	4770      	bx	lr
 80014d4:	200001e4 	.word	0x200001e4
 80014d8:	200001f8 	.word	0x200001f8

080014dc <timerRun>:
void timerRun(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
	for (int timer = 0; timer < TIMER; timer++)
 80014e2:	2300      	movs	r3, #0
 80014e4:	607b      	str	r3, [r7, #4]
 80014e6:	e01c      	b.n	8001522 <timerRun+0x46>
	{
		if(timer_counter[timer] > 0)
 80014e8:	4a12      	ldr	r2, [pc, #72]	; (8001534 <timerRun+0x58>)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	dd13      	ble.n	800151c <timerRun+0x40>
		{
			timer_counter[timer]--;
 80014f4:	4a0f      	ldr	r2, [pc, #60]	; (8001534 <timerRun+0x58>)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014fc:	1e5a      	subs	r2, r3, #1
 80014fe:	490d      	ldr	r1, [pc, #52]	; (8001534 <timerRun+0x58>)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[timer] == 0)
 8001506:	4a0b      	ldr	r2, [pc, #44]	; (8001534 <timerRun+0x58>)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d104      	bne.n	800151c <timerRun+0x40>
				timer_flag[timer] = 1;
 8001512:	4a09      	ldr	r2, [pc, #36]	; (8001538 <timerRun+0x5c>)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2101      	movs	r1, #1
 8001518:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int timer = 0; timer < TIMER; timer++)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3301      	adds	r3, #1
 8001520:	607b      	str	r3, [r7, #4]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2b04      	cmp	r3, #4
 8001526:	dddf      	ble.n	80014e8 <timerRun+0xc>
		}
	}
}
 8001528:	bf00      	nop
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr
 8001534:	200001e4 	.word	0x200001e4
 8001538:	200001f8 	.word	0x200001f8

0800153c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001542:	4b15      	ldr	r3, [pc, #84]	; (8001598 <HAL_MspInit+0x5c>)
 8001544:	699b      	ldr	r3, [r3, #24]
 8001546:	4a14      	ldr	r2, [pc, #80]	; (8001598 <HAL_MspInit+0x5c>)
 8001548:	f043 0301 	orr.w	r3, r3, #1
 800154c:	6193      	str	r3, [r2, #24]
 800154e:	4b12      	ldr	r3, [pc, #72]	; (8001598 <HAL_MspInit+0x5c>)
 8001550:	699b      	ldr	r3, [r3, #24]
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	60bb      	str	r3, [r7, #8]
 8001558:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800155a:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <HAL_MspInit+0x5c>)
 800155c:	69db      	ldr	r3, [r3, #28]
 800155e:	4a0e      	ldr	r2, [pc, #56]	; (8001598 <HAL_MspInit+0x5c>)
 8001560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001564:	61d3      	str	r3, [r2, #28]
 8001566:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <HAL_MspInit+0x5c>)
 8001568:	69db      	ldr	r3, [r3, #28]
 800156a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800156e:	607b      	str	r3, [r7, #4]
 8001570:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001572:	4b0a      	ldr	r3, [pc, #40]	; (800159c <HAL_MspInit+0x60>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	4a04      	ldr	r2, [pc, #16]	; (800159c <HAL_MspInit+0x60>)
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800158e:	bf00      	nop
 8001590:	3714      	adds	r7, #20
 8001592:	46bd      	mov	sp, r7
 8001594:	bc80      	pop	{r7}
 8001596:	4770      	bx	lr
 8001598:	40021000 	.word	0x40021000
 800159c:	40010000 	.word	0x40010000

080015a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015b0:	d114      	bne.n	80015dc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015b2:	4b19      	ldr	r3, [pc, #100]	; (8001618 <HAL_TIM_Base_MspInit+0x78>)
 80015b4:	69db      	ldr	r3, [r3, #28]
 80015b6:	4a18      	ldr	r2, [pc, #96]	; (8001618 <HAL_TIM_Base_MspInit+0x78>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	61d3      	str	r3, [r2, #28]
 80015be:	4b16      	ldr	r3, [pc, #88]	; (8001618 <HAL_TIM_Base_MspInit+0x78>)
 80015c0:	69db      	ldr	r3, [r3, #28]
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80015ca:	2200      	movs	r2, #0
 80015cc:	2100      	movs	r1, #0
 80015ce:	201c      	movs	r0, #28
 80015d0:	f000 fa8b 	bl	8001aea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015d4:	201c      	movs	r0, #28
 80015d6:	f000 faa4 	bl	8001b22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80015da:	e018      	b.n	800160e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a0e      	ldr	r2, [pc, #56]	; (800161c <HAL_TIM_Base_MspInit+0x7c>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d113      	bne.n	800160e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015e6:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <HAL_TIM_Base_MspInit+0x78>)
 80015e8:	69db      	ldr	r3, [r3, #28]
 80015ea:	4a0b      	ldr	r2, [pc, #44]	; (8001618 <HAL_TIM_Base_MspInit+0x78>)
 80015ec:	f043 0302 	orr.w	r3, r3, #2
 80015f0:	61d3      	str	r3, [r2, #28]
 80015f2:	4b09      	ldr	r3, [pc, #36]	; (8001618 <HAL_TIM_Base_MspInit+0x78>)
 80015f4:	69db      	ldr	r3, [r3, #28]
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	60bb      	str	r3, [r7, #8]
 80015fc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80015fe:	2200      	movs	r2, #0
 8001600:	2100      	movs	r1, #0
 8001602:	201d      	movs	r0, #29
 8001604:	f000 fa71 	bl	8001aea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001608:	201d      	movs	r0, #29
 800160a:	f000 fa8a 	bl	8001b22 <HAL_NVIC_EnableIRQ>
}
 800160e:	bf00      	nop
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40021000 	.word	0x40021000
 800161c:	40000400 	.word	0x40000400

08001620 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b088      	sub	sp, #32
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001628:	f107 0310 	add.w	r3, r7, #16
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a0f      	ldr	r2, [pc, #60]	; (8001678 <HAL_TIM_MspPostInit+0x58>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d117      	bne.n	8001670 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001640:	4b0e      	ldr	r3, [pc, #56]	; (800167c <HAL_TIM_MspPostInit+0x5c>)
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	4a0d      	ldr	r2, [pc, #52]	; (800167c <HAL_TIM_MspPostInit+0x5c>)
 8001646:	f043 0304 	orr.w	r3, r3, #4
 800164a:	6193      	str	r3, [r2, #24]
 800164c:	4b0b      	ldr	r3, [pc, #44]	; (800167c <HAL_TIM_MspPostInit+0x5c>)
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	f003 0304 	and.w	r3, r3, #4
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001658:	2340      	movs	r3, #64	; 0x40
 800165a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165c:	2302      	movs	r3, #2
 800165e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001660:	2302      	movs	r3, #2
 8001662:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001664:	f107 0310 	add.w	r3, r7, #16
 8001668:	4619      	mov	r1, r3
 800166a:	4805      	ldr	r0, [pc, #20]	; (8001680 <HAL_TIM_MspPostInit+0x60>)
 800166c:	f000 fb26 	bl	8001cbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001670:	bf00      	nop
 8001672:	3720      	adds	r7, #32
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40000400 	.word	0x40000400
 800167c:	40021000 	.word	0x40021000
 8001680:	40010800 	.word	0x40010800

08001684 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b088      	sub	sp, #32
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168c:	f107 0310 	add.w	r3, r7, #16
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a1f      	ldr	r2, [pc, #124]	; (800171c <HAL_UART_MspInit+0x98>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d137      	bne.n	8001714 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016a4:	4b1e      	ldr	r3, [pc, #120]	; (8001720 <HAL_UART_MspInit+0x9c>)
 80016a6:	69db      	ldr	r3, [r3, #28]
 80016a8:	4a1d      	ldr	r2, [pc, #116]	; (8001720 <HAL_UART_MspInit+0x9c>)
 80016aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016ae:	61d3      	str	r3, [r2, #28]
 80016b0:	4b1b      	ldr	r3, [pc, #108]	; (8001720 <HAL_UART_MspInit+0x9c>)
 80016b2:	69db      	ldr	r3, [r3, #28]
 80016b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b8:	60fb      	str	r3, [r7, #12]
 80016ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016bc:	4b18      	ldr	r3, [pc, #96]	; (8001720 <HAL_UART_MspInit+0x9c>)
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	4a17      	ldr	r2, [pc, #92]	; (8001720 <HAL_UART_MspInit+0x9c>)
 80016c2:	f043 0304 	orr.w	r3, r3, #4
 80016c6:	6193      	str	r3, [r2, #24]
 80016c8:	4b15      	ldr	r3, [pc, #84]	; (8001720 <HAL_UART_MspInit+0x9c>)
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	f003 0304 	and.w	r3, r3, #4
 80016d0:	60bb      	str	r3, [r7, #8]
 80016d2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016d4:	2304      	movs	r3, #4
 80016d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d8:	2302      	movs	r3, #2
 80016da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016dc:	2303      	movs	r3, #3
 80016de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e0:	f107 0310 	add.w	r3, r7, #16
 80016e4:	4619      	mov	r1, r3
 80016e6:	480f      	ldr	r0, [pc, #60]	; (8001724 <HAL_UART_MspInit+0xa0>)
 80016e8:	f000 fae8 	bl	8001cbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80016ec:	2308      	movs	r3, #8
 80016ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016f0:	2300      	movs	r3, #0
 80016f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f8:	f107 0310 	add.w	r3, r7, #16
 80016fc:	4619      	mov	r1, r3
 80016fe:	4809      	ldr	r0, [pc, #36]	; (8001724 <HAL_UART_MspInit+0xa0>)
 8001700:	f000 fadc 	bl	8001cbc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001704:	2200      	movs	r2, #0
 8001706:	2100      	movs	r1, #0
 8001708:	2026      	movs	r0, #38	; 0x26
 800170a:	f000 f9ee 	bl	8001aea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800170e:	2026      	movs	r0, #38	; 0x26
 8001710:	f000 fa07 	bl	8001b22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001714:	bf00      	nop
 8001716:	3720      	adds	r7, #32
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40004400 	.word	0x40004400
 8001720:	40021000 	.word	0x40021000
 8001724:	40010800 	.word	0x40010800

08001728 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800172c:	e7fe      	b.n	800172c <NMI_Handler+0x4>

0800172e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800172e:	b480      	push	{r7}
 8001730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001732:	e7fe      	b.n	8001732 <HardFault_Handler+0x4>

08001734 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001738:	e7fe      	b.n	8001738 <MemManage_Handler+0x4>

0800173a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800173a:	b480      	push	{r7}
 800173c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800173e:	e7fe      	b.n	800173e <BusFault_Handler+0x4>

08001740 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001744:	e7fe      	b.n	8001744 <UsageFault_Handler+0x4>

08001746 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001746:	b480      	push	{r7}
 8001748:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	46bd      	mov	sp, r7
 800174e:	bc80      	pop	{r7}
 8001750:	4770      	bx	lr

08001752 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001752:	b480      	push	{r7}
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	46bd      	mov	sp, r7
 800175a:	bc80      	pop	{r7}
 800175c:	4770      	bx	lr

0800175e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800175e:	b480      	push	{r7}
 8001760:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	46bd      	mov	sp, r7
 8001766:	bc80      	pop	{r7}
 8001768:	4770      	bx	lr

0800176a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800176e:	f000 f8c9 	bl	8001904 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
	...

08001778 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800177c:	4802      	ldr	r0, [pc, #8]	; (8001788 <TIM2_IRQHandler+0x10>)
 800177e:	f001 fa13 	bl	8002ba8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	20000154 	.word	0x20000154

0800178c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001790:	4802      	ldr	r0, [pc, #8]	; (800179c <TIM3_IRQHandler+0x10>)
 8001792:	f001 fa09 	bl	8002ba8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	2000010c 	.word	0x2000010c

080017a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017a4:	4802      	ldr	r0, [pc, #8]	; (80017b0 <USART2_IRQHandler+0x10>)
 80017a6:	f002 f89d 	bl	80038e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	2000019c 	.word	0x2000019c

080017b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017bc:	4a14      	ldr	r2, [pc, #80]	; (8001810 <_sbrk+0x5c>)
 80017be:	4b15      	ldr	r3, [pc, #84]	; (8001814 <_sbrk+0x60>)
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017c8:	4b13      	ldr	r3, [pc, #76]	; (8001818 <_sbrk+0x64>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d102      	bne.n	80017d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017d0:	4b11      	ldr	r3, [pc, #68]	; (8001818 <_sbrk+0x64>)
 80017d2:	4a12      	ldr	r2, [pc, #72]	; (800181c <_sbrk+0x68>)
 80017d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017d6:	4b10      	ldr	r3, [pc, #64]	; (8001818 <_sbrk+0x64>)
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4413      	add	r3, r2
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d207      	bcs.n	80017f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017e4:	f002 fdce 	bl	8004384 <__errno>
 80017e8:	4603      	mov	r3, r0
 80017ea:	220c      	movs	r2, #12
 80017ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017ee:	f04f 33ff 	mov.w	r3, #4294967295
 80017f2:	e009      	b.n	8001808 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017f4:	4b08      	ldr	r3, [pc, #32]	; (8001818 <_sbrk+0x64>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017fa:	4b07      	ldr	r3, [pc, #28]	; (8001818 <_sbrk+0x64>)
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4413      	add	r3, r2
 8001802:	4a05      	ldr	r2, [pc, #20]	; (8001818 <_sbrk+0x64>)
 8001804:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001806:	68fb      	ldr	r3, [r7, #12]
}
 8001808:	4618      	mov	r0, r3
 800180a:	3718      	adds	r7, #24
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	20005000 	.word	0x20005000
 8001814:	00000400 	.word	0x00000400
 8001818:	200000fc 	.word	0x200000fc
 800181c:	20000220 	.word	0x20000220

08001820 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr

0800182c <Reset_Handler>:
 800182c:	f7ff fff8 	bl	8001820 <SystemInit>
 8001830:	480b      	ldr	r0, [pc, #44]	; (8001860 <LoopFillZerobss+0xe>)
 8001832:	490c      	ldr	r1, [pc, #48]	; (8001864 <LoopFillZerobss+0x12>)
 8001834:	4a0c      	ldr	r2, [pc, #48]	; (8001868 <LoopFillZerobss+0x16>)
 8001836:	2300      	movs	r3, #0
 8001838:	e002      	b.n	8001840 <LoopCopyDataInit>

0800183a <CopyDataInit>:
 800183a:	58d4      	ldr	r4, [r2, r3]
 800183c:	50c4      	str	r4, [r0, r3]
 800183e:	3304      	adds	r3, #4

08001840 <LoopCopyDataInit>:
 8001840:	18c4      	adds	r4, r0, r3
 8001842:	428c      	cmp	r4, r1
 8001844:	d3f9      	bcc.n	800183a <CopyDataInit>
 8001846:	4a09      	ldr	r2, [pc, #36]	; (800186c <LoopFillZerobss+0x1a>)
 8001848:	4c09      	ldr	r4, [pc, #36]	; (8001870 <LoopFillZerobss+0x1e>)
 800184a:	2300      	movs	r3, #0
 800184c:	e001      	b.n	8001852 <LoopFillZerobss>

0800184e <FillZerobss>:
 800184e:	6013      	str	r3, [r2, #0]
 8001850:	3204      	adds	r2, #4

08001852 <LoopFillZerobss>:
 8001852:	42a2      	cmp	r2, r4
 8001854:	d3fb      	bcc.n	800184e <FillZerobss>
 8001856:	f002 fd9b 	bl	8004390 <__libc_init_array>
 800185a:	f7ff fb59 	bl	8000f10 <main>
 800185e:	4770      	bx	lr
 8001860:	20000000 	.word	0x20000000
 8001864:	200000a4 	.word	0x200000a4
 8001868:	08004d20 	.word	0x08004d20
 800186c:	200000a4 	.word	0x200000a4
 8001870:	20000220 	.word	0x20000220

08001874 <ADC1_2_IRQHandler>:
 8001874:	e7fe      	b.n	8001874 <ADC1_2_IRQHandler>
	...

08001878 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800187c:	4b08      	ldr	r3, [pc, #32]	; (80018a0 <HAL_Init+0x28>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a07      	ldr	r2, [pc, #28]	; (80018a0 <HAL_Init+0x28>)
 8001882:	f043 0310 	orr.w	r3, r3, #16
 8001886:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001888:	2003      	movs	r0, #3
 800188a:	f000 f923 	bl	8001ad4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800188e:	200f      	movs	r0, #15
 8001890:	f000 f808 	bl	80018a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001894:	f7ff fe52 	bl	800153c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40022000 	.word	0x40022000

080018a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018ac:	4b12      	ldr	r3, [pc, #72]	; (80018f8 <HAL_InitTick+0x54>)
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	4b12      	ldr	r3, [pc, #72]	; (80018fc <HAL_InitTick+0x58>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	4619      	mov	r1, r3
 80018b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80018be:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c2:	4618      	mov	r0, r3
 80018c4:	f000 f93b 	bl	8001b3e <HAL_SYSTICK_Config>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e00e      	b.n	80018f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2b0f      	cmp	r3, #15
 80018d6:	d80a      	bhi.n	80018ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018d8:	2200      	movs	r2, #0
 80018da:	6879      	ldr	r1, [r7, #4]
 80018dc:	f04f 30ff 	mov.w	r0, #4294967295
 80018e0:	f000 f903 	bl	8001aea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018e4:	4a06      	ldr	r2, [pc, #24]	; (8001900 <HAL_InitTick+0x5c>)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ea:	2300      	movs	r3, #0
 80018ec:	e000      	b.n	80018f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	20000034 	.word	0x20000034
 80018fc:	2000003c 	.word	0x2000003c
 8001900:	20000038 	.word	0x20000038

08001904 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001908:	4b05      	ldr	r3, [pc, #20]	; (8001920 <HAL_IncTick+0x1c>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	461a      	mov	r2, r3
 800190e:	4b05      	ldr	r3, [pc, #20]	; (8001924 <HAL_IncTick+0x20>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4413      	add	r3, r2
 8001914:	4a03      	ldr	r2, [pc, #12]	; (8001924 <HAL_IncTick+0x20>)
 8001916:	6013      	str	r3, [r2, #0]
}
 8001918:	bf00      	nop
 800191a:	46bd      	mov	sp, r7
 800191c:	bc80      	pop	{r7}
 800191e:	4770      	bx	lr
 8001920:	2000003c 	.word	0x2000003c
 8001924:	2000020c 	.word	0x2000020c

08001928 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  return uwTick;
 800192c:	4b02      	ldr	r3, [pc, #8]	; (8001938 <HAL_GetTick+0x10>)
 800192e:	681b      	ldr	r3, [r3, #0]
}
 8001930:	4618      	mov	r0, r3
 8001932:	46bd      	mov	sp, r7
 8001934:	bc80      	pop	{r7}
 8001936:	4770      	bx	lr
 8001938:	2000020c 	.word	0x2000020c

0800193c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800194c:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <__NVIC_SetPriorityGrouping+0x44>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001952:	68ba      	ldr	r2, [r7, #8]
 8001954:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001958:	4013      	ands	r3, r2
 800195a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001964:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800196c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800196e:	4a04      	ldr	r2, [pc, #16]	; (8001980 <__NVIC_SetPriorityGrouping+0x44>)
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	60d3      	str	r3, [r2, #12]
}
 8001974:	bf00      	nop
 8001976:	3714      	adds	r7, #20
 8001978:	46bd      	mov	sp, r7
 800197a:	bc80      	pop	{r7}
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	e000ed00 	.word	0xe000ed00

08001984 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001988:	4b04      	ldr	r3, [pc, #16]	; (800199c <__NVIC_GetPriorityGrouping+0x18>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	0a1b      	lsrs	r3, r3, #8
 800198e:	f003 0307 	and.w	r3, r3, #7
}
 8001992:	4618      	mov	r0, r3
 8001994:	46bd      	mov	sp, r7
 8001996:	bc80      	pop	{r7}
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	db0b      	blt.n	80019ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019b2:	79fb      	ldrb	r3, [r7, #7]
 80019b4:	f003 021f 	and.w	r2, r3, #31
 80019b8:	4906      	ldr	r1, [pc, #24]	; (80019d4 <__NVIC_EnableIRQ+0x34>)
 80019ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019be:	095b      	lsrs	r3, r3, #5
 80019c0:	2001      	movs	r0, #1
 80019c2:	fa00 f202 	lsl.w	r2, r0, r2
 80019c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bc80      	pop	{r7}
 80019d2:	4770      	bx	lr
 80019d4:	e000e100 	.word	0xe000e100

080019d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	6039      	str	r1, [r7, #0]
 80019e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	db0a      	blt.n	8001a02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	b2da      	uxtb	r2, r3
 80019f0:	490c      	ldr	r1, [pc, #48]	; (8001a24 <__NVIC_SetPriority+0x4c>)
 80019f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f6:	0112      	lsls	r2, r2, #4
 80019f8:	b2d2      	uxtb	r2, r2
 80019fa:	440b      	add	r3, r1
 80019fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a00:	e00a      	b.n	8001a18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	b2da      	uxtb	r2, r3
 8001a06:	4908      	ldr	r1, [pc, #32]	; (8001a28 <__NVIC_SetPriority+0x50>)
 8001a08:	79fb      	ldrb	r3, [r7, #7]
 8001a0a:	f003 030f 	and.w	r3, r3, #15
 8001a0e:	3b04      	subs	r3, #4
 8001a10:	0112      	lsls	r2, r2, #4
 8001a12:	b2d2      	uxtb	r2, r2
 8001a14:	440b      	add	r3, r1
 8001a16:	761a      	strb	r2, [r3, #24]
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bc80      	pop	{r7}
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	e000e100 	.word	0xe000e100
 8001a28:	e000ed00 	.word	0xe000ed00

08001a2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b089      	sub	sp, #36	; 0x24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	f1c3 0307 	rsb	r3, r3, #7
 8001a46:	2b04      	cmp	r3, #4
 8001a48:	bf28      	it	cs
 8001a4a:	2304      	movcs	r3, #4
 8001a4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	3304      	adds	r3, #4
 8001a52:	2b06      	cmp	r3, #6
 8001a54:	d902      	bls.n	8001a5c <NVIC_EncodePriority+0x30>
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	3b03      	subs	r3, #3
 8001a5a:	e000      	b.n	8001a5e <NVIC_EncodePriority+0x32>
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a60:	f04f 32ff 	mov.w	r2, #4294967295
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	43da      	mvns	r2, r3
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	401a      	ands	r2, r3
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a74:	f04f 31ff 	mov.w	r1, #4294967295
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7e:	43d9      	mvns	r1, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a84:	4313      	orrs	r3, r2
         );
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3724      	adds	r7, #36	; 0x24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bc80      	pop	{r7}
 8001a8e:	4770      	bx	lr

08001a90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001aa0:	d301      	bcc.n	8001aa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e00f      	b.n	8001ac6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aa6:	4a0a      	ldr	r2, [pc, #40]	; (8001ad0 <SysTick_Config+0x40>)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aae:	210f      	movs	r1, #15
 8001ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab4:	f7ff ff90 	bl	80019d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ab8:	4b05      	ldr	r3, [pc, #20]	; (8001ad0 <SysTick_Config+0x40>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001abe:	4b04      	ldr	r3, [pc, #16]	; (8001ad0 <SysTick_Config+0x40>)
 8001ac0:	2207      	movs	r2, #7
 8001ac2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	e000e010 	.word	0xe000e010

08001ad4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f7ff ff2d 	bl	800193c <__NVIC_SetPriorityGrouping>
}
 8001ae2:	bf00      	nop
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b086      	sub	sp, #24
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	4603      	mov	r3, r0
 8001af2:	60b9      	str	r1, [r7, #8]
 8001af4:	607a      	str	r2, [r7, #4]
 8001af6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001af8:	2300      	movs	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001afc:	f7ff ff42 	bl	8001984 <__NVIC_GetPriorityGrouping>
 8001b00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	68b9      	ldr	r1, [r7, #8]
 8001b06:	6978      	ldr	r0, [r7, #20]
 8001b08:	f7ff ff90 	bl	8001a2c <NVIC_EncodePriority>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b12:	4611      	mov	r1, r2
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff ff5f 	bl	80019d8 <__NVIC_SetPriority>
}
 8001b1a:	bf00      	nop
 8001b1c:	3718      	adds	r7, #24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b082      	sub	sp, #8
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	4603      	mov	r3, r0
 8001b2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff ff35 	bl	80019a0 <__NVIC_EnableIRQ>
}
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b082      	sub	sp, #8
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff ffa2 	bl	8001a90 <SysTick_Config>
 8001b4c:	4603      	mov	r3, r0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b56:	b480      	push	{r7}
 8001b58:	b085      	sub	sp, #20
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d008      	beq.n	8001b80 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2204      	movs	r2, #4
 8001b72:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e020      	b.n	8001bc2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f022 020e 	bic.w	r2, r2, #14
 8001b8e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f022 0201 	bic.w	r2, r2, #1
 8001b9e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ba8:	2101      	movs	r1, #1
 8001baa:	fa01 f202 	lsl.w	r2, r1, r2
 8001bae:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3714      	adds	r7, #20
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bc80      	pop	{r7}
 8001bca:	4770      	bx	lr

08001bcc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d005      	beq.n	8001bf0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2204      	movs	r2, #4
 8001be8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	73fb      	strb	r3, [r7, #15]
 8001bee:	e051      	b.n	8001c94 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f022 020e 	bic.w	r2, r2, #14
 8001bfe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f022 0201 	bic.w	r2, r2, #1
 8001c0e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a22      	ldr	r2, [pc, #136]	; (8001ca0 <HAL_DMA_Abort_IT+0xd4>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d029      	beq.n	8001c6e <HAL_DMA_Abort_IT+0xa2>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a21      	ldr	r2, [pc, #132]	; (8001ca4 <HAL_DMA_Abort_IT+0xd8>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d022      	beq.n	8001c6a <HAL_DMA_Abort_IT+0x9e>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a1f      	ldr	r2, [pc, #124]	; (8001ca8 <HAL_DMA_Abort_IT+0xdc>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d01a      	beq.n	8001c64 <HAL_DMA_Abort_IT+0x98>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a1e      	ldr	r2, [pc, #120]	; (8001cac <HAL_DMA_Abort_IT+0xe0>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d012      	beq.n	8001c5e <HAL_DMA_Abort_IT+0x92>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a1c      	ldr	r2, [pc, #112]	; (8001cb0 <HAL_DMA_Abort_IT+0xe4>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d00a      	beq.n	8001c58 <HAL_DMA_Abort_IT+0x8c>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a1b      	ldr	r2, [pc, #108]	; (8001cb4 <HAL_DMA_Abort_IT+0xe8>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d102      	bne.n	8001c52 <HAL_DMA_Abort_IT+0x86>
 8001c4c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c50:	e00e      	b.n	8001c70 <HAL_DMA_Abort_IT+0xa4>
 8001c52:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c56:	e00b      	b.n	8001c70 <HAL_DMA_Abort_IT+0xa4>
 8001c58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c5c:	e008      	b.n	8001c70 <HAL_DMA_Abort_IT+0xa4>
 8001c5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c62:	e005      	b.n	8001c70 <HAL_DMA_Abort_IT+0xa4>
 8001c64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c68:	e002      	b.n	8001c70 <HAL_DMA_Abort_IT+0xa4>
 8001c6a:	2310      	movs	r3, #16
 8001c6c:	e000      	b.n	8001c70 <HAL_DMA_Abort_IT+0xa4>
 8001c6e:	2301      	movs	r3, #1
 8001c70:	4a11      	ldr	r2, [pc, #68]	; (8001cb8 <HAL_DMA_Abort_IT+0xec>)
 8001c72:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d003      	beq.n	8001c94 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	4798      	blx	r3
    } 
  }
  return status;
 8001c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40020008 	.word	0x40020008
 8001ca4:	4002001c 	.word	0x4002001c
 8001ca8:	40020030 	.word	0x40020030
 8001cac:	40020044 	.word	0x40020044
 8001cb0:	40020058 	.word	0x40020058
 8001cb4:	4002006c 	.word	0x4002006c
 8001cb8:	40020000 	.word	0x40020000

08001cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b08b      	sub	sp, #44	; 0x2c
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cce:	e169      	b.n	8001fa4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	69fa      	ldr	r2, [r7, #28]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	f040 8158 	bne.w	8001f9e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	4a9a      	ldr	r2, [pc, #616]	; (8001f5c <HAL_GPIO_Init+0x2a0>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d05e      	beq.n	8001db6 <HAL_GPIO_Init+0xfa>
 8001cf8:	4a98      	ldr	r2, [pc, #608]	; (8001f5c <HAL_GPIO_Init+0x2a0>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d875      	bhi.n	8001dea <HAL_GPIO_Init+0x12e>
 8001cfe:	4a98      	ldr	r2, [pc, #608]	; (8001f60 <HAL_GPIO_Init+0x2a4>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d058      	beq.n	8001db6 <HAL_GPIO_Init+0xfa>
 8001d04:	4a96      	ldr	r2, [pc, #600]	; (8001f60 <HAL_GPIO_Init+0x2a4>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d86f      	bhi.n	8001dea <HAL_GPIO_Init+0x12e>
 8001d0a:	4a96      	ldr	r2, [pc, #600]	; (8001f64 <HAL_GPIO_Init+0x2a8>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d052      	beq.n	8001db6 <HAL_GPIO_Init+0xfa>
 8001d10:	4a94      	ldr	r2, [pc, #592]	; (8001f64 <HAL_GPIO_Init+0x2a8>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d869      	bhi.n	8001dea <HAL_GPIO_Init+0x12e>
 8001d16:	4a94      	ldr	r2, [pc, #592]	; (8001f68 <HAL_GPIO_Init+0x2ac>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d04c      	beq.n	8001db6 <HAL_GPIO_Init+0xfa>
 8001d1c:	4a92      	ldr	r2, [pc, #584]	; (8001f68 <HAL_GPIO_Init+0x2ac>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d863      	bhi.n	8001dea <HAL_GPIO_Init+0x12e>
 8001d22:	4a92      	ldr	r2, [pc, #584]	; (8001f6c <HAL_GPIO_Init+0x2b0>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d046      	beq.n	8001db6 <HAL_GPIO_Init+0xfa>
 8001d28:	4a90      	ldr	r2, [pc, #576]	; (8001f6c <HAL_GPIO_Init+0x2b0>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d85d      	bhi.n	8001dea <HAL_GPIO_Init+0x12e>
 8001d2e:	2b12      	cmp	r3, #18
 8001d30:	d82a      	bhi.n	8001d88 <HAL_GPIO_Init+0xcc>
 8001d32:	2b12      	cmp	r3, #18
 8001d34:	d859      	bhi.n	8001dea <HAL_GPIO_Init+0x12e>
 8001d36:	a201      	add	r2, pc, #4	; (adr r2, 8001d3c <HAL_GPIO_Init+0x80>)
 8001d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d3c:	08001db7 	.word	0x08001db7
 8001d40:	08001d91 	.word	0x08001d91
 8001d44:	08001da3 	.word	0x08001da3
 8001d48:	08001de5 	.word	0x08001de5
 8001d4c:	08001deb 	.word	0x08001deb
 8001d50:	08001deb 	.word	0x08001deb
 8001d54:	08001deb 	.word	0x08001deb
 8001d58:	08001deb 	.word	0x08001deb
 8001d5c:	08001deb 	.word	0x08001deb
 8001d60:	08001deb 	.word	0x08001deb
 8001d64:	08001deb 	.word	0x08001deb
 8001d68:	08001deb 	.word	0x08001deb
 8001d6c:	08001deb 	.word	0x08001deb
 8001d70:	08001deb 	.word	0x08001deb
 8001d74:	08001deb 	.word	0x08001deb
 8001d78:	08001deb 	.word	0x08001deb
 8001d7c:	08001deb 	.word	0x08001deb
 8001d80:	08001d99 	.word	0x08001d99
 8001d84:	08001dad 	.word	0x08001dad
 8001d88:	4a79      	ldr	r2, [pc, #484]	; (8001f70 <HAL_GPIO_Init+0x2b4>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d013      	beq.n	8001db6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d8e:	e02c      	b.n	8001dea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	623b      	str	r3, [r7, #32]
          break;
 8001d96:	e029      	b.n	8001dec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	3304      	adds	r3, #4
 8001d9e:	623b      	str	r3, [r7, #32]
          break;
 8001da0:	e024      	b.n	8001dec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	3308      	adds	r3, #8
 8001da8:	623b      	str	r3, [r7, #32]
          break;
 8001daa:	e01f      	b.n	8001dec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	330c      	adds	r3, #12
 8001db2:	623b      	str	r3, [r7, #32]
          break;
 8001db4:	e01a      	b.n	8001dec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d102      	bne.n	8001dc4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001dbe:	2304      	movs	r3, #4
 8001dc0:	623b      	str	r3, [r7, #32]
          break;
 8001dc2:	e013      	b.n	8001dec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d105      	bne.n	8001dd8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dcc:	2308      	movs	r3, #8
 8001dce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	69fa      	ldr	r2, [r7, #28]
 8001dd4:	611a      	str	r2, [r3, #16]
          break;
 8001dd6:	e009      	b.n	8001dec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dd8:	2308      	movs	r3, #8
 8001dda:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	69fa      	ldr	r2, [r7, #28]
 8001de0:	615a      	str	r2, [r3, #20]
          break;
 8001de2:	e003      	b.n	8001dec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001de4:	2300      	movs	r3, #0
 8001de6:	623b      	str	r3, [r7, #32]
          break;
 8001de8:	e000      	b.n	8001dec <HAL_GPIO_Init+0x130>
          break;
 8001dea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	2bff      	cmp	r3, #255	; 0xff
 8001df0:	d801      	bhi.n	8001df6 <HAL_GPIO_Init+0x13a>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	e001      	b.n	8001dfa <HAL_GPIO_Init+0x13e>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	3304      	adds	r3, #4
 8001dfa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	2bff      	cmp	r3, #255	; 0xff
 8001e00:	d802      	bhi.n	8001e08 <HAL_GPIO_Init+0x14c>
 8001e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	e002      	b.n	8001e0e <HAL_GPIO_Init+0x152>
 8001e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0a:	3b08      	subs	r3, #8
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	210f      	movs	r1, #15
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	401a      	ands	r2, r3
 8001e20:	6a39      	ldr	r1, [r7, #32]
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	fa01 f303 	lsl.w	r3, r1, r3
 8001e28:	431a      	orrs	r2, r3
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f000 80b1 	beq.w	8001f9e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e3c:	4b4d      	ldr	r3, [pc, #308]	; (8001f74 <HAL_GPIO_Init+0x2b8>)
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	4a4c      	ldr	r2, [pc, #304]	; (8001f74 <HAL_GPIO_Init+0x2b8>)
 8001e42:	f043 0301 	orr.w	r3, r3, #1
 8001e46:	6193      	str	r3, [r2, #24]
 8001e48:	4b4a      	ldr	r3, [pc, #296]	; (8001f74 <HAL_GPIO_Init+0x2b8>)
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	60bb      	str	r3, [r7, #8]
 8001e52:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e54:	4a48      	ldr	r2, [pc, #288]	; (8001f78 <HAL_GPIO_Init+0x2bc>)
 8001e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e58:	089b      	lsrs	r3, r3, #2
 8001e5a:	3302      	adds	r3, #2
 8001e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e60:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e64:	f003 0303 	and.w	r3, r3, #3
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	220f      	movs	r2, #15
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	43db      	mvns	r3, r3
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	4013      	ands	r3, r2
 8001e76:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4a40      	ldr	r2, [pc, #256]	; (8001f7c <HAL_GPIO_Init+0x2c0>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d013      	beq.n	8001ea8 <HAL_GPIO_Init+0x1ec>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4a3f      	ldr	r2, [pc, #252]	; (8001f80 <HAL_GPIO_Init+0x2c4>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d00d      	beq.n	8001ea4 <HAL_GPIO_Init+0x1e8>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4a3e      	ldr	r2, [pc, #248]	; (8001f84 <HAL_GPIO_Init+0x2c8>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d007      	beq.n	8001ea0 <HAL_GPIO_Init+0x1e4>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4a3d      	ldr	r2, [pc, #244]	; (8001f88 <HAL_GPIO_Init+0x2cc>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d101      	bne.n	8001e9c <HAL_GPIO_Init+0x1e0>
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e006      	b.n	8001eaa <HAL_GPIO_Init+0x1ee>
 8001e9c:	2304      	movs	r3, #4
 8001e9e:	e004      	b.n	8001eaa <HAL_GPIO_Init+0x1ee>
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	e002      	b.n	8001eaa <HAL_GPIO_Init+0x1ee>
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e000      	b.n	8001eaa <HAL_GPIO_Init+0x1ee>
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eac:	f002 0203 	and.w	r2, r2, #3
 8001eb0:	0092      	lsls	r2, r2, #2
 8001eb2:	4093      	lsls	r3, r2
 8001eb4:	68fa      	ldr	r2, [r7, #12]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001eba:	492f      	ldr	r1, [pc, #188]	; (8001f78 <HAL_GPIO_Init+0x2bc>)
 8001ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebe:	089b      	lsrs	r3, r3, #2
 8001ec0:	3302      	adds	r3, #2
 8001ec2:	68fa      	ldr	r2, [r7, #12]
 8001ec4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d006      	beq.n	8001ee2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ed4:	4b2d      	ldr	r3, [pc, #180]	; (8001f8c <HAL_GPIO_Init+0x2d0>)
 8001ed6:	689a      	ldr	r2, [r3, #8]
 8001ed8:	492c      	ldr	r1, [pc, #176]	; (8001f8c <HAL_GPIO_Init+0x2d0>)
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	608b      	str	r3, [r1, #8]
 8001ee0:	e006      	b.n	8001ef0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ee2:	4b2a      	ldr	r3, [pc, #168]	; (8001f8c <HAL_GPIO_Init+0x2d0>)
 8001ee4:	689a      	ldr	r2, [r3, #8]
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	4928      	ldr	r1, [pc, #160]	; (8001f8c <HAL_GPIO_Init+0x2d0>)
 8001eec:	4013      	ands	r3, r2
 8001eee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d006      	beq.n	8001f0a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001efc:	4b23      	ldr	r3, [pc, #140]	; (8001f8c <HAL_GPIO_Init+0x2d0>)
 8001efe:	68da      	ldr	r2, [r3, #12]
 8001f00:	4922      	ldr	r1, [pc, #136]	; (8001f8c <HAL_GPIO_Init+0x2d0>)
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	60cb      	str	r3, [r1, #12]
 8001f08:	e006      	b.n	8001f18 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f0a:	4b20      	ldr	r3, [pc, #128]	; (8001f8c <HAL_GPIO_Init+0x2d0>)
 8001f0c:	68da      	ldr	r2, [r3, #12]
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	43db      	mvns	r3, r3
 8001f12:	491e      	ldr	r1, [pc, #120]	; (8001f8c <HAL_GPIO_Init+0x2d0>)
 8001f14:	4013      	ands	r3, r2
 8001f16:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d006      	beq.n	8001f32 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f24:	4b19      	ldr	r3, [pc, #100]	; (8001f8c <HAL_GPIO_Init+0x2d0>)
 8001f26:	685a      	ldr	r2, [r3, #4]
 8001f28:	4918      	ldr	r1, [pc, #96]	; (8001f8c <HAL_GPIO_Init+0x2d0>)
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	604b      	str	r3, [r1, #4]
 8001f30:	e006      	b.n	8001f40 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f32:	4b16      	ldr	r3, [pc, #88]	; (8001f8c <HAL_GPIO_Init+0x2d0>)
 8001f34:	685a      	ldr	r2, [r3, #4]
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	4914      	ldr	r1, [pc, #80]	; (8001f8c <HAL_GPIO_Init+0x2d0>)
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d021      	beq.n	8001f90 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f4c:	4b0f      	ldr	r3, [pc, #60]	; (8001f8c <HAL_GPIO_Init+0x2d0>)
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	490e      	ldr	r1, [pc, #56]	; (8001f8c <HAL_GPIO_Init+0x2d0>)
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	600b      	str	r3, [r1, #0]
 8001f58:	e021      	b.n	8001f9e <HAL_GPIO_Init+0x2e2>
 8001f5a:	bf00      	nop
 8001f5c:	10320000 	.word	0x10320000
 8001f60:	10310000 	.word	0x10310000
 8001f64:	10220000 	.word	0x10220000
 8001f68:	10210000 	.word	0x10210000
 8001f6c:	10120000 	.word	0x10120000
 8001f70:	10110000 	.word	0x10110000
 8001f74:	40021000 	.word	0x40021000
 8001f78:	40010000 	.word	0x40010000
 8001f7c:	40010800 	.word	0x40010800
 8001f80:	40010c00 	.word	0x40010c00
 8001f84:	40011000 	.word	0x40011000
 8001f88:	40011400 	.word	0x40011400
 8001f8c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f90:	4b0b      	ldr	r3, [pc, #44]	; (8001fc0 <HAL_GPIO_Init+0x304>)
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	43db      	mvns	r3, r3
 8001f98:	4909      	ldr	r1, [pc, #36]	; (8001fc0 <HAL_GPIO_Init+0x304>)
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001faa:	fa22 f303 	lsr.w	r3, r2, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f47f ae8e 	bne.w	8001cd0 <HAL_GPIO_Init+0x14>
  }
}
 8001fb4:	bf00      	nop
 8001fb6:	bf00      	nop
 8001fb8:	372c      	adds	r7, #44	; 0x2c
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bc80      	pop	{r7}
 8001fbe:	4770      	bx	lr
 8001fc0:	40010400 	.word	0x40010400

08001fc4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	460b      	mov	r3, r1
 8001fce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689a      	ldr	r2, [r3, #8]
 8001fd4:	887b      	ldrh	r3, [r7, #2]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d002      	beq.n	8001fe2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	73fb      	strb	r3, [r7, #15]
 8001fe0:	e001      	b.n	8001fe6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3714      	adds	r7, #20
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bc80      	pop	{r7}
 8001ff0:	4770      	bx	lr

08001ff2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	b083      	sub	sp, #12
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	807b      	strh	r3, [r7, #2]
 8001ffe:	4613      	mov	r3, r2
 8002000:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002002:	787b      	ldrb	r3, [r7, #1]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d003      	beq.n	8002010 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002008:	887a      	ldrh	r2, [r7, #2]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800200e:	e003      	b.n	8002018 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002010:	887b      	ldrh	r3, [r7, #2]
 8002012:	041a      	lsls	r2, r3, #16
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	611a      	str	r2, [r3, #16]
}
 8002018:	bf00      	nop
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	bc80      	pop	{r7}
 8002020:	4770      	bx	lr

08002022 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002022:	b480      	push	{r7}
 8002024:	b085      	sub	sp, #20
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
 800202a:	460b      	mov	r3, r1
 800202c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002034:	887a      	ldrh	r2, [r7, #2]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	4013      	ands	r3, r2
 800203a:	041a      	lsls	r2, r3, #16
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	43d9      	mvns	r1, r3
 8002040:	887b      	ldrh	r3, [r7, #2]
 8002042:	400b      	ands	r3, r1
 8002044:	431a      	orrs	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	611a      	str	r2, [r3, #16]
}
 800204a:	bf00      	nop
 800204c:	3714      	adds	r7, #20
 800204e:	46bd      	mov	sp, r7
 8002050:	bc80      	pop	{r7}
 8002052:	4770      	bx	lr

08002054 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e26c      	b.n	8002540 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b00      	cmp	r3, #0
 8002070:	f000 8087 	beq.w	8002182 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002074:	4b92      	ldr	r3, [pc, #584]	; (80022c0 <HAL_RCC_OscConfig+0x26c>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f003 030c 	and.w	r3, r3, #12
 800207c:	2b04      	cmp	r3, #4
 800207e:	d00c      	beq.n	800209a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002080:	4b8f      	ldr	r3, [pc, #572]	; (80022c0 <HAL_RCC_OscConfig+0x26c>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f003 030c 	and.w	r3, r3, #12
 8002088:	2b08      	cmp	r3, #8
 800208a:	d112      	bne.n	80020b2 <HAL_RCC_OscConfig+0x5e>
 800208c:	4b8c      	ldr	r3, [pc, #560]	; (80022c0 <HAL_RCC_OscConfig+0x26c>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002098:	d10b      	bne.n	80020b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800209a:	4b89      	ldr	r3, [pc, #548]	; (80022c0 <HAL_RCC_OscConfig+0x26c>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d06c      	beq.n	8002180 <HAL_RCC_OscConfig+0x12c>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d168      	bne.n	8002180 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e246      	b.n	8002540 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020ba:	d106      	bne.n	80020ca <HAL_RCC_OscConfig+0x76>
 80020bc:	4b80      	ldr	r3, [pc, #512]	; (80022c0 <HAL_RCC_OscConfig+0x26c>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a7f      	ldr	r2, [pc, #508]	; (80022c0 <HAL_RCC_OscConfig+0x26c>)
 80020c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020c6:	6013      	str	r3, [r2, #0]
 80020c8:	e02e      	b.n	8002128 <HAL_RCC_OscConfig+0xd4>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d10c      	bne.n	80020ec <HAL_RCC_OscConfig+0x98>
 80020d2:	4b7b      	ldr	r3, [pc, #492]	; (80022c0 <HAL_RCC_OscConfig+0x26c>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a7a      	ldr	r2, [pc, #488]	; (80022c0 <HAL_RCC_OscConfig+0x26c>)
 80020d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020dc:	6013      	str	r3, [r2, #0]
 80020de:	4b78      	ldr	r3, [pc, #480]	; (80022c0 <HAL_RCC_OscConfig+0x26c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a77      	ldr	r2, [pc, #476]	; (80022c0 <HAL_RCC_OscConfig+0x26c>)
 80020e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020e8:	6013      	str	r3, [r2, #0]
 80020ea:	e01d      	b.n	8002128 <HAL_RCC_OscConfig+0xd4>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020f4:	d10c      	bne.n	8002110 <HAL_RCC_OscConfig+0xbc>
 80020f6:	4b72      	ldr	r3, [pc, #456]	; (80022c0 <HAL_RCC_OscConfig+0x26c>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a71      	ldr	r2, [pc, #452]	; (80022c0 <HAL_RCC_OscConfig+0x26c>)
 80020fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002100:	6013      	str	r3, [r2, #0]
 8002102:	4b6f      	ldr	r3, [pc, #444]	; (80022c0 <HAL_RCC_OscConfig+0x26c>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a6e      	ldr	r2, [pc, #440]	; (80022c0 <HAL_RCC_OscConfig+0x26c>)
 8002108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800210c:	6013      	str	r3, [r2, #0]
 800210e:	e00b      	b.n	8002128 <HAL_RCC_OscConfig+0xd4>
 8002110:	4b6b      	ldr	r3, [pc, #428]	; (80022c0 <HAL_RCC_OscConfig+0x26c>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a6a      	ldr	r2, [pc, #424]	; (80022c0 <HAL_RCC_OscConfig+0x26c>)
 8002116:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800211a:	6013      	str	r3, [r2, #0]
 800211c:	4b68      	ldr	r3, [pc, #416]	; (80022c0 <HAL_RCC_OscConfig+0x26c>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a67      	ldr	r2, [pc, #412]	; (80022c0 <HAL_RCC_OscConfig+0x26c>)
 8002122:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002126:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d013      	beq.n	8002158 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002130:	f7ff fbfa 	bl	8001928 <HAL_GetTick>
 8002134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002136:	e008      	b.n	800214a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002138:	f7ff fbf6 	bl	8001928 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b64      	cmp	r3, #100	; 0x64
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e1fa      	b.n	8002540 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800214a:	4b5d      	ldr	r3, [pc, #372]	; (80022c0 <HAL_RCC_OscConfig+0x26c>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d0f0      	beq.n	8002138 <HAL_RCC_OscConfig+0xe4>
 8002156:	e014      	b.n	8002182 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002158:	f7ff fbe6 	bl	8001928 <HAL_GetTick>
 800215c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800215e:	e008      	b.n	8002172 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002160:	f7ff fbe2 	bl	8001928 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b64      	cmp	r3, #100	; 0x64
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e1e6      	b.n	8002540 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002172:	4b53      	ldr	r3, [pc, #332]	; (80022c0 <HAL_RCC_OscConfig+0x26c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d1f0      	bne.n	8002160 <HAL_RCC_OscConfig+0x10c>
 800217e:	e000      	b.n	8002182 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002180:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d063      	beq.n	8002256 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800218e:	4b4c      	ldr	r3, [pc, #304]	; (80022c0 <HAL_RCC_OscConfig+0x26c>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f003 030c 	and.w	r3, r3, #12
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00b      	beq.n	80021b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800219a:	4b49      	ldr	r3, [pc, #292]	; (80022c0 <HAL_RCC_OscConfig+0x26c>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f003 030c 	and.w	r3, r3, #12
 80021a2:	2b08      	cmp	r3, #8
 80021a4:	d11c      	bne.n	80021e0 <HAL_RCC_OscConfig+0x18c>
 80021a6:	4b46      	ldr	r3, [pc, #280]	; (80022c0 <HAL_RCC_OscConfig+0x26c>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d116      	bne.n	80021e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021b2:	4b43      	ldr	r3, [pc, #268]	; (80022c0 <HAL_RCC_OscConfig+0x26c>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d005      	beq.n	80021ca <HAL_RCC_OscConfig+0x176>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d001      	beq.n	80021ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e1ba      	b.n	8002540 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ca:	4b3d      	ldr	r3, [pc, #244]	; (80022c0 <HAL_RCC_OscConfig+0x26c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	4939      	ldr	r1, [pc, #228]	; (80022c0 <HAL_RCC_OscConfig+0x26c>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021de:	e03a      	b.n	8002256 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d020      	beq.n	800222a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021e8:	4b36      	ldr	r3, [pc, #216]	; (80022c4 <HAL_RCC_OscConfig+0x270>)
 80021ea:	2201      	movs	r2, #1
 80021ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ee:	f7ff fb9b 	bl	8001928 <HAL_GetTick>
 80021f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021f4:	e008      	b.n	8002208 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021f6:	f7ff fb97 	bl	8001928 <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	2b02      	cmp	r3, #2
 8002202:	d901      	bls.n	8002208 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e19b      	b.n	8002540 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002208:	4b2d      	ldr	r3, [pc, #180]	; (80022c0 <HAL_RCC_OscConfig+0x26c>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d0f0      	beq.n	80021f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002214:	4b2a      	ldr	r3, [pc, #168]	; (80022c0 <HAL_RCC_OscConfig+0x26c>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	695b      	ldr	r3, [r3, #20]
 8002220:	00db      	lsls	r3, r3, #3
 8002222:	4927      	ldr	r1, [pc, #156]	; (80022c0 <HAL_RCC_OscConfig+0x26c>)
 8002224:	4313      	orrs	r3, r2
 8002226:	600b      	str	r3, [r1, #0]
 8002228:	e015      	b.n	8002256 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800222a:	4b26      	ldr	r3, [pc, #152]	; (80022c4 <HAL_RCC_OscConfig+0x270>)
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002230:	f7ff fb7a 	bl	8001928 <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002238:	f7ff fb76 	bl	8001928 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b02      	cmp	r3, #2
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e17a      	b.n	8002540 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800224a:	4b1d      	ldr	r3, [pc, #116]	; (80022c0 <HAL_RCC_OscConfig+0x26c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1f0      	bne.n	8002238 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0308 	and.w	r3, r3, #8
 800225e:	2b00      	cmp	r3, #0
 8002260:	d03a      	beq.n	80022d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d019      	beq.n	800229e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800226a:	4b17      	ldr	r3, [pc, #92]	; (80022c8 <HAL_RCC_OscConfig+0x274>)
 800226c:	2201      	movs	r2, #1
 800226e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002270:	f7ff fb5a 	bl	8001928 <HAL_GetTick>
 8002274:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002278:	f7ff fb56 	bl	8001928 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e15a      	b.n	8002540 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800228a:	4b0d      	ldr	r3, [pc, #52]	; (80022c0 <HAL_RCC_OscConfig+0x26c>)
 800228c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d0f0      	beq.n	8002278 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002296:	2001      	movs	r0, #1
 8002298:	f000 facc 	bl	8002834 <RCC_Delay>
 800229c:	e01c      	b.n	80022d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800229e:	4b0a      	ldr	r3, [pc, #40]	; (80022c8 <HAL_RCC_OscConfig+0x274>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022a4:	f7ff fb40 	bl	8001928 <HAL_GetTick>
 80022a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022aa:	e00f      	b.n	80022cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022ac:	f7ff fb3c 	bl	8001928 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d908      	bls.n	80022cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e140      	b.n	8002540 <HAL_RCC_OscConfig+0x4ec>
 80022be:	bf00      	nop
 80022c0:	40021000 	.word	0x40021000
 80022c4:	42420000 	.word	0x42420000
 80022c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022cc:	4b9e      	ldr	r3, [pc, #632]	; (8002548 <HAL_RCC_OscConfig+0x4f4>)
 80022ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d0:	f003 0302 	and.w	r3, r3, #2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d1e9      	bne.n	80022ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0304 	and.w	r3, r3, #4
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f000 80a6 	beq.w	8002432 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022e6:	2300      	movs	r3, #0
 80022e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022ea:	4b97      	ldr	r3, [pc, #604]	; (8002548 <HAL_RCC_OscConfig+0x4f4>)
 80022ec:	69db      	ldr	r3, [r3, #28]
 80022ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d10d      	bne.n	8002312 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022f6:	4b94      	ldr	r3, [pc, #592]	; (8002548 <HAL_RCC_OscConfig+0x4f4>)
 80022f8:	69db      	ldr	r3, [r3, #28]
 80022fa:	4a93      	ldr	r2, [pc, #588]	; (8002548 <HAL_RCC_OscConfig+0x4f4>)
 80022fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002300:	61d3      	str	r3, [r2, #28]
 8002302:	4b91      	ldr	r3, [pc, #580]	; (8002548 <HAL_RCC_OscConfig+0x4f4>)
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800230a:	60bb      	str	r3, [r7, #8]
 800230c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800230e:	2301      	movs	r3, #1
 8002310:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002312:	4b8e      	ldr	r3, [pc, #568]	; (800254c <HAL_RCC_OscConfig+0x4f8>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800231a:	2b00      	cmp	r3, #0
 800231c:	d118      	bne.n	8002350 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800231e:	4b8b      	ldr	r3, [pc, #556]	; (800254c <HAL_RCC_OscConfig+0x4f8>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a8a      	ldr	r2, [pc, #552]	; (800254c <HAL_RCC_OscConfig+0x4f8>)
 8002324:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002328:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800232a:	f7ff fafd 	bl	8001928 <HAL_GetTick>
 800232e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002330:	e008      	b.n	8002344 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002332:	f7ff faf9 	bl	8001928 <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b64      	cmp	r3, #100	; 0x64
 800233e:	d901      	bls.n	8002344 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e0fd      	b.n	8002540 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002344:	4b81      	ldr	r3, [pc, #516]	; (800254c <HAL_RCC_OscConfig+0x4f8>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800234c:	2b00      	cmp	r3, #0
 800234e:	d0f0      	beq.n	8002332 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d106      	bne.n	8002366 <HAL_RCC_OscConfig+0x312>
 8002358:	4b7b      	ldr	r3, [pc, #492]	; (8002548 <HAL_RCC_OscConfig+0x4f4>)
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	4a7a      	ldr	r2, [pc, #488]	; (8002548 <HAL_RCC_OscConfig+0x4f4>)
 800235e:	f043 0301 	orr.w	r3, r3, #1
 8002362:	6213      	str	r3, [r2, #32]
 8002364:	e02d      	b.n	80023c2 <HAL_RCC_OscConfig+0x36e>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d10c      	bne.n	8002388 <HAL_RCC_OscConfig+0x334>
 800236e:	4b76      	ldr	r3, [pc, #472]	; (8002548 <HAL_RCC_OscConfig+0x4f4>)
 8002370:	6a1b      	ldr	r3, [r3, #32]
 8002372:	4a75      	ldr	r2, [pc, #468]	; (8002548 <HAL_RCC_OscConfig+0x4f4>)
 8002374:	f023 0301 	bic.w	r3, r3, #1
 8002378:	6213      	str	r3, [r2, #32]
 800237a:	4b73      	ldr	r3, [pc, #460]	; (8002548 <HAL_RCC_OscConfig+0x4f4>)
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	4a72      	ldr	r2, [pc, #456]	; (8002548 <HAL_RCC_OscConfig+0x4f4>)
 8002380:	f023 0304 	bic.w	r3, r3, #4
 8002384:	6213      	str	r3, [r2, #32]
 8002386:	e01c      	b.n	80023c2 <HAL_RCC_OscConfig+0x36e>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	2b05      	cmp	r3, #5
 800238e:	d10c      	bne.n	80023aa <HAL_RCC_OscConfig+0x356>
 8002390:	4b6d      	ldr	r3, [pc, #436]	; (8002548 <HAL_RCC_OscConfig+0x4f4>)
 8002392:	6a1b      	ldr	r3, [r3, #32]
 8002394:	4a6c      	ldr	r2, [pc, #432]	; (8002548 <HAL_RCC_OscConfig+0x4f4>)
 8002396:	f043 0304 	orr.w	r3, r3, #4
 800239a:	6213      	str	r3, [r2, #32]
 800239c:	4b6a      	ldr	r3, [pc, #424]	; (8002548 <HAL_RCC_OscConfig+0x4f4>)
 800239e:	6a1b      	ldr	r3, [r3, #32]
 80023a0:	4a69      	ldr	r2, [pc, #420]	; (8002548 <HAL_RCC_OscConfig+0x4f4>)
 80023a2:	f043 0301 	orr.w	r3, r3, #1
 80023a6:	6213      	str	r3, [r2, #32]
 80023a8:	e00b      	b.n	80023c2 <HAL_RCC_OscConfig+0x36e>
 80023aa:	4b67      	ldr	r3, [pc, #412]	; (8002548 <HAL_RCC_OscConfig+0x4f4>)
 80023ac:	6a1b      	ldr	r3, [r3, #32]
 80023ae:	4a66      	ldr	r2, [pc, #408]	; (8002548 <HAL_RCC_OscConfig+0x4f4>)
 80023b0:	f023 0301 	bic.w	r3, r3, #1
 80023b4:	6213      	str	r3, [r2, #32]
 80023b6:	4b64      	ldr	r3, [pc, #400]	; (8002548 <HAL_RCC_OscConfig+0x4f4>)
 80023b8:	6a1b      	ldr	r3, [r3, #32]
 80023ba:	4a63      	ldr	r2, [pc, #396]	; (8002548 <HAL_RCC_OscConfig+0x4f4>)
 80023bc:	f023 0304 	bic.w	r3, r3, #4
 80023c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d015      	beq.n	80023f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ca:	f7ff faad 	bl	8001928 <HAL_GetTick>
 80023ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d0:	e00a      	b.n	80023e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023d2:	f7ff faa9 	bl	8001928 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e0ab      	b.n	8002540 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023e8:	4b57      	ldr	r3, [pc, #348]	; (8002548 <HAL_RCC_OscConfig+0x4f4>)
 80023ea:	6a1b      	ldr	r3, [r3, #32]
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d0ee      	beq.n	80023d2 <HAL_RCC_OscConfig+0x37e>
 80023f4:	e014      	b.n	8002420 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023f6:	f7ff fa97 	bl	8001928 <HAL_GetTick>
 80023fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023fc:	e00a      	b.n	8002414 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023fe:	f7ff fa93 	bl	8001928 <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	f241 3288 	movw	r2, #5000	; 0x1388
 800240c:	4293      	cmp	r3, r2
 800240e:	d901      	bls.n	8002414 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e095      	b.n	8002540 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002414:	4b4c      	ldr	r3, [pc, #304]	; (8002548 <HAL_RCC_OscConfig+0x4f4>)
 8002416:	6a1b      	ldr	r3, [r3, #32]
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d1ee      	bne.n	80023fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002420:	7dfb      	ldrb	r3, [r7, #23]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d105      	bne.n	8002432 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002426:	4b48      	ldr	r3, [pc, #288]	; (8002548 <HAL_RCC_OscConfig+0x4f4>)
 8002428:	69db      	ldr	r3, [r3, #28]
 800242a:	4a47      	ldr	r2, [pc, #284]	; (8002548 <HAL_RCC_OscConfig+0x4f4>)
 800242c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002430:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	2b00      	cmp	r3, #0
 8002438:	f000 8081 	beq.w	800253e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800243c:	4b42      	ldr	r3, [pc, #264]	; (8002548 <HAL_RCC_OscConfig+0x4f4>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f003 030c 	and.w	r3, r3, #12
 8002444:	2b08      	cmp	r3, #8
 8002446:	d061      	beq.n	800250c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	69db      	ldr	r3, [r3, #28]
 800244c:	2b02      	cmp	r3, #2
 800244e:	d146      	bne.n	80024de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002450:	4b3f      	ldr	r3, [pc, #252]	; (8002550 <HAL_RCC_OscConfig+0x4fc>)
 8002452:	2200      	movs	r2, #0
 8002454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002456:	f7ff fa67 	bl	8001928 <HAL_GetTick>
 800245a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800245c:	e008      	b.n	8002470 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800245e:	f7ff fa63 	bl	8001928 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	2b02      	cmp	r3, #2
 800246a:	d901      	bls.n	8002470 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e067      	b.n	8002540 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002470:	4b35      	ldr	r3, [pc, #212]	; (8002548 <HAL_RCC_OscConfig+0x4f4>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1f0      	bne.n	800245e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a1b      	ldr	r3, [r3, #32]
 8002480:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002484:	d108      	bne.n	8002498 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002486:	4b30      	ldr	r3, [pc, #192]	; (8002548 <HAL_RCC_OscConfig+0x4f4>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	492d      	ldr	r1, [pc, #180]	; (8002548 <HAL_RCC_OscConfig+0x4f4>)
 8002494:	4313      	orrs	r3, r2
 8002496:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002498:	4b2b      	ldr	r3, [pc, #172]	; (8002548 <HAL_RCC_OscConfig+0x4f4>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a19      	ldr	r1, [r3, #32]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a8:	430b      	orrs	r3, r1
 80024aa:	4927      	ldr	r1, [pc, #156]	; (8002548 <HAL_RCC_OscConfig+0x4f4>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024b0:	4b27      	ldr	r3, [pc, #156]	; (8002550 <HAL_RCC_OscConfig+0x4fc>)
 80024b2:	2201      	movs	r2, #1
 80024b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b6:	f7ff fa37 	bl	8001928 <HAL_GetTick>
 80024ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024bc:	e008      	b.n	80024d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024be:	f7ff fa33 	bl	8001928 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d901      	bls.n	80024d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e037      	b.n	8002540 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024d0:	4b1d      	ldr	r3, [pc, #116]	; (8002548 <HAL_RCC_OscConfig+0x4f4>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d0f0      	beq.n	80024be <HAL_RCC_OscConfig+0x46a>
 80024dc:	e02f      	b.n	800253e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024de:	4b1c      	ldr	r3, [pc, #112]	; (8002550 <HAL_RCC_OscConfig+0x4fc>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e4:	f7ff fa20 	bl	8001928 <HAL_GetTick>
 80024e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024ea:	e008      	b.n	80024fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ec:	f7ff fa1c 	bl	8001928 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e020      	b.n	8002540 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024fe:	4b12      	ldr	r3, [pc, #72]	; (8002548 <HAL_RCC_OscConfig+0x4f4>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d1f0      	bne.n	80024ec <HAL_RCC_OscConfig+0x498>
 800250a:	e018      	b.n	800253e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	69db      	ldr	r3, [r3, #28]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d101      	bne.n	8002518 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e013      	b.n	8002540 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002518:	4b0b      	ldr	r3, [pc, #44]	; (8002548 <HAL_RCC_OscConfig+0x4f4>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a1b      	ldr	r3, [r3, #32]
 8002528:	429a      	cmp	r2, r3
 800252a:	d106      	bne.n	800253a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002536:	429a      	cmp	r2, r3
 8002538:	d001      	beq.n	800253e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e000      	b.n	8002540 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	3718      	adds	r7, #24
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	40021000 	.word	0x40021000
 800254c:	40007000 	.word	0x40007000
 8002550:	42420060 	.word	0x42420060

08002554 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d101      	bne.n	8002568 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e0d0      	b.n	800270a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002568:	4b6a      	ldr	r3, [pc, #424]	; (8002714 <HAL_RCC_ClockConfig+0x1c0>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0307 	and.w	r3, r3, #7
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	429a      	cmp	r2, r3
 8002574:	d910      	bls.n	8002598 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002576:	4b67      	ldr	r3, [pc, #412]	; (8002714 <HAL_RCC_ClockConfig+0x1c0>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f023 0207 	bic.w	r2, r3, #7
 800257e:	4965      	ldr	r1, [pc, #404]	; (8002714 <HAL_RCC_ClockConfig+0x1c0>)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	4313      	orrs	r3, r2
 8002584:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002586:	4b63      	ldr	r3, [pc, #396]	; (8002714 <HAL_RCC_ClockConfig+0x1c0>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	683a      	ldr	r2, [r7, #0]
 8002590:	429a      	cmp	r2, r3
 8002592:	d001      	beq.n	8002598 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e0b8      	b.n	800270a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d020      	beq.n	80025e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0304 	and.w	r3, r3, #4
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d005      	beq.n	80025bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025b0:	4b59      	ldr	r3, [pc, #356]	; (8002718 <HAL_RCC_ClockConfig+0x1c4>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	4a58      	ldr	r2, [pc, #352]	; (8002718 <HAL_RCC_ClockConfig+0x1c4>)
 80025b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0308 	and.w	r3, r3, #8
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d005      	beq.n	80025d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025c8:	4b53      	ldr	r3, [pc, #332]	; (8002718 <HAL_RCC_ClockConfig+0x1c4>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	4a52      	ldr	r2, [pc, #328]	; (8002718 <HAL_RCC_ClockConfig+0x1c4>)
 80025ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80025d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025d4:	4b50      	ldr	r3, [pc, #320]	; (8002718 <HAL_RCC_ClockConfig+0x1c4>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	494d      	ldr	r1, [pc, #308]	; (8002718 <HAL_RCC_ClockConfig+0x1c4>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d040      	beq.n	8002674 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d107      	bne.n	800260a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025fa:	4b47      	ldr	r3, [pc, #284]	; (8002718 <HAL_RCC_ClockConfig+0x1c4>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d115      	bne.n	8002632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e07f      	b.n	800270a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	2b02      	cmp	r3, #2
 8002610:	d107      	bne.n	8002622 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002612:	4b41      	ldr	r3, [pc, #260]	; (8002718 <HAL_RCC_ClockConfig+0x1c4>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d109      	bne.n	8002632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e073      	b.n	800270a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002622:	4b3d      	ldr	r3, [pc, #244]	; (8002718 <HAL_RCC_ClockConfig+0x1c4>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e06b      	b.n	800270a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002632:	4b39      	ldr	r3, [pc, #228]	; (8002718 <HAL_RCC_ClockConfig+0x1c4>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f023 0203 	bic.w	r2, r3, #3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	4936      	ldr	r1, [pc, #216]	; (8002718 <HAL_RCC_ClockConfig+0x1c4>)
 8002640:	4313      	orrs	r3, r2
 8002642:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002644:	f7ff f970 	bl	8001928 <HAL_GetTick>
 8002648:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800264a:	e00a      	b.n	8002662 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800264c:	f7ff f96c 	bl	8001928 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	f241 3288 	movw	r2, #5000	; 0x1388
 800265a:	4293      	cmp	r3, r2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e053      	b.n	800270a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002662:	4b2d      	ldr	r3, [pc, #180]	; (8002718 <HAL_RCC_ClockConfig+0x1c4>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f003 020c 	and.w	r2, r3, #12
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	429a      	cmp	r2, r3
 8002672:	d1eb      	bne.n	800264c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002674:	4b27      	ldr	r3, [pc, #156]	; (8002714 <HAL_RCC_ClockConfig+0x1c0>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0307 	and.w	r3, r3, #7
 800267c:	683a      	ldr	r2, [r7, #0]
 800267e:	429a      	cmp	r2, r3
 8002680:	d210      	bcs.n	80026a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002682:	4b24      	ldr	r3, [pc, #144]	; (8002714 <HAL_RCC_ClockConfig+0x1c0>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f023 0207 	bic.w	r2, r3, #7
 800268a:	4922      	ldr	r1, [pc, #136]	; (8002714 <HAL_RCC_ClockConfig+0x1c0>)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	4313      	orrs	r3, r2
 8002690:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002692:	4b20      	ldr	r3, [pc, #128]	; (8002714 <HAL_RCC_ClockConfig+0x1c0>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0307 	and.w	r3, r3, #7
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	429a      	cmp	r2, r3
 800269e:	d001      	beq.n	80026a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e032      	b.n	800270a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0304 	and.w	r3, r3, #4
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d008      	beq.n	80026c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026b0:	4b19      	ldr	r3, [pc, #100]	; (8002718 <HAL_RCC_ClockConfig+0x1c4>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	4916      	ldr	r1, [pc, #88]	; (8002718 <HAL_RCC_ClockConfig+0x1c4>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0308 	and.w	r3, r3, #8
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d009      	beq.n	80026e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026ce:	4b12      	ldr	r3, [pc, #72]	; (8002718 <HAL_RCC_ClockConfig+0x1c4>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	490e      	ldr	r1, [pc, #56]	; (8002718 <HAL_RCC_ClockConfig+0x1c4>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026e2:	f000 f821 	bl	8002728 <HAL_RCC_GetSysClockFreq>
 80026e6:	4602      	mov	r2, r0
 80026e8:	4b0b      	ldr	r3, [pc, #44]	; (8002718 <HAL_RCC_ClockConfig+0x1c4>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	091b      	lsrs	r3, r3, #4
 80026ee:	f003 030f 	and.w	r3, r3, #15
 80026f2:	490a      	ldr	r1, [pc, #40]	; (800271c <HAL_RCC_ClockConfig+0x1c8>)
 80026f4:	5ccb      	ldrb	r3, [r1, r3]
 80026f6:	fa22 f303 	lsr.w	r3, r2, r3
 80026fa:	4a09      	ldr	r2, [pc, #36]	; (8002720 <HAL_RCC_ClockConfig+0x1cc>)
 80026fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026fe:	4b09      	ldr	r3, [pc, #36]	; (8002724 <HAL_RCC_ClockConfig+0x1d0>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff f8ce 	bl	80018a4 <HAL_InitTick>

  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	40022000 	.word	0x40022000
 8002718:	40021000 	.word	0x40021000
 800271c:	08004cb8 	.word	0x08004cb8
 8002720:	20000034 	.word	0x20000034
 8002724:	20000038 	.word	0x20000038

08002728 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002728:	b480      	push	{r7}
 800272a:	b087      	sub	sp, #28
 800272c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800272e:	2300      	movs	r3, #0
 8002730:	60fb      	str	r3, [r7, #12]
 8002732:	2300      	movs	r3, #0
 8002734:	60bb      	str	r3, [r7, #8]
 8002736:	2300      	movs	r3, #0
 8002738:	617b      	str	r3, [r7, #20]
 800273a:	2300      	movs	r3, #0
 800273c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800273e:	2300      	movs	r3, #0
 8002740:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002742:	4b1e      	ldr	r3, [pc, #120]	; (80027bc <HAL_RCC_GetSysClockFreq+0x94>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f003 030c 	and.w	r3, r3, #12
 800274e:	2b04      	cmp	r3, #4
 8002750:	d002      	beq.n	8002758 <HAL_RCC_GetSysClockFreq+0x30>
 8002752:	2b08      	cmp	r3, #8
 8002754:	d003      	beq.n	800275e <HAL_RCC_GetSysClockFreq+0x36>
 8002756:	e027      	b.n	80027a8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002758:	4b19      	ldr	r3, [pc, #100]	; (80027c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800275a:	613b      	str	r3, [r7, #16]
      break;
 800275c:	e027      	b.n	80027ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	0c9b      	lsrs	r3, r3, #18
 8002762:	f003 030f 	and.w	r3, r3, #15
 8002766:	4a17      	ldr	r2, [pc, #92]	; (80027c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002768:	5cd3      	ldrb	r3, [r2, r3]
 800276a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d010      	beq.n	8002798 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002776:	4b11      	ldr	r3, [pc, #68]	; (80027bc <HAL_RCC_GetSysClockFreq+0x94>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	0c5b      	lsrs	r3, r3, #17
 800277c:	f003 0301 	and.w	r3, r3, #1
 8002780:	4a11      	ldr	r2, [pc, #68]	; (80027c8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002782:	5cd3      	ldrb	r3, [r2, r3]
 8002784:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a0d      	ldr	r2, [pc, #52]	; (80027c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800278a:	fb02 f203 	mul.w	r2, r2, r3
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	fbb2 f3f3 	udiv	r3, r2, r3
 8002794:	617b      	str	r3, [r7, #20]
 8002796:	e004      	b.n	80027a2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4a0c      	ldr	r2, [pc, #48]	; (80027cc <HAL_RCC_GetSysClockFreq+0xa4>)
 800279c:	fb02 f303 	mul.w	r3, r2, r3
 80027a0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	613b      	str	r3, [r7, #16]
      break;
 80027a6:	e002      	b.n	80027ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027a8:	4b05      	ldr	r3, [pc, #20]	; (80027c0 <HAL_RCC_GetSysClockFreq+0x98>)
 80027aa:	613b      	str	r3, [r7, #16]
      break;
 80027ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027ae:	693b      	ldr	r3, [r7, #16]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	371c      	adds	r7, #28
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bc80      	pop	{r7}
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	40021000 	.word	0x40021000
 80027c0:	007a1200 	.word	0x007a1200
 80027c4:	08004cd0 	.word	0x08004cd0
 80027c8:	08004ce0 	.word	0x08004ce0
 80027cc:	003d0900 	.word	0x003d0900

080027d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027d4:	4b02      	ldr	r3, [pc, #8]	; (80027e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80027d6:	681b      	ldr	r3, [r3, #0]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr
 80027e0:	20000034 	.word	0x20000034

080027e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027e8:	f7ff fff2 	bl	80027d0 <HAL_RCC_GetHCLKFreq>
 80027ec:	4602      	mov	r2, r0
 80027ee:	4b05      	ldr	r3, [pc, #20]	; (8002804 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	0a1b      	lsrs	r3, r3, #8
 80027f4:	f003 0307 	and.w	r3, r3, #7
 80027f8:	4903      	ldr	r1, [pc, #12]	; (8002808 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027fa:	5ccb      	ldrb	r3, [r1, r3]
 80027fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002800:	4618      	mov	r0, r3
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40021000 	.word	0x40021000
 8002808:	08004cc8 	.word	0x08004cc8

0800280c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002810:	f7ff ffde 	bl	80027d0 <HAL_RCC_GetHCLKFreq>
 8002814:	4602      	mov	r2, r0
 8002816:	4b05      	ldr	r3, [pc, #20]	; (800282c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	0adb      	lsrs	r3, r3, #11
 800281c:	f003 0307 	and.w	r3, r3, #7
 8002820:	4903      	ldr	r1, [pc, #12]	; (8002830 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002822:	5ccb      	ldrb	r3, [r1, r3]
 8002824:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002828:	4618      	mov	r0, r3
 800282a:	bd80      	pop	{r7, pc}
 800282c:	40021000 	.word	0x40021000
 8002830:	08004cc8 	.word	0x08004cc8

08002834 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800283c:	4b0a      	ldr	r3, [pc, #40]	; (8002868 <RCC_Delay+0x34>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a0a      	ldr	r2, [pc, #40]	; (800286c <RCC_Delay+0x38>)
 8002842:	fba2 2303 	umull	r2, r3, r2, r3
 8002846:	0a5b      	lsrs	r3, r3, #9
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	fb02 f303 	mul.w	r3, r2, r3
 800284e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002850:	bf00      	nop
  }
  while (Delay --);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	1e5a      	subs	r2, r3, #1
 8002856:	60fa      	str	r2, [r7, #12]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d1f9      	bne.n	8002850 <RCC_Delay+0x1c>
}
 800285c:	bf00      	nop
 800285e:	bf00      	nop
 8002860:	3714      	adds	r7, #20
 8002862:	46bd      	mov	sp, r7
 8002864:	bc80      	pop	{r7}
 8002866:	4770      	bx	lr
 8002868:	20000034 	.word	0x20000034
 800286c:	10624dd3 	.word	0x10624dd3

08002870 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d101      	bne.n	8002882 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e041      	b.n	8002906 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d106      	bne.n	800289c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f7fe fe82 	bl	80015a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2202      	movs	r2, #2
 80028a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	3304      	adds	r3, #4
 80028ac:	4619      	mov	r1, r3
 80028ae:	4610      	mov	r0, r2
 80028b0:	f000 fc30 	bl	8003114 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
	...

08002910 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2b01      	cmp	r3, #1
 8002922:	d001      	beq.n	8002928 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e03a      	b.n	800299e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2202      	movs	r2, #2
 800292c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68da      	ldr	r2, [r3, #12]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f042 0201 	orr.w	r2, r2, #1
 800293e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a18      	ldr	r2, [pc, #96]	; (80029a8 <HAL_TIM_Base_Start_IT+0x98>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d00e      	beq.n	8002968 <HAL_TIM_Base_Start_IT+0x58>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002952:	d009      	beq.n	8002968 <HAL_TIM_Base_Start_IT+0x58>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a14      	ldr	r2, [pc, #80]	; (80029ac <HAL_TIM_Base_Start_IT+0x9c>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d004      	beq.n	8002968 <HAL_TIM_Base_Start_IT+0x58>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a13      	ldr	r2, [pc, #76]	; (80029b0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d111      	bne.n	800298c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2b06      	cmp	r3, #6
 8002978:	d010      	beq.n	800299c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f042 0201 	orr.w	r2, r2, #1
 8002988:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800298a:	e007      	b.n	800299c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f042 0201 	orr.w	r2, r2, #1
 800299a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3714      	adds	r7, #20
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bc80      	pop	{r7}
 80029a6:	4770      	bx	lr
 80029a8:	40012c00 	.word	0x40012c00
 80029ac:	40000400 	.word	0x40000400
 80029b0:	40000800 	.word	0x40000800

080029b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e041      	b.n	8002a4a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d106      	bne.n	80029e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f000 f839 	bl	8002a52 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2202      	movs	r2, #2
 80029e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3304      	adds	r3, #4
 80029f0:	4619      	mov	r1, r3
 80029f2:	4610      	mov	r0, r2
 80029f4:	f000 fb8e 	bl	8003114 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a52:	b480      	push	{r7}
 8002a54:	b083      	sub	sp, #12
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a5a:	bf00      	nop
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bc80      	pop	{r7}
 8002a62:	4770      	bx	lr

08002a64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d109      	bne.n	8002a88 <HAL_TIM_PWM_Start+0x24>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	bf14      	ite	ne
 8002a80:	2301      	movne	r3, #1
 8002a82:	2300      	moveq	r3, #0
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	e022      	b.n	8002ace <HAL_TIM_PWM_Start+0x6a>
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	2b04      	cmp	r3, #4
 8002a8c:	d109      	bne.n	8002aa2 <HAL_TIM_PWM_Start+0x3e>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	bf14      	ite	ne
 8002a9a:	2301      	movne	r3, #1
 8002a9c:	2300      	moveq	r3, #0
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	e015      	b.n	8002ace <HAL_TIM_PWM_Start+0x6a>
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	2b08      	cmp	r3, #8
 8002aa6:	d109      	bne.n	8002abc <HAL_TIM_PWM_Start+0x58>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	bf14      	ite	ne
 8002ab4:	2301      	movne	r3, #1
 8002ab6:	2300      	moveq	r3, #0
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	e008      	b.n	8002ace <HAL_TIM_PWM_Start+0x6a>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	bf14      	ite	ne
 8002ac8:	2301      	movne	r3, #1
 8002aca:	2300      	moveq	r3, #0
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e05e      	b.n	8002b94 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d104      	bne.n	8002ae6 <HAL_TIM_PWM_Start+0x82>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2202      	movs	r2, #2
 8002ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ae4:	e013      	b.n	8002b0e <HAL_TIM_PWM_Start+0xaa>
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	2b04      	cmp	r3, #4
 8002aea:	d104      	bne.n	8002af6 <HAL_TIM_PWM_Start+0x92>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2202      	movs	r2, #2
 8002af0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002af4:	e00b      	b.n	8002b0e <HAL_TIM_PWM_Start+0xaa>
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	2b08      	cmp	r3, #8
 8002afa:	d104      	bne.n	8002b06 <HAL_TIM_PWM_Start+0xa2>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2202      	movs	r2, #2
 8002b00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b04:	e003      	b.n	8002b0e <HAL_TIM_PWM_Start+0xaa>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2202      	movs	r2, #2
 8002b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2201      	movs	r2, #1
 8002b14:	6839      	ldr	r1, [r7, #0]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f000 fd7c 	bl	8003614 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a1e      	ldr	r2, [pc, #120]	; (8002b9c <HAL_TIM_PWM_Start+0x138>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d107      	bne.n	8002b36 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b34:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a18      	ldr	r2, [pc, #96]	; (8002b9c <HAL_TIM_PWM_Start+0x138>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d00e      	beq.n	8002b5e <HAL_TIM_PWM_Start+0xfa>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b48:	d009      	beq.n	8002b5e <HAL_TIM_PWM_Start+0xfa>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a14      	ldr	r2, [pc, #80]	; (8002ba0 <HAL_TIM_PWM_Start+0x13c>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d004      	beq.n	8002b5e <HAL_TIM_PWM_Start+0xfa>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a12      	ldr	r2, [pc, #72]	; (8002ba4 <HAL_TIM_PWM_Start+0x140>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d111      	bne.n	8002b82 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f003 0307 	and.w	r3, r3, #7
 8002b68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2b06      	cmp	r3, #6
 8002b6e:	d010      	beq.n	8002b92 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f042 0201 	orr.w	r2, r2, #1
 8002b7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b80:	e007      	b.n	8002b92 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f042 0201 	orr.w	r2, r2, #1
 8002b90:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3710      	adds	r7, #16
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40012c00 	.word	0x40012c00
 8002ba0:	40000400 	.word	0x40000400
 8002ba4:	40000800 	.word	0x40000800

08002ba8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d122      	bne.n	8002c04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d11b      	bne.n	8002c04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f06f 0202 	mvn.w	r2, #2
 8002bd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	f003 0303 	and.w	r3, r3, #3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d003      	beq.n	8002bf2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 fa76 	bl	80030dc <HAL_TIM_IC_CaptureCallback>
 8002bf0:	e005      	b.n	8002bfe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 fa69 	bl	80030ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 fa78 	bl	80030ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	f003 0304 	and.w	r3, r3, #4
 8002c0e:	2b04      	cmp	r3, #4
 8002c10:	d122      	bne.n	8002c58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	f003 0304 	and.w	r3, r3, #4
 8002c1c:	2b04      	cmp	r3, #4
 8002c1e:	d11b      	bne.n	8002c58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f06f 0204 	mvn.w	r2, #4
 8002c28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2202      	movs	r2, #2
 8002c2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d003      	beq.n	8002c46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 fa4c 	bl	80030dc <HAL_TIM_IC_CaptureCallback>
 8002c44:	e005      	b.n	8002c52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 fa3f 	bl	80030ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f000 fa4e 	bl	80030ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	f003 0308 	and.w	r3, r3, #8
 8002c62:	2b08      	cmp	r3, #8
 8002c64:	d122      	bne.n	8002cac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	f003 0308 	and.w	r3, r3, #8
 8002c70:	2b08      	cmp	r3, #8
 8002c72:	d11b      	bne.n	8002cac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f06f 0208 	mvn.w	r2, #8
 8002c7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2204      	movs	r2, #4
 8002c82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	f003 0303 	and.w	r3, r3, #3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d003      	beq.n	8002c9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 fa22 	bl	80030dc <HAL_TIM_IC_CaptureCallback>
 8002c98:	e005      	b.n	8002ca6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 fa15 	bl	80030ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f000 fa24 	bl	80030ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	f003 0310 	and.w	r3, r3, #16
 8002cb6:	2b10      	cmp	r3, #16
 8002cb8:	d122      	bne.n	8002d00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	f003 0310 	and.w	r3, r3, #16
 8002cc4:	2b10      	cmp	r3, #16
 8002cc6:	d11b      	bne.n	8002d00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f06f 0210 	mvn.w	r2, #16
 8002cd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2208      	movs	r2, #8
 8002cd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 f9f8 	bl	80030dc <HAL_TIM_IC_CaptureCallback>
 8002cec:	e005      	b.n	8002cfa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 f9eb 	bl	80030ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 f9fa 	bl	80030ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d10e      	bne.n	8002d2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d107      	bne.n	8002d2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f06f 0201 	mvn.w	r2, #1
 8002d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f7fe f8e4 	bl	8000ef4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d36:	2b80      	cmp	r3, #128	; 0x80
 8002d38:	d10e      	bne.n	8002d58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d44:	2b80      	cmp	r3, #128	; 0x80
 8002d46:	d107      	bne.n	8002d58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 fce9 	bl	800372a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d62:	2b40      	cmp	r3, #64	; 0x40
 8002d64:	d10e      	bne.n	8002d84 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d70:	2b40      	cmp	r3, #64	; 0x40
 8002d72:	d107      	bne.n	8002d84 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 f9be 	bl	8003100 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	f003 0320 	and.w	r3, r3, #32
 8002d8e:	2b20      	cmp	r3, #32
 8002d90:	d10e      	bne.n	8002db0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	f003 0320 	and.w	r3, r3, #32
 8002d9c:	2b20      	cmp	r3, #32
 8002d9e:	d107      	bne.n	8002db0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f06f 0220 	mvn.w	r2, #32
 8002da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 fcb4 	bl	8003718 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002db0:	bf00      	nop
 8002db2:	3708      	adds	r7, #8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d101      	bne.n	8002dd6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	e0ae      	b.n	8002f34 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2b0c      	cmp	r3, #12
 8002de2:	f200 809f 	bhi.w	8002f24 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002de6:	a201      	add	r2, pc, #4	; (adr r2, 8002dec <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dec:	08002e21 	.word	0x08002e21
 8002df0:	08002f25 	.word	0x08002f25
 8002df4:	08002f25 	.word	0x08002f25
 8002df8:	08002f25 	.word	0x08002f25
 8002dfc:	08002e61 	.word	0x08002e61
 8002e00:	08002f25 	.word	0x08002f25
 8002e04:	08002f25 	.word	0x08002f25
 8002e08:	08002f25 	.word	0x08002f25
 8002e0c:	08002ea3 	.word	0x08002ea3
 8002e10:	08002f25 	.word	0x08002f25
 8002e14:	08002f25 	.word	0x08002f25
 8002e18:	08002f25 	.word	0x08002f25
 8002e1c:	08002ee3 	.word	0x08002ee3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	68b9      	ldr	r1, [r7, #8]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f000 f9d6 	bl	80031d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	699a      	ldr	r2, [r3, #24]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f042 0208 	orr.w	r2, r2, #8
 8002e3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	699a      	ldr	r2, [r3, #24]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f022 0204 	bic.w	r2, r2, #4
 8002e4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	6999      	ldr	r1, [r3, #24]
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	691a      	ldr	r2, [r3, #16]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	619a      	str	r2, [r3, #24]
      break;
 8002e5e:	e064      	b.n	8002f2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68b9      	ldr	r1, [r7, #8]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f000 fa1c 	bl	80032a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	699a      	ldr	r2, [r3, #24]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	699a      	ldr	r2, [r3, #24]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6999      	ldr	r1, [r3, #24]
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	021a      	lsls	r2, r3, #8
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	619a      	str	r2, [r3, #24]
      break;
 8002ea0:	e043      	b.n	8002f2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68b9      	ldr	r1, [r7, #8]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f000 fa65 	bl	8003378 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	69da      	ldr	r2, [r3, #28]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f042 0208 	orr.w	r2, r2, #8
 8002ebc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	69da      	ldr	r2, [r3, #28]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f022 0204 	bic.w	r2, r2, #4
 8002ecc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	69d9      	ldr	r1, [r3, #28]
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	691a      	ldr	r2, [r3, #16]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	430a      	orrs	r2, r1
 8002ede:	61da      	str	r2, [r3, #28]
      break;
 8002ee0:	e023      	b.n	8002f2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	68b9      	ldr	r1, [r7, #8]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f000 faaf 	bl	800344c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	69da      	ldr	r2, [r3, #28]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002efc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	69da      	ldr	r2, [r3, #28]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	69d9      	ldr	r1, [r3, #28]
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	021a      	lsls	r2, r3, #8
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	61da      	str	r2, [r3, #28]
      break;
 8002f22:	e002      	b.n	8002f2a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	75fb      	strb	r3, [r7, #23]
      break;
 8002f28:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f32:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3718      	adds	r7, #24
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f46:	2300      	movs	r3, #0
 8002f48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d101      	bne.n	8002f58 <HAL_TIM_ConfigClockSource+0x1c>
 8002f54:	2302      	movs	r3, #2
 8002f56:	e0b4      	b.n	80030c2 <HAL_TIM_ConfigClockSource+0x186>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2202      	movs	r2, #2
 8002f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68ba      	ldr	r2, [r7, #8]
 8002f86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f90:	d03e      	beq.n	8003010 <HAL_TIM_ConfigClockSource+0xd4>
 8002f92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f96:	f200 8087 	bhi.w	80030a8 <HAL_TIM_ConfigClockSource+0x16c>
 8002f9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f9e:	f000 8086 	beq.w	80030ae <HAL_TIM_ConfigClockSource+0x172>
 8002fa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fa6:	d87f      	bhi.n	80030a8 <HAL_TIM_ConfigClockSource+0x16c>
 8002fa8:	2b70      	cmp	r3, #112	; 0x70
 8002faa:	d01a      	beq.n	8002fe2 <HAL_TIM_ConfigClockSource+0xa6>
 8002fac:	2b70      	cmp	r3, #112	; 0x70
 8002fae:	d87b      	bhi.n	80030a8 <HAL_TIM_ConfigClockSource+0x16c>
 8002fb0:	2b60      	cmp	r3, #96	; 0x60
 8002fb2:	d050      	beq.n	8003056 <HAL_TIM_ConfigClockSource+0x11a>
 8002fb4:	2b60      	cmp	r3, #96	; 0x60
 8002fb6:	d877      	bhi.n	80030a8 <HAL_TIM_ConfigClockSource+0x16c>
 8002fb8:	2b50      	cmp	r3, #80	; 0x50
 8002fba:	d03c      	beq.n	8003036 <HAL_TIM_ConfigClockSource+0xfa>
 8002fbc:	2b50      	cmp	r3, #80	; 0x50
 8002fbe:	d873      	bhi.n	80030a8 <HAL_TIM_ConfigClockSource+0x16c>
 8002fc0:	2b40      	cmp	r3, #64	; 0x40
 8002fc2:	d058      	beq.n	8003076 <HAL_TIM_ConfigClockSource+0x13a>
 8002fc4:	2b40      	cmp	r3, #64	; 0x40
 8002fc6:	d86f      	bhi.n	80030a8 <HAL_TIM_ConfigClockSource+0x16c>
 8002fc8:	2b30      	cmp	r3, #48	; 0x30
 8002fca:	d064      	beq.n	8003096 <HAL_TIM_ConfigClockSource+0x15a>
 8002fcc:	2b30      	cmp	r3, #48	; 0x30
 8002fce:	d86b      	bhi.n	80030a8 <HAL_TIM_ConfigClockSource+0x16c>
 8002fd0:	2b20      	cmp	r3, #32
 8002fd2:	d060      	beq.n	8003096 <HAL_TIM_ConfigClockSource+0x15a>
 8002fd4:	2b20      	cmp	r3, #32
 8002fd6:	d867      	bhi.n	80030a8 <HAL_TIM_ConfigClockSource+0x16c>
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d05c      	beq.n	8003096 <HAL_TIM_ConfigClockSource+0x15a>
 8002fdc:	2b10      	cmp	r3, #16
 8002fde:	d05a      	beq.n	8003096 <HAL_TIM_ConfigClockSource+0x15a>
 8002fe0:	e062      	b.n	80030a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6818      	ldr	r0, [r3, #0]
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	6899      	ldr	r1, [r3, #8]
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	685a      	ldr	r2, [r3, #4]
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	f000 faf0 	bl	80035d6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003004:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68ba      	ldr	r2, [r7, #8]
 800300c:	609a      	str	r2, [r3, #8]
      break;
 800300e:	e04f      	b.n	80030b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6818      	ldr	r0, [r3, #0]
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	6899      	ldr	r1, [r3, #8]
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	f000 fad9 	bl	80035d6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	689a      	ldr	r2, [r3, #8]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003032:	609a      	str	r2, [r3, #8]
      break;
 8003034:	e03c      	b.n	80030b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6818      	ldr	r0, [r3, #0]
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	6859      	ldr	r1, [r3, #4]
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	461a      	mov	r2, r3
 8003044:	f000 fa50 	bl	80034e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2150      	movs	r1, #80	; 0x50
 800304e:	4618      	mov	r0, r3
 8003050:	f000 faa7 	bl	80035a2 <TIM_ITRx_SetConfig>
      break;
 8003054:	e02c      	b.n	80030b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6818      	ldr	r0, [r3, #0]
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	6859      	ldr	r1, [r3, #4]
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	461a      	mov	r2, r3
 8003064:	f000 fa6e 	bl	8003544 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2160      	movs	r1, #96	; 0x60
 800306e:	4618      	mov	r0, r3
 8003070:	f000 fa97 	bl	80035a2 <TIM_ITRx_SetConfig>
      break;
 8003074:	e01c      	b.n	80030b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6818      	ldr	r0, [r3, #0]
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	6859      	ldr	r1, [r3, #4]
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	461a      	mov	r2, r3
 8003084:	f000 fa30 	bl	80034e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2140      	movs	r1, #64	; 0x40
 800308e:	4618      	mov	r0, r3
 8003090:	f000 fa87 	bl	80035a2 <TIM_ITRx_SetConfig>
      break;
 8003094:	e00c      	b.n	80030b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4619      	mov	r1, r3
 80030a0:	4610      	mov	r0, r2
 80030a2:	f000 fa7e 	bl	80035a2 <TIM_ITRx_SetConfig>
      break;
 80030a6:	e003      	b.n	80030b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	73fb      	strb	r3, [r7, #15]
      break;
 80030ac:	e000      	b.n	80030b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80030ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80030c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3710      	adds	r7, #16
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030ca:	b480      	push	{r7}
 80030cc:	b083      	sub	sp, #12
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030d2:	bf00      	nop
 80030d4:	370c      	adds	r7, #12
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bc80      	pop	{r7}
 80030da:	4770      	bx	lr

080030dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bc80      	pop	{r7}
 80030ec:	4770      	bx	lr

080030ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030ee:	b480      	push	{r7}
 80030f0:	b083      	sub	sp, #12
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030f6:	bf00      	nop
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bc80      	pop	{r7}
 80030fe:	4770      	bx	lr

08003100 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003108:	bf00      	nop
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	bc80      	pop	{r7}
 8003110:	4770      	bx	lr
	...

08003114 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a29      	ldr	r2, [pc, #164]	; (80031cc <TIM_Base_SetConfig+0xb8>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d00b      	beq.n	8003144 <TIM_Base_SetConfig+0x30>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003132:	d007      	beq.n	8003144 <TIM_Base_SetConfig+0x30>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a26      	ldr	r2, [pc, #152]	; (80031d0 <TIM_Base_SetConfig+0xbc>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d003      	beq.n	8003144 <TIM_Base_SetConfig+0x30>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a25      	ldr	r2, [pc, #148]	; (80031d4 <TIM_Base_SetConfig+0xc0>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d108      	bne.n	8003156 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800314a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	4313      	orrs	r3, r2
 8003154:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a1c      	ldr	r2, [pc, #112]	; (80031cc <TIM_Base_SetConfig+0xb8>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d00b      	beq.n	8003176 <TIM_Base_SetConfig+0x62>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003164:	d007      	beq.n	8003176 <TIM_Base_SetConfig+0x62>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a19      	ldr	r2, [pc, #100]	; (80031d0 <TIM_Base_SetConfig+0xbc>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d003      	beq.n	8003176 <TIM_Base_SetConfig+0x62>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a18      	ldr	r2, [pc, #96]	; (80031d4 <TIM_Base_SetConfig+0xc0>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d108      	bne.n	8003188 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800317c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	4313      	orrs	r3, r2
 8003186:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	4313      	orrs	r3, r2
 8003194:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	68fa      	ldr	r2, [r7, #12]
 800319a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	689a      	ldr	r2, [r3, #8]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a07      	ldr	r2, [pc, #28]	; (80031cc <TIM_Base_SetConfig+0xb8>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d103      	bne.n	80031bc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	691a      	ldr	r2, [r3, #16]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	615a      	str	r2, [r3, #20]
}
 80031c2:	bf00      	nop
 80031c4:	3714      	adds	r7, #20
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bc80      	pop	{r7}
 80031ca:	4770      	bx	lr
 80031cc:	40012c00 	.word	0x40012c00
 80031d0:	40000400 	.word	0x40000400
 80031d4:	40000800 	.word	0x40000800

080031d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031d8:	b480      	push	{r7}
 80031da:	b087      	sub	sp, #28
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a1b      	ldr	r3, [r3, #32]
 80031e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a1b      	ldr	r3, [r3, #32]
 80031ec:	f023 0201 	bic.w	r2, r3, #1
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f023 0303 	bic.w	r3, r3, #3
 800320e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	4313      	orrs	r3, r2
 8003218:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	f023 0302 	bic.w	r3, r3, #2
 8003220:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	4313      	orrs	r3, r2
 800322a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a1c      	ldr	r2, [pc, #112]	; (80032a0 <TIM_OC1_SetConfig+0xc8>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d10c      	bne.n	800324e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	f023 0308 	bic.w	r3, r3, #8
 800323a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	697a      	ldr	r2, [r7, #20]
 8003242:	4313      	orrs	r3, r2
 8003244:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	f023 0304 	bic.w	r3, r3, #4
 800324c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a13      	ldr	r2, [pc, #76]	; (80032a0 <TIM_OC1_SetConfig+0xc8>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d111      	bne.n	800327a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800325c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003264:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	4313      	orrs	r3, r2
 800326e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	693a      	ldr	r2, [r7, #16]
 8003276:	4313      	orrs	r3, r2
 8003278:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	693a      	ldr	r2, [r7, #16]
 800327e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685a      	ldr	r2, [r3, #4]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	697a      	ldr	r2, [r7, #20]
 8003292:	621a      	str	r2, [r3, #32]
}
 8003294:	bf00      	nop
 8003296:	371c      	adds	r7, #28
 8003298:	46bd      	mov	sp, r7
 800329a:	bc80      	pop	{r7}
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	40012c00 	.word	0x40012c00

080032a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b087      	sub	sp, #28
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a1b      	ldr	r3, [r3, #32]
 80032b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a1b      	ldr	r3, [r3, #32]
 80032b8:	f023 0210 	bic.w	r2, r3, #16
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	021b      	lsls	r3, r3, #8
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	f023 0320 	bic.w	r3, r3, #32
 80032ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	011b      	lsls	r3, r3, #4
 80032f6:	697a      	ldr	r2, [r7, #20]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a1d      	ldr	r2, [pc, #116]	; (8003374 <TIM_OC2_SetConfig+0xd0>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d10d      	bne.n	8003320 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800330a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	011b      	lsls	r3, r3, #4
 8003312:	697a      	ldr	r2, [r7, #20]
 8003314:	4313      	orrs	r3, r2
 8003316:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800331e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a14      	ldr	r2, [pc, #80]	; (8003374 <TIM_OC2_SetConfig+0xd0>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d113      	bne.n	8003350 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800332e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003336:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	695b      	ldr	r3, [r3, #20]
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	4313      	orrs	r3, r2
 8003342:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	4313      	orrs	r3, r2
 800334e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685a      	ldr	r2, [r3, #4]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	697a      	ldr	r2, [r7, #20]
 8003368:	621a      	str	r2, [r3, #32]
}
 800336a:	bf00      	nop
 800336c:	371c      	adds	r7, #28
 800336e:	46bd      	mov	sp, r7
 8003370:	bc80      	pop	{r7}
 8003372:	4770      	bx	lr
 8003374:	40012c00 	.word	0x40012c00

08003378 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003378:	b480      	push	{r7}
 800337a:	b087      	sub	sp, #28
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f023 0303 	bic.w	r3, r3, #3
 80033ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	021b      	lsls	r3, r3, #8
 80033c8:	697a      	ldr	r2, [r7, #20]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a1d      	ldr	r2, [pc, #116]	; (8003448 <TIM_OC3_SetConfig+0xd0>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d10d      	bne.n	80033f2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	021b      	lsls	r3, r3, #8
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a14      	ldr	r2, [pc, #80]	; (8003448 <TIM_OC3_SetConfig+0xd0>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d113      	bne.n	8003422 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003400:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003408:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	011b      	lsls	r3, r3, #4
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	4313      	orrs	r3, r2
 8003414:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	011b      	lsls	r3, r3, #4
 800341c:	693a      	ldr	r2, [r7, #16]
 800341e:	4313      	orrs	r3, r2
 8003420:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	685a      	ldr	r2, [r3, #4]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	621a      	str	r2, [r3, #32]
}
 800343c:	bf00      	nop
 800343e:	371c      	adds	r7, #28
 8003440:	46bd      	mov	sp, r7
 8003442:	bc80      	pop	{r7}
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	40012c00 	.word	0x40012c00

0800344c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800344c:	b480      	push	{r7}
 800344e:	b087      	sub	sp, #28
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a1b      	ldr	r3, [r3, #32]
 8003460:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800347a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003482:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	021b      	lsls	r3, r3, #8
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	4313      	orrs	r3, r2
 800348e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003496:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	031b      	lsls	r3, r3, #12
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a0f      	ldr	r2, [pc, #60]	; (80034e4 <TIM_OC4_SetConfig+0x98>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d109      	bne.n	80034c0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	695b      	ldr	r3, [r3, #20]
 80034b8:	019b      	lsls	r3, r3, #6
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	4313      	orrs	r3, r2
 80034be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685a      	ldr	r2, [r3, #4]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	621a      	str	r2, [r3, #32]
}
 80034da:	bf00      	nop
 80034dc:	371c      	adds	r7, #28
 80034de:	46bd      	mov	sp, r7
 80034e0:	bc80      	pop	{r7}
 80034e2:	4770      	bx	lr
 80034e4:	40012c00 	.word	0x40012c00

080034e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b087      	sub	sp, #28
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6a1b      	ldr	r3, [r3, #32]
 80034fe:	f023 0201 	bic.w	r2, r3, #1
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003512:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	011b      	lsls	r3, r3, #4
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	4313      	orrs	r3, r2
 800351c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	f023 030a 	bic.w	r3, r3, #10
 8003524:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	4313      	orrs	r3, r2
 800352c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	621a      	str	r2, [r3, #32]
}
 800353a:	bf00      	nop
 800353c:	371c      	adds	r7, #28
 800353e:	46bd      	mov	sp, r7
 8003540:	bc80      	pop	{r7}
 8003542:	4770      	bx	lr

08003544 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003544:	b480      	push	{r7}
 8003546:	b087      	sub	sp, #28
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	f023 0210 	bic.w	r2, r3, #16
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800356e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	031b      	lsls	r3, r3, #12
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	4313      	orrs	r3, r2
 8003578:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003580:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	011b      	lsls	r3, r3, #4
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	4313      	orrs	r3, r2
 800358a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	697a      	ldr	r2, [r7, #20]
 8003596:	621a      	str	r2, [r3, #32]
}
 8003598:	bf00      	nop
 800359a:	371c      	adds	r7, #28
 800359c:	46bd      	mov	sp, r7
 800359e:	bc80      	pop	{r7}
 80035a0:	4770      	bx	lr

080035a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035a2:	b480      	push	{r7}
 80035a4:	b085      	sub	sp, #20
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
 80035aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035ba:	683a      	ldr	r2, [r7, #0]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	4313      	orrs	r3, r2
 80035c0:	f043 0307 	orr.w	r3, r3, #7
 80035c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	609a      	str	r2, [r3, #8]
}
 80035cc:	bf00      	nop
 80035ce:	3714      	adds	r7, #20
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bc80      	pop	{r7}
 80035d4:	4770      	bx	lr

080035d6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035d6:	b480      	push	{r7}
 80035d8:	b087      	sub	sp, #28
 80035da:	af00      	add	r7, sp, #0
 80035dc:	60f8      	str	r0, [r7, #12]
 80035de:	60b9      	str	r1, [r7, #8]
 80035e0:	607a      	str	r2, [r7, #4]
 80035e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035f0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	021a      	lsls	r2, r3, #8
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	431a      	orrs	r2, r3
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	697a      	ldr	r2, [r7, #20]
 8003600:	4313      	orrs	r3, r2
 8003602:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	609a      	str	r2, [r3, #8]
}
 800360a:	bf00      	nop
 800360c:	371c      	adds	r7, #28
 800360e:	46bd      	mov	sp, r7
 8003610:	bc80      	pop	{r7}
 8003612:	4770      	bx	lr

08003614 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003614:	b480      	push	{r7}
 8003616:	b087      	sub	sp, #28
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	f003 031f 	and.w	r3, r3, #31
 8003626:	2201      	movs	r2, #1
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6a1a      	ldr	r2, [r3, #32]
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	43db      	mvns	r3, r3
 8003636:	401a      	ands	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6a1a      	ldr	r2, [r3, #32]
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	f003 031f 	and.w	r3, r3, #31
 8003646:	6879      	ldr	r1, [r7, #4]
 8003648:	fa01 f303 	lsl.w	r3, r1, r3
 800364c:	431a      	orrs	r2, r3
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	621a      	str	r2, [r3, #32]
}
 8003652:	bf00      	nop
 8003654:	371c      	adds	r7, #28
 8003656:	46bd      	mov	sp, r7
 8003658:	bc80      	pop	{r7}
 800365a:	4770      	bx	lr

0800365c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800366c:	2b01      	cmp	r3, #1
 800366e:	d101      	bne.n	8003674 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003670:	2302      	movs	r3, #2
 8003672:	e046      	b.n	8003702 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2202      	movs	r2, #2
 8003680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800369a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a16      	ldr	r2, [pc, #88]	; (800370c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d00e      	beq.n	80036d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036c0:	d009      	beq.n	80036d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a12      	ldr	r2, [pc, #72]	; (8003710 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d004      	beq.n	80036d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a10      	ldr	r2, [pc, #64]	; (8003714 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d10c      	bne.n	80036f0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	68ba      	ldr	r2, [r7, #8]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68ba      	ldr	r2, [r7, #8]
 80036ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3714      	adds	r7, #20
 8003706:	46bd      	mov	sp, r7
 8003708:	bc80      	pop	{r7}
 800370a:	4770      	bx	lr
 800370c:	40012c00 	.word	0x40012c00
 8003710:	40000400 	.word	0x40000400
 8003714:	40000800 	.word	0x40000800

08003718 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003720:	bf00      	nop
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	bc80      	pop	{r7}
 8003728:	4770      	bx	lr

0800372a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800372a:	b480      	push	{r7}
 800372c:	b083      	sub	sp, #12
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003732:	bf00      	nop
 8003734:	370c      	adds	r7, #12
 8003736:	46bd      	mov	sp, r7
 8003738:	bc80      	pop	{r7}
 800373a:	4770      	bx	lr

0800373c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d101      	bne.n	800374e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e042      	b.n	80037d4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d106      	bne.n	8003768 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f7fd ff8e 	bl	8001684 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2224      	movs	r2, #36	; 0x24
 800376c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68da      	ldr	r2, [r3, #12]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800377e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f000 fd71 	bl	8004268 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	691a      	ldr	r2, [r3, #16]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003794:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	695a      	ldr	r2, [r3, #20]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68da      	ldr	r2, [r3, #12]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2220      	movs	r2, #32
 80037c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2220      	movs	r2, #32
 80037c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3708      	adds	r7, #8
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b08a      	sub	sp, #40	; 0x28
 80037e0:	af02      	add	r7, sp, #8
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	603b      	str	r3, [r7, #0]
 80037e8:	4613      	mov	r3, r2
 80037ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80037ec:	2300      	movs	r3, #0
 80037ee:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	2b20      	cmp	r3, #32
 80037fa:	d16d      	bne.n	80038d8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d002      	beq.n	8003808 <HAL_UART_Transmit+0x2c>
 8003802:	88fb      	ldrh	r3, [r7, #6]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d101      	bne.n	800380c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e066      	b.n	80038da <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2221      	movs	r2, #33	; 0x21
 8003816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800381a:	f7fe f885 	bl	8001928 <HAL_GetTick>
 800381e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	88fa      	ldrh	r2, [r7, #6]
 8003824:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	88fa      	ldrh	r2, [r7, #6]
 800382a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003834:	d108      	bne.n	8003848 <HAL_UART_Transmit+0x6c>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d104      	bne.n	8003848 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800383e:	2300      	movs	r3, #0
 8003840:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	61bb      	str	r3, [r7, #24]
 8003846:	e003      	b.n	8003850 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800384c:	2300      	movs	r3, #0
 800384e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003850:	e02a      	b.n	80038a8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	9300      	str	r3, [sp, #0]
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	2200      	movs	r2, #0
 800385a:	2180      	movs	r1, #128	; 0x80
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f000 faf9 	bl	8003e54 <UART_WaitOnFlagUntilTimeout>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d001      	beq.n	800386c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e036      	b.n	80038da <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d10b      	bne.n	800388a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	881b      	ldrh	r3, [r3, #0]
 8003876:	461a      	mov	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003880:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	3302      	adds	r3, #2
 8003886:	61bb      	str	r3, [r7, #24]
 8003888:	e007      	b.n	800389a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	781a      	ldrb	r2, [r3, #0]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	3301      	adds	r3, #1
 8003898:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800389e:	b29b      	uxth	r3, r3
 80038a0:	3b01      	subs	r3, #1
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1cf      	bne.n	8003852 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	9300      	str	r3, [sp, #0]
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	2200      	movs	r2, #0
 80038ba:	2140      	movs	r1, #64	; 0x40
 80038bc:	68f8      	ldr	r0, [r7, #12]
 80038be:	f000 fac9 	bl	8003e54 <UART_WaitOnFlagUntilTimeout>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d001      	beq.n	80038cc <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e006      	b.n	80038da <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2220      	movs	r2, #32
 80038d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80038d4:	2300      	movs	r3, #0
 80038d6:	e000      	b.n	80038da <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80038d8:	2302      	movs	r3, #2
  }
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3720      	adds	r7, #32
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
	...

080038e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b0ba      	sub	sp, #232	; 0xe8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800390a:	2300      	movs	r3, #0
 800390c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003910:	2300      	movs	r3, #0
 8003912:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800391a:	f003 030f 	and.w	r3, r3, #15
 800391e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003922:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003926:	2b00      	cmp	r3, #0
 8003928:	d10f      	bne.n	800394a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800392a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800392e:	f003 0320 	and.w	r3, r3, #32
 8003932:	2b00      	cmp	r3, #0
 8003934:	d009      	beq.n	800394a <HAL_UART_IRQHandler+0x66>
 8003936:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800393a:	f003 0320 	and.w	r3, r3, #32
 800393e:	2b00      	cmp	r3, #0
 8003940:	d003      	beq.n	800394a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 fbd1 	bl	80040ea <UART_Receive_IT>
      return;
 8003948:	e25b      	b.n	8003e02 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800394a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800394e:	2b00      	cmp	r3, #0
 8003950:	f000 80de 	beq.w	8003b10 <HAL_UART_IRQHandler+0x22c>
 8003954:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003958:	f003 0301 	and.w	r3, r3, #1
 800395c:	2b00      	cmp	r3, #0
 800395e:	d106      	bne.n	800396e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003964:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003968:	2b00      	cmp	r3, #0
 800396a:	f000 80d1 	beq.w	8003b10 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800396e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00b      	beq.n	8003992 <HAL_UART_IRQHandler+0xae>
 800397a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800397e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003982:	2b00      	cmp	r3, #0
 8003984:	d005      	beq.n	8003992 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398a:	f043 0201 	orr.w	r2, r3, #1
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003996:	f003 0304 	and.w	r3, r3, #4
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00b      	beq.n	80039b6 <HAL_UART_IRQHandler+0xd2>
 800399e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d005      	beq.n	80039b6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ae:	f043 0202 	orr.w	r2, r3, #2
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00b      	beq.n	80039da <HAL_UART_IRQHandler+0xf6>
 80039c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d005      	beq.n	80039da <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d2:	f043 0204 	orr.w	r2, r3, #4
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80039da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039de:	f003 0308 	and.w	r3, r3, #8
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d011      	beq.n	8003a0a <HAL_UART_IRQHandler+0x126>
 80039e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039ea:	f003 0320 	and.w	r3, r3, #32
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d105      	bne.n	80039fe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80039f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d005      	beq.n	8003a0a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a02:	f043 0208 	orr.w	r2, r3, #8
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	f000 81f2 	beq.w	8003df8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a18:	f003 0320 	and.w	r3, r3, #32
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d008      	beq.n	8003a32 <HAL_UART_IRQHandler+0x14e>
 8003a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a24:	f003 0320 	and.w	r3, r3, #32
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d002      	beq.n	8003a32 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 fb5c 	bl	80040ea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	695b      	ldr	r3, [r3, #20]
 8003a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	bf14      	ite	ne
 8003a40:	2301      	movne	r3, #1
 8003a42:	2300      	moveq	r3, #0
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a4e:	f003 0308 	and.w	r3, r3, #8
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d103      	bne.n	8003a5e <HAL_UART_IRQHandler+0x17a>
 8003a56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d04f      	beq.n	8003afe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 fa66 	bl	8003f30 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d041      	beq.n	8003af6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	3314      	adds	r3, #20
 8003a78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a80:	e853 3f00 	ldrex	r3, [r3]
 8003a84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003a88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003a8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	3314      	adds	r3, #20
 8003a9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003a9e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003aa2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003aaa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003aae:	e841 2300 	strex	r3, r2, [r1]
 8003ab2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003ab6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1d9      	bne.n	8003a72 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d013      	beq.n	8003aee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aca:	4a7e      	ldr	r2, [pc, #504]	; (8003cc4 <HAL_UART_IRQHandler+0x3e0>)
 8003acc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7fe f87a 	bl	8001bcc <HAL_DMA_Abort_IT>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d016      	beq.n	8003b0c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003ae8:	4610      	mov	r0, r2
 8003aea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aec:	e00e      	b.n	8003b0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 f99c 	bl	8003e2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003af4:	e00a      	b.n	8003b0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 f998 	bl	8003e2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003afc:	e006      	b.n	8003b0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 f994 	bl	8003e2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003b0a:	e175      	b.n	8003df8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b0c:	bf00      	nop
    return;
 8003b0e:	e173      	b.n	8003df8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	f040 814f 	bne.w	8003db8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b1e:	f003 0310 	and.w	r3, r3, #16
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f000 8148 	beq.w	8003db8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003b28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b2c:	f003 0310 	and.w	r3, r3, #16
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	f000 8141 	beq.w	8003db8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b36:	2300      	movs	r3, #0
 8003b38:	60bb      	str	r3, [r7, #8]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	60bb      	str	r3, [r7, #8]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	60bb      	str	r3, [r7, #8]
 8003b4a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	f000 80b6 	beq.w	8003cc8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003b68:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f000 8145 	beq.w	8003dfc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	f080 813e 	bcs.w	8003dfc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b86:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	2b20      	cmp	r3, #32
 8003b90:	f000 8088 	beq.w	8003ca4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	330c      	adds	r3, #12
 8003b9a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ba2:	e853 3f00 	ldrex	r3, [r3]
 8003ba6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003baa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003bae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bb2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	330c      	adds	r3, #12
 8003bbc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003bc0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003bc4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003bcc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003bd0:	e841 2300 	strex	r3, r2, [r1]
 8003bd4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003bd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d1d9      	bne.n	8003b94 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	3314      	adds	r3, #20
 8003be6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bea:	e853 3f00 	ldrex	r3, [r3]
 8003bee:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003bf0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bf2:	f023 0301 	bic.w	r3, r3, #1
 8003bf6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	3314      	adds	r3, #20
 8003c00:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c04:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003c08:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c0a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003c0c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003c10:	e841 2300 	strex	r3, r2, [r1]
 8003c14:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003c16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d1e1      	bne.n	8003be0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	3314      	adds	r3, #20
 8003c22:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c26:	e853 3f00 	ldrex	r3, [r3]
 8003c2a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003c2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	3314      	adds	r3, #20
 8003c3c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003c40:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003c42:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c44:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003c46:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003c48:	e841 2300 	strex	r3, r2, [r1]
 8003c4c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003c4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d1e3      	bne.n	8003c1c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2220      	movs	r2, #32
 8003c58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	330c      	adds	r3, #12
 8003c68:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c6c:	e853 3f00 	ldrex	r3, [r3]
 8003c70:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003c72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c74:	f023 0310 	bic.w	r3, r3, #16
 8003c78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	330c      	adds	r3, #12
 8003c82:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003c86:	65ba      	str	r2, [r7, #88]	; 0x58
 8003c88:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c8a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003c8c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c8e:	e841 2300 	strex	r3, r2, [r1]
 8003c92:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003c94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1e3      	bne.n	8003c62 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f7fd ff59 	bl	8001b56 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2202      	movs	r2, #2
 8003ca8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	4619      	mov	r1, r3
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 f8bf 	bl	8003e3e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003cc0:	e09c      	b.n	8003dfc <HAL_UART_IRQHandler+0x518>
 8003cc2:	bf00      	nop
 8003cc4:	08003ff5 	.word	0x08003ff5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	f000 808e 	beq.w	8003e00 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003ce4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f000 8089 	beq.w	8003e00 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	330c      	adds	r3, #12
 8003cf4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cf8:	e853 3f00 	ldrex	r3, [r3]
 8003cfc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	330c      	adds	r3, #12
 8003d0e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003d12:	647a      	str	r2, [r7, #68]	; 0x44
 8003d14:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d16:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d1a:	e841 2300 	strex	r3, r2, [r1]
 8003d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1e3      	bne.n	8003cee <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	3314      	adds	r3, #20
 8003d2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d30:	e853 3f00 	ldrex	r3, [r3]
 8003d34:	623b      	str	r3, [r7, #32]
   return(result);
 8003d36:	6a3b      	ldr	r3, [r7, #32]
 8003d38:	f023 0301 	bic.w	r3, r3, #1
 8003d3c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	3314      	adds	r3, #20
 8003d46:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003d4a:	633a      	str	r2, [r7, #48]	; 0x30
 8003d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d52:	e841 2300 	strex	r3, r2, [r1]
 8003d56:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d1e3      	bne.n	8003d26 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2220      	movs	r2, #32
 8003d62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	330c      	adds	r3, #12
 8003d72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	e853 3f00 	ldrex	r3, [r3]
 8003d7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f023 0310 	bic.w	r3, r3, #16
 8003d82:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	330c      	adds	r3, #12
 8003d8c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003d90:	61fa      	str	r2, [r7, #28]
 8003d92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d94:	69b9      	ldr	r1, [r7, #24]
 8003d96:	69fa      	ldr	r2, [r7, #28]
 8003d98:	e841 2300 	strex	r3, r2, [r1]
 8003d9c:	617b      	str	r3, [r7, #20]
   return(result);
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1e3      	bne.n	8003d6c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2202      	movs	r2, #2
 8003da8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003daa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003dae:	4619      	mov	r1, r3
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 f844 	bl	8003e3e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003db6:	e023      	b.n	8003e00 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003db8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d009      	beq.n	8003dd8 <HAL_UART_IRQHandler+0x4f4>
 8003dc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d003      	beq.n	8003dd8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f000 f923 	bl	800401c <UART_Transmit_IT>
    return;
 8003dd6:	e014      	b.n	8003e02 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003dd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00e      	beq.n	8003e02 <HAL_UART_IRQHandler+0x51e>
 8003de4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d008      	beq.n	8003e02 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f000 f962 	bl	80040ba <UART_EndTransmit_IT>
    return;
 8003df6:	e004      	b.n	8003e02 <HAL_UART_IRQHandler+0x51e>
    return;
 8003df8:	bf00      	nop
 8003dfa:	e002      	b.n	8003e02 <HAL_UART_IRQHandler+0x51e>
      return;
 8003dfc:	bf00      	nop
 8003dfe:	e000      	b.n	8003e02 <HAL_UART_IRQHandler+0x51e>
      return;
 8003e00:	bf00      	nop
  }
}
 8003e02:	37e8      	adds	r7, #232	; 0xe8
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e10:	bf00      	nop
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bc80      	pop	{r7}
 8003e18:	4770      	bx	lr

08003e1a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e1a:	b480      	push	{r7}
 8003e1c:	b083      	sub	sp, #12
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003e22:	bf00      	nop
 8003e24:	370c      	adds	r7, #12
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bc80      	pop	{r7}
 8003e2a:	4770      	bx	lr

08003e2c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e34:	bf00      	nop
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bc80      	pop	{r7}
 8003e3c:	4770      	bx	lr

08003e3e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e3e:	b480      	push	{r7}
 8003e40:	b083      	sub	sp, #12
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
 8003e46:	460b      	mov	r3, r1
 8003e48:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e4a:	bf00      	nop
 8003e4c:	370c      	adds	r7, #12
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bc80      	pop	{r7}
 8003e52:	4770      	bx	lr

08003e54 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b090      	sub	sp, #64	; 0x40
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	603b      	str	r3, [r7, #0]
 8003e60:	4613      	mov	r3, r2
 8003e62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e64:	e050      	b.n	8003f08 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e6c:	d04c      	beq.n	8003f08 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d007      	beq.n	8003e84 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e74:	f7fd fd58 	bl	8001928 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d241      	bcs.n	8003f08 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	330c      	adds	r3, #12
 8003e8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e8e:	e853 3f00 	ldrex	r3, [r3]
 8003e92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e96:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	330c      	adds	r3, #12
 8003ea2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ea4:	637a      	str	r2, [r7, #52]	; 0x34
 8003ea6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003eaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003eac:	e841 2300 	strex	r3, r2, [r1]
 8003eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1e5      	bne.n	8003e84 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	3314      	adds	r3, #20
 8003ebe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	e853 3f00 	ldrex	r3, [r3]
 8003ec6:	613b      	str	r3, [r7, #16]
   return(result);
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	f023 0301 	bic.w	r3, r3, #1
 8003ece:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	3314      	adds	r3, #20
 8003ed6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ed8:	623a      	str	r2, [r7, #32]
 8003eda:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003edc:	69f9      	ldr	r1, [r7, #28]
 8003ede:	6a3a      	ldr	r2, [r7, #32]
 8003ee0:	e841 2300 	strex	r3, r2, [r1]
 8003ee4:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d1e5      	bne.n	8003eb8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2220      	movs	r2, #32
 8003ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e00f      	b.n	8003f28 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	4013      	ands	r3, r2
 8003f12:	68ba      	ldr	r2, [r7, #8]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	bf0c      	ite	eq
 8003f18:	2301      	moveq	r3, #1
 8003f1a:	2300      	movne	r3, #0
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	461a      	mov	r2, r3
 8003f20:	79fb      	ldrb	r3, [r7, #7]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d09f      	beq.n	8003e66 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3740      	adds	r7, #64	; 0x40
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b095      	sub	sp, #84	; 0x54
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	330c      	adds	r3, #12
 8003f3e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f42:	e853 3f00 	ldrex	r3, [r3]
 8003f46:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f4a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	330c      	adds	r3, #12
 8003f56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f58:	643a      	str	r2, [r7, #64]	; 0x40
 8003f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f60:	e841 2300 	strex	r3, r2, [r1]
 8003f64:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1e5      	bne.n	8003f38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	3314      	adds	r3, #20
 8003f72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f74:	6a3b      	ldr	r3, [r7, #32]
 8003f76:	e853 3f00 	ldrex	r3, [r3]
 8003f7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	f023 0301 	bic.w	r3, r3, #1
 8003f82:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	3314      	adds	r3, #20
 8003f8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f94:	e841 2300 	strex	r3, r2, [r1]
 8003f98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1e5      	bne.n	8003f6c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d119      	bne.n	8003fdc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	330c      	adds	r3, #12
 8003fae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	e853 3f00 	ldrex	r3, [r3]
 8003fb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	f023 0310 	bic.w	r3, r3, #16
 8003fbe:	647b      	str	r3, [r7, #68]	; 0x44
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	330c      	adds	r3, #12
 8003fc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fc8:	61ba      	str	r2, [r7, #24]
 8003fca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fcc:	6979      	ldr	r1, [r7, #20]
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	e841 2300 	strex	r3, r2, [r1]
 8003fd4:	613b      	str	r3, [r7, #16]
   return(result);
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d1e5      	bne.n	8003fa8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2220      	movs	r2, #32
 8003fe0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003fea:	bf00      	nop
 8003fec:	3754      	adds	r7, #84	; 0x54
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bc80      	pop	{r7}
 8003ff2:	4770      	bx	lr

08003ff4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004000:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800400e:	68f8      	ldr	r0, [r7, #12]
 8004010:	f7ff ff0c 	bl	8003e2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004014:	bf00      	nop
 8004016:	3710      	adds	r7, #16
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800401c:	b480      	push	{r7}
 800401e:	b085      	sub	sp, #20
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800402a:	b2db      	uxtb	r3, r3
 800402c:	2b21      	cmp	r3, #33	; 0x21
 800402e:	d13e      	bne.n	80040ae <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004038:	d114      	bne.n	8004064 <UART_Transmit_IT+0x48>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d110      	bne.n	8004064 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	881b      	ldrh	r3, [r3, #0]
 800404c:	461a      	mov	r2, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004056:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a1b      	ldr	r3, [r3, #32]
 800405c:	1c9a      	adds	r2, r3, #2
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	621a      	str	r2, [r3, #32]
 8004062:	e008      	b.n	8004076 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a1b      	ldr	r3, [r3, #32]
 8004068:	1c59      	adds	r1, r3, #1
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	6211      	str	r1, [r2, #32]
 800406e:	781a      	ldrb	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800407a:	b29b      	uxth	r3, r3
 800407c:	3b01      	subs	r3, #1
 800407e:	b29b      	uxth	r3, r3
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	4619      	mov	r1, r3
 8004084:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004086:	2b00      	cmp	r3, #0
 8004088:	d10f      	bne.n	80040aa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68da      	ldr	r2, [r3, #12]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004098:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68da      	ldr	r2, [r3, #12]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040a8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80040aa:	2300      	movs	r3, #0
 80040ac:	e000      	b.n	80040b0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80040ae:	2302      	movs	r3, #2
  }
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3714      	adds	r7, #20
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bc80      	pop	{r7}
 80040b8:	4770      	bx	lr

080040ba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b082      	sub	sp, #8
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68da      	ldr	r2, [r3, #12]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040d0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2220      	movs	r2, #32
 80040d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f7ff fe94 	bl	8003e08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3708      	adds	r7, #8
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}

080040ea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b08c      	sub	sp, #48	; 0x30
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b22      	cmp	r3, #34	; 0x22
 80040fc:	f040 80ae 	bne.w	800425c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004108:	d117      	bne.n	800413a <UART_Receive_IT+0x50>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d113      	bne.n	800413a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004112:	2300      	movs	r3, #0
 8004114:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800411a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	b29b      	uxth	r3, r3
 8004124:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004128:	b29a      	uxth	r2, r3
 800412a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800412c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004132:	1c9a      	adds	r2, r3, #2
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	629a      	str	r2, [r3, #40]	; 0x28
 8004138:	e026      	b.n	8004188 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800413e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004140:	2300      	movs	r3, #0
 8004142:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800414c:	d007      	beq.n	800415e <UART_Receive_IT+0x74>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d10a      	bne.n	800416c <UART_Receive_IT+0x82>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d106      	bne.n	800416c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	b2da      	uxtb	r2, r3
 8004166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004168:	701a      	strb	r2, [r3, #0]
 800416a:	e008      	b.n	800417e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	b2db      	uxtb	r3, r3
 8004174:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004178:	b2da      	uxtb	r2, r3
 800417a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800417c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004182:	1c5a      	adds	r2, r3, #1
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800418c:	b29b      	uxth	r3, r3
 800418e:	3b01      	subs	r3, #1
 8004190:	b29b      	uxth	r3, r3
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	4619      	mov	r1, r3
 8004196:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004198:	2b00      	cmp	r3, #0
 800419a:	d15d      	bne.n	8004258 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68da      	ldr	r2, [r3, #12]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f022 0220 	bic.w	r2, r2, #32
 80041aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68da      	ldr	r2, [r3, #12]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	695a      	ldr	r2, [r3, #20]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f022 0201 	bic.w	r2, r2, #1
 80041ca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2220      	movs	r2, #32
 80041d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d135      	bne.n	800424e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	330c      	adds	r3, #12
 80041ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	e853 3f00 	ldrex	r3, [r3]
 80041f6:	613b      	str	r3, [r7, #16]
   return(result);
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	f023 0310 	bic.w	r3, r3, #16
 80041fe:	627b      	str	r3, [r7, #36]	; 0x24
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	330c      	adds	r3, #12
 8004206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004208:	623a      	str	r2, [r7, #32]
 800420a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420c:	69f9      	ldr	r1, [r7, #28]
 800420e:	6a3a      	ldr	r2, [r7, #32]
 8004210:	e841 2300 	strex	r3, r2, [r1]
 8004214:	61bb      	str	r3, [r7, #24]
   return(result);
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d1e5      	bne.n	80041e8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0310 	and.w	r3, r3, #16
 8004226:	2b10      	cmp	r3, #16
 8004228:	d10a      	bne.n	8004240 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800422a:	2300      	movs	r3, #0
 800422c:	60fb      	str	r3, [r7, #12]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	60fb      	str	r3, [r7, #12]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	60fb      	str	r3, [r7, #12]
 800423e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004244:	4619      	mov	r1, r3
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f7ff fdf9 	bl	8003e3e <HAL_UARTEx_RxEventCallback>
 800424c:	e002      	b.n	8004254 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f7ff fde3 	bl	8003e1a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004254:	2300      	movs	r3, #0
 8004256:	e002      	b.n	800425e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004258:	2300      	movs	r3, #0
 800425a:	e000      	b.n	800425e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800425c:	2302      	movs	r3, #2
  }
}
 800425e:	4618      	mov	r0, r3
 8004260:	3730      	adds	r7, #48	; 0x30
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
	...

08004268 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	68da      	ldr	r2, [r3, #12]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	430a      	orrs	r2, r1
 8004284:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	689a      	ldr	r2, [r3, #8]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	431a      	orrs	r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	695b      	ldr	r3, [r3, #20]
 8004294:	4313      	orrs	r3, r2
 8004296:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80042a2:	f023 030c 	bic.w	r3, r3, #12
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	6812      	ldr	r2, [r2, #0]
 80042aa:	68b9      	ldr	r1, [r7, #8]
 80042ac:	430b      	orrs	r3, r1
 80042ae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	699a      	ldr	r2, [r3, #24]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	430a      	orrs	r2, r1
 80042c4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a2c      	ldr	r2, [pc, #176]	; (800437c <UART_SetConfig+0x114>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d103      	bne.n	80042d8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80042d0:	f7fe fa9c 	bl	800280c <HAL_RCC_GetPCLK2Freq>
 80042d4:	60f8      	str	r0, [r7, #12]
 80042d6:	e002      	b.n	80042de <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80042d8:	f7fe fa84 	bl	80027e4 <HAL_RCC_GetPCLK1Freq>
 80042dc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	4613      	mov	r3, r2
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	4413      	add	r3, r2
 80042e6:	009a      	lsls	r2, r3, #2
 80042e8:	441a      	add	r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042f4:	4a22      	ldr	r2, [pc, #136]	; (8004380 <UART_SetConfig+0x118>)
 80042f6:	fba2 2303 	umull	r2, r3, r2, r3
 80042fa:	095b      	lsrs	r3, r3, #5
 80042fc:	0119      	lsls	r1, r3, #4
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	4613      	mov	r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	4413      	add	r3, r2
 8004306:	009a      	lsls	r2, r3, #2
 8004308:	441a      	add	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	fbb2 f2f3 	udiv	r2, r2, r3
 8004314:	4b1a      	ldr	r3, [pc, #104]	; (8004380 <UART_SetConfig+0x118>)
 8004316:	fba3 0302 	umull	r0, r3, r3, r2
 800431a:	095b      	lsrs	r3, r3, #5
 800431c:	2064      	movs	r0, #100	; 0x64
 800431e:	fb00 f303 	mul.w	r3, r0, r3
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	011b      	lsls	r3, r3, #4
 8004326:	3332      	adds	r3, #50	; 0x32
 8004328:	4a15      	ldr	r2, [pc, #84]	; (8004380 <UART_SetConfig+0x118>)
 800432a:	fba2 2303 	umull	r2, r3, r2, r3
 800432e:	095b      	lsrs	r3, r3, #5
 8004330:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004334:	4419      	add	r1, r3
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	4613      	mov	r3, r2
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	4413      	add	r3, r2
 800433e:	009a      	lsls	r2, r3, #2
 8004340:	441a      	add	r2, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	fbb2 f2f3 	udiv	r2, r2, r3
 800434c:	4b0c      	ldr	r3, [pc, #48]	; (8004380 <UART_SetConfig+0x118>)
 800434e:	fba3 0302 	umull	r0, r3, r3, r2
 8004352:	095b      	lsrs	r3, r3, #5
 8004354:	2064      	movs	r0, #100	; 0x64
 8004356:	fb00 f303 	mul.w	r3, r0, r3
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	011b      	lsls	r3, r3, #4
 800435e:	3332      	adds	r3, #50	; 0x32
 8004360:	4a07      	ldr	r2, [pc, #28]	; (8004380 <UART_SetConfig+0x118>)
 8004362:	fba2 2303 	umull	r2, r3, r2, r3
 8004366:	095b      	lsrs	r3, r3, #5
 8004368:	f003 020f 	and.w	r2, r3, #15
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	440a      	add	r2, r1
 8004372:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004374:	bf00      	nop
 8004376:	3710      	adds	r7, #16
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}
 800437c:	40013800 	.word	0x40013800
 8004380:	51eb851f 	.word	0x51eb851f

08004384 <__errno>:
 8004384:	4b01      	ldr	r3, [pc, #4]	; (800438c <__errno+0x8>)
 8004386:	6818      	ldr	r0, [r3, #0]
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	20000040 	.word	0x20000040

08004390 <__libc_init_array>:
 8004390:	b570      	push	{r4, r5, r6, lr}
 8004392:	2600      	movs	r6, #0
 8004394:	4d0c      	ldr	r5, [pc, #48]	; (80043c8 <__libc_init_array+0x38>)
 8004396:	4c0d      	ldr	r4, [pc, #52]	; (80043cc <__libc_init_array+0x3c>)
 8004398:	1b64      	subs	r4, r4, r5
 800439a:	10a4      	asrs	r4, r4, #2
 800439c:	42a6      	cmp	r6, r4
 800439e:	d109      	bne.n	80043b4 <__libc_init_array+0x24>
 80043a0:	f000 fc6c 	bl	8004c7c <_init>
 80043a4:	2600      	movs	r6, #0
 80043a6:	4d0a      	ldr	r5, [pc, #40]	; (80043d0 <__libc_init_array+0x40>)
 80043a8:	4c0a      	ldr	r4, [pc, #40]	; (80043d4 <__libc_init_array+0x44>)
 80043aa:	1b64      	subs	r4, r4, r5
 80043ac:	10a4      	asrs	r4, r4, #2
 80043ae:	42a6      	cmp	r6, r4
 80043b0:	d105      	bne.n	80043be <__libc_init_array+0x2e>
 80043b2:	bd70      	pop	{r4, r5, r6, pc}
 80043b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80043b8:	4798      	blx	r3
 80043ba:	3601      	adds	r6, #1
 80043bc:	e7ee      	b.n	800439c <__libc_init_array+0xc>
 80043be:	f855 3b04 	ldr.w	r3, [r5], #4
 80043c2:	4798      	blx	r3
 80043c4:	3601      	adds	r6, #1
 80043c6:	e7f2      	b.n	80043ae <__libc_init_array+0x1e>
 80043c8:	08004d18 	.word	0x08004d18
 80043cc:	08004d18 	.word	0x08004d18
 80043d0:	08004d18 	.word	0x08004d18
 80043d4:	08004d1c 	.word	0x08004d1c

080043d8 <malloc>:
 80043d8:	4b02      	ldr	r3, [pc, #8]	; (80043e4 <malloc+0xc>)
 80043da:	4601      	mov	r1, r0
 80043dc:	6818      	ldr	r0, [r3, #0]
 80043de:	f000 b85f 	b.w	80044a0 <_malloc_r>
 80043e2:	bf00      	nop
 80043e4:	20000040 	.word	0x20000040

080043e8 <free>:
 80043e8:	4b02      	ldr	r3, [pc, #8]	; (80043f4 <free+0xc>)
 80043ea:	4601      	mov	r1, r0
 80043ec:	6818      	ldr	r0, [r3, #0]
 80043ee:	f000 b80b 	b.w	8004408 <_free_r>
 80043f2:	bf00      	nop
 80043f4:	20000040 	.word	0x20000040

080043f8 <memset>:
 80043f8:	4603      	mov	r3, r0
 80043fa:	4402      	add	r2, r0
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d100      	bne.n	8004402 <memset+0xa>
 8004400:	4770      	bx	lr
 8004402:	f803 1b01 	strb.w	r1, [r3], #1
 8004406:	e7f9      	b.n	80043fc <memset+0x4>

08004408 <_free_r>:
 8004408:	b538      	push	{r3, r4, r5, lr}
 800440a:	4605      	mov	r5, r0
 800440c:	2900      	cmp	r1, #0
 800440e:	d043      	beq.n	8004498 <_free_r+0x90>
 8004410:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004414:	1f0c      	subs	r4, r1, #4
 8004416:	2b00      	cmp	r3, #0
 8004418:	bfb8      	it	lt
 800441a:	18e4      	addlt	r4, r4, r3
 800441c:	f000 f8ca 	bl	80045b4 <__malloc_lock>
 8004420:	4a1e      	ldr	r2, [pc, #120]	; (800449c <_free_r+0x94>)
 8004422:	6813      	ldr	r3, [r2, #0]
 8004424:	4610      	mov	r0, r2
 8004426:	b933      	cbnz	r3, 8004436 <_free_r+0x2e>
 8004428:	6063      	str	r3, [r4, #4]
 800442a:	6014      	str	r4, [r2, #0]
 800442c:	4628      	mov	r0, r5
 800442e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004432:	f000 b8c5 	b.w	80045c0 <__malloc_unlock>
 8004436:	42a3      	cmp	r3, r4
 8004438:	d90a      	bls.n	8004450 <_free_r+0x48>
 800443a:	6821      	ldr	r1, [r4, #0]
 800443c:	1862      	adds	r2, r4, r1
 800443e:	4293      	cmp	r3, r2
 8004440:	bf01      	itttt	eq
 8004442:	681a      	ldreq	r2, [r3, #0]
 8004444:	685b      	ldreq	r3, [r3, #4]
 8004446:	1852      	addeq	r2, r2, r1
 8004448:	6022      	streq	r2, [r4, #0]
 800444a:	6063      	str	r3, [r4, #4]
 800444c:	6004      	str	r4, [r0, #0]
 800444e:	e7ed      	b.n	800442c <_free_r+0x24>
 8004450:	461a      	mov	r2, r3
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	b10b      	cbz	r3, 800445a <_free_r+0x52>
 8004456:	42a3      	cmp	r3, r4
 8004458:	d9fa      	bls.n	8004450 <_free_r+0x48>
 800445a:	6811      	ldr	r1, [r2, #0]
 800445c:	1850      	adds	r0, r2, r1
 800445e:	42a0      	cmp	r0, r4
 8004460:	d10b      	bne.n	800447a <_free_r+0x72>
 8004462:	6820      	ldr	r0, [r4, #0]
 8004464:	4401      	add	r1, r0
 8004466:	1850      	adds	r0, r2, r1
 8004468:	4283      	cmp	r3, r0
 800446a:	6011      	str	r1, [r2, #0]
 800446c:	d1de      	bne.n	800442c <_free_r+0x24>
 800446e:	6818      	ldr	r0, [r3, #0]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	4401      	add	r1, r0
 8004474:	6011      	str	r1, [r2, #0]
 8004476:	6053      	str	r3, [r2, #4]
 8004478:	e7d8      	b.n	800442c <_free_r+0x24>
 800447a:	d902      	bls.n	8004482 <_free_r+0x7a>
 800447c:	230c      	movs	r3, #12
 800447e:	602b      	str	r3, [r5, #0]
 8004480:	e7d4      	b.n	800442c <_free_r+0x24>
 8004482:	6820      	ldr	r0, [r4, #0]
 8004484:	1821      	adds	r1, r4, r0
 8004486:	428b      	cmp	r3, r1
 8004488:	bf01      	itttt	eq
 800448a:	6819      	ldreq	r1, [r3, #0]
 800448c:	685b      	ldreq	r3, [r3, #4]
 800448e:	1809      	addeq	r1, r1, r0
 8004490:	6021      	streq	r1, [r4, #0]
 8004492:	6063      	str	r3, [r4, #4]
 8004494:	6054      	str	r4, [r2, #4]
 8004496:	e7c9      	b.n	800442c <_free_r+0x24>
 8004498:	bd38      	pop	{r3, r4, r5, pc}
 800449a:	bf00      	nop
 800449c:	20000100 	.word	0x20000100

080044a0 <_malloc_r>:
 80044a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044a2:	1ccd      	adds	r5, r1, #3
 80044a4:	f025 0503 	bic.w	r5, r5, #3
 80044a8:	3508      	adds	r5, #8
 80044aa:	2d0c      	cmp	r5, #12
 80044ac:	bf38      	it	cc
 80044ae:	250c      	movcc	r5, #12
 80044b0:	2d00      	cmp	r5, #0
 80044b2:	4606      	mov	r6, r0
 80044b4:	db01      	blt.n	80044ba <_malloc_r+0x1a>
 80044b6:	42a9      	cmp	r1, r5
 80044b8:	d903      	bls.n	80044c2 <_malloc_r+0x22>
 80044ba:	230c      	movs	r3, #12
 80044bc:	6033      	str	r3, [r6, #0]
 80044be:	2000      	movs	r0, #0
 80044c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044c2:	f000 f877 	bl	80045b4 <__malloc_lock>
 80044c6:	4921      	ldr	r1, [pc, #132]	; (800454c <_malloc_r+0xac>)
 80044c8:	680a      	ldr	r2, [r1, #0]
 80044ca:	4614      	mov	r4, r2
 80044cc:	b99c      	cbnz	r4, 80044f6 <_malloc_r+0x56>
 80044ce:	4f20      	ldr	r7, [pc, #128]	; (8004550 <_malloc_r+0xb0>)
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	b923      	cbnz	r3, 80044de <_malloc_r+0x3e>
 80044d4:	4621      	mov	r1, r4
 80044d6:	4630      	mov	r0, r6
 80044d8:	f000 f83c 	bl	8004554 <_sbrk_r>
 80044dc:	6038      	str	r0, [r7, #0]
 80044de:	4629      	mov	r1, r5
 80044e0:	4630      	mov	r0, r6
 80044e2:	f000 f837 	bl	8004554 <_sbrk_r>
 80044e6:	1c43      	adds	r3, r0, #1
 80044e8:	d123      	bne.n	8004532 <_malloc_r+0x92>
 80044ea:	230c      	movs	r3, #12
 80044ec:	4630      	mov	r0, r6
 80044ee:	6033      	str	r3, [r6, #0]
 80044f0:	f000 f866 	bl	80045c0 <__malloc_unlock>
 80044f4:	e7e3      	b.n	80044be <_malloc_r+0x1e>
 80044f6:	6823      	ldr	r3, [r4, #0]
 80044f8:	1b5b      	subs	r3, r3, r5
 80044fa:	d417      	bmi.n	800452c <_malloc_r+0x8c>
 80044fc:	2b0b      	cmp	r3, #11
 80044fe:	d903      	bls.n	8004508 <_malloc_r+0x68>
 8004500:	6023      	str	r3, [r4, #0]
 8004502:	441c      	add	r4, r3
 8004504:	6025      	str	r5, [r4, #0]
 8004506:	e004      	b.n	8004512 <_malloc_r+0x72>
 8004508:	6863      	ldr	r3, [r4, #4]
 800450a:	42a2      	cmp	r2, r4
 800450c:	bf0c      	ite	eq
 800450e:	600b      	streq	r3, [r1, #0]
 8004510:	6053      	strne	r3, [r2, #4]
 8004512:	4630      	mov	r0, r6
 8004514:	f000 f854 	bl	80045c0 <__malloc_unlock>
 8004518:	f104 000b 	add.w	r0, r4, #11
 800451c:	1d23      	adds	r3, r4, #4
 800451e:	f020 0007 	bic.w	r0, r0, #7
 8004522:	1ac2      	subs	r2, r0, r3
 8004524:	d0cc      	beq.n	80044c0 <_malloc_r+0x20>
 8004526:	1a1b      	subs	r3, r3, r0
 8004528:	50a3      	str	r3, [r4, r2]
 800452a:	e7c9      	b.n	80044c0 <_malloc_r+0x20>
 800452c:	4622      	mov	r2, r4
 800452e:	6864      	ldr	r4, [r4, #4]
 8004530:	e7cc      	b.n	80044cc <_malloc_r+0x2c>
 8004532:	1cc4      	adds	r4, r0, #3
 8004534:	f024 0403 	bic.w	r4, r4, #3
 8004538:	42a0      	cmp	r0, r4
 800453a:	d0e3      	beq.n	8004504 <_malloc_r+0x64>
 800453c:	1a21      	subs	r1, r4, r0
 800453e:	4630      	mov	r0, r6
 8004540:	f000 f808 	bl	8004554 <_sbrk_r>
 8004544:	3001      	adds	r0, #1
 8004546:	d1dd      	bne.n	8004504 <_malloc_r+0x64>
 8004548:	e7cf      	b.n	80044ea <_malloc_r+0x4a>
 800454a:	bf00      	nop
 800454c:	20000100 	.word	0x20000100
 8004550:	20000104 	.word	0x20000104

08004554 <_sbrk_r>:
 8004554:	b538      	push	{r3, r4, r5, lr}
 8004556:	2300      	movs	r3, #0
 8004558:	4d05      	ldr	r5, [pc, #20]	; (8004570 <_sbrk_r+0x1c>)
 800455a:	4604      	mov	r4, r0
 800455c:	4608      	mov	r0, r1
 800455e:	602b      	str	r3, [r5, #0]
 8004560:	f7fd f928 	bl	80017b4 <_sbrk>
 8004564:	1c43      	adds	r3, r0, #1
 8004566:	d102      	bne.n	800456e <_sbrk_r+0x1a>
 8004568:	682b      	ldr	r3, [r5, #0]
 800456a:	b103      	cbz	r3, 800456e <_sbrk_r+0x1a>
 800456c:	6023      	str	r3, [r4, #0]
 800456e:	bd38      	pop	{r3, r4, r5, pc}
 8004570:	20000210 	.word	0x20000210

08004574 <siprintf>:
 8004574:	b40e      	push	{r1, r2, r3}
 8004576:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800457a:	b500      	push	{lr}
 800457c:	b09c      	sub	sp, #112	; 0x70
 800457e:	ab1d      	add	r3, sp, #116	; 0x74
 8004580:	9002      	str	r0, [sp, #8]
 8004582:	9006      	str	r0, [sp, #24]
 8004584:	9107      	str	r1, [sp, #28]
 8004586:	9104      	str	r1, [sp, #16]
 8004588:	4808      	ldr	r0, [pc, #32]	; (80045ac <siprintf+0x38>)
 800458a:	4909      	ldr	r1, [pc, #36]	; (80045b0 <siprintf+0x3c>)
 800458c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004590:	9105      	str	r1, [sp, #20]
 8004592:	6800      	ldr	r0, [r0, #0]
 8004594:	a902      	add	r1, sp, #8
 8004596:	9301      	str	r3, [sp, #4]
 8004598:	f000 f874 	bl	8004684 <_svfiprintf_r>
 800459c:	2200      	movs	r2, #0
 800459e:	9b02      	ldr	r3, [sp, #8]
 80045a0:	701a      	strb	r2, [r3, #0]
 80045a2:	b01c      	add	sp, #112	; 0x70
 80045a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80045a8:	b003      	add	sp, #12
 80045aa:	4770      	bx	lr
 80045ac:	20000040 	.word	0x20000040
 80045b0:	ffff0208 	.word	0xffff0208

080045b4 <__malloc_lock>:
 80045b4:	4801      	ldr	r0, [pc, #4]	; (80045bc <__malloc_lock+0x8>)
 80045b6:	f000 bafb 	b.w	8004bb0 <__retarget_lock_acquire_recursive>
 80045ba:	bf00      	nop
 80045bc:	20000218 	.word	0x20000218

080045c0 <__malloc_unlock>:
 80045c0:	4801      	ldr	r0, [pc, #4]	; (80045c8 <__malloc_unlock+0x8>)
 80045c2:	f000 baf6 	b.w	8004bb2 <__retarget_lock_release_recursive>
 80045c6:	bf00      	nop
 80045c8:	20000218 	.word	0x20000218

080045cc <__ssputs_r>:
 80045cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045d0:	688e      	ldr	r6, [r1, #8]
 80045d2:	4682      	mov	sl, r0
 80045d4:	429e      	cmp	r6, r3
 80045d6:	460c      	mov	r4, r1
 80045d8:	4690      	mov	r8, r2
 80045da:	461f      	mov	r7, r3
 80045dc:	d838      	bhi.n	8004650 <__ssputs_r+0x84>
 80045de:	898a      	ldrh	r2, [r1, #12]
 80045e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80045e4:	d032      	beq.n	800464c <__ssputs_r+0x80>
 80045e6:	6825      	ldr	r5, [r4, #0]
 80045e8:	6909      	ldr	r1, [r1, #16]
 80045ea:	3301      	adds	r3, #1
 80045ec:	eba5 0901 	sub.w	r9, r5, r1
 80045f0:	6965      	ldr	r5, [r4, #20]
 80045f2:	444b      	add	r3, r9
 80045f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80045f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80045fc:	106d      	asrs	r5, r5, #1
 80045fe:	429d      	cmp	r5, r3
 8004600:	bf38      	it	cc
 8004602:	461d      	movcc	r5, r3
 8004604:	0553      	lsls	r3, r2, #21
 8004606:	d531      	bpl.n	800466c <__ssputs_r+0xa0>
 8004608:	4629      	mov	r1, r5
 800460a:	f7ff ff49 	bl	80044a0 <_malloc_r>
 800460e:	4606      	mov	r6, r0
 8004610:	b950      	cbnz	r0, 8004628 <__ssputs_r+0x5c>
 8004612:	230c      	movs	r3, #12
 8004614:	f04f 30ff 	mov.w	r0, #4294967295
 8004618:	f8ca 3000 	str.w	r3, [sl]
 800461c:	89a3      	ldrh	r3, [r4, #12]
 800461e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004622:	81a3      	strh	r3, [r4, #12]
 8004624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004628:	464a      	mov	r2, r9
 800462a:	6921      	ldr	r1, [r4, #16]
 800462c:	f000 fad0 	bl	8004bd0 <memcpy>
 8004630:	89a3      	ldrh	r3, [r4, #12]
 8004632:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800463a:	81a3      	strh	r3, [r4, #12]
 800463c:	6126      	str	r6, [r4, #16]
 800463e:	444e      	add	r6, r9
 8004640:	6026      	str	r6, [r4, #0]
 8004642:	463e      	mov	r6, r7
 8004644:	6165      	str	r5, [r4, #20]
 8004646:	eba5 0509 	sub.w	r5, r5, r9
 800464a:	60a5      	str	r5, [r4, #8]
 800464c:	42be      	cmp	r6, r7
 800464e:	d900      	bls.n	8004652 <__ssputs_r+0x86>
 8004650:	463e      	mov	r6, r7
 8004652:	4632      	mov	r2, r6
 8004654:	4641      	mov	r1, r8
 8004656:	6820      	ldr	r0, [r4, #0]
 8004658:	f000 fac8 	bl	8004bec <memmove>
 800465c:	68a3      	ldr	r3, [r4, #8]
 800465e:	6822      	ldr	r2, [r4, #0]
 8004660:	1b9b      	subs	r3, r3, r6
 8004662:	4432      	add	r2, r6
 8004664:	2000      	movs	r0, #0
 8004666:	60a3      	str	r3, [r4, #8]
 8004668:	6022      	str	r2, [r4, #0]
 800466a:	e7db      	b.n	8004624 <__ssputs_r+0x58>
 800466c:	462a      	mov	r2, r5
 800466e:	f000 fad7 	bl	8004c20 <_realloc_r>
 8004672:	4606      	mov	r6, r0
 8004674:	2800      	cmp	r0, #0
 8004676:	d1e1      	bne.n	800463c <__ssputs_r+0x70>
 8004678:	4650      	mov	r0, sl
 800467a:	6921      	ldr	r1, [r4, #16]
 800467c:	f7ff fec4 	bl	8004408 <_free_r>
 8004680:	e7c7      	b.n	8004612 <__ssputs_r+0x46>
	...

08004684 <_svfiprintf_r>:
 8004684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004688:	4698      	mov	r8, r3
 800468a:	898b      	ldrh	r3, [r1, #12]
 800468c:	4607      	mov	r7, r0
 800468e:	061b      	lsls	r3, r3, #24
 8004690:	460d      	mov	r5, r1
 8004692:	4614      	mov	r4, r2
 8004694:	b09d      	sub	sp, #116	; 0x74
 8004696:	d50e      	bpl.n	80046b6 <_svfiprintf_r+0x32>
 8004698:	690b      	ldr	r3, [r1, #16]
 800469a:	b963      	cbnz	r3, 80046b6 <_svfiprintf_r+0x32>
 800469c:	2140      	movs	r1, #64	; 0x40
 800469e:	f7ff feff 	bl	80044a0 <_malloc_r>
 80046a2:	6028      	str	r0, [r5, #0]
 80046a4:	6128      	str	r0, [r5, #16]
 80046a6:	b920      	cbnz	r0, 80046b2 <_svfiprintf_r+0x2e>
 80046a8:	230c      	movs	r3, #12
 80046aa:	603b      	str	r3, [r7, #0]
 80046ac:	f04f 30ff 	mov.w	r0, #4294967295
 80046b0:	e0d1      	b.n	8004856 <_svfiprintf_r+0x1d2>
 80046b2:	2340      	movs	r3, #64	; 0x40
 80046b4:	616b      	str	r3, [r5, #20]
 80046b6:	2300      	movs	r3, #0
 80046b8:	9309      	str	r3, [sp, #36]	; 0x24
 80046ba:	2320      	movs	r3, #32
 80046bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80046c0:	2330      	movs	r3, #48	; 0x30
 80046c2:	f04f 0901 	mov.w	r9, #1
 80046c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80046ca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004870 <_svfiprintf_r+0x1ec>
 80046ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80046d2:	4623      	mov	r3, r4
 80046d4:	469a      	mov	sl, r3
 80046d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80046da:	b10a      	cbz	r2, 80046e0 <_svfiprintf_r+0x5c>
 80046dc:	2a25      	cmp	r2, #37	; 0x25
 80046de:	d1f9      	bne.n	80046d4 <_svfiprintf_r+0x50>
 80046e0:	ebba 0b04 	subs.w	fp, sl, r4
 80046e4:	d00b      	beq.n	80046fe <_svfiprintf_r+0x7a>
 80046e6:	465b      	mov	r3, fp
 80046e8:	4622      	mov	r2, r4
 80046ea:	4629      	mov	r1, r5
 80046ec:	4638      	mov	r0, r7
 80046ee:	f7ff ff6d 	bl	80045cc <__ssputs_r>
 80046f2:	3001      	adds	r0, #1
 80046f4:	f000 80aa 	beq.w	800484c <_svfiprintf_r+0x1c8>
 80046f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046fa:	445a      	add	r2, fp
 80046fc:	9209      	str	r2, [sp, #36]	; 0x24
 80046fe:	f89a 3000 	ldrb.w	r3, [sl]
 8004702:	2b00      	cmp	r3, #0
 8004704:	f000 80a2 	beq.w	800484c <_svfiprintf_r+0x1c8>
 8004708:	2300      	movs	r3, #0
 800470a:	f04f 32ff 	mov.w	r2, #4294967295
 800470e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004712:	f10a 0a01 	add.w	sl, sl, #1
 8004716:	9304      	str	r3, [sp, #16]
 8004718:	9307      	str	r3, [sp, #28]
 800471a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800471e:	931a      	str	r3, [sp, #104]	; 0x68
 8004720:	4654      	mov	r4, sl
 8004722:	2205      	movs	r2, #5
 8004724:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004728:	4851      	ldr	r0, [pc, #324]	; (8004870 <_svfiprintf_r+0x1ec>)
 800472a:	f000 fa43 	bl	8004bb4 <memchr>
 800472e:	9a04      	ldr	r2, [sp, #16]
 8004730:	b9d8      	cbnz	r0, 800476a <_svfiprintf_r+0xe6>
 8004732:	06d0      	lsls	r0, r2, #27
 8004734:	bf44      	itt	mi
 8004736:	2320      	movmi	r3, #32
 8004738:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800473c:	0711      	lsls	r1, r2, #28
 800473e:	bf44      	itt	mi
 8004740:	232b      	movmi	r3, #43	; 0x2b
 8004742:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004746:	f89a 3000 	ldrb.w	r3, [sl]
 800474a:	2b2a      	cmp	r3, #42	; 0x2a
 800474c:	d015      	beq.n	800477a <_svfiprintf_r+0xf6>
 800474e:	4654      	mov	r4, sl
 8004750:	2000      	movs	r0, #0
 8004752:	f04f 0c0a 	mov.w	ip, #10
 8004756:	9a07      	ldr	r2, [sp, #28]
 8004758:	4621      	mov	r1, r4
 800475a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800475e:	3b30      	subs	r3, #48	; 0x30
 8004760:	2b09      	cmp	r3, #9
 8004762:	d94e      	bls.n	8004802 <_svfiprintf_r+0x17e>
 8004764:	b1b0      	cbz	r0, 8004794 <_svfiprintf_r+0x110>
 8004766:	9207      	str	r2, [sp, #28]
 8004768:	e014      	b.n	8004794 <_svfiprintf_r+0x110>
 800476a:	eba0 0308 	sub.w	r3, r0, r8
 800476e:	fa09 f303 	lsl.w	r3, r9, r3
 8004772:	4313      	orrs	r3, r2
 8004774:	46a2      	mov	sl, r4
 8004776:	9304      	str	r3, [sp, #16]
 8004778:	e7d2      	b.n	8004720 <_svfiprintf_r+0x9c>
 800477a:	9b03      	ldr	r3, [sp, #12]
 800477c:	1d19      	adds	r1, r3, #4
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	9103      	str	r1, [sp, #12]
 8004782:	2b00      	cmp	r3, #0
 8004784:	bfbb      	ittet	lt
 8004786:	425b      	neglt	r3, r3
 8004788:	f042 0202 	orrlt.w	r2, r2, #2
 800478c:	9307      	strge	r3, [sp, #28]
 800478e:	9307      	strlt	r3, [sp, #28]
 8004790:	bfb8      	it	lt
 8004792:	9204      	strlt	r2, [sp, #16]
 8004794:	7823      	ldrb	r3, [r4, #0]
 8004796:	2b2e      	cmp	r3, #46	; 0x2e
 8004798:	d10c      	bne.n	80047b4 <_svfiprintf_r+0x130>
 800479a:	7863      	ldrb	r3, [r4, #1]
 800479c:	2b2a      	cmp	r3, #42	; 0x2a
 800479e:	d135      	bne.n	800480c <_svfiprintf_r+0x188>
 80047a0:	9b03      	ldr	r3, [sp, #12]
 80047a2:	3402      	adds	r4, #2
 80047a4:	1d1a      	adds	r2, r3, #4
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	9203      	str	r2, [sp, #12]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	bfb8      	it	lt
 80047ae:	f04f 33ff 	movlt.w	r3, #4294967295
 80047b2:	9305      	str	r3, [sp, #20]
 80047b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004880 <_svfiprintf_r+0x1fc>
 80047b8:	2203      	movs	r2, #3
 80047ba:	4650      	mov	r0, sl
 80047bc:	7821      	ldrb	r1, [r4, #0]
 80047be:	f000 f9f9 	bl	8004bb4 <memchr>
 80047c2:	b140      	cbz	r0, 80047d6 <_svfiprintf_r+0x152>
 80047c4:	2340      	movs	r3, #64	; 0x40
 80047c6:	eba0 000a 	sub.w	r0, r0, sl
 80047ca:	fa03 f000 	lsl.w	r0, r3, r0
 80047ce:	9b04      	ldr	r3, [sp, #16]
 80047d0:	3401      	adds	r4, #1
 80047d2:	4303      	orrs	r3, r0
 80047d4:	9304      	str	r3, [sp, #16]
 80047d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047da:	2206      	movs	r2, #6
 80047dc:	4825      	ldr	r0, [pc, #148]	; (8004874 <_svfiprintf_r+0x1f0>)
 80047de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80047e2:	f000 f9e7 	bl	8004bb4 <memchr>
 80047e6:	2800      	cmp	r0, #0
 80047e8:	d038      	beq.n	800485c <_svfiprintf_r+0x1d8>
 80047ea:	4b23      	ldr	r3, [pc, #140]	; (8004878 <_svfiprintf_r+0x1f4>)
 80047ec:	bb1b      	cbnz	r3, 8004836 <_svfiprintf_r+0x1b2>
 80047ee:	9b03      	ldr	r3, [sp, #12]
 80047f0:	3307      	adds	r3, #7
 80047f2:	f023 0307 	bic.w	r3, r3, #7
 80047f6:	3308      	adds	r3, #8
 80047f8:	9303      	str	r3, [sp, #12]
 80047fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047fc:	4433      	add	r3, r6
 80047fe:	9309      	str	r3, [sp, #36]	; 0x24
 8004800:	e767      	b.n	80046d2 <_svfiprintf_r+0x4e>
 8004802:	460c      	mov	r4, r1
 8004804:	2001      	movs	r0, #1
 8004806:	fb0c 3202 	mla	r2, ip, r2, r3
 800480a:	e7a5      	b.n	8004758 <_svfiprintf_r+0xd4>
 800480c:	2300      	movs	r3, #0
 800480e:	f04f 0c0a 	mov.w	ip, #10
 8004812:	4619      	mov	r1, r3
 8004814:	3401      	adds	r4, #1
 8004816:	9305      	str	r3, [sp, #20]
 8004818:	4620      	mov	r0, r4
 800481a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800481e:	3a30      	subs	r2, #48	; 0x30
 8004820:	2a09      	cmp	r2, #9
 8004822:	d903      	bls.n	800482c <_svfiprintf_r+0x1a8>
 8004824:	2b00      	cmp	r3, #0
 8004826:	d0c5      	beq.n	80047b4 <_svfiprintf_r+0x130>
 8004828:	9105      	str	r1, [sp, #20]
 800482a:	e7c3      	b.n	80047b4 <_svfiprintf_r+0x130>
 800482c:	4604      	mov	r4, r0
 800482e:	2301      	movs	r3, #1
 8004830:	fb0c 2101 	mla	r1, ip, r1, r2
 8004834:	e7f0      	b.n	8004818 <_svfiprintf_r+0x194>
 8004836:	ab03      	add	r3, sp, #12
 8004838:	9300      	str	r3, [sp, #0]
 800483a:	462a      	mov	r2, r5
 800483c:	4638      	mov	r0, r7
 800483e:	4b0f      	ldr	r3, [pc, #60]	; (800487c <_svfiprintf_r+0x1f8>)
 8004840:	a904      	add	r1, sp, #16
 8004842:	f3af 8000 	nop.w
 8004846:	1c42      	adds	r2, r0, #1
 8004848:	4606      	mov	r6, r0
 800484a:	d1d6      	bne.n	80047fa <_svfiprintf_r+0x176>
 800484c:	89ab      	ldrh	r3, [r5, #12]
 800484e:	065b      	lsls	r3, r3, #25
 8004850:	f53f af2c 	bmi.w	80046ac <_svfiprintf_r+0x28>
 8004854:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004856:	b01d      	add	sp, #116	; 0x74
 8004858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800485c:	ab03      	add	r3, sp, #12
 800485e:	9300      	str	r3, [sp, #0]
 8004860:	462a      	mov	r2, r5
 8004862:	4638      	mov	r0, r7
 8004864:	4b05      	ldr	r3, [pc, #20]	; (800487c <_svfiprintf_r+0x1f8>)
 8004866:	a904      	add	r1, sp, #16
 8004868:	f000 f87c 	bl	8004964 <_printf_i>
 800486c:	e7eb      	b.n	8004846 <_svfiprintf_r+0x1c2>
 800486e:	bf00      	nop
 8004870:	08004ce2 	.word	0x08004ce2
 8004874:	08004cec 	.word	0x08004cec
 8004878:	00000000 	.word	0x00000000
 800487c:	080045cd 	.word	0x080045cd
 8004880:	08004ce8 	.word	0x08004ce8

08004884 <_printf_common>:
 8004884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004888:	4616      	mov	r6, r2
 800488a:	4699      	mov	r9, r3
 800488c:	688a      	ldr	r2, [r1, #8]
 800488e:	690b      	ldr	r3, [r1, #16]
 8004890:	4607      	mov	r7, r0
 8004892:	4293      	cmp	r3, r2
 8004894:	bfb8      	it	lt
 8004896:	4613      	movlt	r3, r2
 8004898:	6033      	str	r3, [r6, #0]
 800489a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800489e:	460c      	mov	r4, r1
 80048a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80048a4:	b10a      	cbz	r2, 80048aa <_printf_common+0x26>
 80048a6:	3301      	adds	r3, #1
 80048a8:	6033      	str	r3, [r6, #0]
 80048aa:	6823      	ldr	r3, [r4, #0]
 80048ac:	0699      	lsls	r1, r3, #26
 80048ae:	bf42      	ittt	mi
 80048b0:	6833      	ldrmi	r3, [r6, #0]
 80048b2:	3302      	addmi	r3, #2
 80048b4:	6033      	strmi	r3, [r6, #0]
 80048b6:	6825      	ldr	r5, [r4, #0]
 80048b8:	f015 0506 	ands.w	r5, r5, #6
 80048bc:	d106      	bne.n	80048cc <_printf_common+0x48>
 80048be:	f104 0a19 	add.w	sl, r4, #25
 80048c2:	68e3      	ldr	r3, [r4, #12]
 80048c4:	6832      	ldr	r2, [r6, #0]
 80048c6:	1a9b      	subs	r3, r3, r2
 80048c8:	42ab      	cmp	r3, r5
 80048ca:	dc28      	bgt.n	800491e <_printf_common+0x9a>
 80048cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80048d0:	1e13      	subs	r3, r2, #0
 80048d2:	6822      	ldr	r2, [r4, #0]
 80048d4:	bf18      	it	ne
 80048d6:	2301      	movne	r3, #1
 80048d8:	0692      	lsls	r2, r2, #26
 80048da:	d42d      	bmi.n	8004938 <_printf_common+0xb4>
 80048dc:	4649      	mov	r1, r9
 80048de:	4638      	mov	r0, r7
 80048e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048e4:	47c0      	blx	r8
 80048e6:	3001      	adds	r0, #1
 80048e8:	d020      	beq.n	800492c <_printf_common+0xa8>
 80048ea:	6823      	ldr	r3, [r4, #0]
 80048ec:	68e5      	ldr	r5, [r4, #12]
 80048ee:	f003 0306 	and.w	r3, r3, #6
 80048f2:	2b04      	cmp	r3, #4
 80048f4:	bf18      	it	ne
 80048f6:	2500      	movne	r5, #0
 80048f8:	6832      	ldr	r2, [r6, #0]
 80048fa:	f04f 0600 	mov.w	r6, #0
 80048fe:	68a3      	ldr	r3, [r4, #8]
 8004900:	bf08      	it	eq
 8004902:	1aad      	subeq	r5, r5, r2
 8004904:	6922      	ldr	r2, [r4, #16]
 8004906:	bf08      	it	eq
 8004908:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800490c:	4293      	cmp	r3, r2
 800490e:	bfc4      	itt	gt
 8004910:	1a9b      	subgt	r3, r3, r2
 8004912:	18ed      	addgt	r5, r5, r3
 8004914:	341a      	adds	r4, #26
 8004916:	42b5      	cmp	r5, r6
 8004918:	d11a      	bne.n	8004950 <_printf_common+0xcc>
 800491a:	2000      	movs	r0, #0
 800491c:	e008      	b.n	8004930 <_printf_common+0xac>
 800491e:	2301      	movs	r3, #1
 8004920:	4652      	mov	r2, sl
 8004922:	4649      	mov	r1, r9
 8004924:	4638      	mov	r0, r7
 8004926:	47c0      	blx	r8
 8004928:	3001      	adds	r0, #1
 800492a:	d103      	bne.n	8004934 <_printf_common+0xb0>
 800492c:	f04f 30ff 	mov.w	r0, #4294967295
 8004930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004934:	3501      	adds	r5, #1
 8004936:	e7c4      	b.n	80048c2 <_printf_common+0x3e>
 8004938:	2030      	movs	r0, #48	; 0x30
 800493a:	18e1      	adds	r1, r4, r3
 800493c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004940:	1c5a      	adds	r2, r3, #1
 8004942:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004946:	4422      	add	r2, r4
 8004948:	3302      	adds	r3, #2
 800494a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800494e:	e7c5      	b.n	80048dc <_printf_common+0x58>
 8004950:	2301      	movs	r3, #1
 8004952:	4622      	mov	r2, r4
 8004954:	4649      	mov	r1, r9
 8004956:	4638      	mov	r0, r7
 8004958:	47c0      	blx	r8
 800495a:	3001      	adds	r0, #1
 800495c:	d0e6      	beq.n	800492c <_printf_common+0xa8>
 800495e:	3601      	adds	r6, #1
 8004960:	e7d9      	b.n	8004916 <_printf_common+0x92>
	...

08004964 <_printf_i>:
 8004964:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004968:	460c      	mov	r4, r1
 800496a:	7e27      	ldrb	r7, [r4, #24]
 800496c:	4691      	mov	r9, r2
 800496e:	2f78      	cmp	r7, #120	; 0x78
 8004970:	4680      	mov	r8, r0
 8004972:	469a      	mov	sl, r3
 8004974:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004976:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800497a:	d807      	bhi.n	800498c <_printf_i+0x28>
 800497c:	2f62      	cmp	r7, #98	; 0x62
 800497e:	d80a      	bhi.n	8004996 <_printf_i+0x32>
 8004980:	2f00      	cmp	r7, #0
 8004982:	f000 80d9 	beq.w	8004b38 <_printf_i+0x1d4>
 8004986:	2f58      	cmp	r7, #88	; 0x58
 8004988:	f000 80a4 	beq.w	8004ad4 <_printf_i+0x170>
 800498c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004990:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004994:	e03a      	b.n	8004a0c <_printf_i+0xa8>
 8004996:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800499a:	2b15      	cmp	r3, #21
 800499c:	d8f6      	bhi.n	800498c <_printf_i+0x28>
 800499e:	a001      	add	r0, pc, #4	; (adr r0, 80049a4 <_printf_i+0x40>)
 80049a0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80049a4:	080049fd 	.word	0x080049fd
 80049a8:	08004a11 	.word	0x08004a11
 80049ac:	0800498d 	.word	0x0800498d
 80049b0:	0800498d 	.word	0x0800498d
 80049b4:	0800498d 	.word	0x0800498d
 80049b8:	0800498d 	.word	0x0800498d
 80049bc:	08004a11 	.word	0x08004a11
 80049c0:	0800498d 	.word	0x0800498d
 80049c4:	0800498d 	.word	0x0800498d
 80049c8:	0800498d 	.word	0x0800498d
 80049cc:	0800498d 	.word	0x0800498d
 80049d0:	08004b1f 	.word	0x08004b1f
 80049d4:	08004a41 	.word	0x08004a41
 80049d8:	08004b01 	.word	0x08004b01
 80049dc:	0800498d 	.word	0x0800498d
 80049e0:	0800498d 	.word	0x0800498d
 80049e4:	08004b41 	.word	0x08004b41
 80049e8:	0800498d 	.word	0x0800498d
 80049ec:	08004a41 	.word	0x08004a41
 80049f0:	0800498d 	.word	0x0800498d
 80049f4:	0800498d 	.word	0x0800498d
 80049f8:	08004b09 	.word	0x08004b09
 80049fc:	680b      	ldr	r3, [r1, #0]
 80049fe:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004a02:	1d1a      	adds	r2, r3, #4
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	600a      	str	r2, [r1, #0]
 8004a08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e0a4      	b.n	8004b5a <_printf_i+0x1f6>
 8004a10:	6825      	ldr	r5, [r4, #0]
 8004a12:	6808      	ldr	r0, [r1, #0]
 8004a14:	062e      	lsls	r6, r5, #24
 8004a16:	f100 0304 	add.w	r3, r0, #4
 8004a1a:	d50a      	bpl.n	8004a32 <_printf_i+0xce>
 8004a1c:	6805      	ldr	r5, [r0, #0]
 8004a1e:	600b      	str	r3, [r1, #0]
 8004a20:	2d00      	cmp	r5, #0
 8004a22:	da03      	bge.n	8004a2c <_printf_i+0xc8>
 8004a24:	232d      	movs	r3, #45	; 0x2d
 8004a26:	426d      	negs	r5, r5
 8004a28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a2c:	230a      	movs	r3, #10
 8004a2e:	485e      	ldr	r0, [pc, #376]	; (8004ba8 <_printf_i+0x244>)
 8004a30:	e019      	b.n	8004a66 <_printf_i+0x102>
 8004a32:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004a36:	6805      	ldr	r5, [r0, #0]
 8004a38:	600b      	str	r3, [r1, #0]
 8004a3a:	bf18      	it	ne
 8004a3c:	b22d      	sxthne	r5, r5
 8004a3e:	e7ef      	b.n	8004a20 <_printf_i+0xbc>
 8004a40:	680b      	ldr	r3, [r1, #0]
 8004a42:	6825      	ldr	r5, [r4, #0]
 8004a44:	1d18      	adds	r0, r3, #4
 8004a46:	6008      	str	r0, [r1, #0]
 8004a48:	0628      	lsls	r0, r5, #24
 8004a4a:	d501      	bpl.n	8004a50 <_printf_i+0xec>
 8004a4c:	681d      	ldr	r5, [r3, #0]
 8004a4e:	e002      	b.n	8004a56 <_printf_i+0xf2>
 8004a50:	0669      	lsls	r1, r5, #25
 8004a52:	d5fb      	bpl.n	8004a4c <_printf_i+0xe8>
 8004a54:	881d      	ldrh	r5, [r3, #0]
 8004a56:	2f6f      	cmp	r7, #111	; 0x6f
 8004a58:	bf0c      	ite	eq
 8004a5a:	2308      	moveq	r3, #8
 8004a5c:	230a      	movne	r3, #10
 8004a5e:	4852      	ldr	r0, [pc, #328]	; (8004ba8 <_printf_i+0x244>)
 8004a60:	2100      	movs	r1, #0
 8004a62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a66:	6866      	ldr	r6, [r4, #4]
 8004a68:	2e00      	cmp	r6, #0
 8004a6a:	bfa8      	it	ge
 8004a6c:	6821      	ldrge	r1, [r4, #0]
 8004a6e:	60a6      	str	r6, [r4, #8]
 8004a70:	bfa4      	itt	ge
 8004a72:	f021 0104 	bicge.w	r1, r1, #4
 8004a76:	6021      	strge	r1, [r4, #0]
 8004a78:	b90d      	cbnz	r5, 8004a7e <_printf_i+0x11a>
 8004a7a:	2e00      	cmp	r6, #0
 8004a7c:	d04d      	beq.n	8004b1a <_printf_i+0x1b6>
 8004a7e:	4616      	mov	r6, r2
 8004a80:	fbb5 f1f3 	udiv	r1, r5, r3
 8004a84:	fb03 5711 	mls	r7, r3, r1, r5
 8004a88:	5dc7      	ldrb	r7, [r0, r7]
 8004a8a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004a8e:	462f      	mov	r7, r5
 8004a90:	42bb      	cmp	r3, r7
 8004a92:	460d      	mov	r5, r1
 8004a94:	d9f4      	bls.n	8004a80 <_printf_i+0x11c>
 8004a96:	2b08      	cmp	r3, #8
 8004a98:	d10b      	bne.n	8004ab2 <_printf_i+0x14e>
 8004a9a:	6823      	ldr	r3, [r4, #0]
 8004a9c:	07df      	lsls	r7, r3, #31
 8004a9e:	d508      	bpl.n	8004ab2 <_printf_i+0x14e>
 8004aa0:	6923      	ldr	r3, [r4, #16]
 8004aa2:	6861      	ldr	r1, [r4, #4]
 8004aa4:	4299      	cmp	r1, r3
 8004aa6:	bfde      	ittt	le
 8004aa8:	2330      	movle	r3, #48	; 0x30
 8004aaa:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004aae:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004ab2:	1b92      	subs	r2, r2, r6
 8004ab4:	6122      	str	r2, [r4, #16]
 8004ab6:	464b      	mov	r3, r9
 8004ab8:	4621      	mov	r1, r4
 8004aba:	4640      	mov	r0, r8
 8004abc:	f8cd a000 	str.w	sl, [sp]
 8004ac0:	aa03      	add	r2, sp, #12
 8004ac2:	f7ff fedf 	bl	8004884 <_printf_common>
 8004ac6:	3001      	adds	r0, #1
 8004ac8:	d14c      	bne.n	8004b64 <_printf_i+0x200>
 8004aca:	f04f 30ff 	mov.w	r0, #4294967295
 8004ace:	b004      	add	sp, #16
 8004ad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ad4:	4834      	ldr	r0, [pc, #208]	; (8004ba8 <_printf_i+0x244>)
 8004ad6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004ada:	680e      	ldr	r6, [r1, #0]
 8004adc:	6823      	ldr	r3, [r4, #0]
 8004ade:	f856 5b04 	ldr.w	r5, [r6], #4
 8004ae2:	061f      	lsls	r7, r3, #24
 8004ae4:	600e      	str	r6, [r1, #0]
 8004ae6:	d514      	bpl.n	8004b12 <_printf_i+0x1ae>
 8004ae8:	07d9      	lsls	r1, r3, #31
 8004aea:	bf44      	itt	mi
 8004aec:	f043 0320 	orrmi.w	r3, r3, #32
 8004af0:	6023      	strmi	r3, [r4, #0]
 8004af2:	b91d      	cbnz	r5, 8004afc <_printf_i+0x198>
 8004af4:	6823      	ldr	r3, [r4, #0]
 8004af6:	f023 0320 	bic.w	r3, r3, #32
 8004afa:	6023      	str	r3, [r4, #0]
 8004afc:	2310      	movs	r3, #16
 8004afe:	e7af      	b.n	8004a60 <_printf_i+0xfc>
 8004b00:	6823      	ldr	r3, [r4, #0]
 8004b02:	f043 0320 	orr.w	r3, r3, #32
 8004b06:	6023      	str	r3, [r4, #0]
 8004b08:	2378      	movs	r3, #120	; 0x78
 8004b0a:	4828      	ldr	r0, [pc, #160]	; (8004bac <_printf_i+0x248>)
 8004b0c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b10:	e7e3      	b.n	8004ada <_printf_i+0x176>
 8004b12:	065e      	lsls	r6, r3, #25
 8004b14:	bf48      	it	mi
 8004b16:	b2ad      	uxthmi	r5, r5
 8004b18:	e7e6      	b.n	8004ae8 <_printf_i+0x184>
 8004b1a:	4616      	mov	r6, r2
 8004b1c:	e7bb      	b.n	8004a96 <_printf_i+0x132>
 8004b1e:	680b      	ldr	r3, [r1, #0]
 8004b20:	6826      	ldr	r6, [r4, #0]
 8004b22:	1d1d      	adds	r5, r3, #4
 8004b24:	6960      	ldr	r0, [r4, #20]
 8004b26:	600d      	str	r5, [r1, #0]
 8004b28:	0635      	lsls	r5, r6, #24
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	d501      	bpl.n	8004b32 <_printf_i+0x1ce>
 8004b2e:	6018      	str	r0, [r3, #0]
 8004b30:	e002      	b.n	8004b38 <_printf_i+0x1d4>
 8004b32:	0671      	lsls	r1, r6, #25
 8004b34:	d5fb      	bpl.n	8004b2e <_printf_i+0x1ca>
 8004b36:	8018      	strh	r0, [r3, #0]
 8004b38:	2300      	movs	r3, #0
 8004b3a:	4616      	mov	r6, r2
 8004b3c:	6123      	str	r3, [r4, #16]
 8004b3e:	e7ba      	b.n	8004ab6 <_printf_i+0x152>
 8004b40:	680b      	ldr	r3, [r1, #0]
 8004b42:	1d1a      	adds	r2, r3, #4
 8004b44:	600a      	str	r2, [r1, #0]
 8004b46:	681e      	ldr	r6, [r3, #0]
 8004b48:	2100      	movs	r1, #0
 8004b4a:	4630      	mov	r0, r6
 8004b4c:	6862      	ldr	r2, [r4, #4]
 8004b4e:	f000 f831 	bl	8004bb4 <memchr>
 8004b52:	b108      	cbz	r0, 8004b58 <_printf_i+0x1f4>
 8004b54:	1b80      	subs	r0, r0, r6
 8004b56:	6060      	str	r0, [r4, #4]
 8004b58:	6863      	ldr	r3, [r4, #4]
 8004b5a:	6123      	str	r3, [r4, #16]
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b62:	e7a8      	b.n	8004ab6 <_printf_i+0x152>
 8004b64:	4632      	mov	r2, r6
 8004b66:	4649      	mov	r1, r9
 8004b68:	4640      	mov	r0, r8
 8004b6a:	6923      	ldr	r3, [r4, #16]
 8004b6c:	47d0      	blx	sl
 8004b6e:	3001      	adds	r0, #1
 8004b70:	d0ab      	beq.n	8004aca <_printf_i+0x166>
 8004b72:	6823      	ldr	r3, [r4, #0]
 8004b74:	079b      	lsls	r3, r3, #30
 8004b76:	d413      	bmi.n	8004ba0 <_printf_i+0x23c>
 8004b78:	68e0      	ldr	r0, [r4, #12]
 8004b7a:	9b03      	ldr	r3, [sp, #12]
 8004b7c:	4298      	cmp	r0, r3
 8004b7e:	bfb8      	it	lt
 8004b80:	4618      	movlt	r0, r3
 8004b82:	e7a4      	b.n	8004ace <_printf_i+0x16a>
 8004b84:	2301      	movs	r3, #1
 8004b86:	4632      	mov	r2, r6
 8004b88:	4649      	mov	r1, r9
 8004b8a:	4640      	mov	r0, r8
 8004b8c:	47d0      	blx	sl
 8004b8e:	3001      	adds	r0, #1
 8004b90:	d09b      	beq.n	8004aca <_printf_i+0x166>
 8004b92:	3501      	adds	r5, #1
 8004b94:	68e3      	ldr	r3, [r4, #12]
 8004b96:	9903      	ldr	r1, [sp, #12]
 8004b98:	1a5b      	subs	r3, r3, r1
 8004b9a:	42ab      	cmp	r3, r5
 8004b9c:	dcf2      	bgt.n	8004b84 <_printf_i+0x220>
 8004b9e:	e7eb      	b.n	8004b78 <_printf_i+0x214>
 8004ba0:	2500      	movs	r5, #0
 8004ba2:	f104 0619 	add.w	r6, r4, #25
 8004ba6:	e7f5      	b.n	8004b94 <_printf_i+0x230>
 8004ba8:	08004cf3 	.word	0x08004cf3
 8004bac:	08004d04 	.word	0x08004d04

08004bb0 <__retarget_lock_acquire_recursive>:
 8004bb0:	4770      	bx	lr

08004bb2 <__retarget_lock_release_recursive>:
 8004bb2:	4770      	bx	lr

08004bb4 <memchr>:
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	b510      	push	{r4, lr}
 8004bb8:	b2c9      	uxtb	r1, r1
 8004bba:	4402      	add	r2, r0
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	d101      	bne.n	8004bc6 <memchr+0x12>
 8004bc2:	2000      	movs	r0, #0
 8004bc4:	e003      	b.n	8004bce <memchr+0x1a>
 8004bc6:	7804      	ldrb	r4, [r0, #0]
 8004bc8:	3301      	adds	r3, #1
 8004bca:	428c      	cmp	r4, r1
 8004bcc:	d1f6      	bne.n	8004bbc <memchr+0x8>
 8004bce:	bd10      	pop	{r4, pc}

08004bd0 <memcpy>:
 8004bd0:	440a      	add	r2, r1
 8004bd2:	4291      	cmp	r1, r2
 8004bd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004bd8:	d100      	bne.n	8004bdc <memcpy+0xc>
 8004bda:	4770      	bx	lr
 8004bdc:	b510      	push	{r4, lr}
 8004bde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004be2:	4291      	cmp	r1, r2
 8004be4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004be8:	d1f9      	bne.n	8004bde <memcpy+0xe>
 8004bea:	bd10      	pop	{r4, pc}

08004bec <memmove>:
 8004bec:	4288      	cmp	r0, r1
 8004bee:	b510      	push	{r4, lr}
 8004bf0:	eb01 0402 	add.w	r4, r1, r2
 8004bf4:	d902      	bls.n	8004bfc <memmove+0x10>
 8004bf6:	4284      	cmp	r4, r0
 8004bf8:	4623      	mov	r3, r4
 8004bfa:	d807      	bhi.n	8004c0c <memmove+0x20>
 8004bfc:	1e43      	subs	r3, r0, #1
 8004bfe:	42a1      	cmp	r1, r4
 8004c00:	d008      	beq.n	8004c14 <memmove+0x28>
 8004c02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c0a:	e7f8      	b.n	8004bfe <memmove+0x12>
 8004c0c:	4601      	mov	r1, r0
 8004c0e:	4402      	add	r2, r0
 8004c10:	428a      	cmp	r2, r1
 8004c12:	d100      	bne.n	8004c16 <memmove+0x2a>
 8004c14:	bd10      	pop	{r4, pc}
 8004c16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c1e:	e7f7      	b.n	8004c10 <memmove+0x24>

08004c20 <_realloc_r>:
 8004c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c22:	4607      	mov	r7, r0
 8004c24:	4614      	mov	r4, r2
 8004c26:	460e      	mov	r6, r1
 8004c28:	b921      	cbnz	r1, 8004c34 <_realloc_r+0x14>
 8004c2a:	4611      	mov	r1, r2
 8004c2c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004c30:	f7ff bc36 	b.w	80044a0 <_malloc_r>
 8004c34:	b922      	cbnz	r2, 8004c40 <_realloc_r+0x20>
 8004c36:	f7ff fbe7 	bl	8004408 <_free_r>
 8004c3a:	4625      	mov	r5, r4
 8004c3c:	4628      	mov	r0, r5
 8004c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c40:	f000 f814 	bl	8004c6c <_malloc_usable_size_r>
 8004c44:	42a0      	cmp	r0, r4
 8004c46:	d20f      	bcs.n	8004c68 <_realloc_r+0x48>
 8004c48:	4621      	mov	r1, r4
 8004c4a:	4638      	mov	r0, r7
 8004c4c:	f7ff fc28 	bl	80044a0 <_malloc_r>
 8004c50:	4605      	mov	r5, r0
 8004c52:	2800      	cmp	r0, #0
 8004c54:	d0f2      	beq.n	8004c3c <_realloc_r+0x1c>
 8004c56:	4631      	mov	r1, r6
 8004c58:	4622      	mov	r2, r4
 8004c5a:	f7ff ffb9 	bl	8004bd0 <memcpy>
 8004c5e:	4631      	mov	r1, r6
 8004c60:	4638      	mov	r0, r7
 8004c62:	f7ff fbd1 	bl	8004408 <_free_r>
 8004c66:	e7e9      	b.n	8004c3c <_realloc_r+0x1c>
 8004c68:	4635      	mov	r5, r6
 8004c6a:	e7e7      	b.n	8004c3c <_realloc_r+0x1c>

08004c6c <_malloc_usable_size_r>:
 8004c6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c70:	1f18      	subs	r0, r3, #4
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	bfbc      	itt	lt
 8004c76:	580b      	ldrlt	r3, [r1, r0]
 8004c78:	18c0      	addlt	r0, r0, r3
 8004c7a:	4770      	bx	lr

08004c7c <_init>:
 8004c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c7e:	bf00      	nop
 8004c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c82:	bc08      	pop	{r3}
 8004c84:	469e      	mov	lr, r3
 8004c86:	4770      	bx	lr

08004c88 <_fini>:
 8004c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c8a:	bf00      	nop
 8004c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c8e:	bc08      	pop	{r3}
 8004c90:	469e      	mov	lr, r3
 8004c92:	4770      	bx	lr

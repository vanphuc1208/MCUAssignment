
Assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003368  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003474  08003474  00013474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003498  08003498  000200a4  2**0
                  CONTENTS
  4 .ARM          00000000  08003498  08003498  000200a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003498  08003498  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003498  08003498  00013498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800349c  0800349c  0001349c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  080034a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  200000a4  08003544  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  08003544  000201d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000caa9  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002327  00000000  00000000  0002cb76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b20  00000000  00000000  0002eea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009e0  00000000  00000000  0002f9c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000185e9  00000000  00000000  000303a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d859  00000000  00000000  00048989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088d17  00000000  00000000  000561e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000deef9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cd4  00000000  00000000  000def4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a4 	.word	0x200000a4
 8000128:	00000000 	.word	0x00000000
 800012c:	0800345c 	.word	0x0800345c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a8 	.word	0x200000a8
 8000148:	0800345c 	.word	0x0800345c

0800014c <button_reading>:
static GPIO_PinState debounceButtonBuffer3[N0_OF_BUTTONS];
//we define a flag for a button pressed more than 1 second.
//we define counter for automatically increasing the value
//after the button is pressed more than 1 second.
int buttonFlag[N0_OF_BUTTONS] = {0};
void button_reading(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	for(int i = 0; i < N0_OF_BUTTONS; i ++){
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e074      	b.n	8000242 <button_reading+0xf6>
		debounceButtonBuffer3[i] =debounceButtonBuffer2[i];
 8000158:	4a3e      	ldr	r2, [pc, #248]	; (8000254 <button_reading+0x108>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	4413      	add	r3, r2
 800015e:	7819      	ldrb	r1, [r3, #0]
 8000160:	4a3d      	ldr	r2, [pc, #244]	; (8000258 <button_reading+0x10c>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	4413      	add	r3, r2
 8000166:	460a      	mov	r2, r1
 8000168:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer2[i] =debounceButtonBuffer1[i];
 800016a:	4a3c      	ldr	r2, [pc, #240]	; (800025c <button_reading+0x110>)
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	4413      	add	r3, r2
 8000170:	7819      	ldrb	r1, [r3, #0]
 8000172:	4a38      	ldr	r2, [pc, #224]	; (8000254 <button_reading+0x108>)
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	4413      	add	r3, r2
 8000178:	460a      	mov	r2, r1
 800017a:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(buttonGPIO[i], buttonPin[i]);
 800017c:	4a38      	ldr	r2, [pc, #224]	; (8000260 <button_reading+0x114>)
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000184:	4937      	ldr	r1, [pc, #220]	; (8000264 <button_reading+0x118>)
 8000186:	687b      	ldr	r3, [r7, #4]
 8000188:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800018c:	b29b      	uxth	r3, r3
 800018e:	4619      	mov	r1, r3
 8000190:	4610      	mov	r0, r2
 8000192:	f001 fcd3 	bl	8001b3c <HAL_GPIO_ReadPin>
 8000196:	4603      	mov	r3, r0
 8000198:	4619      	mov	r1, r3
 800019a:	4a30      	ldr	r2, [pc, #192]	; (800025c <button_reading+0x110>)
 800019c:	687b      	ldr	r3, [r7, #4]
 800019e:	4413      	add	r3, r2
 80001a0:	460a      	mov	r2, r1
 80001a2:	701a      	strb	r2, [r3, #0]
		if(debounceButtonBuffer1[i] == debounceButtonBuffer2[i] && debounceButtonBuffer2[i] == debounceButtonBuffer3[i]) {
 80001a4:	4a2d      	ldr	r2, [pc, #180]	; (800025c <button_reading+0x110>)
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	4413      	add	r3, r2
 80001aa:	781a      	ldrb	r2, [r3, #0]
 80001ac:	4929      	ldr	r1, [pc, #164]	; (8000254 <button_reading+0x108>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	440b      	add	r3, r1
 80001b2:	781b      	ldrb	r3, [r3, #0]
 80001b4:	429a      	cmp	r2, r3
 80001b6:	d141      	bne.n	800023c <button_reading+0xf0>
 80001b8:	4a26      	ldr	r2, [pc, #152]	; (8000254 <button_reading+0x108>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	4413      	add	r3, r2
 80001be:	781a      	ldrb	r2, [r3, #0]
 80001c0:	4925      	ldr	r1, [pc, #148]	; (8000258 <button_reading+0x10c>)
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	440b      	add	r3, r1
 80001c6:	781b      	ldrb	r3, [r3, #0]
 80001c8:	429a      	cmp	r2, r3
 80001ca:	d137      	bne.n	800023c <button_reading+0xf0>
			if(debounceButtonBuffer1[i] != buttonBuffer[i]){
 80001cc:	4a23      	ldr	r2, [pc, #140]	; (800025c <button_reading+0x110>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	4413      	add	r3, r2
 80001d2:	781a      	ldrb	r2, [r3, #0]
 80001d4:	4924      	ldr	r1, [pc, #144]	; (8000268 <button_reading+0x11c>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	440b      	add	r3, r1
 80001da:	781b      	ldrb	r3, [r3, #0]
 80001dc:	429a      	cmp	r2, r3
 80001de:	d019      	beq.n	8000214 <button_reading+0xc8>
				buttonBuffer[i] = debounceButtonBuffer1[i];
 80001e0:	4a1e      	ldr	r2, [pc, #120]	; (800025c <button_reading+0x110>)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	4413      	add	r3, r2
 80001e6:	7819      	ldrb	r1, [r3, #0]
 80001e8:	4a1f      	ldr	r2, [pc, #124]	; (8000268 <button_reading+0x11c>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	4413      	add	r3, r2
 80001ee:	460a      	mov	r2, r1
 80001f0:	701a      	strb	r2, [r3, #0]
						if(buttonBuffer[i] == BUTTON_IS_PRESSED){
 80001f2:	4a1d      	ldr	r2, [pc, #116]	; (8000268 <button_reading+0x11c>)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	4413      	add	r3, r2
 80001f8:	781b      	ldrb	r3, [r3, #0]
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d11e      	bne.n	800023c <button_reading+0xf0>
							buttonFlag[i] = 1;
 80001fe:	4a1b      	ldr	r2, [pc, #108]	; (800026c <button_reading+0x120>)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	2101      	movs	r1, #1
 8000204:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							buttonTimeOut[i] = DURATION_FOR_AUTO_INCREASING;
 8000208:	4a19      	ldr	r2, [pc, #100]	; (8000270 <button_reading+0x124>)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	2164      	movs	r1, #100	; 0x64
 800020e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000212:	e013      	b.n	800023c <button_reading+0xf0>
							}
		}
		else {
			buttonTimeOut[i]--;
 8000214:	4a16      	ldr	r2, [pc, #88]	; (8000270 <button_reading+0x124>)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800021c:	1e5a      	subs	r2, r3, #1
 800021e:	4914      	ldr	r1, [pc, #80]	; (8000270 <button_reading+0x124>)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(buttonTimeOut[i] <= 0){
 8000226:	4a12      	ldr	r2, [pc, #72]	; (8000270 <button_reading+0x124>)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800022e:	2b00      	cmp	r3, #0
 8000230:	dc04      	bgt.n	800023c <button_reading+0xf0>
					buttonBuffer[i] = BUTTON_IS_RELEASED;
 8000232:	4a0d      	ldr	r2, [pc, #52]	; (8000268 <button_reading+0x11c>)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	4413      	add	r3, r2
 8000238:	2201      	movs	r2, #1
 800023a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < N0_OF_BUTTONS; i ++){
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	3301      	adds	r3, #1
 8000240:	607b      	str	r3, [r7, #4]
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	2b03      	cmp	r3, #3
 8000246:	dd87      	ble.n	8000158 <button_reading+0xc>
			}
		}
	}
}
}
 8000248:	bf00      	nop
 800024a:	bf00      	nop
 800024c:	3708      	adds	r7, #8
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	200000d4 	.word	0x200000d4
 8000258:	200000d8 	.word	0x200000d8
 800025c:	200000d0 	.word	0x200000d0
 8000260:	20000004 	.word	0x20000004
 8000264:	20000014 	.word	0x20000014
 8000268:	20000000 	.word	0x20000000
 800026c:	200000dc 	.word	0x200000dc
 8000270:	200000c0 	.word	0x200000c0

08000274 <is_button_pressed>:

int is_button_pressed(int index){
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
	if(index >= N0_OF_BUTTONS || index < 0) return 0;
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	2b03      	cmp	r3, #3
 8000280:	dc02      	bgt.n	8000288 <is_button_pressed+0x14>
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	2b00      	cmp	r3, #0
 8000286:	da01      	bge.n	800028c <is_button_pressed+0x18>
 8000288:	2300      	movs	r3, #0
 800028a:	e00d      	b.n	80002a8 <is_button_pressed+0x34>
		if(buttonFlag[index] == 1){
 800028c:	4a09      	ldr	r2, [pc, #36]	; (80002b4 <is_button_pressed+0x40>)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000294:	2b01      	cmp	r3, #1
 8000296:	d106      	bne.n	80002a6 <is_button_pressed+0x32>
			buttonFlag[index] = 0;
 8000298:	4a06      	ldr	r2, [pc, #24]	; (80002b4 <is_button_pressed+0x40>)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	2100      	movs	r1, #0
 800029e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			return 1;
 80002a2:	2301      	movs	r3, #1
 80002a4:	e000      	b.n	80002a8 <is_button_pressed+0x34>
		}
		return 0;
 80002a6:	2300      	movs	r3, #0
}
 80002a8:	4618      	mov	r0, r3
 80002aa:	370c      	adds	r7, #12
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	200000dc 	.word	0x200000dc

080002b8 <buzzer>:
 *      Author: OS
 */

#include "buzzer.h"

void buzzer() {
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0
	 htim3.Instance->CCR1=buzzerValue;
 80002bc:	4b04      	ldr	r3, [pc, #16]	; (80002d0 <buzzer+0x18>)
 80002be:	681a      	ldr	r2, [r3, #0]
 80002c0:	4b04      	ldr	r3, [pc, #16]	; (80002d4 <buzzer+0x1c>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	635a      	str	r2, [r3, #52]	; 0x34
}
 80002c6:	bf00      	nop
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bc80      	pop	{r7}
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop
 80002d0:	200000f8 	.word	0x200000f8
 80002d4:	2000010c 	.word	0x2000010c

080002d8 <clearAllLed1>:
 *      Author: OS
 */
#include "main.h"
#include "displayLed.h"

void clearAllLed1() {
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 80002dc:	2200      	movs	r2, #0
 80002de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002e2:	4805      	ldr	r0, [pc, #20]	; (80002f8 <clearAllLed1+0x20>)
 80002e4:	f001 fc41 	bl	8001b6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 80002e8:	2200      	movs	r2, #0
 80002ea:	2108      	movs	r1, #8
 80002ec:	4803      	ldr	r0, [pc, #12]	; (80002fc <clearAllLed1+0x24>)
 80002ee:	f001 fc3c 	bl	8001b6a <HAL_GPIO_WritePin>
}
 80002f2:	bf00      	nop
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	40010800 	.word	0x40010800
 80002fc:	40010c00 	.word	0x40010c00

08000300 <clearAllLed2>:

void clearAllLed2() {
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 8000304:	2200      	movs	r2, #0
 8000306:	2120      	movs	r1, #32
 8000308:	4804      	ldr	r0, [pc, #16]	; (800031c <clearAllLed2+0x1c>)
 800030a:	f001 fc2e 	bl	8001b6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 800030e:	2200      	movs	r2, #0
 8000310:	2110      	movs	r1, #16
 8000312:	4802      	ldr	r0, [pc, #8]	; (800031c <clearAllLed2+0x1c>)
 8000314:	f001 fc29 	bl	8001b6a <HAL_GPIO_WritePin>
}
 8000318:	bf00      	nop
 800031a:	bd80      	pop	{r7, pc}
 800031c:	40010c00 	.word	0x40010c00

08000320 <displayRed1>:
void displayRed1() {
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000324:	2201      	movs	r2, #1
 8000326:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800032a:	4805      	ldr	r0, [pc, #20]	; (8000340 <displayRed1+0x20>)
 800032c:	f001 fc1d 	bl	8001b6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8000330:	2200      	movs	r2, #0
 8000332:	2108      	movs	r1, #8
 8000334:	4803      	ldr	r0, [pc, #12]	; (8000344 <displayRed1+0x24>)
 8000336:	f001 fc18 	bl	8001b6a <HAL_GPIO_WritePin>

}
 800033a:	bf00      	nop
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	40010800 	.word	0x40010800
 8000344:	40010c00 	.word	0x40010c00

08000348 <displayYellow1>:

void displayYellow1() {
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 800034c:	2201      	movs	r2, #1
 800034e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000352:	4805      	ldr	r0, [pc, #20]	; (8000368 <displayYellow1+0x20>)
 8000354:	f001 fc09 	bl	8001b6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000358:	2201      	movs	r2, #1
 800035a:	2108      	movs	r1, #8
 800035c:	4803      	ldr	r0, [pc, #12]	; (800036c <displayYellow1+0x24>)
 800035e:	f001 fc04 	bl	8001b6a <HAL_GPIO_WritePin>
}
 8000362:	bf00      	nop
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	40010800 	.word	0x40010800
 800036c:	40010c00 	.word	0x40010c00

08000370 <displayGreen1>:

void displayGreen1() {
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8000374:	2200      	movs	r2, #0
 8000376:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800037a:	4805      	ldr	r0, [pc, #20]	; (8000390 <displayGreen1+0x20>)
 800037c:	f001 fbf5 	bl	8001b6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000380:	2201      	movs	r2, #1
 8000382:	2108      	movs	r1, #8
 8000384:	4803      	ldr	r0, [pc, #12]	; (8000394 <displayGreen1+0x24>)
 8000386:	f001 fbf0 	bl	8001b6a <HAL_GPIO_WritePin>
}
 800038a:	bf00      	nop
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	40010800 	.word	0x40010800
 8000394:	40010c00 	.word	0x40010c00

08000398 <displayRed2>:

void displayRed2() {
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 800039c:	2201      	movs	r2, #1
 800039e:	2120      	movs	r1, #32
 80003a0:	4804      	ldr	r0, [pc, #16]	; (80003b4 <displayRed2+0x1c>)
 80003a2:	f001 fbe2 	bl	8001b6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 80003a6:	2200      	movs	r2, #0
 80003a8:	2110      	movs	r1, #16
 80003aa:	4802      	ldr	r0, [pc, #8]	; (80003b4 <displayRed2+0x1c>)
 80003ac:	f001 fbdd 	bl	8001b6a <HAL_GPIO_WritePin>
}
 80003b0:	bf00      	nop
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	40010c00 	.word	0x40010c00

080003b8 <displayYellow2>:


void displayYellow2() {
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 80003bc:	2201      	movs	r2, #1
 80003be:	2120      	movs	r1, #32
 80003c0:	4804      	ldr	r0, [pc, #16]	; (80003d4 <displayYellow2+0x1c>)
 80003c2:	f001 fbd2 	bl	8001b6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 80003c6:	2201      	movs	r2, #1
 80003c8:	2110      	movs	r1, #16
 80003ca:	4802      	ldr	r0, [pc, #8]	; (80003d4 <displayYellow2+0x1c>)
 80003cc:	f001 fbcd 	bl	8001b6a <HAL_GPIO_WritePin>
}
 80003d0:	bf00      	nop
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	40010c00 	.word	0x40010c00

080003d8 <displayGreen2>:

void displayGreen2() {
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 80003dc:	2200      	movs	r2, #0
 80003de:	2120      	movs	r1, #32
 80003e0:	4804      	ldr	r0, [pc, #16]	; (80003f4 <displayGreen2+0x1c>)
 80003e2:	f001 fbc2 	bl	8001b6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 80003e6:	2201      	movs	r2, #1
 80003e8:	2110      	movs	r1, #16
 80003ea:	4802      	ldr	r0, [pc, #8]	; (80003f4 <displayGreen2+0x1c>)
 80003ec:	f001 fbbd 	bl	8001b6a <HAL_GPIO_WritePin>
}
 80003f0:	bf00      	nop
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	40010c00 	.word	0x40010c00

080003f8 <toggleRed>:

void toggleRed() {// remember to clear all led before toggle
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(D2_GPIO_Port, D2_Pin);
 80003fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000400:	4804      	ldr	r0, [pc, #16]	; (8000414 <toggleRed+0x1c>)
 8000402:	f001 fbca 	bl	8001b9a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);
 8000406:	2120      	movs	r1, #32
 8000408:	4803      	ldr	r0, [pc, #12]	; (8000418 <toggleRed+0x20>)
 800040a:	f001 fbc6 	bl	8001b9a <HAL_GPIO_TogglePin>
}
 800040e:	bf00      	nop
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	40010800 	.word	0x40010800
 8000418:	40010c00 	.word	0x40010c00

0800041c <toggleYellow>:

void toggleYellow() {// remember to clear all led before toggle
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(D2_GPIO_Port, D2_Pin);
 8000420:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000424:	4808      	ldr	r0, [pc, #32]	; (8000448 <toggleYellow+0x2c>)
 8000426:	f001 fbb8 	bl	8001b9a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
 800042a:	2108      	movs	r1, #8
 800042c:	4807      	ldr	r0, [pc, #28]	; (800044c <toggleYellow+0x30>)
 800042e:	f001 fbb4 	bl	8001b9a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);
 8000432:	2120      	movs	r1, #32
 8000434:	4805      	ldr	r0, [pc, #20]	; (800044c <toggleYellow+0x30>)
 8000436:	f001 fbb0 	bl	8001b9a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D5_GPIO_Port, D5_Pin);
 800043a:	2110      	movs	r1, #16
 800043c:	4803      	ldr	r0, [pc, #12]	; (800044c <toggleYellow+0x30>)
 800043e:	f001 fbac 	bl	8001b9a <HAL_GPIO_TogglePin>
}
 8000442:	bf00      	nop
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	40010800 	.word	0x40010800
 800044c:	40010c00 	.word	0x40010c00

08000450 <toggleGreen>:

void toggleGreen() {//remember to clear all led before toggle
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
 8000454:	2108      	movs	r1, #8
 8000456:	4804      	ldr	r0, [pc, #16]	; (8000468 <toggleGreen+0x18>)
 8000458:	f001 fb9f 	bl	8001b9a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D5_GPIO_Port, D5_Pin);
 800045c:	2110      	movs	r1, #16
 800045e:	4802      	ldr	r0, [pc, #8]	; (8000468 <toggleGreen+0x18>)
 8000460:	f001 fb9b 	bl	8001b9a <HAL_GPIO_TogglePin>
}
 8000464:	bf00      	nop
 8000466:	bd80      	pop	{r7, pc}
 8000468:	40010c00 	.word	0x40010c00

0800046c <clearPedestrian>:

void clearPedestrian() {
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8000470:	2200      	movs	r2, #0
 8000472:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000476:	4805      	ldr	r0, [pc, #20]	; (800048c <clearPedestrian+0x20>)
 8000478:	f001 fb77 	bl	8001b6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 800047c:	2200      	movs	r2, #0
 800047e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000482:	4803      	ldr	r0, [pc, #12]	; (8000490 <clearPedestrian+0x24>)
 8000484:	f001 fb71 	bl	8001b6a <HAL_GPIO_WritePin>
}
 8000488:	bf00      	nop
 800048a:	bd80      	pop	{r7, pc}
 800048c:	40010c00 	.word	0x40010c00
 8000490:	40010800 	.word	0x40010800

08000494 <displayPedestrianRed>:

void displayPedestrianRed() {
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
 8000498:	2201      	movs	r2, #1
 800049a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800049e:	4805      	ldr	r0, [pc, #20]	; (80004b4 <displayPedestrianRed+0x20>)
 80004a0:	f001 fb63 	bl	8001b6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 80004a4:	2200      	movs	r2, #0
 80004a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004aa:	4803      	ldr	r0, [pc, #12]	; (80004b8 <displayPedestrianRed+0x24>)
 80004ac:	f001 fb5d 	bl	8001b6a <HAL_GPIO_WritePin>
}
 80004b0:	bf00      	nop
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	40010c00 	.word	0x40010c00
 80004b8:	40010800 	.word	0x40010800

080004bc <displayPedestrianGreen>:
void displayPedestrianYellow() {
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
}

void displayPedestrianGreen() {
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 80004c0:	2200      	movs	r2, #0
 80004c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004c6:	4805      	ldr	r0, [pc, #20]	; (80004dc <displayPedestrianGreen+0x20>)
 80004c8:	f001 fb4f 	bl	8001b6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 80004cc:	2201      	movs	r2, #1
 80004ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004d2:	4803      	ldr	r0, [pc, #12]	; (80004e0 <displayPedestrianGreen+0x24>)
 80004d4:	f001 fb49 	bl	8001b6a <HAL_GPIO_WritePin>
}
 80004d8:	bf00      	nop
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	40010c00 	.word	0x40010c00
 80004e0:	40010800 	.word	0x40010800

080004e4 <increase>:
 */

#include "global.h"

void increase()
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
	time1++;
 80004e8:	4b07      	ldr	r3, [pc, #28]	; (8000508 <increase+0x24>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	3301      	adds	r3, #1
 80004ee:	4a06      	ldr	r2, [pc, #24]	; (8000508 <increase+0x24>)
 80004f0:	6013      	str	r3, [r2, #0]
	if(time1>99)
 80004f2:	4b05      	ldr	r3, [pc, #20]	; (8000508 <increase+0x24>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	2b63      	cmp	r3, #99	; 0x63
 80004f8:	dd02      	ble.n	8000500 <increase+0x1c>
		time1 = 1;
 80004fa:	4b03      	ldr	r3, [pc, #12]	; (8000508 <increase+0x24>)
 80004fc:	2201      	movs	r2, #1
 80004fe:	601a      	str	r2, [r3, #0]
}
 8000500:	bf00      	nop
 8000502:	46bd      	mov	sp, r7
 8000504:	bc80      	pop	{r7}
 8000506:	4770      	bx	lr
 8000508:	200000f0 	.word	0x200000f0

0800050c <balance>:

void balance(int RED, int AMBER, int GREEN)
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
	if(RED > timeRed)
 8000518:	4b5c      	ldr	r3, [pc, #368]	; (800068c <balance+0x180>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	68fa      	ldr	r2, [r7, #12]
 800051e:	429a      	cmp	r2, r3
 8000520:	dd19      	ble.n	8000556 <balance+0x4a>
	{
		timeYellow = timeYellow * (RED / timeRed);
 8000522:	4b5a      	ldr	r3, [pc, #360]	; (800068c <balance+0x180>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	68fa      	ldr	r2, [r7, #12]
 8000528:	fb92 f3f3 	sdiv	r3, r2, r3
 800052c:	4a58      	ldr	r2, [pc, #352]	; (8000690 <balance+0x184>)
 800052e:	6812      	ldr	r2, [r2, #0]
 8000530:	fb02 f303 	mul.w	r3, r2, r3
 8000534:	4a56      	ldr	r2, [pc, #344]	; (8000690 <balance+0x184>)
 8000536:	6013      	str	r3, [r2, #0]
		timeGreen = timeGreen * (RED / timeRed);
 8000538:	4b54      	ldr	r3, [pc, #336]	; (800068c <balance+0x180>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	68fa      	ldr	r2, [r7, #12]
 800053e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000542:	4a54      	ldr	r2, [pc, #336]	; (8000694 <balance+0x188>)
 8000544:	6812      	ldr	r2, [r2, #0]
 8000546:	fb02 f303 	mul.w	r3, r2, r3
 800054a:	4a52      	ldr	r2, [pc, #328]	; (8000694 <balance+0x188>)
 800054c:	6013      	str	r3, [r2, #0]
		timeRed = RED;
 800054e:	4a4f      	ldr	r2, [pc, #316]	; (800068c <balance+0x180>)
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	6013      	str	r3, [r2, #0]
	{
		timeRed = (GREEN / 3) * 5;
		timeYellow = (GREEN / 3) * 2;
		timeGreen = GREEN;
	}
}
 8000554:	e094      	b.n	8000680 <balance+0x174>
	else if(AMBER > timeYellow)
 8000556:	4b4e      	ldr	r3, [pc, #312]	; (8000690 <balance+0x184>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	68ba      	ldr	r2, [r7, #8]
 800055c:	429a      	cmp	r2, r3
 800055e:	dd19      	ble.n	8000594 <balance+0x88>
		timeRed = timeRed * (AMBER / timeYellow);
 8000560:	4b4b      	ldr	r3, [pc, #300]	; (8000690 <balance+0x184>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	68ba      	ldr	r2, [r7, #8]
 8000566:	fb92 f3f3 	sdiv	r3, r2, r3
 800056a:	4a48      	ldr	r2, [pc, #288]	; (800068c <balance+0x180>)
 800056c:	6812      	ldr	r2, [r2, #0]
 800056e:	fb02 f303 	mul.w	r3, r2, r3
 8000572:	4a46      	ldr	r2, [pc, #280]	; (800068c <balance+0x180>)
 8000574:	6013      	str	r3, [r2, #0]
		timeGreen = timeGreen * (AMBER / timeYellow);
 8000576:	4b46      	ldr	r3, [pc, #280]	; (8000690 <balance+0x184>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	68ba      	ldr	r2, [r7, #8]
 800057c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000580:	4a44      	ldr	r2, [pc, #272]	; (8000694 <balance+0x188>)
 8000582:	6812      	ldr	r2, [r2, #0]
 8000584:	fb02 f303 	mul.w	r3, r2, r3
 8000588:	4a42      	ldr	r2, [pc, #264]	; (8000694 <balance+0x188>)
 800058a:	6013      	str	r3, [r2, #0]
		timeYellow = AMBER;
 800058c:	4a40      	ldr	r2, [pc, #256]	; (8000690 <balance+0x184>)
 800058e:	68bb      	ldr	r3, [r7, #8]
 8000590:	6013      	str	r3, [r2, #0]
}
 8000592:	e075      	b.n	8000680 <balance+0x174>
	else if(GREEN > timeGreen)
 8000594:	4b3f      	ldr	r3, [pc, #252]	; (8000694 <balance+0x188>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	687a      	ldr	r2, [r7, #4]
 800059a:	429a      	cmp	r2, r3
 800059c:	dd18      	ble.n	80005d0 <balance+0xc4>
		timeRed = timeRed * (GREEN / timeGreen);
 800059e:	4b3d      	ldr	r3, [pc, #244]	; (8000694 <balance+0x188>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	687a      	ldr	r2, [r7, #4]
 80005a4:	fb92 f3f3 	sdiv	r3, r2, r3
 80005a8:	4a38      	ldr	r2, [pc, #224]	; (800068c <balance+0x180>)
 80005aa:	6812      	ldr	r2, [r2, #0]
 80005ac:	fb02 f303 	mul.w	r3, r2, r3
 80005b0:	4a36      	ldr	r2, [pc, #216]	; (800068c <balance+0x180>)
 80005b2:	6013      	str	r3, [r2, #0]
		timeYellow = AMBER * (GREEN / timeGreen);
 80005b4:	4b37      	ldr	r3, [pc, #220]	; (8000694 <balance+0x188>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	687a      	ldr	r2, [r7, #4]
 80005ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80005be:	68ba      	ldr	r2, [r7, #8]
 80005c0:	fb02 f303 	mul.w	r3, r2, r3
 80005c4:	4a32      	ldr	r2, [pc, #200]	; (8000690 <balance+0x184>)
 80005c6:	6013      	str	r3, [r2, #0]
		timeGreen = GREEN;
 80005c8:	4a32      	ldr	r2, [pc, #200]	; (8000694 <balance+0x188>)
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	6013      	str	r3, [r2, #0]
}
 80005ce:	e057      	b.n	8000680 <balance+0x174>
	else if(RED < timeRed)
 80005d0:	4b2e      	ldr	r3, [pc, #184]	; (800068c <balance+0x180>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	68fa      	ldr	r2, [r7, #12]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	da19      	bge.n	800060e <balance+0x102>
		timeYellow = (RED / 5) * 2;
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	4a2e      	ldr	r2, [pc, #184]	; (8000698 <balance+0x18c>)
 80005de:	fb82 1203 	smull	r1, r2, r2, r3
 80005e2:	1052      	asrs	r2, r2, #1
 80005e4:	17db      	asrs	r3, r3, #31
 80005e6:	1ad3      	subs	r3, r2, r3
 80005e8:	005b      	lsls	r3, r3, #1
 80005ea:	4a29      	ldr	r2, [pc, #164]	; (8000690 <balance+0x184>)
 80005ec:	6013      	str	r3, [r2, #0]
		timeGreen = (RED / 5) * 3;
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	4a29      	ldr	r2, [pc, #164]	; (8000698 <balance+0x18c>)
 80005f2:	fb82 1203 	smull	r1, r2, r2, r3
 80005f6:	1052      	asrs	r2, r2, #1
 80005f8:	17db      	asrs	r3, r3, #31
 80005fa:	1ad2      	subs	r2, r2, r3
 80005fc:	4613      	mov	r3, r2
 80005fe:	005b      	lsls	r3, r3, #1
 8000600:	4413      	add	r3, r2
 8000602:	4a24      	ldr	r2, [pc, #144]	; (8000694 <balance+0x188>)
 8000604:	6013      	str	r3, [r2, #0]
		timeRed = RED;
 8000606:	4a21      	ldr	r2, [pc, #132]	; (800068c <balance+0x180>)
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	6013      	str	r3, [r2, #0]
}
 800060c:	e038      	b.n	8000680 <balance+0x174>
	else if(AMBER < timeYellow)
 800060e:	4b20      	ldr	r3, [pc, #128]	; (8000690 <balance+0x184>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	68ba      	ldr	r2, [r7, #8]
 8000614:	429a      	cmp	r2, r3
 8000616:	da17      	bge.n	8000648 <balance+0x13c>
		timeRed = (AMBER / 2) * 5;
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	0fda      	lsrs	r2, r3, #31
 800061c:	4413      	add	r3, r2
 800061e:	105b      	asrs	r3, r3, #1
 8000620:	461a      	mov	r2, r3
 8000622:	4613      	mov	r3, r2
 8000624:	009b      	lsls	r3, r3, #2
 8000626:	4413      	add	r3, r2
 8000628:	4a18      	ldr	r2, [pc, #96]	; (800068c <balance+0x180>)
 800062a:	6013      	str	r3, [r2, #0]
		timeGreen = (AMBER / 2) * 3;
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	0fda      	lsrs	r2, r3, #31
 8000630:	4413      	add	r3, r2
 8000632:	105b      	asrs	r3, r3, #1
 8000634:	461a      	mov	r2, r3
 8000636:	4613      	mov	r3, r2
 8000638:	005b      	lsls	r3, r3, #1
 800063a:	4413      	add	r3, r2
 800063c:	4a15      	ldr	r2, [pc, #84]	; (8000694 <balance+0x188>)
 800063e:	6013      	str	r3, [r2, #0]
		timeYellow = AMBER;
 8000640:	4a13      	ldr	r2, [pc, #76]	; (8000690 <balance+0x184>)
 8000642:	68bb      	ldr	r3, [r7, #8]
 8000644:	6013      	str	r3, [r2, #0]
}
 8000646:	e01b      	b.n	8000680 <balance+0x174>
	else if(GREEN < timeGreen)
 8000648:	4b12      	ldr	r3, [pc, #72]	; (8000694 <balance+0x188>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	687a      	ldr	r2, [r7, #4]
 800064e:	429a      	cmp	r2, r3
 8000650:	da16      	bge.n	8000680 <balance+0x174>
		timeRed = (GREEN / 3) * 5;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	4a11      	ldr	r2, [pc, #68]	; (800069c <balance+0x190>)
 8000656:	fb82 1203 	smull	r1, r2, r2, r3
 800065a:	17db      	asrs	r3, r3, #31
 800065c:	1ad2      	subs	r2, r2, r3
 800065e:	4613      	mov	r3, r2
 8000660:	009b      	lsls	r3, r3, #2
 8000662:	4413      	add	r3, r2
 8000664:	4a09      	ldr	r2, [pc, #36]	; (800068c <balance+0x180>)
 8000666:	6013      	str	r3, [r2, #0]
		timeYellow = (GREEN / 3) * 2;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	4a0c      	ldr	r2, [pc, #48]	; (800069c <balance+0x190>)
 800066c:	fb82 1203 	smull	r1, r2, r2, r3
 8000670:	17db      	asrs	r3, r3, #31
 8000672:	1ad3      	subs	r3, r2, r3
 8000674:	005b      	lsls	r3, r3, #1
 8000676:	4a06      	ldr	r2, [pc, #24]	; (8000690 <balance+0x184>)
 8000678:	6013      	str	r3, [r2, #0]
		timeGreen = GREEN;
 800067a:	4a06      	ldr	r2, [pc, #24]	; (8000694 <balance+0x188>)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	6013      	str	r3, [r2, #0]
}
 8000680:	bf00      	nop
 8000682:	3714      	adds	r7, #20
 8000684:	46bd      	mov	sp, r7
 8000686:	bc80      	pop	{r7}
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	20000024 	.word	0x20000024
 8000690:	20000028 	.word	0x20000028
 8000694:	2000002c 	.word	0x2000002c
 8000698:	66666667 	.word	0x66666667
 800069c:	55555556 	.word	0x55555556

080006a0 <normalState>:

void normalState(void) {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	switch(status) {
 80006a4:	4b87      	ldr	r3, [pc, #540]	; (80008c4 <normalState+0x224>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	2b0c      	cmp	r3, #12
 80006aa:	f200 82c1 	bhi.w	8000c30 <normalState+0x590>
 80006ae:	a201      	add	r2, pc, #4	; (adr r2, 80006b4 <normalState+0x14>)
 80006b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006b4:	080006e9 	.word	0x080006e9
 80006b8:	08000723 	.word	0x08000723
 80006bc:	080007ed 	.word	0x080007ed
 80006c0:	080008e1 	.word	0x080008e1
 80006c4:	080009c1 	.word	0x080009c1
 80006c8:	08000c31 	.word	0x08000c31
 80006cc:	08000c31 	.word	0x08000c31
 80006d0:	08000c31 	.word	0x08000c31
 80006d4:	08000c31 	.word	0x08000c31
 80006d8:	08000c31 	.word	0x08000c31
 80006dc:	08000a99 	.word	0x08000a99
 80006e0:	08000b13 	.word	0x08000b13
 80006e4:	08000bad 	.word	0x08000bad
	case INIT:
		clearAllLed1();
 80006e8:	f7ff fdf6 	bl	80002d8 <clearAllLed1>
		clearAllLed2();
 80006ec:	f7ff fe08 	bl	8000300 <clearAllLed2>
		status=RedGreen;
 80006f0:	4b74      	ldr	r3, [pc, #464]	; (80008c4 <normalState+0x224>)
 80006f2:	2201      	movs	r2, #1
 80006f4:	601a      	str	r2, [r3, #0]
		setTimer(0, timeGreen*100);
 80006f6:	4b74      	ldr	r3, [pc, #464]	; (80008c8 <normalState+0x228>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	2264      	movs	r2, #100	; 0x64
 80006fc:	fb02 f303 	mul.w	r3, r2, r3
 8000700:	4619      	mov	r1, r3
 8000702:	2000      	movs	r0, #0
 8000704:	f000 fd9c 	bl	8001240 <setTimer>
		setTimer(1, 100);
 8000708:	2164      	movs	r1, #100	; 0x64
 800070a:	2001      	movs	r0, #1
 800070c:	f000 fd98 	bl	8001240 <setTimer>
		time1=timeRed;
 8000710:	4b6e      	ldr	r3, [pc, #440]	; (80008cc <normalState+0x22c>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a6e      	ldr	r2, [pc, #440]	; (80008d0 <normalState+0x230>)
 8000716:	6013      	str	r3, [r2, #0]
		time2=timeGreen;
 8000718:	4b6b      	ldr	r3, [pc, #428]	; (80008c8 <normalState+0x228>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a6d      	ldr	r2, [pc, #436]	; (80008d4 <normalState+0x234>)
 800071e:	6013      	str	r3, [r2, #0]
		break;
 8000720:	e295      	b.n	8000c4e <normalState+0x5ae>
	case RedGreen:
		displayRed1();
 8000722:	f7ff fdfd 	bl	8000320 <displayRed1>
		displayGreen2();
 8000726:	f7ff fe57 	bl	80003d8 <displayGreen2>
		if(IsTimerUp(0)==1) {// transit state
 800072a:	2000      	movs	r0, #0
 800072c:	f000 fd74 	bl	8001218 <IsTimerUp>
 8000730:	4603      	mov	r3, r0
 8000732:	2b01      	cmp	r3, #1
 8000734:	d117      	bne.n	8000766 <normalState+0xc6>
			status=RedAm;
 8000736:	4b63      	ldr	r3, [pc, #396]	; (80008c4 <normalState+0x224>)
 8000738:	2202      	movs	r2, #2
 800073a:	601a      	str	r2, [r3, #0]
			setTimer(0, timeYellow*100);
 800073c:	4b66      	ldr	r3, [pc, #408]	; (80008d8 <normalState+0x238>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	2264      	movs	r2, #100	; 0x64
 8000742:	fb02 f303 	mul.w	r3, r2, r3
 8000746:	4619      	mov	r1, r3
 8000748:	2000      	movs	r0, #0
 800074a:	f000 fd79 	bl	8001240 <setTimer>
			setTimer(1, 100);
 800074e:	2164      	movs	r1, #100	; 0x64
 8000750:	2001      	movs	r0, #1
 8000752:	f000 fd75 	bl	8001240 <setTimer>
			time1=timeYellow;
 8000756:	4b60      	ldr	r3, [pc, #384]	; (80008d8 <normalState+0x238>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4a5d      	ldr	r2, [pc, #372]	; (80008d0 <normalState+0x230>)
 800075c:	6013      	str	r3, [r2, #0]
			time2=timeYellow;
 800075e:	4b5e      	ldr	r3, [pc, #376]	; (80008d8 <normalState+0x238>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4a5c      	ldr	r2, [pc, #368]	; (80008d4 <normalState+0x234>)
 8000764:	6013      	str	r3, [r2, #0]
		}

		if(IsTimerUp(1)==1) {// update time
 8000766:	2001      	movs	r0, #1
 8000768:	f000 fd56 	bl	8001218 <IsTimerUp>
 800076c:	4603      	mov	r3, r0
 800076e:	2b01      	cmp	r3, #1
 8000770:	d10d      	bne.n	800078e <normalState+0xee>
			setTimer(1, 100);
 8000772:	2164      	movs	r1, #100	; 0x64
 8000774:	2001      	movs	r0, #1
 8000776:	f000 fd63 	bl	8001240 <setTimer>
			time1--;
 800077a:	4b55      	ldr	r3, [pc, #340]	; (80008d0 <normalState+0x230>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	3b01      	subs	r3, #1
 8000780:	4a53      	ldr	r2, [pc, #332]	; (80008d0 <normalState+0x230>)
 8000782:	6013      	str	r3, [r2, #0]
			time2--;
 8000784:	4b53      	ldr	r3, [pc, #332]	; (80008d4 <normalState+0x234>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	3b01      	subs	r3, #1
 800078a:	4a52      	ldr	r2, [pc, #328]	; (80008d4 <normalState+0x234>)
 800078c:	6013      	str	r3, [r2, #0]
		}

		if(is_button_pressed(1)) {
 800078e:	2001      	movs	r0, #1
 8000790:	f7ff fd70 	bl	8000274 <is_button_pressed>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d011      	beq.n	80007be <normalState+0x11e>
			status=ManRed;
 800079a:	4b4a      	ldr	r3, [pc, #296]	; (80008c4 <normalState+0x224>)
 800079c:	220a      	movs	r2, #10
 800079e:	601a      	str	r2, [r3, #0]
			time1=timeRed;
 80007a0:	4b4a      	ldr	r3, [pc, #296]	; (80008cc <normalState+0x22c>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a4a      	ldr	r2, [pc, #296]	; (80008d0 <normalState+0x230>)
 80007a6:	6013      	str	r3, [r2, #0]
			time2=2;
 80007a8:	4b4a      	ldr	r3, [pc, #296]	; (80008d4 <normalState+0x234>)
 80007aa:	2202      	movs	r2, #2
 80007ac:	601a      	str	r2, [r3, #0]
			clearAllLed1();
 80007ae:	f7ff fd93 	bl	80002d8 <clearAllLed1>
			clearAllLed2();
 80007b2:	f7ff fda5 	bl	8000300 <clearAllLed2>
			setTimer(2, 25);
 80007b6:	2119      	movs	r1, #25
 80007b8:	2002      	movs	r0, #2
 80007ba:	f000 fd41 	bl	8001240 <setTimer>
		}
		if(is_button_pressed(0))
 80007be:	2000      	movs	r0, #0
 80007c0:	f7ff fd58 	bl	8000274 <is_button_pressed>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	f000 8234 	beq.w	8000c34 <normalState+0x594>
		{
			pedestrian_flag = Pedestrian_RED;
 80007cc:	4b43      	ldr	r3, [pc, #268]	; (80008dc <normalState+0x23c>)
 80007ce:	2208      	movs	r2, #8
 80007d0:	601a      	str	r2, [r3, #0]
			setTimer(3, (timeRed + timeGreen) * 100);
 80007d2:	4b3e      	ldr	r3, [pc, #248]	; (80008cc <normalState+0x22c>)
 80007d4:	681a      	ldr	r2, [r3, #0]
 80007d6:	4b3c      	ldr	r3, [pc, #240]	; (80008c8 <normalState+0x228>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4413      	add	r3, r2
 80007dc:	2264      	movs	r2, #100	; 0x64
 80007de:	fb02 f303 	mul.w	r3, r2, r3
 80007e2:	4619      	mov	r1, r3
 80007e4:	2003      	movs	r0, #3
 80007e6:	f000 fd2b 	bl	8001240 <setTimer>
		}

		break;
 80007ea:	e223      	b.n	8000c34 <normalState+0x594>
	case RedAm:
		displayRed1();
 80007ec:	f7ff fd98 	bl	8000320 <displayRed1>
		displayYellow2();
 80007f0:	f7ff fde2 	bl	80003b8 <displayYellow2>
		if(IsTimerUp(0)==1) { //transit state
 80007f4:	2000      	movs	r0, #0
 80007f6:	f000 fd0f 	bl	8001218 <IsTimerUp>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d11e      	bne.n	800083e <normalState+0x19e>
			status=GreenRed;
 8000800:	4b30      	ldr	r3, [pc, #192]	; (80008c4 <normalState+0x224>)
 8000802:	2203      	movs	r2, #3
 8000804:	601a      	str	r2, [r3, #0]
			setTimer(0, timeGreen*100);
 8000806:	4b30      	ldr	r3, [pc, #192]	; (80008c8 <normalState+0x228>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	2264      	movs	r2, #100	; 0x64
 800080c:	fb02 f303 	mul.w	r3, r2, r3
 8000810:	4619      	mov	r1, r3
 8000812:	2000      	movs	r0, #0
 8000814:	f000 fd14 	bl	8001240 <setTimer>
			setTimer(1, 100);
 8000818:	2164      	movs	r1, #100	; 0x64
 800081a:	2001      	movs	r0, #1
 800081c:	f000 fd10 	bl	8001240 <setTimer>
			time1=timeGreen;
 8000820:	4b29      	ldr	r3, [pc, #164]	; (80008c8 <normalState+0x228>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a2a      	ldr	r2, [pc, #168]	; (80008d0 <normalState+0x230>)
 8000826:	6013      	str	r3, [r2, #0]
			time2=timeRed;
 8000828:	4b28      	ldr	r3, [pc, #160]	; (80008cc <normalState+0x22c>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a29      	ldr	r2, [pc, #164]	; (80008d4 <normalState+0x234>)
 800082e:	6013      	str	r3, [r2, #0]
			if(pedestrian_flag == Pedestrian_RED)
 8000830:	4b2a      	ldr	r3, [pc, #168]	; (80008dc <normalState+0x23c>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2b08      	cmp	r3, #8
 8000836:	d102      	bne.n	800083e <normalState+0x19e>
			{
				pedestrian_flag = Pedestrian_GREEN;
 8000838:	4b28      	ldr	r3, [pc, #160]	; (80008dc <normalState+0x23c>)
 800083a:	2209      	movs	r2, #9
 800083c:	601a      	str	r2, [r3, #0]
			}
		}

		if(IsTimerUp(0)==1) { //update time
 800083e:	2000      	movs	r0, #0
 8000840:	f000 fcea 	bl	8001218 <IsTimerUp>
 8000844:	4603      	mov	r3, r0
 8000846:	2b01      	cmp	r3, #1
 8000848:	d10d      	bne.n	8000866 <normalState+0x1c6>
			time1--;
 800084a:	4b21      	ldr	r3, [pc, #132]	; (80008d0 <normalState+0x230>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	3b01      	subs	r3, #1
 8000850:	4a1f      	ldr	r2, [pc, #124]	; (80008d0 <normalState+0x230>)
 8000852:	6013      	str	r3, [r2, #0]
			time2--;
 8000854:	4b1f      	ldr	r3, [pc, #124]	; (80008d4 <normalState+0x234>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	3b01      	subs	r3, #1
 800085a:	4a1e      	ldr	r2, [pc, #120]	; (80008d4 <normalState+0x234>)
 800085c:	6013      	str	r3, [r2, #0]
			setTimer(1, 100);
 800085e:	2164      	movs	r1, #100	; 0x64
 8000860:	2001      	movs	r0, #1
 8000862:	f000 fced 	bl	8001240 <setTimer>
		}

		if(is_button_pressed(1)) {
 8000866:	2001      	movs	r0, #1
 8000868:	f7ff fd04 	bl	8000274 <is_button_pressed>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d011      	beq.n	8000896 <normalState+0x1f6>
			status=ManRed;
 8000872:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <normalState+0x224>)
 8000874:	220a      	movs	r2, #10
 8000876:	601a      	str	r2, [r3, #0]
			time1=timeRed;
 8000878:	4b14      	ldr	r3, [pc, #80]	; (80008cc <normalState+0x22c>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a14      	ldr	r2, [pc, #80]	; (80008d0 <normalState+0x230>)
 800087e:	6013      	str	r3, [r2, #0]
			time2=2;
 8000880:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <normalState+0x234>)
 8000882:	2202      	movs	r2, #2
 8000884:	601a      	str	r2, [r3, #0]
			clearAllLed1();
 8000886:	f7ff fd27 	bl	80002d8 <clearAllLed1>
			clearAllLed2();
 800088a:	f7ff fd39 	bl	8000300 <clearAllLed2>
			setTimer(2, 25);
 800088e:	2119      	movs	r1, #25
 8000890:	2002      	movs	r0, #2
 8000892:	f000 fcd5 	bl	8001240 <setTimer>
		}

		if(is_button_pressed(0))
 8000896:	2000      	movs	r0, #0
 8000898:	f7ff fcec 	bl	8000274 <is_button_pressed>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	f000 81ca 	beq.w	8000c38 <normalState+0x598>
		{
			pedestrian_flag = Pedestrian_RED;
 80008a4:	4b0d      	ldr	r3, [pc, #52]	; (80008dc <normalState+0x23c>)
 80008a6:	2208      	movs	r2, #8
 80008a8:	601a      	str	r2, [r3, #0]
			setTimer(3, (timeRed + timeGreen) * 100);
 80008aa:	4b08      	ldr	r3, [pc, #32]	; (80008cc <normalState+0x22c>)
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <normalState+0x228>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4413      	add	r3, r2
 80008b4:	2264      	movs	r2, #100	; 0x64
 80008b6:	fb02 f303 	mul.w	r3, r2, r3
 80008ba:	4619      	mov	r1, r3
 80008bc:	2003      	movs	r0, #3
 80008be:	f000 fcbf 	bl	8001240 <setTimer>
		}

		break;
 80008c2:	e1b9      	b.n	8000c38 <normalState+0x598>
 80008c4:	200000ec 	.word	0x200000ec
 80008c8:	2000002c 	.word	0x2000002c
 80008cc:	20000024 	.word	0x20000024
 80008d0:	200000f0 	.word	0x200000f0
 80008d4:	200000f4 	.word	0x200000f4
 80008d8:	20000028 	.word	0x20000028
 80008dc:	20000030 	.word	0x20000030
	case GreenRed:
		displayGreen1();
 80008e0:	f7ff fd46 	bl	8000370 <displayGreen1>
		displayRed2();
 80008e4:	f7ff fd58 	bl	8000398 <displayRed2>
		if(IsTimerUp(0)==1) { //transit state
 80008e8:	2000      	movs	r0, #0
 80008ea:	f000 fc95 	bl	8001218 <IsTimerUp>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d117      	bne.n	8000924 <normalState+0x284>
			status=AmRed;
 80008f4:	4ba5      	ldr	r3, [pc, #660]	; (8000b8c <normalState+0x4ec>)
 80008f6:	2204      	movs	r2, #4
 80008f8:	601a      	str	r2, [r3, #0]
			setTimer(0, timeYellow*100);
 80008fa:	4ba5      	ldr	r3, [pc, #660]	; (8000b90 <normalState+0x4f0>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	2264      	movs	r2, #100	; 0x64
 8000900:	fb02 f303 	mul.w	r3, r2, r3
 8000904:	4619      	mov	r1, r3
 8000906:	2000      	movs	r0, #0
 8000908:	f000 fc9a 	bl	8001240 <setTimer>
			setTimer(1, 100);
 800090c:	2164      	movs	r1, #100	; 0x64
 800090e:	2001      	movs	r0, #1
 8000910:	f000 fc96 	bl	8001240 <setTimer>
			time1=timeYellow;
 8000914:	4b9e      	ldr	r3, [pc, #632]	; (8000b90 <normalState+0x4f0>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a9e      	ldr	r2, [pc, #632]	; (8000b94 <normalState+0x4f4>)
 800091a:	6013      	str	r3, [r2, #0]
			time2=timeYellow;
 800091c:	4b9c      	ldr	r3, [pc, #624]	; (8000b90 <normalState+0x4f0>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a9d      	ldr	r2, [pc, #628]	; (8000b98 <normalState+0x4f8>)
 8000922:	6013      	str	r3, [r2, #0]
		}

		if(IsTimerUp(1)==1) {//update time
 8000924:	2001      	movs	r0, #1
 8000926:	f000 fc77 	bl	8001218 <IsTimerUp>
 800092a:	4603      	mov	r3, r0
 800092c:	2b01      	cmp	r3, #1
 800092e:	d10d      	bne.n	800094c <normalState+0x2ac>
			setTimer(1, 100);
 8000930:	2164      	movs	r1, #100	; 0x64
 8000932:	2001      	movs	r0, #1
 8000934:	f000 fc84 	bl	8001240 <setTimer>
			time1--;
 8000938:	4b96      	ldr	r3, [pc, #600]	; (8000b94 <normalState+0x4f4>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	3b01      	subs	r3, #1
 800093e:	4a95      	ldr	r2, [pc, #596]	; (8000b94 <normalState+0x4f4>)
 8000940:	6013      	str	r3, [r2, #0]
			time2--;
 8000942:	4b95      	ldr	r3, [pc, #596]	; (8000b98 <normalState+0x4f8>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	3b01      	subs	r3, #1
 8000948:	4a93      	ldr	r2, [pc, #588]	; (8000b98 <normalState+0x4f8>)
 800094a:	6013      	str	r3, [r2, #0]
		}

		if(time1<=3) {
 800094c:	4b91      	ldr	r3, [pc, #580]	; (8000b94 <normalState+0x4f4>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2b03      	cmp	r3, #3
 8000952:	dc06      	bgt.n	8000962 <normalState+0x2c2>
			buzzerValue=512*(4-time1);
 8000954:	4b8f      	ldr	r3, [pc, #572]	; (8000b94 <normalState+0x4f4>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f1c3 0304 	rsb	r3, r3, #4
 800095c:	025b      	lsls	r3, r3, #9
 800095e:	4a8f      	ldr	r2, [pc, #572]	; (8000b9c <normalState+0x4fc>)
 8000960:	6013      	str	r3, [r2, #0]
		}

		if(is_button_pressed(1)) {
 8000962:	2001      	movs	r0, #1
 8000964:	f7ff fc86 	bl	8000274 <is_button_pressed>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d011      	beq.n	8000992 <normalState+0x2f2>
			status=ManRed;
 800096e:	4b87      	ldr	r3, [pc, #540]	; (8000b8c <normalState+0x4ec>)
 8000970:	220a      	movs	r2, #10
 8000972:	601a      	str	r2, [r3, #0]
			time1=timeRed;
 8000974:	4b8a      	ldr	r3, [pc, #552]	; (8000ba0 <normalState+0x500>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a86      	ldr	r2, [pc, #536]	; (8000b94 <normalState+0x4f4>)
 800097a:	6013      	str	r3, [r2, #0]
			time2=2;
 800097c:	4b86      	ldr	r3, [pc, #536]	; (8000b98 <normalState+0x4f8>)
 800097e:	2202      	movs	r2, #2
 8000980:	601a      	str	r2, [r3, #0]
			clearAllLed1();
 8000982:	f7ff fca9 	bl	80002d8 <clearAllLed1>
			clearAllLed2();
 8000986:	f7ff fcbb 	bl	8000300 <clearAllLed2>
			setTimer(2, 25);
 800098a:	2119      	movs	r1, #25
 800098c:	2002      	movs	r0, #2
 800098e:	f000 fc57 	bl	8001240 <setTimer>
		}

		if(is_button_pressed(0))
 8000992:	2000      	movs	r0, #0
 8000994:	f7ff fc6e 	bl	8000274 <is_button_pressed>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	f000 814e 	beq.w	8000c3c <normalState+0x59c>
		{
			pedestrian_flag = Pedestrian_GREEN;
 80009a0:	4b80      	ldr	r3, [pc, #512]	; (8000ba4 <normalState+0x504>)
 80009a2:	2209      	movs	r2, #9
 80009a4:	601a      	str	r2, [r3, #0]
			setTimer(3, (timeRed + timeGreen) * 100);
 80009a6:	4b7e      	ldr	r3, [pc, #504]	; (8000ba0 <normalState+0x500>)
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	4b7f      	ldr	r3, [pc, #508]	; (8000ba8 <normalState+0x508>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4413      	add	r3, r2
 80009b0:	2264      	movs	r2, #100	; 0x64
 80009b2:	fb02 f303 	mul.w	r3, r2, r3
 80009b6:	4619      	mov	r1, r3
 80009b8:	2003      	movs	r0, #3
 80009ba:	f000 fc41 	bl	8001240 <setTimer>
		}

		break;
 80009be:	e13d      	b.n	8000c3c <normalState+0x59c>
	case AmRed:
		displayYellow1();
 80009c0:	f7ff fcc2 	bl	8000348 <displayYellow1>
		displayRed2();
 80009c4:	f7ff fce8 	bl	8000398 <displayRed2>
		if(IsTimerUp(0)==1) { //transit state
 80009c8:	2000      	movs	r0, #0
 80009ca:	f000 fc25 	bl	8001218 <IsTimerUp>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d11e      	bne.n	8000a12 <normalState+0x372>
			status=RedGreen;
 80009d4:	4b6d      	ldr	r3, [pc, #436]	; (8000b8c <normalState+0x4ec>)
 80009d6:	2201      	movs	r2, #1
 80009d8:	601a      	str	r2, [r3, #0]
			setTimer(0, timeGreen*100);
 80009da:	4b73      	ldr	r3, [pc, #460]	; (8000ba8 <normalState+0x508>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	2264      	movs	r2, #100	; 0x64
 80009e0:	fb02 f303 	mul.w	r3, r2, r3
 80009e4:	4619      	mov	r1, r3
 80009e6:	2000      	movs	r0, #0
 80009e8:	f000 fc2a 	bl	8001240 <setTimer>
			setTimer(1, 100);
 80009ec:	2164      	movs	r1, #100	; 0x64
 80009ee:	2001      	movs	r0, #1
 80009f0:	f000 fc26 	bl	8001240 <setTimer>
			time1=timeRed;
 80009f4:	4b6a      	ldr	r3, [pc, #424]	; (8000ba0 <normalState+0x500>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a66      	ldr	r2, [pc, #408]	; (8000b94 <normalState+0x4f4>)
 80009fa:	6013      	str	r3, [r2, #0]
			time2=timeGreen;
 80009fc:	4b6a      	ldr	r3, [pc, #424]	; (8000ba8 <normalState+0x508>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a65      	ldr	r2, [pc, #404]	; (8000b98 <normalState+0x4f8>)
 8000a02:	6013      	str	r3, [r2, #0]
			if(pedestrian_flag == Pedestrian_GREEN)
 8000a04:	4b67      	ldr	r3, [pc, #412]	; (8000ba4 <normalState+0x504>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	2b09      	cmp	r3, #9
 8000a0a:	d102      	bne.n	8000a12 <normalState+0x372>
			{
				pedestrian_flag = Pedestrian_RED;
 8000a0c:	4b65      	ldr	r3, [pc, #404]	; (8000ba4 <normalState+0x504>)
 8000a0e:	2208      	movs	r2, #8
 8000a10:	601a      	str	r2, [r3, #0]
			}
		}

		if(IsTimerUp(1)==1) {//update time
 8000a12:	2001      	movs	r0, #1
 8000a14:	f000 fc00 	bl	8001218 <IsTimerUp>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d10d      	bne.n	8000a3a <normalState+0x39a>
			time1--;
 8000a1e:	4b5d      	ldr	r3, [pc, #372]	; (8000b94 <normalState+0x4f4>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	3b01      	subs	r3, #1
 8000a24:	4a5b      	ldr	r2, [pc, #364]	; (8000b94 <normalState+0x4f4>)
 8000a26:	6013      	str	r3, [r2, #0]
			time2--;
 8000a28:	4b5b      	ldr	r3, [pc, #364]	; (8000b98 <normalState+0x4f8>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	3b01      	subs	r3, #1
 8000a2e:	4a5a      	ldr	r2, [pc, #360]	; (8000b98 <normalState+0x4f8>)
 8000a30:	6013      	str	r3, [r2, #0]
			setTimer(1, 100);
 8000a32:	2164      	movs	r1, #100	; 0x64
 8000a34:	2001      	movs	r0, #1
 8000a36:	f000 fc03 	bl	8001240 <setTimer>
		}

		if(is_button_pressed(1)) {
 8000a3a:	2001      	movs	r0, #1
 8000a3c:	f7ff fc1a 	bl	8000274 <is_button_pressed>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d011      	beq.n	8000a6a <normalState+0x3ca>
			status=ManRed;
 8000a46:	4b51      	ldr	r3, [pc, #324]	; (8000b8c <normalState+0x4ec>)
 8000a48:	220a      	movs	r2, #10
 8000a4a:	601a      	str	r2, [r3, #0]
			time1=timeRed;
 8000a4c:	4b54      	ldr	r3, [pc, #336]	; (8000ba0 <normalState+0x500>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a50      	ldr	r2, [pc, #320]	; (8000b94 <normalState+0x4f4>)
 8000a52:	6013      	str	r3, [r2, #0]
			time2=2;
 8000a54:	4b50      	ldr	r3, [pc, #320]	; (8000b98 <normalState+0x4f8>)
 8000a56:	2202      	movs	r2, #2
 8000a58:	601a      	str	r2, [r3, #0]
			clearAllLed1();
 8000a5a:	f7ff fc3d 	bl	80002d8 <clearAllLed1>
			clearAllLed2();
 8000a5e:	f7ff fc4f 	bl	8000300 <clearAllLed2>
			setTimer(2, 25);
 8000a62:	2119      	movs	r1, #25
 8000a64:	2002      	movs	r0, #2
 8000a66:	f000 fbeb 	bl	8001240 <setTimer>
		}

		if(is_button_pressed(0))
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	f7ff fc02 	bl	8000274 <is_button_pressed>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	f000 80e4 	beq.w	8000c40 <normalState+0x5a0>
		{
			pedestrian_flag = Pedestrian_GREEN;
 8000a78:	4b4a      	ldr	r3, [pc, #296]	; (8000ba4 <normalState+0x504>)
 8000a7a:	2209      	movs	r2, #9
 8000a7c:	601a      	str	r2, [r3, #0]
			setTimer(3, (timeRed + timeGreen) * 100);
 8000a7e:	4b48      	ldr	r3, [pc, #288]	; (8000ba0 <normalState+0x500>)
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	4b49      	ldr	r3, [pc, #292]	; (8000ba8 <normalState+0x508>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4413      	add	r3, r2
 8000a88:	2264      	movs	r2, #100	; 0x64
 8000a8a:	fb02 f303 	mul.w	r3, r2, r3
 8000a8e:	4619      	mov	r1, r3
 8000a90:	2003      	movs	r0, #3
 8000a92:	f000 fbd5 	bl	8001240 <setTimer>
		}

		break;
 8000a96:	e0d3      	b.n	8000c40 <normalState+0x5a0>
	case ManRed:
		if(IsTimerUp(2)==1) {
 8000a98:	2002      	movs	r0, #2
 8000a9a:	f000 fbbd 	bl	8001218 <IsTimerUp>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d105      	bne.n	8000ab0 <normalState+0x410>
			setTimer(2, 25);
 8000aa4:	2119      	movs	r1, #25
 8000aa6:	2002      	movs	r0, #2
 8000aa8:	f000 fbca 	bl	8001240 <setTimer>
			toggleRed();
 8000aac:	f7ff fca4 	bl	80003f8 <toggleRed>
		}
		if(is_button_pressed(2)) {
 8000ab0:	2002      	movs	r0, #2
 8000ab2:	f7ff fbdf 	bl	8000274 <is_button_pressed>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <normalState+0x420>
			increase();
 8000abc:	f7ff fd12 	bl	80004e4 <increase>
		}
		if(is_button_pressed(3)) {
 8000ac0:	2003      	movs	r0, #3
 8000ac2:	f7ff fbd7 	bl	8000274 <is_button_pressed>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d008      	beq.n	8000ade <normalState+0x43e>
			balance(time1, timeYellow, timeGreen);
 8000acc:	4b31      	ldr	r3, [pc, #196]	; (8000b94 <normalState+0x4f4>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a2f      	ldr	r2, [pc, #188]	; (8000b90 <normalState+0x4f0>)
 8000ad2:	6811      	ldr	r1, [r2, #0]
 8000ad4:	4a34      	ldr	r2, [pc, #208]	; (8000ba8 <normalState+0x508>)
 8000ad6:	6812      	ldr	r2, [r2, #0]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff fd17 	bl	800050c <balance>
		}
		if(is_button_pressed(1)) {
 8000ade:	2001      	movs	r0, #1
 8000ae0:	f7ff fbc8 	bl	8000274 <is_button_pressed>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	f000 80ac 	beq.w	8000c44 <normalState+0x5a4>
			status=ManAm;
 8000aec:	4b27      	ldr	r3, [pc, #156]	; (8000b8c <normalState+0x4ec>)
 8000aee:	220b      	movs	r2, #11
 8000af0:	601a      	str	r2, [r3, #0]
			time1=timeYellow;
 8000af2:	4b27      	ldr	r3, [pc, #156]	; (8000b90 <normalState+0x4f0>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4a27      	ldr	r2, [pc, #156]	; (8000b94 <normalState+0x4f4>)
 8000af8:	6013      	str	r3, [r2, #0]
			time2=3;
 8000afa:	4b27      	ldr	r3, [pc, #156]	; (8000b98 <normalState+0x4f8>)
 8000afc:	2203      	movs	r2, #3
 8000afe:	601a      	str	r2, [r3, #0]
			clearAllLed1();
 8000b00:	f7ff fbea 	bl	80002d8 <clearAllLed1>
			clearAllLed2();
 8000b04:	f7ff fbfc 	bl	8000300 <clearAllLed2>
			setTimer(2, 25);
 8000b08:	2119      	movs	r1, #25
 8000b0a:	2002      	movs	r0, #2
 8000b0c:	f000 fb98 	bl	8001240 <setTimer>
		}
		break;
 8000b10:	e098      	b.n	8000c44 <normalState+0x5a4>
	case ManAm:
		if(IsTimerUp(2)==1) {
 8000b12:	2002      	movs	r0, #2
 8000b14:	f000 fb80 	bl	8001218 <IsTimerUp>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d105      	bne.n	8000b2a <normalState+0x48a>
			setTimer(2, 25);
 8000b1e:	2119      	movs	r1, #25
 8000b20:	2002      	movs	r0, #2
 8000b22:	f000 fb8d 	bl	8001240 <setTimer>
			toggleYellow();
 8000b26:	f7ff fc79 	bl	800041c <toggleYellow>
		}
		if(is_button_pressed(2)) {
 8000b2a:	2002      	movs	r0, #2
 8000b2c:	f7ff fba2 	bl	8000274 <is_button_pressed>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <normalState+0x49a>
			increase();
 8000b36:	f7ff fcd5 	bl	80004e4 <increase>
		}
		if(is_button_pressed(3)) {
 8000b3a:	2003      	movs	r0, #3
 8000b3c:	f7ff fb9a 	bl	8000274 <is_button_pressed>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d008      	beq.n	8000b58 <normalState+0x4b8>
			balance(timeRed, time1, timeGreen);
 8000b46:	4b16      	ldr	r3, [pc, #88]	; (8000ba0 <normalState+0x500>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a12      	ldr	r2, [pc, #72]	; (8000b94 <normalState+0x4f4>)
 8000b4c:	6811      	ldr	r1, [r2, #0]
 8000b4e:	4a16      	ldr	r2, [pc, #88]	; (8000ba8 <normalState+0x508>)
 8000b50:	6812      	ldr	r2, [r2, #0]
 8000b52:	4618      	mov	r0, r3
 8000b54:	f7ff fcda 	bl	800050c <balance>
		}
		if(is_button_pressed(1)) {
 8000b58:	2001      	movs	r0, #1
 8000b5a:	f7ff fb8b 	bl	8000274 <is_button_pressed>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d071      	beq.n	8000c48 <normalState+0x5a8>
			status=ManGreen;
 8000b64:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <normalState+0x4ec>)
 8000b66:	220c      	movs	r2, #12
 8000b68:	601a      	str	r2, [r3, #0]
			time1=timeGreen;
 8000b6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <normalState+0x508>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4a09      	ldr	r2, [pc, #36]	; (8000b94 <normalState+0x4f4>)
 8000b70:	6013      	str	r3, [r2, #0]
			time2=4;
 8000b72:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <normalState+0x4f8>)
 8000b74:	2204      	movs	r2, #4
 8000b76:	601a      	str	r2, [r3, #0]
			clearAllLed1();
 8000b78:	f7ff fbae 	bl	80002d8 <clearAllLed1>
			clearAllLed2();
 8000b7c:	f7ff fbc0 	bl	8000300 <clearAllLed2>
			setTimer(2, 25);
 8000b80:	2119      	movs	r1, #25
 8000b82:	2002      	movs	r0, #2
 8000b84:	f000 fb5c 	bl	8001240 <setTimer>
		}
		break;
 8000b88:	e05e      	b.n	8000c48 <normalState+0x5a8>
 8000b8a:	bf00      	nop
 8000b8c:	200000ec 	.word	0x200000ec
 8000b90:	20000028 	.word	0x20000028
 8000b94:	200000f0 	.word	0x200000f0
 8000b98:	200000f4 	.word	0x200000f4
 8000b9c:	200000f8 	.word	0x200000f8
 8000ba0:	20000024 	.word	0x20000024
 8000ba4:	20000030 	.word	0x20000030
 8000ba8:	2000002c 	.word	0x2000002c
	case ManGreen:
		if(IsTimerUp(2)==1) {
 8000bac:	2002      	movs	r0, #2
 8000bae:	f000 fb33 	bl	8001218 <IsTimerUp>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d105      	bne.n	8000bc4 <normalState+0x524>
			setTimer(2, 25);
 8000bb8:	2119      	movs	r1, #25
 8000bba:	2002      	movs	r0, #2
 8000bbc:	f000 fb40 	bl	8001240 <setTimer>
			toggleGreen();
 8000bc0:	f7ff fc46 	bl	8000450 <toggleGreen>
		}
		if(is_button_pressed(2)) {
 8000bc4:	2002      	movs	r0, #2
 8000bc6:	f7ff fb55 	bl	8000274 <is_button_pressed>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <normalState+0x534>
			increase();
 8000bd0:	f7ff fc88 	bl	80004e4 <increase>
		}
		if(is_button_pressed(3)) {
 8000bd4:	2003      	movs	r0, #3
 8000bd6:	f7ff fb4d 	bl	8000274 <is_button_pressed>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d008      	beq.n	8000bf2 <normalState+0x552>
			balance(timeRed, timeYellow, time1);
 8000be0:	4b1c      	ldr	r3, [pc, #112]	; (8000c54 <normalState+0x5b4>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a1c      	ldr	r2, [pc, #112]	; (8000c58 <normalState+0x5b8>)
 8000be6:	6811      	ldr	r1, [r2, #0]
 8000be8:	4a1c      	ldr	r2, [pc, #112]	; (8000c5c <normalState+0x5bc>)
 8000bea:	6812      	ldr	r2, [r2, #0]
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff fc8d 	bl	800050c <balance>
		}
		if(is_button_pressed(1)) {
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	f7ff fb3e 	bl	8000274 <is_button_pressed>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d026      	beq.n	8000c4c <normalState+0x5ac>
			status=RedGreen;
 8000bfe:	4b18      	ldr	r3, [pc, #96]	; (8000c60 <normalState+0x5c0>)
 8000c00:	2201      	movs	r2, #1
 8000c02:	601a      	str	r2, [r3, #0]
			setTimer(0, timeGreen*100);
 8000c04:	4b17      	ldr	r3, [pc, #92]	; (8000c64 <normalState+0x5c4>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	2264      	movs	r2, #100	; 0x64
 8000c0a:	fb02 f303 	mul.w	r3, r2, r3
 8000c0e:	4619      	mov	r1, r3
 8000c10:	2000      	movs	r0, #0
 8000c12:	f000 fb15 	bl	8001240 <setTimer>
			setTimer(1, 100);
 8000c16:	2164      	movs	r1, #100	; 0x64
 8000c18:	2001      	movs	r0, #1
 8000c1a:	f000 fb11 	bl	8001240 <setTimer>
			time1=timeRed;
 8000c1e:	4b0d      	ldr	r3, [pc, #52]	; (8000c54 <normalState+0x5b4>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a0e      	ldr	r2, [pc, #56]	; (8000c5c <normalState+0x5bc>)
 8000c24:	6013      	str	r3, [r2, #0]
			time2=timeGreen;
 8000c26:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <normalState+0x5c4>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a0f      	ldr	r2, [pc, #60]	; (8000c68 <normalState+0x5c8>)
 8000c2c:	6013      	str	r3, [r2, #0]
		}
		break;
 8000c2e:	e00d      	b.n	8000c4c <normalState+0x5ac>
	default:
		break;
 8000c30:	bf00      	nop
 8000c32:	e00c      	b.n	8000c4e <normalState+0x5ae>
		break;
 8000c34:	bf00      	nop
 8000c36:	e00a      	b.n	8000c4e <normalState+0x5ae>
		break;
 8000c38:	bf00      	nop
 8000c3a:	e008      	b.n	8000c4e <normalState+0x5ae>
		break;
 8000c3c:	bf00      	nop
 8000c3e:	e006      	b.n	8000c4e <normalState+0x5ae>
		break;
 8000c40:	bf00      	nop
 8000c42:	e004      	b.n	8000c4e <normalState+0x5ae>
		break;
 8000c44:	bf00      	nop
 8000c46:	e002      	b.n	8000c4e <normalState+0x5ae>
		break;
 8000c48:	bf00      	nop
 8000c4a:	e000      	b.n	8000c4e <normalState+0x5ae>
		break;
 8000c4c:	bf00      	nop
	}
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000024 	.word	0x20000024
 8000c58:	20000028 	.word	0x20000028
 8000c5c:	200000f0 	.word	0x200000f0
 8000c60:	200000ec 	.word	0x200000ec
 8000c64:	2000002c 	.word	0x2000002c
 8000c68:	200000f4 	.word	0x200000f4

08000c6c <fsm_pedestrian>:
 *      Author: thien
 */

#include "global.h"

void fsm_pedestrian(void){
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
	switch(pedestrian_flag)
 8000c70:	4b19      	ldr	r3, [pc, #100]	; (8000cd8 <fsm_pedestrian+0x6c>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2b09      	cmp	r3, #9
 8000c76:	d01f      	beq.n	8000cb8 <fsm_pedestrian+0x4c>
 8000c78:	2b09      	cmp	r3, #9
 8000c7a:	dc2b      	bgt.n	8000cd4 <fsm_pedestrian+0x68>
 8000c7c:	2b07      	cmp	r3, #7
 8000c7e:	d002      	beq.n	8000c86 <fsm_pedestrian+0x1a>
 8000c80:	2b08      	cmp	r3, #8
 8000c82:	d008      	beq.n	8000c96 <fsm_pedestrian+0x2a>
			}
			buzzer();
			displayPedestrianGreen();
			break;
	}
}
 8000c84:	e026      	b.n	8000cd4 <fsm_pedestrian+0x68>
			buzzerValue=0;
 8000c86:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <fsm_pedestrian+0x70>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
			clearPedestrian();
 8000c8c:	f7ff fbee 	bl	800046c <clearPedestrian>
			buzzer();
 8000c90:	f7ff fb12 	bl	80002b8 <buzzer>
			break;
 8000c94:	e01e      	b.n	8000cd4 <fsm_pedestrian+0x68>
			if(IsTimerUp(3) == 1)
 8000c96:	2003      	movs	r0, #3
 8000c98:	f000 fabe 	bl	8001218 <IsTimerUp>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d102      	bne.n	8000ca8 <fsm_pedestrian+0x3c>
				pedestrian_flag = Pedestrian_INIT;
 8000ca2:	4b0d      	ldr	r3, [pc, #52]	; (8000cd8 <fsm_pedestrian+0x6c>)
 8000ca4:	2207      	movs	r2, #7
 8000ca6:	601a      	str	r2, [r3, #0]
			displayPedestrianRed();
 8000ca8:	f7ff fbf4 	bl	8000494 <displayPedestrianRed>
			buzzerValue=0;
 8000cac:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <fsm_pedestrian+0x70>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
			buzzer();
 8000cb2:	f7ff fb01 	bl	80002b8 <buzzer>
			break;
 8000cb6:	e00d      	b.n	8000cd4 <fsm_pedestrian+0x68>
			if(IsTimerUp(3) == 1)
 8000cb8:	2003      	movs	r0, #3
 8000cba:	f000 faad 	bl	8001218 <IsTimerUp>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d102      	bne.n	8000cca <fsm_pedestrian+0x5e>
				pedestrian_flag = Pedestrian_INIT;
 8000cc4:	4b04      	ldr	r3, [pc, #16]	; (8000cd8 <fsm_pedestrian+0x6c>)
 8000cc6:	2207      	movs	r2, #7
 8000cc8:	601a      	str	r2, [r3, #0]
			buzzer();
 8000cca:	f7ff faf5 	bl	80002b8 <buzzer>
			displayPedestrianGreen();
 8000cce:	f7ff fbf5 	bl	80004bc <displayPedestrianGreen>
			break;
 8000cd2:	bf00      	nop
}
 8000cd4:	bf00      	nop
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20000030 	.word	0x20000030
 8000cdc:	200000f8 	.word	0x200000f8

08000ce0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
	timerRun();
 8000ce8:	f000 fac2 	bl	8001270 <timerRun>
	SCH_Update();
 8000cec:	f000 fa50 	bl	8001190 <SCH_Update>
	button_reading();
 8000cf0:	f7ff fa2c 	bl	800014c <button_reading>
}
 8000cf4:	bf00      	nop
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d00:	f000 fc28 	bl	8001554 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d04:	f000 f822 	bl	8000d4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d08:	f000 f924 	bl	8000f54 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000d0c:	f000 f8ac 	bl	8000e68 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000d10:	f000 f85e 	bl	8000dd0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
 HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000d14:	2100      	movs	r1, #0
 8000d16:	4809      	ldr	r0, [pc, #36]	; (8000d3c <main+0x40>)
 8000d18:	f001 fc2e 	bl	8002578 <HAL_TIM_PWM_Start>
 HAL_TIM_Base_Start_IT(&htim2);
 8000d1c:	4808      	ldr	r0, [pc, #32]	; (8000d40 <main+0x44>)
 8000d1e:	f001 fb81 	bl	8002424 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  uint8_t value=0;
 	 //htim3.Instance->CCR1=2048;
// SCH_Add_Task(timerRun, 0, 1);
 SCH_Add_Task(normalState, 1, 1);
 8000d22:	2201      	movs	r2, #1
 8000d24:	2101      	movs	r1, #1
 8000d26:	4807      	ldr	r0, [pc, #28]	; (8000d44 <main+0x48>)
 8000d28:	f000 fa14 	bl	8001154 <SCH_Add_Task>
 SCH_Add_Task(fsm_pedestrian, 1, 1);
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	2101      	movs	r1, #1
 8000d30:	4805      	ldr	r0, [pc, #20]	; (8000d48 <main+0x4c>)
 8000d32:	f000 fa0f 	bl	8001154 <SCH_Add_Task>
  while (1)
  {
    /* USER CODE END WHILE */
	  SCH_Dispatch_Tasks();
 8000d36:	f000 fa47 	bl	80011c8 <SCH_Dispatch_Tasks>
 8000d3a:	e7fc      	b.n	8000d36 <main+0x3a>
 8000d3c:	2000010c 	.word	0x2000010c
 8000d40:	20000154 	.word	0x20000154
 8000d44:	080006a1 	.word	0x080006a1
 8000d48:	08000c6d 	.word	0x08000c6d

08000d4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b090      	sub	sp, #64	; 0x40
 8000d50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d52:	f107 0318 	add.w	r3, r7, #24
 8000d56:	2228      	movs	r2, #40	; 0x28
 8000d58:	2100      	movs	r1, #0
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f002 fab2 	bl	80032c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d60:	1d3b      	adds	r3, r7, #4
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	605a      	str	r2, [r3, #4]
 8000d68:	609a      	str	r2, [r3, #8]
 8000d6a:	60da      	str	r2, [r3, #12]
 8000d6c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d72:	2301      	movs	r3, #1
 8000d74:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d76:	2310      	movs	r3, #16
 8000d78:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000d82:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000d86:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d88:	f107 0318 	add.w	r3, r7, #24
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f000 ff1d 	bl	8001bcc <HAL_RCC_OscConfig>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000d98:	f000 f94a 	bl	8001030 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d9c:	230f      	movs	r3, #15
 8000d9e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000da0:	2302      	movs	r3, #2
 8000da2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000da4:	2300      	movs	r3, #0
 8000da6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000da8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dae:	2300      	movs	r3, #0
 8000db0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000db2:	1d3b      	adds	r3, r7, #4
 8000db4:	2102      	movs	r1, #2
 8000db6:	4618      	mov	r0, r3
 8000db8:	f001 f988 	bl	80020cc <HAL_RCC_ClockConfig>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000dc2:	f000 f935 	bl	8001030 <Error_Handler>
  }
}
 8000dc6:	bf00      	nop
 8000dc8:	3740      	adds	r7, #64	; 0x40
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
	...

08000dd0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dd6:	f107 0308 	add.w	r3, r7, #8
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	605a      	str	r2, [r3, #4]
 8000de0:	609a      	str	r2, [r3, #8]
 8000de2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de4:	463b      	mov	r3, r7
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dec:	4b1d      	ldr	r3, [pc, #116]	; (8000e64 <MX_TIM2_Init+0x94>)
 8000dee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000df2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6399;
 8000df4:	4b1b      	ldr	r3, [pc, #108]	; (8000e64 <MX_TIM2_Init+0x94>)
 8000df6:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8000dfa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dfc:	4b19      	ldr	r3, [pc, #100]	; (8000e64 <MX_TIM2_Init+0x94>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000e02:	4b18      	ldr	r3, [pc, #96]	; (8000e64 <MX_TIM2_Init+0x94>)
 8000e04:	2263      	movs	r2, #99	; 0x63
 8000e06:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e08:	4b16      	ldr	r3, [pc, #88]	; (8000e64 <MX_TIM2_Init+0x94>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e0e:	4b15      	ldr	r3, [pc, #84]	; (8000e64 <MX_TIM2_Init+0x94>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e14:	4813      	ldr	r0, [pc, #76]	; (8000e64 <MX_TIM2_Init+0x94>)
 8000e16:	f001 fab5 	bl	8002384 <HAL_TIM_Base_Init>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000e20:	f000 f906 	bl	8001030 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e2a:	f107 0308 	add.w	r3, r7, #8
 8000e2e:	4619      	mov	r1, r3
 8000e30:	480c      	ldr	r0, [pc, #48]	; (8000e64 <MX_TIM2_Init+0x94>)
 8000e32:	f001 fe0d 	bl	8002a50 <HAL_TIM_ConfigClockSource>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000e3c:	f000 f8f8 	bl	8001030 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e40:	2300      	movs	r3, #0
 8000e42:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e44:	2300      	movs	r3, #0
 8000e46:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e48:	463b      	mov	r3, r7
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4805      	ldr	r0, [pc, #20]	; (8000e64 <MX_TIM2_Init+0x94>)
 8000e4e:	f002 f98f 	bl	8003170 <HAL_TIMEx_MasterConfigSynchronization>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e58:	f000 f8ea 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e5c:	bf00      	nop
 8000e5e:	3718      	adds	r7, #24
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20000154 	.word	0x20000154

08000e68 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08e      	sub	sp, #56	; 0x38
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]
 8000e78:	609a      	str	r2, [r3, #8]
 8000e7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e7c:	f107 0320 	add.w	r3, r7, #32
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e86:	1d3b      	adds	r3, r7, #4
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
 8000e94:	615a      	str	r2, [r3, #20]
 8000e96:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e98:	4b2c      	ldr	r3, [pc, #176]	; (8000f4c <MX_TIM3_Init+0xe4>)
 8000e9a:	4a2d      	ldr	r2, [pc, #180]	; (8000f50 <MX_TIM3_Init+0xe8>)
 8000e9c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000e9e:	4b2b      	ldr	r3, [pc, #172]	; (8000f4c <MX_TIM3_Init+0xe4>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ea4:	4b29      	ldr	r3, [pc, #164]	; (8000f4c <MX_TIM3_Init+0xe4>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000eaa:	4b28      	ldr	r3, [pc, #160]	; (8000f4c <MX_TIM3_Init+0xe4>)
 8000eac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eb0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eb2:	4b26      	ldr	r3, [pc, #152]	; (8000f4c <MX_TIM3_Init+0xe4>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eb8:	4b24      	ldr	r3, [pc, #144]	; (8000f4c <MX_TIM3_Init+0xe4>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ebe:	4823      	ldr	r0, [pc, #140]	; (8000f4c <MX_TIM3_Init+0xe4>)
 8000ec0:	f001 fa60 	bl	8002384 <HAL_TIM_Base_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000eca:	f000 f8b1 	bl	8001030 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ece:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ed2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ed4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ed8:	4619      	mov	r1, r3
 8000eda:	481c      	ldr	r0, [pc, #112]	; (8000f4c <MX_TIM3_Init+0xe4>)
 8000edc:	f001 fdb8 	bl	8002a50 <HAL_TIM_ConfigClockSource>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000ee6:	f000 f8a3 	bl	8001030 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000eea:	4818      	ldr	r0, [pc, #96]	; (8000f4c <MX_TIM3_Init+0xe4>)
 8000eec:	f001 faec 	bl	80024c8 <HAL_TIM_PWM_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000ef6:	f000 f89b 	bl	8001030 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000efa:	2300      	movs	r3, #0
 8000efc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000efe:	2300      	movs	r3, #0
 8000f00:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f02:	f107 0320 	add.w	r3, r7, #32
 8000f06:	4619      	mov	r1, r3
 8000f08:	4810      	ldr	r0, [pc, #64]	; (8000f4c <MX_TIM3_Init+0xe4>)
 8000f0a:	f002 f931 	bl	8003170 <HAL_TIMEx_MasterConfigSynchronization>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000f14:	f000 f88c 	bl	8001030 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f18:	2360      	movs	r3, #96	; 0x60
 8000f1a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f20:	2300      	movs	r3, #0
 8000f22:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f24:	2300      	movs	r3, #0
 8000f26:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f28:	1d3b      	adds	r3, r7, #4
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4807      	ldr	r0, [pc, #28]	; (8000f4c <MX_TIM3_Init+0xe4>)
 8000f30:	f001 fccc 	bl	80028cc <HAL_TIM_PWM_ConfigChannel>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000f3a:	f000 f879 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f3e:	4803      	ldr	r0, [pc, #12]	; (8000f4c <MX_TIM3_Init+0xe4>)
 8000f40:	f000 fa38 	bl	80013b4 <HAL_TIM_MspPostInit>

}
 8000f44:	bf00      	nop
 8000f46:	3738      	adds	r7, #56	; 0x38
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	2000010c 	.word	0x2000010c
 8000f50:	40000400 	.word	0x40000400

08000f54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5a:	f107 0308 	add.w	r3, r7, #8
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	605a      	str	r2, [r3, #4]
 8000f64:	609a      	str	r2, [r3, #8]
 8000f66:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f68:	4b2e      	ldr	r3, [pc, #184]	; (8001024 <MX_GPIO_Init+0xd0>)
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	4a2d      	ldr	r2, [pc, #180]	; (8001024 <MX_GPIO_Init+0xd0>)
 8000f6e:	f043 0304 	orr.w	r3, r3, #4
 8000f72:	6193      	str	r3, [r2, #24]
 8000f74:	4b2b      	ldr	r3, [pc, #172]	; (8001024 <MX_GPIO_Init+0xd0>)
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	f003 0304 	and.w	r3, r3, #4
 8000f7c:	607b      	str	r3, [r7, #4]
 8000f7e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f80:	4b28      	ldr	r3, [pc, #160]	; (8001024 <MX_GPIO_Init+0xd0>)
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	4a27      	ldr	r2, [pc, #156]	; (8001024 <MX_GPIO_Init+0xd0>)
 8000f86:	f043 0308 	orr.w	r3, r3, #8
 8000f8a:	6193      	str	r3, [r2, #24]
 8000f8c:	4b25      	ldr	r3, [pc, #148]	; (8001024 <MX_GPIO_Init+0xd0>)
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	f003 0308 	and.w	r3, r3, #8
 8000f94:	603b      	str	r3, [r7, #0]
 8000f96:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f44f 6186 	mov.w	r1, #1072	; 0x430
 8000f9e:	4822      	ldr	r0, [pc, #136]	; (8001028 <MX_GPIO_Init+0xd4>)
 8000fa0:	f000 fde3 	bl	8001b6a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_Pin|D2_Pin, GPIO_PIN_RESET);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000faa:	4820      	ldr	r0, [pc, #128]	; (800102c <MX_GPIO_Init+0xd8>)
 8000fac:	f000 fddd 	bl	8001b6a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin;
 8000fb0:	2313      	movs	r3, #19
 8000fb2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbc:	f107 0308 	add.w	r3, r7, #8
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	481a      	ldr	r0, [pc, #104]	; (800102c <MX_GPIO_Init+0xd8>)
 8000fc4:	f000 fc36 	bl	8001834 <HAL_GPIO_Init>

  /*Configure GPIO pins : A3_Pin D3_Pin */
  GPIO_InitStruct.Pin = A3_Pin|D3_Pin;
 8000fc8:	2309      	movs	r3, #9
 8000fca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd4:	f107 0308 	add.w	r3, r7, #8
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4813      	ldr	r0, [pc, #76]	; (8001028 <MX_GPIO_Init+0xd4>)
 8000fdc:	f000 fc2a 	bl	8001834 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D5_Pin|D4_Pin;
 8000fe0:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8000fe4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff2:	f107 0308 	add.w	r3, r7, #8
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	480b      	ldr	r0, [pc, #44]	; (8001028 <MX_GPIO_Init+0xd4>)
 8000ffa:	f000 fc1b 	bl	8001834 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D2_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D2_Pin;
 8000ffe:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001002:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001004:	2301      	movs	r3, #1
 8001006:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100c:	2302      	movs	r3, #2
 800100e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001010:	f107 0308 	add.w	r3, r7, #8
 8001014:	4619      	mov	r1, r3
 8001016:	4805      	ldr	r0, [pc, #20]	; (800102c <MX_GPIO_Init+0xd8>)
 8001018:	f000 fc0c 	bl	8001834 <HAL_GPIO_Init>

}
 800101c:	bf00      	nop
 800101e:	3718      	adds	r7, #24
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40021000 	.word	0x40021000
 8001028:	40010c00 	.word	0x40010c00
 800102c:	40010800 	.word	0x40010800

08001030 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001034:	b672      	cpsid	i
}
 8001036:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001038:	e7fe      	b.n	8001038 <Error_Handler+0x8>
	...

0800103c <addNode>:

void SCH_Init(void) {
	head=NULL;
}

void addNode(sTask newTask) {
 800103c:	b590      	push	{r4, r7, lr}
 800103e:	b087      	sub	sp, #28
 8001040:	af00      	add	r7, sp, #0
 8001042:	463c      	mov	r4, r7
 8001044:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
 8001048:	2014      	movs	r0, #20
 800104a:	f002 f92b 	bl	80032a4 <malloc>
 800104e:	4603      	mov	r3, r0
 8001050:	613b      	str	r3, [r7, #16]
	newNode->data.pTask = newTask.pTask;
 8001052:	683a      	ldr	r2, [r7, #0]
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	601a      	str	r2, [r3, #0]
	newNode->data.Delay = newTask.Delay;
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	605a      	str	r2, [r3, #4]
	newNode->data.Period = newTask.Period;
 800105e:	68ba      	ldr	r2, [r7, #8]
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	609a      	str	r2, [r3, #8]
	newNode->data.RunMe = newTask.RunMe;
 8001064:	7b3a      	ldrb	r2, [r7, #12]
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	731a      	strb	r2, [r3, #12]
	newNode->next = NULL;
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
	//list is empty just addNode
	if(head == NULL) {
 8001070:	4b2b      	ldr	r3, [pc, #172]	; (8001120 <addNode+0xe4>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d103      	bne.n	8001080 <addNode+0x44>
		head=newNode;
 8001078:	4a29      	ldr	r2, [pc, #164]	; (8001120 <addNode+0xe4>)
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	6013      	str	r3, [r2, #0]
		return;
 800107e:	e04c      	b.n	800111a <addNode+0xde>
	}
	struct Node* tmp=head;
 8001080:	4b27      	ldr	r3, [pc, #156]	; (8001120 <addNode+0xe4>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	617b      	str	r3, [r7, #20]
	//if the list has A5 B3 C2  we add D3 -> D3 A2 B3 C2
	if(newNode->data.Delay < tmp->data.Delay ) {
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	685a      	ldr	r2, [r3, #4]
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	429a      	cmp	r2, r3
 8001090:	d21e      	bcs.n	80010d0 <addNode+0x94>
		tmp->data.Delay-= newNode->data.Delay;
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	685a      	ldr	r2, [r3, #4]
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	1ad2      	subs	r2, r2, r3
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	605a      	str	r2, [r3, #4]
		newNode->next=tmp;
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	697a      	ldr	r2, [r7, #20]
 80010a4:	611a      	str	r2, [r3, #16]
		head=newNode;
 80010a6:	4a1e      	ldr	r2, [pc, #120]	; (8001120 <addNode+0xe4>)
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	6013      	str	r3, [r2, #0]
		return;
 80010ac:	e035      	b.n	800111a <addNode+0xde>
	}

	// if the list has A5 B3 C2 we add D9 -> A5 B3 D1 C1
	while(tmp->next !=NULL) {
		newNode->data.Delay -= tmp->data.Delay;
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	685a      	ldr	r2, [r3, #4]
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	1ad2      	subs	r2, r2, r3
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	605a      	str	r2, [r3, #4]
		if(newNode->data.Delay <= tmp->next->data.Delay) {
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	685a      	ldr	r2, [r3, #4]
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	691b      	ldr	r3, [r3, #16]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d907      	bls.n	80010da <addNode+0x9e>
			break;
		}
		tmp=tmp->next;
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	691b      	ldr	r3, [r3, #16]
 80010ce:	617b      	str	r3, [r7, #20]
	while(tmp->next !=NULL) {
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	691b      	ldr	r3, [r3, #16]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d1ea      	bne.n	80010ae <addNode+0x72>
 80010d8:	e000      	b.n	80010dc <addNode+0xa0>
			break;
 80010da:	bf00      	nop
	}
	// tmp dang o B3 va D tro thanh D1
	if(tmp->next ==NULL) {
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	691b      	ldr	r3, [r3, #16]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d10a      	bne.n	80010fa <addNode+0xbe>
		newNode->data.Delay-=tmp->data.Delay;
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	685a      	ldr	r2, [r3, #4]
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	1ad2      	subs	r2, r2, r3
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	605a      	str	r2, [r3, #4]
		tmp->next=newNode;
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	611a      	str	r2, [r3, #16]
 80010f8:	e00f      	b.n	800111a <addNode+0xde>
	}
	else {
		tmp->next->data.Delay-= newNode->data.Delay; // chuyen C2 thanh C1
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	691b      	ldr	r3, [r3, #16]
 80010fe:	6859      	ldr	r1, [r3, #4]
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	685a      	ldr	r2, [r3, #4]
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	691b      	ldr	r3, [r3, #16]
 8001108:	1a8a      	subs	r2, r1, r2
 800110a:	605a      	str	r2, [r3, #4]
		newNode->next=tmp->next;
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	691a      	ldr	r2, [r3, #16]
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	611a      	str	r2, [r3, #16]
		tmp->next=newNode;
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	611a      	str	r2, [r3, #16]
	}
}
 800111a:	371c      	adds	r7, #28
 800111c:	46bd      	mov	sp, r7
 800111e:	bd90      	pop	{r4, r7, pc}
 8001120:	200000fc 	.word	0x200000fc

08001124 <deleteBegin>:

void deleteBegin() {
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
	struct Node* tmp=head;
 800112a:	4b09      	ldr	r3, [pc, #36]	; (8001150 <deleteBegin+0x2c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	607b      	str	r3, [r7, #4]
	if(tmp==NULL) return;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d008      	beq.n	8001148 <deleteBegin+0x24>
	head=head->next;
 8001136:	4b06      	ldr	r3, [pc, #24]	; (8001150 <deleteBegin+0x2c>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	691b      	ldr	r3, [r3, #16]
 800113c:	4a04      	ldr	r2, [pc, #16]	; (8001150 <deleteBegin+0x2c>)
 800113e:	6013      	str	r3, [r2, #0]
	free(tmp);
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f002 f8b7 	bl	80032b4 <free>
 8001146:	e000      	b.n	800114a <deleteBegin+0x26>
	if(tmp==NULL) return;
 8001148:	bf00      	nop
}
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	200000fc 	.word	0x200000fc

08001154 <SCH_Add_Task>:

void SCH_Add_Task(void (*p_function)(), uint32_t DELAY, uint32_t PERIOD){
 8001154:	b580      	push	{r7, lr}
 8001156:	b088      	sub	sp, #32
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
	sTask newTask;
	newTask.pTask=p_function;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	613b      	str	r3, [r7, #16]
	newTask.Delay=DELAY;
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	617b      	str	r3, [r7, #20]
	newTask.Period=PERIOD;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	61bb      	str	r3, [r7, #24]
	if(newTask.Delay==0) {
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d102      	bne.n	8001178 <SCH_Add_Task+0x24>
		newTask.RunMe=1;
 8001172:	2301      	movs	r3, #1
 8001174:	773b      	strb	r3, [r7, #28]
 8001176:	e001      	b.n	800117c <SCH_Add_Task+0x28>
	}
	else {
		newTask.RunMe=0;
 8001178:	2300      	movs	r3, #0
 800117a:	773b      	strb	r3, [r7, #28]
	}
	addNode(newTask);
 800117c:	f107 0310 	add.w	r3, r7, #16
 8001180:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001182:	f7ff ff5b 	bl	800103c <addNode>
}
 8001186:	bf00      	nop
 8001188:	3720      	adds	r7, #32
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
	...

08001190 <SCH_Update>:

void SCH_Update(void) {
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
	if(head==NULL) return;
 8001194:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <SCH_Update+0x34>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d00f      	beq.n	80011bc <SCH_Update+0x2c>
	if(head->data.Delay <=0) {
 800119c:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <SCH_Update+0x34>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d104      	bne.n	80011b0 <SCH_Update+0x20>
		head->data.RunMe=1;
 80011a6:	4b07      	ldr	r3, [pc, #28]	; (80011c4 <SCH_Update+0x34>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2201      	movs	r2, #1
 80011ac:	731a      	strb	r2, [r3, #12]
 80011ae:	e006      	b.n	80011be <SCH_Update+0x2e>
	}
	else {
		head->data.Delay--;
 80011b0:	4b04      	ldr	r3, [pc, #16]	; (80011c4 <SCH_Update+0x34>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	685a      	ldr	r2, [r3, #4]
 80011b6:	3a01      	subs	r2, #1
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	e000      	b.n	80011be <SCH_Update+0x2e>
	if(head==NULL) return;
 80011bc:	bf00      	nop
	}
}
 80011be:	46bd      	mov	sp, r7
 80011c0:	bc80      	pop	{r7}
 80011c2:	4770      	bx	lr
 80011c4:	200000fc 	.word	0x200000fc

080011c8 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void) {
 80011c8:	b590      	push	{r4, r7, lr}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
	if(head==NULL) return;
 80011ce:	4b11      	ldr	r3, [pc, #68]	; (8001214 <SCH_Dispatch_Tasks+0x4c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d01a      	beq.n	800120c <SCH_Dispatch_Tasks+0x44>
	if(head->data.RunMe > 0) {
 80011d6:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <SCH_Dispatch_Tasks+0x4c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	7b1b      	ldrb	r3, [r3, #12]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d016      	beq.n	800120e <SCH_Dispatch_Tasks+0x46>
		(*head->data.pTask)();
 80011e0:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <SCH_Dispatch_Tasks+0x4c>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4798      	blx	r3
		sTask newTask=head->data;
 80011e8:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <SCH_Dispatch_Tasks+0x4c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	463c      	mov	r4, r7
 80011ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		deleteBegin();
 80011f4:	f7ff ff96 	bl	8001124 <deleteBegin>
		if(newTask.Period !=0) {
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d007      	beq.n	800120e <SCH_Dispatch_Tasks+0x46>
			SCH_Add_Task(newTask.pTask, newTask.Period, newTask.Period);
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	68b9      	ldr	r1, [r7, #8]
 8001202:	68ba      	ldr	r2, [r7, #8]
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff ffa5 	bl	8001154 <SCH_Add_Task>
 800120a:	e000      	b.n	800120e <SCH_Dispatch_Tasks+0x46>
	if(head==NULL) return;
 800120c:	bf00      	nop
		}
	}
}
 800120e:	3714      	adds	r7, #20
 8001210:	46bd      	mov	sp, r7
 8001212:	bd90      	pop	{r4, r7, pc}
 8001214:	200000fc 	.word	0x200000fc

08001218 <IsTimerUp>:

int timer_counter[TIMER];
int timer_flag[TIMER];

int IsTimerUp(int timer)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
	return (timer_flag[timer] == 1);
 8001220:	4a06      	ldr	r2, [pc, #24]	; (800123c <IsTimerUp+0x24>)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001228:	2b01      	cmp	r3, #1
 800122a:	bf0c      	ite	eq
 800122c:	2301      	moveq	r3, #1
 800122e:	2300      	movne	r3, #0
 8001230:	b2db      	uxtb	r3, r3
}
 8001232:	4618      	mov	r0, r3
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr
 800123c:	200001b0 	.word	0x200001b0

08001240 <setTimer>:

void setTimer(int timer, int duration)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
	timer_counter[timer] = duration;
 800124a:	4907      	ldr	r1, [pc, #28]	; (8001268 <setTimer+0x28>)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	683a      	ldr	r2, [r7, #0]
 8001250:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[timer] = 0;
 8001254:	4a05      	ldr	r2, [pc, #20]	; (800126c <setTimer+0x2c>)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2100      	movs	r1, #0
 800125a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800125e:	bf00      	nop
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	bc80      	pop	{r7}
 8001266:	4770      	bx	lr
 8001268:	2000019c 	.word	0x2000019c
 800126c:	200001b0 	.word	0x200001b0

08001270 <timerRun>:
void timerRun(void)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
	for (int timer = 0; timer < TIMER; timer++)
 8001276:	2300      	movs	r3, #0
 8001278:	607b      	str	r3, [r7, #4]
 800127a:	e01c      	b.n	80012b6 <timerRun+0x46>
	{
		if(timer_counter[timer] > 0)
 800127c:	4a12      	ldr	r2, [pc, #72]	; (80012c8 <timerRun+0x58>)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001284:	2b00      	cmp	r3, #0
 8001286:	dd13      	ble.n	80012b0 <timerRun+0x40>
		{
			timer_counter[timer]--;
 8001288:	4a0f      	ldr	r2, [pc, #60]	; (80012c8 <timerRun+0x58>)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001290:	1e5a      	subs	r2, r3, #1
 8001292:	490d      	ldr	r1, [pc, #52]	; (80012c8 <timerRun+0x58>)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[timer] == 0)
 800129a:	4a0b      	ldr	r2, [pc, #44]	; (80012c8 <timerRun+0x58>)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d104      	bne.n	80012b0 <timerRun+0x40>
				timer_flag[timer] = 1;
 80012a6:	4a09      	ldr	r2, [pc, #36]	; (80012cc <timerRun+0x5c>)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2101      	movs	r1, #1
 80012ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int timer = 0; timer < TIMER; timer++)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3301      	adds	r3, #1
 80012b4:	607b      	str	r3, [r7, #4]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2b04      	cmp	r3, #4
 80012ba:	dddf      	ble.n	800127c <timerRun+0xc>
		}
	}
}
 80012bc:	bf00      	nop
 80012be:	bf00      	nop
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc80      	pop	{r7}
 80012c6:	4770      	bx	lr
 80012c8:	2000019c 	.word	0x2000019c
 80012cc:	200001b0 	.word	0x200001b0

080012d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012d6:	4b15      	ldr	r3, [pc, #84]	; (800132c <HAL_MspInit+0x5c>)
 80012d8:	699b      	ldr	r3, [r3, #24]
 80012da:	4a14      	ldr	r2, [pc, #80]	; (800132c <HAL_MspInit+0x5c>)
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	6193      	str	r3, [r2, #24]
 80012e2:	4b12      	ldr	r3, [pc, #72]	; (800132c <HAL_MspInit+0x5c>)
 80012e4:	699b      	ldr	r3, [r3, #24]
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	60bb      	str	r3, [r7, #8]
 80012ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ee:	4b0f      	ldr	r3, [pc, #60]	; (800132c <HAL_MspInit+0x5c>)
 80012f0:	69db      	ldr	r3, [r3, #28]
 80012f2:	4a0e      	ldr	r2, [pc, #56]	; (800132c <HAL_MspInit+0x5c>)
 80012f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f8:	61d3      	str	r3, [r2, #28]
 80012fa:	4b0c      	ldr	r3, [pc, #48]	; (800132c <HAL_MspInit+0x5c>)
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001306:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <HAL_MspInit+0x60>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	4a04      	ldr	r2, [pc, #16]	; (8001330 <HAL_MspInit+0x60>)
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001322:	bf00      	nop
 8001324:	3714      	adds	r7, #20
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr
 800132c:	40021000 	.word	0x40021000
 8001330:	40010000 	.word	0x40010000

08001334 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001344:	d114      	bne.n	8001370 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001346:	4b19      	ldr	r3, [pc, #100]	; (80013ac <HAL_TIM_Base_MspInit+0x78>)
 8001348:	69db      	ldr	r3, [r3, #28]
 800134a:	4a18      	ldr	r2, [pc, #96]	; (80013ac <HAL_TIM_Base_MspInit+0x78>)
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	61d3      	str	r3, [r2, #28]
 8001352:	4b16      	ldr	r3, [pc, #88]	; (80013ac <HAL_TIM_Base_MspInit+0x78>)
 8001354:	69db      	ldr	r3, [r3, #28]
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800135e:	2200      	movs	r2, #0
 8001360:	2100      	movs	r1, #0
 8001362:	201c      	movs	r0, #28
 8001364:	f000 fa2f 	bl	80017c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001368:	201c      	movs	r0, #28
 800136a:	f000 fa48 	bl	80017fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800136e:	e018      	b.n	80013a2 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a0e      	ldr	r2, [pc, #56]	; (80013b0 <HAL_TIM_Base_MspInit+0x7c>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d113      	bne.n	80013a2 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800137a:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <HAL_TIM_Base_MspInit+0x78>)
 800137c:	69db      	ldr	r3, [r3, #28]
 800137e:	4a0b      	ldr	r2, [pc, #44]	; (80013ac <HAL_TIM_Base_MspInit+0x78>)
 8001380:	f043 0302 	orr.w	r3, r3, #2
 8001384:	61d3      	str	r3, [r2, #28]
 8001386:	4b09      	ldr	r3, [pc, #36]	; (80013ac <HAL_TIM_Base_MspInit+0x78>)
 8001388:	69db      	ldr	r3, [r3, #28]
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	60bb      	str	r3, [r7, #8]
 8001390:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001392:	2200      	movs	r2, #0
 8001394:	2100      	movs	r1, #0
 8001396:	201d      	movs	r0, #29
 8001398:	f000 fa15 	bl	80017c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800139c:	201d      	movs	r0, #29
 800139e:	f000 fa2e 	bl	80017fe <HAL_NVIC_EnableIRQ>
}
 80013a2:	bf00      	nop
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40021000 	.word	0x40021000
 80013b0:	40000400 	.word	0x40000400

080013b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b088      	sub	sp, #32
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013bc:	f107 0310 	add.w	r3, r7, #16
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a0f      	ldr	r2, [pc, #60]	; (800140c <HAL_TIM_MspPostInit+0x58>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d117      	bne.n	8001404 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d4:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <HAL_TIM_MspPostInit+0x5c>)
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	4a0d      	ldr	r2, [pc, #52]	; (8001410 <HAL_TIM_MspPostInit+0x5c>)
 80013da:	f043 0304 	orr.w	r3, r3, #4
 80013de:	6193      	str	r3, [r2, #24]
 80013e0:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <HAL_TIM_MspPostInit+0x5c>)
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	f003 0304 	and.w	r3, r3, #4
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013ec:	2340      	movs	r3, #64	; 0x40
 80013ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f0:	2302      	movs	r3, #2
 80013f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f4:	2302      	movs	r3, #2
 80013f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f8:	f107 0310 	add.w	r3, r7, #16
 80013fc:	4619      	mov	r1, r3
 80013fe:	4805      	ldr	r0, [pc, #20]	; (8001414 <HAL_TIM_MspPostInit+0x60>)
 8001400:	f000 fa18 	bl	8001834 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001404:	bf00      	nop
 8001406:	3720      	adds	r7, #32
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40000400 	.word	0x40000400
 8001410:	40021000 	.word	0x40021000
 8001414:	40010800 	.word	0x40010800

08001418 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800141c:	e7fe      	b.n	800141c <NMI_Handler+0x4>

0800141e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001422:	e7fe      	b.n	8001422 <HardFault_Handler+0x4>

08001424 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001428:	e7fe      	b.n	8001428 <MemManage_Handler+0x4>

0800142a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800142e:	e7fe      	b.n	800142e <BusFault_Handler+0x4>

08001430 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001434:	e7fe      	b.n	8001434 <UsageFault_Handler+0x4>

08001436 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	46bd      	mov	sp, r7
 800143e:	bc80      	pop	{r7}
 8001440:	4770      	bx	lr

08001442 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001442:	b480      	push	{r7}
 8001444:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	46bd      	mov	sp, r7
 800144a:	bc80      	pop	{r7}
 800144c:	4770      	bx	lr

0800144e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	46bd      	mov	sp, r7
 8001456:	bc80      	pop	{r7}
 8001458:	4770      	bx	lr

0800145a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800145e:	f000 f8bf 	bl	80015e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
	...

08001468 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800146c:	4802      	ldr	r0, [pc, #8]	; (8001478 <TIM2_IRQHandler+0x10>)
 800146e:	f001 f925 	bl	80026bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000154 	.word	0x20000154

0800147c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001480:	4802      	ldr	r0, [pc, #8]	; (800148c <TIM3_IRQHandler+0x10>)
 8001482:	f001 f91b 	bl	80026bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	2000010c 	.word	0x2000010c

08001490 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001498:	4a14      	ldr	r2, [pc, #80]	; (80014ec <_sbrk+0x5c>)
 800149a:	4b15      	ldr	r3, [pc, #84]	; (80014f0 <_sbrk+0x60>)
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014a4:	4b13      	ldr	r3, [pc, #76]	; (80014f4 <_sbrk+0x64>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d102      	bne.n	80014b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014ac:	4b11      	ldr	r3, [pc, #68]	; (80014f4 <_sbrk+0x64>)
 80014ae:	4a12      	ldr	r2, [pc, #72]	; (80014f8 <_sbrk+0x68>)
 80014b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014b2:	4b10      	ldr	r3, [pc, #64]	; (80014f4 <_sbrk+0x64>)
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4413      	add	r3, r2
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d207      	bcs.n	80014d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014c0:	f001 fec6 	bl	8003250 <__errno>
 80014c4:	4603      	mov	r3, r0
 80014c6:	220c      	movs	r2, #12
 80014c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ca:	f04f 33ff 	mov.w	r3, #4294967295
 80014ce:	e009      	b.n	80014e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014d0:	4b08      	ldr	r3, [pc, #32]	; (80014f4 <_sbrk+0x64>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014d6:	4b07      	ldr	r3, [pc, #28]	; (80014f4 <_sbrk+0x64>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4413      	add	r3, r2
 80014de:	4a05      	ldr	r2, [pc, #20]	; (80014f4 <_sbrk+0x64>)
 80014e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014e2:	68fb      	ldr	r3, [r7, #12]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3718      	adds	r7, #24
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	20005000 	.word	0x20005000
 80014f0:	00000400 	.word	0x00000400
 80014f4:	20000100 	.word	0x20000100
 80014f8:	200001d8 	.word	0x200001d8

080014fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001500:	bf00      	nop
 8001502:	46bd      	mov	sp, r7
 8001504:	bc80      	pop	{r7}
 8001506:	4770      	bx	lr

08001508 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001508:	f7ff fff8 	bl	80014fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800150c:	480b      	ldr	r0, [pc, #44]	; (800153c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800150e:	490c      	ldr	r1, [pc, #48]	; (8001540 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001510:	4a0c      	ldr	r2, [pc, #48]	; (8001544 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001512:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001514:	e002      	b.n	800151c <LoopCopyDataInit>

08001516 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001516:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001518:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800151a:	3304      	adds	r3, #4

0800151c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800151c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800151e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001520:	d3f9      	bcc.n	8001516 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001522:	4a09      	ldr	r2, [pc, #36]	; (8001548 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001524:	4c09      	ldr	r4, [pc, #36]	; (800154c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001526:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001528:	e001      	b.n	800152e <LoopFillZerobss>

0800152a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800152a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800152c:	3204      	adds	r2, #4

0800152e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800152e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001530:	d3fb      	bcc.n	800152a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001532:	f001 fe93 	bl	800325c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001536:	f7ff fbe1 	bl	8000cfc <main>
  bx lr
 800153a:	4770      	bx	lr
  ldr r0, =_sdata
 800153c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001540:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8001544:	080034a0 	.word	0x080034a0
  ldr r2, =_sbss
 8001548:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 800154c:	200001d8 	.word	0x200001d8

08001550 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001550:	e7fe      	b.n	8001550 <ADC1_2_IRQHandler>
	...

08001554 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001558:	4b08      	ldr	r3, [pc, #32]	; (800157c <HAL_Init+0x28>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a07      	ldr	r2, [pc, #28]	; (800157c <HAL_Init+0x28>)
 800155e:	f043 0310 	orr.w	r3, r3, #16
 8001562:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001564:	2003      	movs	r0, #3
 8001566:	f000 f923 	bl	80017b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800156a:	200f      	movs	r0, #15
 800156c:	f000 f808 	bl	8001580 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001570:	f7ff feae 	bl	80012d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40022000 	.word	0x40022000

08001580 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001588:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <HAL_InitTick+0x54>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	4b12      	ldr	r3, [pc, #72]	; (80015d8 <HAL_InitTick+0x58>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	4619      	mov	r1, r3
 8001592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001596:	fbb3 f3f1 	udiv	r3, r3, r1
 800159a:	fbb2 f3f3 	udiv	r3, r2, r3
 800159e:	4618      	mov	r0, r3
 80015a0:	f000 f93b 	bl	800181a <HAL_SYSTICK_Config>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e00e      	b.n	80015cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2b0f      	cmp	r3, #15
 80015b2:	d80a      	bhi.n	80015ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015b4:	2200      	movs	r2, #0
 80015b6:	6879      	ldr	r1, [r7, #4]
 80015b8:	f04f 30ff 	mov.w	r0, #4294967295
 80015bc:	f000 f903 	bl	80017c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015c0:	4a06      	ldr	r2, [pc, #24]	; (80015dc <HAL_InitTick+0x5c>)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015c6:	2300      	movs	r3, #0
 80015c8:	e000      	b.n	80015cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	20000034 	.word	0x20000034
 80015d8:	2000003c 	.word	0x2000003c
 80015dc:	20000038 	.word	0x20000038

080015e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015e4:	4b05      	ldr	r3, [pc, #20]	; (80015fc <HAL_IncTick+0x1c>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	461a      	mov	r2, r3
 80015ea:	4b05      	ldr	r3, [pc, #20]	; (8001600 <HAL_IncTick+0x20>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4413      	add	r3, r2
 80015f0:	4a03      	ldr	r2, [pc, #12]	; (8001600 <HAL_IncTick+0x20>)
 80015f2:	6013      	str	r3, [r2, #0]
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr
 80015fc:	2000003c 	.word	0x2000003c
 8001600:	200001c4 	.word	0x200001c4

08001604 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  return uwTick;
 8001608:	4b02      	ldr	r3, [pc, #8]	; (8001614 <HAL_GetTick+0x10>)
 800160a:	681b      	ldr	r3, [r3, #0]
}
 800160c:	4618      	mov	r0, r3
 800160e:	46bd      	mov	sp, r7
 8001610:	bc80      	pop	{r7}
 8001612:	4770      	bx	lr
 8001614:	200001c4 	.word	0x200001c4

08001618 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001628:	4b0c      	ldr	r3, [pc, #48]	; (800165c <__NVIC_SetPriorityGrouping+0x44>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800162e:	68ba      	ldr	r2, [r7, #8]
 8001630:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001634:	4013      	ands	r3, r2
 8001636:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001640:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001648:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800164a:	4a04      	ldr	r2, [pc, #16]	; (800165c <__NVIC_SetPriorityGrouping+0x44>)
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	60d3      	str	r3, [r2, #12]
}
 8001650:	bf00      	nop
 8001652:	3714      	adds	r7, #20
 8001654:	46bd      	mov	sp, r7
 8001656:	bc80      	pop	{r7}
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001664:	4b04      	ldr	r3, [pc, #16]	; (8001678 <__NVIC_GetPriorityGrouping+0x18>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	0a1b      	lsrs	r3, r3, #8
 800166a:	f003 0307 	and.w	r3, r3, #7
}
 800166e:	4618      	mov	r0, r3
 8001670:	46bd      	mov	sp, r7
 8001672:	bc80      	pop	{r7}
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168a:	2b00      	cmp	r3, #0
 800168c:	db0b      	blt.n	80016a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800168e:	79fb      	ldrb	r3, [r7, #7]
 8001690:	f003 021f 	and.w	r2, r3, #31
 8001694:	4906      	ldr	r1, [pc, #24]	; (80016b0 <__NVIC_EnableIRQ+0x34>)
 8001696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169a:	095b      	lsrs	r3, r3, #5
 800169c:	2001      	movs	r0, #1
 800169e:	fa00 f202 	lsl.w	r2, r0, r2
 80016a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr
 80016b0:	e000e100 	.word	0xe000e100

080016b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	6039      	str	r1, [r7, #0]
 80016be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	db0a      	blt.n	80016de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	b2da      	uxtb	r2, r3
 80016cc:	490c      	ldr	r1, [pc, #48]	; (8001700 <__NVIC_SetPriority+0x4c>)
 80016ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d2:	0112      	lsls	r2, r2, #4
 80016d4:	b2d2      	uxtb	r2, r2
 80016d6:	440b      	add	r3, r1
 80016d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016dc:	e00a      	b.n	80016f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	b2da      	uxtb	r2, r3
 80016e2:	4908      	ldr	r1, [pc, #32]	; (8001704 <__NVIC_SetPriority+0x50>)
 80016e4:	79fb      	ldrb	r3, [r7, #7]
 80016e6:	f003 030f 	and.w	r3, r3, #15
 80016ea:	3b04      	subs	r3, #4
 80016ec:	0112      	lsls	r2, r2, #4
 80016ee:	b2d2      	uxtb	r2, r2
 80016f0:	440b      	add	r3, r1
 80016f2:	761a      	strb	r2, [r3, #24]
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bc80      	pop	{r7}
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	e000e100 	.word	0xe000e100
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001708:	b480      	push	{r7}
 800170a:	b089      	sub	sp, #36	; 0x24
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f003 0307 	and.w	r3, r3, #7
 800171a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	f1c3 0307 	rsb	r3, r3, #7
 8001722:	2b04      	cmp	r3, #4
 8001724:	bf28      	it	cs
 8001726:	2304      	movcs	r3, #4
 8001728:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	3304      	adds	r3, #4
 800172e:	2b06      	cmp	r3, #6
 8001730:	d902      	bls.n	8001738 <NVIC_EncodePriority+0x30>
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	3b03      	subs	r3, #3
 8001736:	e000      	b.n	800173a <NVIC_EncodePriority+0x32>
 8001738:	2300      	movs	r3, #0
 800173a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800173c:	f04f 32ff 	mov.w	r2, #4294967295
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	43da      	mvns	r2, r3
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	401a      	ands	r2, r3
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001750:	f04f 31ff 	mov.w	r1, #4294967295
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	fa01 f303 	lsl.w	r3, r1, r3
 800175a:	43d9      	mvns	r1, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001760:	4313      	orrs	r3, r2
         );
}
 8001762:	4618      	mov	r0, r3
 8001764:	3724      	adds	r7, #36	; 0x24
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr

0800176c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	3b01      	subs	r3, #1
 8001778:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800177c:	d301      	bcc.n	8001782 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800177e:	2301      	movs	r3, #1
 8001780:	e00f      	b.n	80017a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001782:	4a0a      	ldr	r2, [pc, #40]	; (80017ac <SysTick_Config+0x40>)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	3b01      	subs	r3, #1
 8001788:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800178a:	210f      	movs	r1, #15
 800178c:	f04f 30ff 	mov.w	r0, #4294967295
 8001790:	f7ff ff90 	bl	80016b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001794:	4b05      	ldr	r3, [pc, #20]	; (80017ac <SysTick_Config+0x40>)
 8001796:	2200      	movs	r2, #0
 8001798:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800179a:	4b04      	ldr	r3, [pc, #16]	; (80017ac <SysTick_Config+0x40>)
 800179c:	2207      	movs	r2, #7
 800179e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	e000e010 	.word	0xe000e010

080017b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f7ff ff2d 	bl	8001618 <__NVIC_SetPriorityGrouping>
}
 80017be:	bf00      	nop
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b086      	sub	sp, #24
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	4603      	mov	r3, r0
 80017ce:	60b9      	str	r1, [r7, #8]
 80017d0:	607a      	str	r2, [r7, #4]
 80017d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017d4:	2300      	movs	r3, #0
 80017d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017d8:	f7ff ff42 	bl	8001660 <__NVIC_GetPriorityGrouping>
 80017dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	68b9      	ldr	r1, [r7, #8]
 80017e2:	6978      	ldr	r0, [r7, #20]
 80017e4:	f7ff ff90 	bl	8001708 <NVIC_EncodePriority>
 80017e8:	4602      	mov	r2, r0
 80017ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ee:	4611      	mov	r1, r2
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff ff5f 	bl	80016b4 <__NVIC_SetPriority>
}
 80017f6:	bf00      	nop
 80017f8:	3718      	adds	r7, #24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b082      	sub	sp, #8
 8001802:	af00      	add	r7, sp, #0
 8001804:	4603      	mov	r3, r0
 8001806:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff ff35 	bl	800167c <__NVIC_EnableIRQ>
}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b082      	sub	sp, #8
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f7ff ffa2 	bl	800176c <SysTick_Config>
 8001828:	4603      	mov	r3, r0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
	...

08001834 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001834:	b480      	push	{r7}
 8001836:	b08b      	sub	sp, #44	; 0x2c
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800183e:	2300      	movs	r3, #0
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001842:	2300      	movs	r3, #0
 8001844:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001846:	e169      	b.n	8001b1c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001848:	2201      	movs	r2, #1
 800184a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	69fa      	ldr	r2, [r7, #28]
 8001858:	4013      	ands	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	429a      	cmp	r2, r3
 8001862:	f040 8158 	bne.w	8001b16 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	4a9a      	ldr	r2, [pc, #616]	; (8001ad4 <HAL_GPIO_Init+0x2a0>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d05e      	beq.n	800192e <HAL_GPIO_Init+0xfa>
 8001870:	4a98      	ldr	r2, [pc, #608]	; (8001ad4 <HAL_GPIO_Init+0x2a0>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d875      	bhi.n	8001962 <HAL_GPIO_Init+0x12e>
 8001876:	4a98      	ldr	r2, [pc, #608]	; (8001ad8 <HAL_GPIO_Init+0x2a4>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d058      	beq.n	800192e <HAL_GPIO_Init+0xfa>
 800187c:	4a96      	ldr	r2, [pc, #600]	; (8001ad8 <HAL_GPIO_Init+0x2a4>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d86f      	bhi.n	8001962 <HAL_GPIO_Init+0x12e>
 8001882:	4a96      	ldr	r2, [pc, #600]	; (8001adc <HAL_GPIO_Init+0x2a8>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d052      	beq.n	800192e <HAL_GPIO_Init+0xfa>
 8001888:	4a94      	ldr	r2, [pc, #592]	; (8001adc <HAL_GPIO_Init+0x2a8>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d869      	bhi.n	8001962 <HAL_GPIO_Init+0x12e>
 800188e:	4a94      	ldr	r2, [pc, #592]	; (8001ae0 <HAL_GPIO_Init+0x2ac>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d04c      	beq.n	800192e <HAL_GPIO_Init+0xfa>
 8001894:	4a92      	ldr	r2, [pc, #584]	; (8001ae0 <HAL_GPIO_Init+0x2ac>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d863      	bhi.n	8001962 <HAL_GPIO_Init+0x12e>
 800189a:	4a92      	ldr	r2, [pc, #584]	; (8001ae4 <HAL_GPIO_Init+0x2b0>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d046      	beq.n	800192e <HAL_GPIO_Init+0xfa>
 80018a0:	4a90      	ldr	r2, [pc, #576]	; (8001ae4 <HAL_GPIO_Init+0x2b0>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d85d      	bhi.n	8001962 <HAL_GPIO_Init+0x12e>
 80018a6:	2b12      	cmp	r3, #18
 80018a8:	d82a      	bhi.n	8001900 <HAL_GPIO_Init+0xcc>
 80018aa:	2b12      	cmp	r3, #18
 80018ac:	d859      	bhi.n	8001962 <HAL_GPIO_Init+0x12e>
 80018ae:	a201      	add	r2, pc, #4	; (adr r2, 80018b4 <HAL_GPIO_Init+0x80>)
 80018b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018b4:	0800192f 	.word	0x0800192f
 80018b8:	08001909 	.word	0x08001909
 80018bc:	0800191b 	.word	0x0800191b
 80018c0:	0800195d 	.word	0x0800195d
 80018c4:	08001963 	.word	0x08001963
 80018c8:	08001963 	.word	0x08001963
 80018cc:	08001963 	.word	0x08001963
 80018d0:	08001963 	.word	0x08001963
 80018d4:	08001963 	.word	0x08001963
 80018d8:	08001963 	.word	0x08001963
 80018dc:	08001963 	.word	0x08001963
 80018e0:	08001963 	.word	0x08001963
 80018e4:	08001963 	.word	0x08001963
 80018e8:	08001963 	.word	0x08001963
 80018ec:	08001963 	.word	0x08001963
 80018f0:	08001963 	.word	0x08001963
 80018f4:	08001963 	.word	0x08001963
 80018f8:	08001911 	.word	0x08001911
 80018fc:	08001925 	.word	0x08001925
 8001900:	4a79      	ldr	r2, [pc, #484]	; (8001ae8 <HAL_GPIO_Init+0x2b4>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d013      	beq.n	800192e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001906:	e02c      	b.n	8001962 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	623b      	str	r3, [r7, #32]
          break;
 800190e:	e029      	b.n	8001964 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	3304      	adds	r3, #4
 8001916:	623b      	str	r3, [r7, #32]
          break;
 8001918:	e024      	b.n	8001964 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	3308      	adds	r3, #8
 8001920:	623b      	str	r3, [r7, #32]
          break;
 8001922:	e01f      	b.n	8001964 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	330c      	adds	r3, #12
 800192a:	623b      	str	r3, [r7, #32]
          break;
 800192c:	e01a      	b.n	8001964 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d102      	bne.n	800193c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001936:	2304      	movs	r3, #4
 8001938:	623b      	str	r3, [r7, #32]
          break;
 800193a:	e013      	b.n	8001964 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d105      	bne.n	8001950 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001944:	2308      	movs	r3, #8
 8001946:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	69fa      	ldr	r2, [r7, #28]
 800194c:	611a      	str	r2, [r3, #16]
          break;
 800194e:	e009      	b.n	8001964 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001950:	2308      	movs	r3, #8
 8001952:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	69fa      	ldr	r2, [r7, #28]
 8001958:	615a      	str	r2, [r3, #20]
          break;
 800195a:	e003      	b.n	8001964 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800195c:	2300      	movs	r3, #0
 800195e:	623b      	str	r3, [r7, #32]
          break;
 8001960:	e000      	b.n	8001964 <HAL_GPIO_Init+0x130>
          break;
 8001962:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	2bff      	cmp	r3, #255	; 0xff
 8001968:	d801      	bhi.n	800196e <HAL_GPIO_Init+0x13a>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	e001      	b.n	8001972 <HAL_GPIO_Init+0x13e>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	3304      	adds	r3, #4
 8001972:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	2bff      	cmp	r3, #255	; 0xff
 8001978:	d802      	bhi.n	8001980 <HAL_GPIO_Init+0x14c>
 800197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	e002      	b.n	8001986 <HAL_GPIO_Init+0x152>
 8001980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001982:	3b08      	subs	r3, #8
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	210f      	movs	r1, #15
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	fa01 f303 	lsl.w	r3, r1, r3
 8001994:	43db      	mvns	r3, r3
 8001996:	401a      	ands	r2, r3
 8001998:	6a39      	ldr	r1, [r7, #32]
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	fa01 f303 	lsl.w	r3, r1, r3
 80019a0:	431a      	orrs	r2, r3
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	f000 80b1 	beq.w	8001b16 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019b4:	4b4d      	ldr	r3, [pc, #308]	; (8001aec <HAL_GPIO_Init+0x2b8>)
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	4a4c      	ldr	r2, [pc, #304]	; (8001aec <HAL_GPIO_Init+0x2b8>)
 80019ba:	f043 0301 	orr.w	r3, r3, #1
 80019be:	6193      	str	r3, [r2, #24]
 80019c0:	4b4a      	ldr	r3, [pc, #296]	; (8001aec <HAL_GPIO_Init+0x2b8>)
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019cc:	4a48      	ldr	r2, [pc, #288]	; (8001af0 <HAL_GPIO_Init+0x2bc>)
 80019ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d0:	089b      	lsrs	r3, r3, #2
 80019d2:	3302      	adds	r3, #2
 80019d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019dc:	f003 0303 	and.w	r3, r3, #3
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	220f      	movs	r2, #15
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	68fa      	ldr	r2, [r7, #12]
 80019ec:	4013      	ands	r3, r2
 80019ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4a40      	ldr	r2, [pc, #256]	; (8001af4 <HAL_GPIO_Init+0x2c0>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d013      	beq.n	8001a20 <HAL_GPIO_Init+0x1ec>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4a3f      	ldr	r2, [pc, #252]	; (8001af8 <HAL_GPIO_Init+0x2c4>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d00d      	beq.n	8001a1c <HAL_GPIO_Init+0x1e8>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4a3e      	ldr	r2, [pc, #248]	; (8001afc <HAL_GPIO_Init+0x2c8>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d007      	beq.n	8001a18 <HAL_GPIO_Init+0x1e4>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4a3d      	ldr	r2, [pc, #244]	; (8001b00 <HAL_GPIO_Init+0x2cc>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d101      	bne.n	8001a14 <HAL_GPIO_Init+0x1e0>
 8001a10:	2303      	movs	r3, #3
 8001a12:	e006      	b.n	8001a22 <HAL_GPIO_Init+0x1ee>
 8001a14:	2304      	movs	r3, #4
 8001a16:	e004      	b.n	8001a22 <HAL_GPIO_Init+0x1ee>
 8001a18:	2302      	movs	r3, #2
 8001a1a:	e002      	b.n	8001a22 <HAL_GPIO_Init+0x1ee>
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e000      	b.n	8001a22 <HAL_GPIO_Init+0x1ee>
 8001a20:	2300      	movs	r3, #0
 8001a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a24:	f002 0203 	and.w	r2, r2, #3
 8001a28:	0092      	lsls	r2, r2, #2
 8001a2a:	4093      	lsls	r3, r2
 8001a2c:	68fa      	ldr	r2, [r7, #12]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a32:	492f      	ldr	r1, [pc, #188]	; (8001af0 <HAL_GPIO_Init+0x2bc>)
 8001a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a36:	089b      	lsrs	r3, r3, #2
 8001a38:	3302      	adds	r3, #2
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d006      	beq.n	8001a5a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a4c:	4b2d      	ldr	r3, [pc, #180]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a4e:	689a      	ldr	r2, [r3, #8]
 8001a50:	492c      	ldr	r1, [pc, #176]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	608b      	str	r3, [r1, #8]
 8001a58:	e006      	b.n	8001a68 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a5a:	4b2a      	ldr	r3, [pc, #168]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a5c:	689a      	ldr	r2, [r3, #8]
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	43db      	mvns	r3, r3
 8001a62:	4928      	ldr	r1, [pc, #160]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a64:	4013      	ands	r3, r2
 8001a66:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d006      	beq.n	8001a82 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a74:	4b23      	ldr	r3, [pc, #140]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a76:	68da      	ldr	r2, [r3, #12]
 8001a78:	4922      	ldr	r1, [pc, #136]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	60cb      	str	r3, [r1, #12]
 8001a80:	e006      	b.n	8001a90 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a82:	4b20      	ldr	r3, [pc, #128]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a84:	68da      	ldr	r2, [r3, #12]
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	491e      	ldr	r1, [pc, #120]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d006      	beq.n	8001aaa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a9c:	4b19      	ldr	r3, [pc, #100]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a9e:	685a      	ldr	r2, [r3, #4]
 8001aa0:	4918      	ldr	r1, [pc, #96]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	604b      	str	r3, [r1, #4]
 8001aa8:	e006      	b.n	8001ab8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001aaa:	4b16      	ldr	r3, [pc, #88]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001aac:	685a      	ldr	r2, [r3, #4]
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	4914      	ldr	r1, [pc, #80]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d021      	beq.n	8001b08 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ac4:	4b0f      	ldr	r3, [pc, #60]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	490e      	ldr	r1, [pc, #56]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	600b      	str	r3, [r1, #0]
 8001ad0:	e021      	b.n	8001b16 <HAL_GPIO_Init+0x2e2>
 8001ad2:	bf00      	nop
 8001ad4:	10320000 	.word	0x10320000
 8001ad8:	10310000 	.word	0x10310000
 8001adc:	10220000 	.word	0x10220000
 8001ae0:	10210000 	.word	0x10210000
 8001ae4:	10120000 	.word	0x10120000
 8001ae8:	10110000 	.word	0x10110000
 8001aec:	40021000 	.word	0x40021000
 8001af0:	40010000 	.word	0x40010000
 8001af4:	40010800 	.word	0x40010800
 8001af8:	40010c00 	.word	0x40010c00
 8001afc:	40011000 	.word	0x40011000
 8001b00:	40011400 	.word	0x40011400
 8001b04:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b08:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <HAL_GPIO_Init+0x304>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	4909      	ldr	r1, [pc, #36]	; (8001b38 <HAL_GPIO_Init+0x304>)
 8001b12:	4013      	ands	r3, r2
 8001b14:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b18:	3301      	adds	r3, #1
 8001b1a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b22:	fa22 f303 	lsr.w	r3, r2, r3
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	f47f ae8e 	bne.w	8001848 <HAL_GPIO_Init+0x14>
  }
}
 8001b2c:	bf00      	nop
 8001b2e:	bf00      	nop
 8001b30:	372c      	adds	r7, #44	; 0x2c
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bc80      	pop	{r7}
 8001b36:	4770      	bx	lr
 8001b38:	40010400 	.word	0x40010400

08001b3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	460b      	mov	r3, r1
 8001b46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689a      	ldr	r2, [r3, #8]
 8001b4c:	887b      	ldrh	r3, [r7, #2]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d002      	beq.n	8001b5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b54:	2301      	movs	r3, #1
 8001b56:	73fb      	strb	r3, [r7, #15]
 8001b58:	e001      	b.n	8001b5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3714      	adds	r7, #20
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bc80      	pop	{r7}
 8001b68:	4770      	bx	lr

08001b6a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b083      	sub	sp, #12
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
 8001b72:	460b      	mov	r3, r1
 8001b74:	807b      	strh	r3, [r7, #2]
 8001b76:	4613      	mov	r3, r2
 8001b78:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b7a:	787b      	ldrb	r3, [r7, #1]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d003      	beq.n	8001b88 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b80:	887a      	ldrh	r2, [r7, #2]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b86:	e003      	b.n	8001b90 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b88:	887b      	ldrh	r3, [r7, #2]
 8001b8a:	041a      	lsls	r2, r3, #16
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	611a      	str	r2, [r3, #16]
}
 8001b90:	bf00      	nop
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bc80      	pop	{r7}
 8001b98:	4770      	bx	lr

08001b9a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b085      	sub	sp, #20
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bac:	887a      	ldrh	r2, [r7, #2]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	041a      	lsls	r2, r3, #16
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	43d9      	mvns	r1, r3
 8001bb8:	887b      	ldrh	r3, [r7, #2]
 8001bba:	400b      	ands	r3, r1
 8001bbc:	431a      	orrs	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	611a      	str	r2, [r3, #16]
}
 8001bc2:	bf00      	nop
 8001bc4:	3714      	adds	r7, #20
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bc80      	pop	{r7}
 8001bca:	4770      	bx	lr

08001bcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e26c      	b.n	80020b8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f000 8087 	beq.w	8001cfa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bec:	4b92      	ldr	r3, [pc, #584]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f003 030c 	and.w	r3, r3, #12
 8001bf4:	2b04      	cmp	r3, #4
 8001bf6:	d00c      	beq.n	8001c12 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bf8:	4b8f      	ldr	r3, [pc, #572]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f003 030c 	and.w	r3, r3, #12
 8001c00:	2b08      	cmp	r3, #8
 8001c02:	d112      	bne.n	8001c2a <HAL_RCC_OscConfig+0x5e>
 8001c04:	4b8c      	ldr	r3, [pc, #560]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c10:	d10b      	bne.n	8001c2a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c12:	4b89      	ldr	r3, [pc, #548]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d06c      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x12c>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d168      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e246      	b.n	80020b8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c32:	d106      	bne.n	8001c42 <HAL_RCC_OscConfig+0x76>
 8001c34:	4b80      	ldr	r3, [pc, #512]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a7f      	ldr	r2, [pc, #508]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c3e:	6013      	str	r3, [r2, #0]
 8001c40:	e02e      	b.n	8001ca0 <HAL_RCC_OscConfig+0xd4>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d10c      	bne.n	8001c64 <HAL_RCC_OscConfig+0x98>
 8001c4a:	4b7b      	ldr	r3, [pc, #492]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a7a      	ldr	r2, [pc, #488]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	4b78      	ldr	r3, [pc, #480]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a77      	ldr	r2, [pc, #476]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c60:	6013      	str	r3, [r2, #0]
 8001c62:	e01d      	b.n	8001ca0 <HAL_RCC_OscConfig+0xd4>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c6c:	d10c      	bne.n	8001c88 <HAL_RCC_OscConfig+0xbc>
 8001c6e:	4b72      	ldr	r3, [pc, #456]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a71      	ldr	r2, [pc, #452]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c78:	6013      	str	r3, [r2, #0]
 8001c7a:	4b6f      	ldr	r3, [pc, #444]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a6e      	ldr	r2, [pc, #440]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c84:	6013      	str	r3, [r2, #0]
 8001c86:	e00b      	b.n	8001ca0 <HAL_RCC_OscConfig+0xd4>
 8001c88:	4b6b      	ldr	r3, [pc, #428]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a6a      	ldr	r2, [pc, #424]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c92:	6013      	str	r3, [r2, #0]
 8001c94:	4b68      	ldr	r3, [pc, #416]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a67      	ldr	r2, [pc, #412]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c9e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d013      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca8:	f7ff fcac 	bl	8001604 <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cb0:	f7ff fca8 	bl	8001604 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b64      	cmp	r3, #100	; 0x64
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e1fa      	b.n	80020b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cc2:	4b5d      	ldr	r3, [pc, #372]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d0f0      	beq.n	8001cb0 <HAL_RCC_OscConfig+0xe4>
 8001cce:	e014      	b.n	8001cfa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd0:	f7ff fc98 	bl	8001604 <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cd8:	f7ff fc94 	bl	8001604 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b64      	cmp	r3, #100	; 0x64
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e1e6      	b.n	80020b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cea:	4b53      	ldr	r3, [pc, #332]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d1f0      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x10c>
 8001cf6:	e000      	b.n	8001cfa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d063      	beq.n	8001dce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d06:	4b4c      	ldr	r3, [pc, #304]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f003 030c 	and.w	r3, r3, #12
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d00b      	beq.n	8001d2a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d12:	4b49      	ldr	r3, [pc, #292]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f003 030c 	and.w	r3, r3, #12
 8001d1a:	2b08      	cmp	r3, #8
 8001d1c:	d11c      	bne.n	8001d58 <HAL_RCC_OscConfig+0x18c>
 8001d1e:	4b46      	ldr	r3, [pc, #280]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d116      	bne.n	8001d58 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d2a:	4b43      	ldr	r3, [pc, #268]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d005      	beq.n	8001d42 <HAL_RCC_OscConfig+0x176>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d001      	beq.n	8001d42 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e1ba      	b.n	80020b8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d42:	4b3d      	ldr	r3, [pc, #244]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	695b      	ldr	r3, [r3, #20]
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	4939      	ldr	r1, [pc, #228]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001d52:	4313      	orrs	r3, r2
 8001d54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d56:	e03a      	b.n	8001dce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	691b      	ldr	r3, [r3, #16]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d020      	beq.n	8001da2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d60:	4b36      	ldr	r3, [pc, #216]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001d62:	2201      	movs	r2, #1
 8001d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d66:	f7ff fc4d 	bl	8001604 <HAL_GetTick>
 8001d6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d6c:	e008      	b.n	8001d80 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d6e:	f7ff fc49 	bl	8001604 <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e19b      	b.n	80020b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d80:	4b2d      	ldr	r3, [pc, #180]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d0f0      	beq.n	8001d6e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d8c:	4b2a      	ldr	r3, [pc, #168]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	695b      	ldr	r3, [r3, #20]
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	4927      	ldr	r1, [pc, #156]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	600b      	str	r3, [r1, #0]
 8001da0:	e015      	b.n	8001dce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001da2:	4b26      	ldr	r3, [pc, #152]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da8:	f7ff fc2c 	bl	8001604 <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001db0:	f7ff fc28 	bl	8001604 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e17a      	b.n	80020b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dc2:	4b1d      	ldr	r3, [pc, #116]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1f0      	bne.n	8001db0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0308 	and.w	r3, r3, #8
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d03a      	beq.n	8001e50 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	699b      	ldr	r3, [r3, #24]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d019      	beq.n	8001e16 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001de2:	4b17      	ldr	r3, [pc, #92]	; (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001de4:	2201      	movs	r2, #1
 8001de6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de8:	f7ff fc0c 	bl	8001604 <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001df0:	f7ff fc08 	bl	8001604 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e15a      	b.n	80020b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e02:	4b0d      	ldr	r3, [pc, #52]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d0f0      	beq.n	8001df0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e0e:	2001      	movs	r0, #1
 8001e10:	f000 fa9a 	bl	8002348 <RCC_Delay>
 8001e14:	e01c      	b.n	8001e50 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e16:	4b0a      	ldr	r3, [pc, #40]	; (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e1c:	f7ff fbf2 	bl	8001604 <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e22:	e00f      	b.n	8001e44 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e24:	f7ff fbee 	bl	8001604 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d908      	bls.n	8001e44 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e140      	b.n	80020b8 <HAL_RCC_OscConfig+0x4ec>
 8001e36:	bf00      	nop
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	42420000 	.word	0x42420000
 8001e40:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e44:	4b9e      	ldr	r3, [pc, #632]	; (80020c0 <HAL_RCC_OscConfig+0x4f4>)
 8001e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e48:	f003 0302 	and.w	r3, r3, #2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d1e9      	bne.n	8001e24 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0304 	and.w	r3, r3, #4
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f000 80a6 	beq.w	8001faa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e62:	4b97      	ldr	r3, [pc, #604]	; (80020c0 <HAL_RCC_OscConfig+0x4f4>)
 8001e64:	69db      	ldr	r3, [r3, #28]
 8001e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d10d      	bne.n	8001e8a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e6e:	4b94      	ldr	r3, [pc, #592]	; (80020c0 <HAL_RCC_OscConfig+0x4f4>)
 8001e70:	69db      	ldr	r3, [r3, #28]
 8001e72:	4a93      	ldr	r2, [pc, #588]	; (80020c0 <HAL_RCC_OscConfig+0x4f4>)
 8001e74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e78:	61d3      	str	r3, [r2, #28]
 8001e7a:	4b91      	ldr	r3, [pc, #580]	; (80020c0 <HAL_RCC_OscConfig+0x4f4>)
 8001e7c:	69db      	ldr	r3, [r3, #28]
 8001e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e82:	60bb      	str	r3, [r7, #8]
 8001e84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e86:	2301      	movs	r3, #1
 8001e88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e8a:	4b8e      	ldr	r3, [pc, #568]	; (80020c4 <HAL_RCC_OscConfig+0x4f8>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d118      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e96:	4b8b      	ldr	r3, [pc, #556]	; (80020c4 <HAL_RCC_OscConfig+0x4f8>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a8a      	ldr	r2, [pc, #552]	; (80020c4 <HAL_RCC_OscConfig+0x4f8>)
 8001e9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ea0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ea2:	f7ff fbaf 	bl	8001604 <HAL_GetTick>
 8001ea6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea8:	e008      	b.n	8001ebc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eaa:	f7ff fbab 	bl	8001604 <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b64      	cmp	r3, #100	; 0x64
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e0fd      	b.n	80020b8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ebc:	4b81      	ldr	r3, [pc, #516]	; (80020c4 <HAL_RCC_OscConfig+0x4f8>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d0f0      	beq.n	8001eaa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d106      	bne.n	8001ede <HAL_RCC_OscConfig+0x312>
 8001ed0:	4b7b      	ldr	r3, [pc, #492]	; (80020c0 <HAL_RCC_OscConfig+0x4f4>)
 8001ed2:	6a1b      	ldr	r3, [r3, #32]
 8001ed4:	4a7a      	ldr	r2, [pc, #488]	; (80020c0 <HAL_RCC_OscConfig+0x4f4>)
 8001ed6:	f043 0301 	orr.w	r3, r3, #1
 8001eda:	6213      	str	r3, [r2, #32]
 8001edc:	e02d      	b.n	8001f3a <HAL_RCC_OscConfig+0x36e>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d10c      	bne.n	8001f00 <HAL_RCC_OscConfig+0x334>
 8001ee6:	4b76      	ldr	r3, [pc, #472]	; (80020c0 <HAL_RCC_OscConfig+0x4f4>)
 8001ee8:	6a1b      	ldr	r3, [r3, #32]
 8001eea:	4a75      	ldr	r2, [pc, #468]	; (80020c0 <HAL_RCC_OscConfig+0x4f4>)
 8001eec:	f023 0301 	bic.w	r3, r3, #1
 8001ef0:	6213      	str	r3, [r2, #32]
 8001ef2:	4b73      	ldr	r3, [pc, #460]	; (80020c0 <HAL_RCC_OscConfig+0x4f4>)
 8001ef4:	6a1b      	ldr	r3, [r3, #32]
 8001ef6:	4a72      	ldr	r2, [pc, #456]	; (80020c0 <HAL_RCC_OscConfig+0x4f4>)
 8001ef8:	f023 0304 	bic.w	r3, r3, #4
 8001efc:	6213      	str	r3, [r2, #32]
 8001efe:	e01c      	b.n	8001f3a <HAL_RCC_OscConfig+0x36e>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	2b05      	cmp	r3, #5
 8001f06:	d10c      	bne.n	8001f22 <HAL_RCC_OscConfig+0x356>
 8001f08:	4b6d      	ldr	r3, [pc, #436]	; (80020c0 <HAL_RCC_OscConfig+0x4f4>)
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	4a6c      	ldr	r2, [pc, #432]	; (80020c0 <HAL_RCC_OscConfig+0x4f4>)
 8001f0e:	f043 0304 	orr.w	r3, r3, #4
 8001f12:	6213      	str	r3, [r2, #32]
 8001f14:	4b6a      	ldr	r3, [pc, #424]	; (80020c0 <HAL_RCC_OscConfig+0x4f4>)
 8001f16:	6a1b      	ldr	r3, [r3, #32]
 8001f18:	4a69      	ldr	r2, [pc, #420]	; (80020c0 <HAL_RCC_OscConfig+0x4f4>)
 8001f1a:	f043 0301 	orr.w	r3, r3, #1
 8001f1e:	6213      	str	r3, [r2, #32]
 8001f20:	e00b      	b.n	8001f3a <HAL_RCC_OscConfig+0x36e>
 8001f22:	4b67      	ldr	r3, [pc, #412]	; (80020c0 <HAL_RCC_OscConfig+0x4f4>)
 8001f24:	6a1b      	ldr	r3, [r3, #32]
 8001f26:	4a66      	ldr	r2, [pc, #408]	; (80020c0 <HAL_RCC_OscConfig+0x4f4>)
 8001f28:	f023 0301 	bic.w	r3, r3, #1
 8001f2c:	6213      	str	r3, [r2, #32]
 8001f2e:	4b64      	ldr	r3, [pc, #400]	; (80020c0 <HAL_RCC_OscConfig+0x4f4>)
 8001f30:	6a1b      	ldr	r3, [r3, #32]
 8001f32:	4a63      	ldr	r2, [pc, #396]	; (80020c0 <HAL_RCC_OscConfig+0x4f4>)
 8001f34:	f023 0304 	bic.w	r3, r3, #4
 8001f38:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d015      	beq.n	8001f6e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f42:	f7ff fb5f 	bl	8001604 <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f48:	e00a      	b.n	8001f60 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f4a:	f7ff fb5b 	bl	8001604 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e0ab      	b.n	80020b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f60:	4b57      	ldr	r3, [pc, #348]	; (80020c0 <HAL_RCC_OscConfig+0x4f4>)
 8001f62:	6a1b      	ldr	r3, [r3, #32]
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d0ee      	beq.n	8001f4a <HAL_RCC_OscConfig+0x37e>
 8001f6c:	e014      	b.n	8001f98 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f6e:	f7ff fb49 	bl	8001604 <HAL_GetTick>
 8001f72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f74:	e00a      	b.n	8001f8c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f76:	f7ff fb45 	bl	8001604 <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d901      	bls.n	8001f8c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e095      	b.n	80020b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f8c:	4b4c      	ldr	r3, [pc, #304]	; (80020c0 <HAL_RCC_OscConfig+0x4f4>)
 8001f8e:	6a1b      	ldr	r3, [r3, #32]
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d1ee      	bne.n	8001f76 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f98:	7dfb      	ldrb	r3, [r7, #23]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d105      	bne.n	8001faa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f9e:	4b48      	ldr	r3, [pc, #288]	; (80020c0 <HAL_RCC_OscConfig+0x4f4>)
 8001fa0:	69db      	ldr	r3, [r3, #28]
 8001fa2:	4a47      	ldr	r2, [pc, #284]	; (80020c0 <HAL_RCC_OscConfig+0x4f4>)
 8001fa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fa8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	69db      	ldr	r3, [r3, #28]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f000 8081 	beq.w	80020b6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fb4:	4b42      	ldr	r3, [pc, #264]	; (80020c0 <HAL_RCC_OscConfig+0x4f4>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f003 030c 	and.w	r3, r3, #12
 8001fbc:	2b08      	cmp	r3, #8
 8001fbe:	d061      	beq.n	8002084 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	69db      	ldr	r3, [r3, #28]
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d146      	bne.n	8002056 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fc8:	4b3f      	ldr	r3, [pc, #252]	; (80020c8 <HAL_RCC_OscConfig+0x4fc>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fce:	f7ff fb19 	bl	8001604 <HAL_GetTick>
 8001fd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fd4:	e008      	b.n	8001fe8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fd6:	f7ff fb15 	bl	8001604 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e067      	b.n	80020b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fe8:	4b35      	ldr	r3, [pc, #212]	; (80020c0 <HAL_RCC_OscConfig+0x4f4>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d1f0      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a1b      	ldr	r3, [r3, #32]
 8001ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ffc:	d108      	bne.n	8002010 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ffe:	4b30      	ldr	r3, [pc, #192]	; (80020c0 <HAL_RCC_OscConfig+0x4f4>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	492d      	ldr	r1, [pc, #180]	; (80020c0 <HAL_RCC_OscConfig+0x4f4>)
 800200c:	4313      	orrs	r3, r2
 800200e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002010:	4b2b      	ldr	r3, [pc, #172]	; (80020c0 <HAL_RCC_OscConfig+0x4f4>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a19      	ldr	r1, [r3, #32]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002020:	430b      	orrs	r3, r1
 8002022:	4927      	ldr	r1, [pc, #156]	; (80020c0 <HAL_RCC_OscConfig+0x4f4>)
 8002024:	4313      	orrs	r3, r2
 8002026:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002028:	4b27      	ldr	r3, [pc, #156]	; (80020c8 <HAL_RCC_OscConfig+0x4fc>)
 800202a:	2201      	movs	r2, #1
 800202c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202e:	f7ff fae9 	bl	8001604 <HAL_GetTick>
 8002032:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002034:	e008      	b.n	8002048 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002036:	f7ff fae5 	bl	8001604 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d901      	bls.n	8002048 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e037      	b.n	80020b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002048:	4b1d      	ldr	r3, [pc, #116]	; (80020c0 <HAL_RCC_OscConfig+0x4f4>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d0f0      	beq.n	8002036 <HAL_RCC_OscConfig+0x46a>
 8002054:	e02f      	b.n	80020b6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002056:	4b1c      	ldr	r3, [pc, #112]	; (80020c8 <HAL_RCC_OscConfig+0x4fc>)
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800205c:	f7ff fad2 	bl	8001604 <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002064:	f7ff face 	bl	8001604 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e020      	b.n	80020b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002076:	4b12      	ldr	r3, [pc, #72]	; (80020c0 <HAL_RCC_OscConfig+0x4f4>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1f0      	bne.n	8002064 <HAL_RCC_OscConfig+0x498>
 8002082:	e018      	b.n	80020b6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	69db      	ldr	r3, [r3, #28]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d101      	bne.n	8002090 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e013      	b.n	80020b8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002090:	4b0b      	ldr	r3, [pc, #44]	; (80020c0 <HAL_RCC_OscConfig+0x4f4>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a1b      	ldr	r3, [r3, #32]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d106      	bne.n	80020b2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d001      	beq.n	80020b6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e000      	b.n	80020b8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80020b6:	2300      	movs	r3, #0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3718      	adds	r7, #24
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	40021000 	.word	0x40021000
 80020c4:	40007000 	.word	0x40007000
 80020c8:	42420060 	.word	0x42420060

080020cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d101      	bne.n	80020e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e0d0      	b.n	8002282 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020e0:	4b6a      	ldr	r3, [pc, #424]	; (800228c <HAL_RCC_ClockConfig+0x1c0>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0307 	and.w	r3, r3, #7
 80020e8:	683a      	ldr	r2, [r7, #0]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d910      	bls.n	8002110 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ee:	4b67      	ldr	r3, [pc, #412]	; (800228c <HAL_RCC_ClockConfig+0x1c0>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f023 0207 	bic.w	r2, r3, #7
 80020f6:	4965      	ldr	r1, [pc, #404]	; (800228c <HAL_RCC_ClockConfig+0x1c0>)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020fe:	4b63      	ldr	r3, [pc, #396]	; (800228c <HAL_RCC_ClockConfig+0x1c0>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0307 	and.w	r3, r3, #7
 8002106:	683a      	ldr	r2, [r7, #0]
 8002108:	429a      	cmp	r2, r3
 800210a:	d001      	beq.n	8002110 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e0b8      	b.n	8002282 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d020      	beq.n	800215e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0304 	and.w	r3, r3, #4
 8002124:	2b00      	cmp	r3, #0
 8002126:	d005      	beq.n	8002134 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002128:	4b59      	ldr	r3, [pc, #356]	; (8002290 <HAL_RCC_ClockConfig+0x1c4>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	4a58      	ldr	r2, [pc, #352]	; (8002290 <HAL_RCC_ClockConfig+0x1c4>)
 800212e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002132:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0308 	and.w	r3, r3, #8
 800213c:	2b00      	cmp	r3, #0
 800213e:	d005      	beq.n	800214c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002140:	4b53      	ldr	r3, [pc, #332]	; (8002290 <HAL_RCC_ClockConfig+0x1c4>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	4a52      	ldr	r2, [pc, #328]	; (8002290 <HAL_RCC_ClockConfig+0x1c4>)
 8002146:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800214a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800214c:	4b50      	ldr	r3, [pc, #320]	; (8002290 <HAL_RCC_ClockConfig+0x1c4>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	494d      	ldr	r1, [pc, #308]	; (8002290 <HAL_RCC_ClockConfig+0x1c4>)
 800215a:	4313      	orrs	r3, r2
 800215c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	2b00      	cmp	r3, #0
 8002168:	d040      	beq.n	80021ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d107      	bne.n	8002182 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002172:	4b47      	ldr	r3, [pc, #284]	; (8002290 <HAL_RCC_ClockConfig+0x1c4>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d115      	bne.n	80021aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e07f      	b.n	8002282 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	2b02      	cmp	r3, #2
 8002188:	d107      	bne.n	800219a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800218a:	4b41      	ldr	r3, [pc, #260]	; (8002290 <HAL_RCC_ClockConfig+0x1c4>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d109      	bne.n	80021aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e073      	b.n	8002282 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800219a:	4b3d      	ldr	r3, [pc, #244]	; (8002290 <HAL_RCC_ClockConfig+0x1c4>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d101      	bne.n	80021aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e06b      	b.n	8002282 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021aa:	4b39      	ldr	r3, [pc, #228]	; (8002290 <HAL_RCC_ClockConfig+0x1c4>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f023 0203 	bic.w	r2, r3, #3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	4936      	ldr	r1, [pc, #216]	; (8002290 <HAL_RCC_ClockConfig+0x1c4>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021bc:	f7ff fa22 	bl	8001604 <HAL_GetTick>
 80021c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021c2:	e00a      	b.n	80021da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021c4:	f7ff fa1e 	bl	8001604 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e053      	b.n	8002282 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021da:	4b2d      	ldr	r3, [pc, #180]	; (8002290 <HAL_RCC_ClockConfig+0x1c4>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f003 020c 	and.w	r2, r3, #12
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d1eb      	bne.n	80021c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021ec:	4b27      	ldr	r3, [pc, #156]	; (800228c <HAL_RCC_ClockConfig+0x1c0>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0307 	and.w	r3, r3, #7
 80021f4:	683a      	ldr	r2, [r7, #0]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d210      	bcs.n	800221c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021fa:	4b24      	ldr	r3, [pc, #144]	; (800228c <HAL_RCC_ClockConfig+0x1c0>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f023 0207 	bic.w	r2, r3, #7
 8002202:	4922      	ldr	r1, [pc, #136]	; (800228c <HAL_RCC_ClockConfig+0x1c0>)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	4313      	orrs	r3, r2
 8002208:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800220a:	4b20      	ldr	r3, [pc, #128]	; (800228c <HAL_RCC_ClockConfig+0x1c0>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	429a      	cmp	r2, r3
 8002216:	d001      	beq.n	800221c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e032      	b.n	8002282 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0304 	and.w	r3, r3, #4
 8002224:	2b00      	cmp	r3, #0
 8002226:	d008      	beq.n	800223a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002228:	4b19      	ldr	r3, [pc, #100]	; (8002290 <HAL_RCC_ClockConfig+0x1c4>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	4916      	ldr	r1, [pc, #88]	; (8002290 <HAL_RCC_ClockConfig+0x1c4>)
 8002236:	4313      	orrs	r3, r2
 8002238:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0308 	and.w	r3, r3, #8
 8002242:	2b00      	cmp	r3, #0
 8002244:	d009      	beq.n	800225a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002246:	4b12      	ldr	r3, [pc, #72]	; (8002290 <HAL_RCC_ClockConfig+0x1c4>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	490e      	ldr	r1, [pc, #56]	; (8002290 <HAL_RCC_ClockConfig+0x1c4>)
 8002256:	4313      	orrs	r3, r2
 8002258:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800225a:	f000 f821 	bl	80022a0 <HAL_RCC_GetSysClockFreq>
 800225e:	4602      	mov	r2, r0
 8002260:	4b0b      	ldr	r3, [pc, #44]	; (8002290 <HAL_RCC_ClockConfig+0x1c4>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	091b      	lsrs	r3, r3, #4
 8002266:	f003 030f 	and.w	r3, r3, #15
 800226a:	490a      	ldr	r1, [pc, #40]	; (8002294 <HAL_RCC_ClockConfig+0x1c8>)
 800226c:	5ccb      	ldrb	r3, [r1, r3]
 800226e:	fa22 f303 	lsr.w	r3, r2, r3
 8002272:	4a09      	ldr	r2, [pc, #36]	; (8002298 <HAL_RCC_ClockConfig+0x1cc>)
 8002274:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002276:	4b09      	ldr	r3, [pc, #36]	; (800229c <HAL_RCC_ClockConfig+0x1d0>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f7ff f980 	bl	8001580 <HAL_InitTick>

  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	40022000 	.word	0x40022000
 8002290:	40021000 	.word	0x40021000
 8002294:	08003474 	.word	0x08003474
 8002298:	20000034 	.word	0x20000034
 800229c:	20000038 	.word	0x20000038

080022a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b087      	sub	sp, #28
 80022a4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022a6:	2300      	movs	r3, #0
 80022a8:	60fb      	str	r3, [r7, #12]
 80022aa:	2300      	movs	r3, #0
 80022ac:	60bb      	str	r3, [r7, #8]
 80022ae:	2300      	movs	r3, #0
 80022b0:	617b      	str	r3, [r7, #20]
 80022b2:	2300      	movs	r3, #0
 80022b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80022b6:	2300      	movs	r3, #0
 80022b8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022ba:	4b1e      	ldr	r3, [pc, #120]	; (8002334 <HAL_RCC_GetSysClockFreq+0x94>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f003 030c 	and.w	r3, r3, #12
 80022c6:	2b04      	cmp	r3, #4
 80022c8:	d002      	beq.n	80022d0 <HAL_RCC_GetSysClockFreq+0x30>
 80022ca:	2b08      	cmp	r3, #8
 80022cc:	d003      	beq.n	80022d6 <HAL_RCC_GetSysClockFreq+0x36>
 80022ce:	e027      	b.n	8002320 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022d0:	4b19      	ldr	r3, [pc, #100]	; (8002338 <HAL_RCC_GetSysClockFreq+0x98>)
 80022d2:	613b      	str	r3, [r7, #16]
      break;
 80022d4:	e027      	b.n	8002326 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	0c9b      	lsrs	r3, r3, #18
 80022da:	f003 030f 	and.w	r3, r3, #15
 80022de:	4a17      	ldr	r2, [pc, #92]	; (800233c <HAL_RCC_GetSysClockFreq+0x9c>)
 80022e0:	5cd3      	ldrb	r3, [r2, r3]
 80022e2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d010      	beq.n	8002310 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022ee:	4b11      	ldr	r3, [pc, #68]	; (8002334 <HAL_RCC_GetSysClockFreq+0x94>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	0c5b      	lsrs	r3, r3, #17
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	4a11      	ldr	r2, [pc, #68]	; (8002340 <HAL_RCC_GetSysClockFreq+0xa0>)
 80022fa:	5cd3      	ldrb	r3, [r2, r3]
 80022fc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a0d      	ldr	r2, [pc, #52]	; (8002338 <HAL_RCC_GetSysClockFreq+0x98>)
 8002302:	fb02 f203 	mul.w	r2, r2, r3
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	fbb2 f3f3 	udiv	r3, r2, r3
 800230c:	617b      	str	r3, [r7, #20]
 800230e:	e004      	b.n	800231a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4a0c      	ldr	r2, [pc, #48]	; (8002344 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002314:	fb02 f303 	mul.w	r3, r2, r3
 8002318:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	613b      	str	r3, [r7, #16]
      break;
 800231e:	e002      	b.n	8002326 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002320:	4b05      	ldr	r3, [pc, #20]	; (8002338 <HAL_RCC_GetSysClockFreq+0x98>)
 8002322:	613b      	str	r3, [r7, #16]
      break;
 8002324:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002326:	693b      	ldr	r3, [r7, #16]
}
 8002328:	4618      	mov	r0, r3
 800232a:	371c      	adds	r7, #28
 800232c:	46bd      	mov	sp, r7
 800232e:	bc80      	pop	{r7}
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	40021000 	.word	0x40021000
 8002338:	007a1200 	.word	0x007a1200
 800233c:	08003484 	.word	0x08003484
 8002340:	08003494 	.word	0x08003494
 8002344:	003d0900 	.word	0x003d0900

08002348 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002350:	4b0a      	ldr	r3, [pc, #40]	; (800237c <RCC_Delay+0x34>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a0a      	ldr	r2, [pc, #40]	; (8002380 <RCC_Delay+0x38>)
 8002356:	fba2 2303 	umull	r2, r3, r2, r3
 800235a:	0a5b      	lsrs	r3, r3, #9
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	fb02 f303 	mul.w	r3, r2, r3
 8002362:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002364:	bf00      	nop
  }
  while (Delay --);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	1e5a      	subs	r2, r3, #1
 800236a:	60fa      	str	r2, [r7, #12]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1f9      	bne.n	8002364 <RCC_Delay+0x1c>
}
 8002370:	bf00      	nop
 8002372:	bf00      	nop
 8002374:	3714      	adds	r7, #20
 8002376:	46bd      	mov	sp, r7
 8002378:	bc80      	pop	{r7}
 800237a:	4770      	bx	lr
 800237c:	20000034 	.word	0x20000034
 8002380:	10624dd3 	.word	0x10624dd3

08002384 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e041      	b.n	800241a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d106      	bne.n	80023b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f7fe ffc2 	bl	8001334 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2202      	movs	r2, #2
 80023b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	3304      	adds	r3, #4
 80023c0:	4619      	mov	r1, r3
 80023c2:	4610      	mov	r0, r2
 80023c4:	f000 fc30 	bl	8002c28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
	...

08002424 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002432:	b2db      	uxtb	r3, r3
 8002434:	2b01      	cmp	r3, #1
 8002436:	d001      	beq.n	800243c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e03a      	b.n	80024b2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2202      	movs	r2, #2
 8002440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68da      	ldr	r2, [r3, #12]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f042 0201 	orr.w	r2, r2, #1
 8002452:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a18      	ldr	r2, [pc, #96]	; (80024bc <HAL_TIM_Base_Start_IT+0x98>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d00e      	beq.n	800247c <HAL_TIM_Base_Start_IT+0x58>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002466:	d009      	beq.n	800247c <HAL_TIM_Base_Start_IT+0x58>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a14      	ldr	r2, [pc, #80]	; (80024c0 <HAL_TIM_Base_Start_IT+0x9c>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d004      	beq.n	800247c <HAL_TIM_Base_Start_IT+0x58>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a13      	ldr	r2, [pc, #76]	; (80024c4 <HAL_TIM_Base_Start_IT+0xa0>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d111      	bne.n	80024a0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2b06      	cmp	r3, #6
 800248c:	d010      	beq.n	80024b0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f042 0201 	orr.w	r2, r2, #1
 800249c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800249e:	e007      	b.n	80024b0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f042 0201 	orr.w	r2, r2, #1
 80024ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3714      	adds	r7, #20
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bc80      	pop	{r7}
 80024ba:	4770      	bx	lr
 80024bc:	40012c00 	.word	0x40012c00
 80024c0:	40000400 	.word	0x40000400
 80024c4:	40000800 	.word	0x40000800

080024c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e041      	b.n	800255e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d106      	bne.n	80024f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f000 f839 	bl	8002566 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2202      	movs	r2, #2
 80024f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	3304      	adds	r3, #4
 8002504:	4619      	mov	r1, r3
 8002506:	4610      	mov	r0, r2
 8002508:	f000 fb8e 	bl	8002c28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002566:	b480      	push	{r7}
 8002568:	b083      	sub	sp, #12
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800256e:	bf00      	nop
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	bc80      	pop	{r7}
 8002576:	4770      	bx	lr

08002578 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d109      	bne.n	800259c <HAL_TIM_PWM_Start+0x24>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800258e:	b2db      	uxtb	r3, r3
 8002590:	2b01      	cmp	r3, #1
 8002592:	bf14      	ite	ne
 8002594:	2301      	movne	r3, #1
 8002596:	2300      	moveq	r3, #0
 8002598:	b2db      	uxtb	r3, r3
 800259a:	e022      	b.n	80025e2 <HAL_TIM_PWM_Start+0x6a>
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	2b04      	cmp	r3, #4
 80025a0:	d109      	bne.n	80025b6 <HAL_TIM_PWM_Start+0x3e>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	bf14      	ite	ne
 80025ae:	2301      	movne	r3, #1
 80025b0:	2300      	moveq	r3, #0
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	e015      	b.n	80025e2 <HAL_TIM_PWM_Start+0x6a>
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	2b08      	cmp	r3, #8
 80025ba:	d109      	bne.n	80025d0 <HAL_TIM_PWM_Start+0x58>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	bf14      	ite	ne
 80025c8:	2301      	movne	r3, #1
 80025ca:	2300      	moveq	r3, #0
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	e008      	b.n	80025e2 <HAL_TIM_PWM_Start+0x6a>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	2b01      	cmp	r3, #1
 80025da:	bf14      	ite	ne
 80025dc:	2301      	movne	r3, #1
 80025de:	2300      	moveq	r3, #0
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e05e      	b.n	80026a8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d104      	bne.n	80025fa <HAL_TIM_PWM_Start+0x82>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2202      	movs	r2, #2
 80025f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025f8:	e013      	b.n	8002622 <HAL_TIM_PWM_Start+0xaa>
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	2b04      	cmp	r3, #4
 80025fe:	d104      	bne.n	800260a <HAL_TIM_PWM_Start+0x92>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2202      	movs	r2, #2
 8002604:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002608:	e00b      	b.n	8002622 <HAL_TIM_PWM_Start+0xaa>
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	2b08      	cmp	r3, #8
 800260e:	d104      	bne.n	800261a <HAL_TIM_PWM_Start+0xa2>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2202      	movs	r2, #2
 8002614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002618:	e003      	b.n	8002622 <HAL_TIM_PWM_Start+0xaa>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2202      	movs	r2, #2
 800261e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2201      	movs	r2, #1
 8002628:	6839      	ldr	r1, [r7, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f000 fd7c 	bl	8003128 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a1e      	ldr	r2, [pc, #120]	; (80026b0 <HAL_TIM_PWM_Start+0x138>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d107      	bne.n	800264a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002648:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a18      	ldr	r2, [pc, #96]	; (80026b0 <HAL_TIM_PWM_Start+0x138>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d00e      	beq.n	8002672 <HAL_TIM_PWM_Start+0xfa>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800265c:	d009      	beq.n	8002672 <HAL_TIM_PWM_Start+0xfa>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a14      	ldr	r2, [pc, #80]	; (80026b4 <HAL_TIM_PWM_Start+0x13c>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d004      	beq.n	8002672 <HAL_TIM_PWM_Start+0xfa>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a12      	ldr	r2, [pc, #72]	; (80026b8 <HAL_TIM_PWM_Start+0x140>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d111      	bne.n	8002696 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f003 0307 	and.w	r3, r3, #7
 800267c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2b06      	cmp	r3, #6
 8002682:	d010      	beq.n	80026a6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f042 0201 	orr.w	r2, r2, #1
 8002692:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002694:	e007      	b.n	80026a6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f042 0201 	orr.w	r2, r2, #1
 80026a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026a6:	2300      	movs	r3, #0
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3710      	adds	r7, #16
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	40012c00 	.word	0x40012c00
 80026b4:	40000400 	.word	0x40000400
 80026b8:	40000800 	.word	0x40000800

080026bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d122      	bne.n	8002718 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	f003 0302 	and.w	r3, r3, #2
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d11b      	bne.n	8002718 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f06f 0202 	mvn.w	r2, #2
 80026e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2201      	movs	r2, #1
 80026ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	f003 0303 	and.w	r3, r3, #3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d003      	beq.n	8002706 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 fa76 	bl	8002bf0 <HAL_TIM_IC_CaptureCallback>
 8002704:	e005      	b.n	8002712 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 fa69 	bl	8002bde <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f000 fa78 	bl	8002c02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	f003 0304 	and.w	r3, r3, #4
 8002722:	2b04      	cmp	r3, #4
 8002724:	d122      	bne.n	800276c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	f003 0304 	and.w	r3, r3, #4
 8002730:	2b04      	cmp	r3, #4
 8002732:	d11b      	bne.n	800276c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f06f 0204 	mvn.w	r2, #4
 800273c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2202      	movs	r2, #2
 8002742:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800274e:	2b00      	cmp	r3, #0
 8002750:	d003      	beq.n	800275a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 fa4c 	bl	8002bf0 <HAL_TIM_IC_CaptureCallback>
 8002758:	e005      	b.n	8002766 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 fa3f 	bl	8002bde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f000 fa4e 	bl	8002c02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	f003 0308 	and.w	r3, r3, #8
 8002776:	2b08      	cmp	r3, #8
 8002778:	d122      	bne.n	80027c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	f003 0308 	and.w	r3, r3, #8
 8002784:	2b08      	cmp	r3, #8
 8002786:	d11b      	bne.n	80027c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f06f 0208 	mvn.w	r2, #8
 8002790:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2204      	movs	r2, #4
 8002796:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	f003 0303 	and.w	r3, r3, #3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d003      	beq.n	80027ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 fa22 	bl	8002bf0 <HAL_TIM_IC_CaptureCallback>
 80027ac:	e005      	b.n	80027ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 fa15 	bl	8002bde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f000 fa24 	bl	8002c02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	f003 0310 	and.w	r3, r3, #16
 80027ca:	2b10      	cmp	r3, #16
 80027cc:	d122      	bne.n	8002814 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	f003 0310 	and.w	r3, r3, #16
 80027d8:	2b10      	cmp	r3, #16
 80027da:	d11b      	bne.n	8002814 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f06f 0210 	mvn.w	r2, #16
 80027e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2208      	movs	r2, #8
 80027ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 f9f8 	bl	8002bf0 <HAL_TIM_IC_CaptureCallback>
 8002800:	e005      	b.n	800280e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 f9eb 	bl	8002bde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 f9fa 	bl	8002c02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	2b01      	cmp	r3, #1
 8002820:	d10e      	bne.n	8002840 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	f003 0301 	and.w	r3, r3, #1
 800282c:	2b01      	cmp	r3, #1
 800282e:	d107      	bne.n	8002840 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f06f 0201 	mvn.w	r2, #1
 8002838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f7fe fa50 	bl	8000ce0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800284a:	2b80      	cmp	r3, #128	; 0x80
 800284c:	d10e      	bne.n	800286c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002858:	2b80      	cmp	r3, #128	; 0x80
 800285a:	d107      	bne.n	800286c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002864:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f000 fce9 	bl	800323e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002876:	2b40      	cmp	r3, #64	; 0x40
 8002878:	d10e      	bne.n	8002898 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002884:	2b40      	cmp	r3, #64	; 0x40
 8002886:	d107      	bne.n	8002898 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002890:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 f9be 	bl	8002c14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	f003 0320 	and.w	r3, r3, #32
 80028a2:	2b20      	cmp	r3, #32
 80028a4:	d10e      	bne.n	80028c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	f003 0320 	and.w	r3, r3, #32
 80028b0:	2b20      	cmp	r3, #32
 80028b2:	d107      	bne.n	80028c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f06f 0220 	mvn.w	r2, #32
 80028bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 fcb4 	bl	800322c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028c4:	bf00      	nop
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028d8:	2300      	movs	r3, #0
 80028da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d101      	bne.n	80028ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80028e6:	2302      	movs	r3, #2
 80028e8:	e0ae      	b.n	8002a48 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2b0c      	cmp	r3, #12
 80028f6:	f200 809f 	bhi.w	8002a38 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80028fa:	a201      	add	r2, pc, #4	; (adr r2, 8002900 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80028fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002900:	08002935 	.word	0x08002935
 8002904:	08002a39 	.word	0x08002a39
 8002908:	08002a39 	.word	0x08002a39
 800290c:	08002a39 	.word	0x08002a39
 8002910:	08002975 	.word	0x08002975
 8002914:	08002a39 	.word	0x08002a39
 8002918:	08002a39 	.word	0x08002a39
 800291c:	08002a39 	.word	0x08002a39
 8002920:	080029b7 	.word	0x080029b7
 8002924:	08002a39 	.word	0x08002a39
 8002928:	08002a39 	.word	0x08002a39
 800292c:	08002a39 	.word	0x08002a39
 8002930:	080029f7 	.word	0x080029f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	68b9      	ldr	r1, [r7, #8]
 800293a:	4618      	mov	r0, r3
 800293c:	f000 f9d6 	bl	8002cec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	699a      	ldr	r2, [r3, #24]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f042 0208 	orr.w	r2, r2, #8
 800294e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	699a      	ldr	r2, [r3, #24]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 0204 	bic.w	r2, r2, #4
 800295e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	6999      	ldr	r1, [r3, #24]
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	691a      	ldr	r2, [r3, #16]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	430a      	orrs	r2, r1
 8002970:	619a      	str	r2, [r3, #24]
      break;
 8002972:	e064      	b.n	8002a3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68b9      	ldr	r1, [r7, #8]
 800297a:	4618      	mov	r0, r3
 800297c:	f000 fa1c 	bl	8002db8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	699a      	ldr	r2, [r3, #24]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800298e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	699a      	ldr	r2, [r3, #24]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800299e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6999      	ldr	r1, [r3, #24]
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	021a      	lsls	r2, r3, #8
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	430a      	orrs	r2, r1
 80029b2:	619a      	str	r2, [r3, #24]
      break;
 80029b4:	e043      	b.n	8002a3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68b9      	ldr	r1, [r7, #8]
 80029bc:	4618      	mov	r0, r3
 80029be:	f000 fa65 	bl	8002e8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	69da      	ldr	r2, [r3, #28]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f042 0208 	orr.w	r2, r2, #8
 80029d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	69da      	ldr	r2, [r3, #28]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 0204 	bic.w	r2, r2, #4
 80029e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	69d9      	ldr	r1, [r3, #28]
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	691a      	ldr	r2, [r3, #16]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	430a      	orrs	r2, r1
 80029f2:	61da      	str	r2, [r3, #28]
      break;
 80029f4:	e023      	b.n	8002a3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68b9      	ldr	r1, [r7, #8]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f000 faaf 	bl	8002f60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	69da      	ldr	r2, [r3, #28]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	69da      	ldr	r2, [r3, #28]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	69d9      	ldr	r1, [r3, #28]
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	021a      	lsls	r2, r3, #8
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	430a      	orrs	r2, r1
 8002a34:	61da      	str	r2, [r3, #28]
      break;
 8002a36:	e002      	b.n	8002a3e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	75fb      	strb	r3, [r7, #23]
      break;
 8002a3c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a46:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3718      	adds	r7, #24
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d101      	bne.n	8002a6c <HAL_TIM_ConfigClockSource+0x1c>
 8002a68:	2302      	movs	r3, #2
 8002a6a:	e0b4      	b.n	8002bd6 <HAL_TIM_ConfigClockSource+0x186>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2202      	movs	r2, #2
 8002a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68ba      	ldr	r2, [r7, #8]
 8002a9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002aa4:	d03e      	beq.n	8002b24 <HAL_TIM_ConfigClockSource+0xd4>
 8002aa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002aaa:	f200 8087 	bhi.w	8002bbc <HAL_TIM_ConfigClockSource+0x16c>
 8002aae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ab2:	f000 8086 	beq.w	8002bc2 <HAL_TIM_ConfigClockSource+0x172>
 8002ab6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aba:	d87f      	bhi.n	8002bbc <HAL_TIM_ConfigClockSource+0x16c>
 8002abc:	2b70      	cmp	r3, #112	; 0x70
 8002abe:	d01a      	beq.n	8002af6 <HAL_TIM_ConfigClockSource+0xa6>
 8002ac0:	2b70      	cmp	r3, #112	; 0x70
 8002ac2:	d87b      	bhi.n	8002bbc <HAL_TIM_ConfigClockSource+0x16c>
 8002ac4:	2b60      	cmp	r3, #96	; 0x60
 8002ac6:	d050      	beq.n	8002b6a <HAL_TIM_ConfigClockSource+0x11a>
 8002ac8:	2b60      	cmp	r3, #96	; 0x60
 8002aca:	d877      	bhi.n	8002bbc <HAL_TIM_ConfigClockSource+0x16c>
 8002acc:	2b50      	cmp	r3, #80	; 0x50
 8002ace:	d03c      	beq.n	8002b4a <HAL_TIM_ConfigClockSource+0xfa>
 8002ad0:	2b50      	cmp	r3, #80	; 0x50
 8002ad2:	d873      	bhi.n	8002bbc <HAL_TIM_ConfigClockSource+0x16c>
 8002ad4:	2b40      	cmp	r3, #64	; 0x40
 8002ad6:	d058      	beq.n	8002b8a <HAL_TIM_ConfigClockSource+0x13a>
 8002ad8:	2b40      	cmp	r3, #64	; 0x40
 8002ada:	d86f      	bhi.n	8002bbc <HAL_TIM_ConfigClockSource+0x16c>
 8002adc:	2b30      	cmp	r3, #48	; 0x30
 8002ade:	d064      	beq.n	8002baa <HAL_TIM_ConfigClockSource+0x15a>
 8002ae0:	2b30      	cmp	r3, #48	; 0x30
 8002ae2:	d86b      	bhi.n	8002bbc <HAL_TIM_ConfigClockSource+0x16c>
 8002ae4:	2b20      	cmp	r3, #32
 8002ae6:	d060      	beq.n	8002baa <HAL_TIM_ConfigClockSource+0x15a>
 8002ae8:	2b20      	cmp	r3, #32
 8002aea:	d867      	bhi.n	8002bbc <HAL_TIM_ConfigClockSource+0x16c>
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d05c      	beq.n	8002baa <HAL_TIM_ConfigClockSource+0x15a>
 8002af0:	2b10      	cmp	r3, #16
 8002af2:	d05a      	beq.n	8002baa <HAL_TIM_ConfigClockSource+0x15a>
 8002af4:	e062      	b.n	8002bbc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6818      	ldr	r0, [r3, #0]
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	6899      	ldr	r1, [r3, #8]
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	685a      	ldr	r2, [r3, #4]
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	f000 faf0 	bl	80030ea <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68ba      	ldr	r2, [r7, #8]
 8002b20:	609a      	str	r2, [r3, #8]
      break;
 8002b22:	e04f      	b.n	8002bc4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6818      	ldr	r0, [r3, #0]
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	6899      	ldr	r1, [r3, #8]
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685a      	ldr	r2, [r3, #4]
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	f000 fad9 	bl	80030ea <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	689a      	ldr	r2, [r3, #8]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b46:	609a      	str	r2, [r3, #8]
      break;
 8002b48:	e03c      	b.n	8002bc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6818      	ldr	r0, [r3, #0]
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	6859      	ldr	r1, [r3, #4]
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	461a      	mov	r2, r3
 8002b58:	f000 fa50 	bl	8002ffc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2150      	movs	r1, #80	; 0x50
 8002b62:	4618      	mov	r0, r3
 8002b64:	f000 faa7 	bl	80030b6 <TIM_ITRx_SetConfig>
      break;
 8002b68:	e02c      	b.n	8002bc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6818      	ldr	r0, [r3, #0]
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	6859      	ldr	r1, [r3, #4]
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	461a      	mov	r2, r3
 8002b78:	f000 fa6e 	bl	8003058 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2160      	movs	r1, #96	; 0x60
 8002b82:	4618      	mov	r0, r3
 8002b84:	f000 fa97 	bl	80030b6 <TIM_ITRx_SetConfig>
      break;
 8002b88:	e01c      	b.n	8002bc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6818      	ldr	r0, [r3, #0]
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	6859      	ldr	r1, [r3, #4]
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	461a      	mov	r2, r3
 8002b98:	f000 fa30 	bl	8002ffc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2140      	movs	r1, #64	; 0x40
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f000 fa87 	bl	80030b6 <TIM_ITRx_SetConfig>
      break;
 8002ba8:	e00c      	b.n	8002bc4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	4610      	mov	r0, r2
 8002bb6:	f000 fa7e 	bl	80030b6 <TIM_ITRx_SetConfig>
      break;
 8002bba:	e003      	b.n	8002bc4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	73fb      	strb	r3, [r7, #15]
      break;
 8002bc0:	e000      	b.n	8002bc4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002bc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bde:	b480      	push	{r7}
 8002be0:	b083      	sub	sp, #12
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002be6:	bf00      	nop
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bc80      	pop	{r7}
 8002bee:	4770      	bx	lr

08002bf0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bc80      	pop	{r7}
 8002c00:	4770      	bx	lr

08002c02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c02:	b480      	push	{r7}
 8002c04:	b083      	sub	sp, #12
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c0a:	bf00      	nop
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bc80      	pop	{r7}
 8002c12:	4770      	bx	lr

08002c14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bc80      	pop	{r7}
 8002c24:	4770      	bx	lr
	...

08002c28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a29      	ldr	r2, [pc, #164]	; (8002ce0 <TIM_Base_SetConfig+0xb8>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d00b      	beq.n	8002c58 <TIM_Base_SetConfig+0x30>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c46:	d007      	beq.n	8002c58 <TIM_Base_SetConfig+0x30>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4a26      	ldr	r2, [pc, #152]	; (8002ce4 <TIM_Base_SetConfig+0xbc>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d003      	beq.n	8002c58 <TIM_Base_SetConfig+0x30>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a25      	ldr	r2, [pc, #148]	; (8002ce8 <TIM_Base_SetConfig+0xc0>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d108      	bne.n	8002c6a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a1c      	ldr	r2, [pc, #112]	; (8002ce0 <TIM_Base_SetConfig+0xb8>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d00b      	beq.n	8002c8a <TIM_Base_SetConfig+0x62>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c78:	d007      	beq.n	8002c8a <TIM_Base_SetConfig+0x62>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a19      	ldr	r2, [pc, #100]	; (8002ce4 <TIM_Base_SetConfig+0xbc>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d003      	beq.n	8002c8a <TIM_Base_SetConfig+0x62>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a18      	ldr	r2, [pc, #96]	; (8002ce8 <TIM_Base_SetConfig+0xc0>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d108      	bne.n	8002c9c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	689a      	ldr	r2, [r3, #8]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a07      	ldr	r2, [pc, #28]	; (8002ce0 <TIM_Base_SetConfig+0xb8>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d103      	bne.n	8002cd0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	691a      	ldr	r2, [r3, #16]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	615a      	str	r2, [r3, #20]
}
 8002cd6:	bf00      	nop
 8002cd8:	3714      	adds	r7, #20
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bc80      	pop	{r7}
 8002cde:	4770      	bx	lr
 8002ce0:	40012c00 	.word	0x40012c00
 8002ce4:	40000400 	.word	0x40000400
 8002ce8:	40000800 	.word	0x40000800

08002cec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b087      	sub	sp, #28
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
 8002cfa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	f023 0201 	bic.w	r2, r3, #1
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f023 0303 	bic.w	r3, r3, #3
 8002d22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68fa      	ldr	r2, [r7, #12]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	f023 0302 	bic.w	r3, r3, #2
 8002d34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a1c      	ldr	r2, [pc, #112]	; (8002db4 <TIM_OC1_SetConfig+0xc8>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d10c      	bne.n	8002d62 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	f023 0308 	bic.w	r3, r3, #8
 8002d4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	697a      	ldr	r2, [r7, #20]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	f023 0304 	bic.w	r3, r3, #4
 8002d60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a13      	ldr	r2, [pc, #76]	; (8002db4 <TIM_OC1_SetConfig+0xc8>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d111      	bne.n	8002d8e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	693a      	ldr	r2, [r7, #16]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	699b      	ldr	r3, [r3, #24]
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	693a      	ldr	r2, [r7, #16]
 8002d92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685a      	ldr	r2, [r3, #4]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	697a      	ldr	r2, [r7, #20]
 8002da6:	621a      	str	r2, [r3, #32]
}
 8002da8:	bf00      	nop
 8002daa:	371c      	adds	r7, #28
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bc80      	pop	{r7}
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	40012c00 	.word	0x40012c00

08002db8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b087      	sub	sp, #28
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
 8002dc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a1b      	ldr	r3, [r3, #32]
 8002dcc:	f023 0210 	bic.w	r2, r3, #16
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002de6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	021b      	lsls	r3, r3, #8
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	f023 0320 	bic.w	r3, r3, #32
 8002e02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	011b      	lsls	r3, r3, #4
 8002e0a:	697a      	ldr	r2, [r7, #20]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a1d      	ldr	r2, [pc, #116]	; (8002e88 <TIM_OC2_SetConfig+0xd0>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d10d      	bne.n	8002e34 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	011b      	lsls	r3, r3, #4
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e32:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a14      	ldr	r2, [pc, #80]	; (8002e88 <TIM_OC2_SetConfig+0xd0>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d113      	bne.n	8002e64 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	695b      	ldr	r3, [r3, #20]
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685a      	ldr	r2, [r3, #4]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	697a      	ldr	r2, [r7, #20]
 8002e7c:	621a      	str	r2, [r3, #32]
}
 8002e7e:	bf00      	nop
 8002e80:	371c      	adds	r7, #28
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bc80      	pop	{r7}
 8002e86:	4770      	bx	lr
 8002e88:	40012c00 	.word	0x40012c00

08002e8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b087      	sub	sp, #28
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a1b      	ldr	r3, [r3, #32]
 8002e9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a1b      	ldr	r3, [r3, #32]
 8002ea0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f023 0303 	bic.w	r3, r3, #3
 8002ec2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68fa      	ldr	r2, [r7, #12]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ed4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	021b      	lsls	r3, r3, #8
 8002edc:	697a      	ldr	r2, [r7, #20]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a1d      	ldr	r2, [pc, #116]	; (8002f5c <TIM_OC3_SetConfig+0xd0>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d10d      	bne.n	8002f06 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ef0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	021b      	lsls	r3, r3, #8
 8002ef8:	697a      	ldr	r2, [r7, #20]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a14      	ldr	r2, [pc, #80]	; (8002f5c <TIM_OC3_SetConfig+0xd0>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d113      	bne.n	8002f36 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	011b      	lsls	r3, r3, #4
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	011b      	lsls	r3, r3, #4
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	693a      	ldr	r2, [r7, #16]
 8002f3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	621a      	str	r2, [r3, #32]
}
 8002f50:	bf00      	nop
 8002f52:	371c      	adds	r7, #28
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bc80      	pop	{r7}
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	40012c00 	.word	0x40012c00

08002f60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b087      	sub	sp, #28
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a1b      	ldr	r3, [r3, #32]
 8002f6e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a1b      	ldr	r3, [r3, #32]
 8002f74:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	69db      	ldr	r3, [r3, #28]
 8002f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	021b      	lsls	r3, r3, #8
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002faa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	031b      	lsls	r3, r3, #12
 8002fb2:	693a      	ldr	r2, [r7, #16]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4a0f      	ldr	r2, [pc, #60]	; (8002ff8 <TIM_OC4_SetConfig+0x98>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d109      	bne.n	8002fd4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fc6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	695b      	ldr	r3, [r3, #20]
 8002fcc:	019b      	lsls	r3, r3, #6
 8002fce:	697a      	ldr	r2, [r7, #20]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	697a      	ldr	r2, [r7, #20]
 8002fd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	621a      	str	r2, [r3, #32]
}
 8002fee:	bf00      	nop
 8002ff0:	371c      	adds	r7, #28
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bc80      	pop	{r7}
 8002ff6:	4770      	bx	lr
 8002ff8:	40012c00 	.word	0x40012c00

08002ffc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b087      	sub	sp, #28
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6a1b      	ldr	r3, [r3, #32]
 800300c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6a1b      	ldr	r3, [r3, #32]
 8003012:	f023 0201 	bic.w	r2, r3, #1
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003026:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	011b      	lsls	r3, r3, #4
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	4313      	orrs	r3, r2
 8003030:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	f023 030a 	bic.w	r3, r3, #10
 8003038:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800303a:	697a      	ldr	r2, [r7, #20]
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	4313      	orrs	r3, r2
 8003040:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	693a      	ldr	r2, [r7, #16]
 8003046:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	697a      	ldr	r2, [r7, #20]
 800304c:	621a      	str	r2, [r3, #32]
}
 800304e:	bf00      	nop
 8003050:	371c      	adds	r7, #28
 8003052:	46bd      	mov	sp, r7
 8003054:	bc80      	pop	{r7}
 8003056:	4770      	bx	lr

08003058 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003058:	b480      	push	{r7}
 800305a:	b087      	sub	sp, #28
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6a1b      	ldr	r3, [r3, #32]
 8003068:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6a1b      	ldr	r3, [r3, #32]
 800306e:	f023 0210 	bic.w	r2, r3, #16
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003082:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	031b      	lsls	r3, r3, #12
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	4313      	orrs	r3, r2
 800308c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003094:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	011b      	lsls	r3, r3, #4
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	4313      	orrs	r3, r2
 800309e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	693a      	ldr	r2, [r7, #16]
 80030a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	697a      	ldr	r2, [r7, #20]
 80030aa:	621a      	str	r2, [r3, #32]
}
 80030ac:	bf00      	nop
 80030ae:	371c      	adds	r7, #28
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bc80      	pop	{r7}
 80030b4:	4770      	bx	lr

080030b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030b6:	b480      	push	{r7}
 80030b8:	b085      	sub	sp, #20
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
 80030be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	f043 0307 	orr.w	r3, r3, #7
 80030d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	68fa      	ldr	r2, [r7, #12]
 80030de:	609a      	str	r2, [r3, #8]
}
 80030e0:	bf00      	nop
 80030e2:	3714      	adds	r7, #20
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bc80      	pop	{r7}
 80030e8:	4770      	bx	lr

080030ea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80030ea:	b480      	push	{r7}
 80030ec:	b087      	sub	sp, #28
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	60f8      	str	r0, [r7, #12]
 80030f2:	60b9      	str	r1, [r7, #8]
 80030f4:	607a      	str	r2, [r7, #4]
 80030f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003104:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	021a      	lsls	r2, r3, #8
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	431a      	orrs	r2, r3
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	4313      	orrs	r3, r2
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	4313      	orrs	r3, r2
 8003116:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	609a      	str	r2, [r3, #8]
}
 800311e:	bf00      	nop
 8003120:	371c      	adds	r7, #28
 8003122:	46bd      	mov	sp, r7
 8003124:	bc80      	pop	{r7}
 8003126:	4770      	bx	lr

08003128 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003128:	b480      	push	{r7}
 800312a:	b087      	sub	sp, #28
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	f003 031f 	and.w	r3, r3, #31
 800313a:	2201      	movs	r2, #1
 800313c:	fa02 f303 	lsl.w	r3, r2, r3
 8003140:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6a1a      	ldr	r2, [r3, #32]
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	43db      	mvns	r3, r3
 800314a:	401a      	ands	r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6a1a      	ldr	r2, [r3, #32]
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	f003 031f 	and.w	r3, r3, #31
 800315a:	6879      	ldr	r1, [r7, #4]
 800315c:	fa01 f303 	lsl.w	r3, r1, r3
 8003160:	431a      	orrs	r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	621a      	str	r2, [r3, #32]
}
 8003166:	bf00      	nop
 8003168:	371c      	adds	r7, #28
 800316a:	46bd      	mov	sp, r7
 800316c:	bc80      	pop	{r7}
 800316e:	4770      	bx	lr

08003170 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003170:	b480      	push	{r7}
 8003172:	b085      	sub	sp, #20
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003180:	2b01      	cmp	r3, #1
 8003182:	d101      	bne.n	8003188 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003184:	2302      	movs	r3, #2
 8003186:	e046      	b.n	8003216 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2202      	movs	r2, #2
 8003194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68fa      	ldr	r2, [r7, #12]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a16      	ldr	r2, [pc, #88]	; (8003220 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d00e      	beq.n	80031ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031d4:	d009      	beq.n	80031ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a12      	ldr	r2, [pc, #72]	; (8003224 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d004      	beq.n	80031ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a10      	ldr	r2, [pc, #64]	; (8003228 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d10c      	bne.n	8003204 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	68ba      	ldr	r2, [r7, #8]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68ba      	ldr	r2, [r7, #8]
 8003202:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3714      	adds	r7, #20
 800321a:	46bd      	mov	sp, r7
 800321c:	bc80      	pop	{r7}
 800321e:	4770      	bx	lr
 8003220:	40012c00 	.word	0x40012c00
 8003224:	40000400 	.word	0x40000400
 8003228:	40000800 	.word	0x40000800

0800322c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	bc80      	pop	{r7}
 800323c:	4770      	bx	lr

0800323e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800323e:	b480      	push	{r7}
 8003240:	b083      	sub	sp, #12
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003246:	bf00      	nop
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	bc80      	pop	{r7}
 800324e:	4770      	bx	lr

08003250 <__errno>:
 8003250:	4b01      	ldr	r3, [pc, #4]	; (8003258 <__errno+0x8>)
 8003252:	6818      	ldr	r0, [r3, #0]
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	20000040 	.word	0x20000040

0800325c <__libc_init_array>:
 800325c:	b570      	push	{r4, r5, r6, lr}
 800325e:	2600      	movs	r6, #0
 8003260:	4d0c      	ldr	r5, [pc, #48]	; (8003294 <__libc_init_array+0x38>)
 8003262:	4c0d      	ldr	r4, [pc, #52]	; (8003298 <__libc_init_array+0x3c>)
 8003264:	1b64      	subs	r4, r4, r5
 8003266:	10a4      	asrs	r4, r4, #2
 8003268:	42a6      	cmp	r6, r4
 800326a:	d109      	bne.n	8003280 <__libc_init_array+0x24>
 800326c:	f000 f8f6 	bl	800345c <_init>
 8003270:	2600      	movs	r6, #0
 8003272:	4d0a      	ldr	r5, [pc, #40]	; (800329c <__libc_init_array+0x40>)
 8003274:	4c0a      	ldr	r4, [pc, #40]	; (80032a0 <__libc_init_array+0x44>)
 8003276:	1b64      	subs	r4, r4, r5
 8003278:	10a4      	asrs	r4, r4, #2
 800327a:	42a6      	cmp	r6, r4
 800327c:	d105      	bne.n	800328a <__libc_init_array+0x2e>
 800327e:	bd70      	pop	{r4, r5, r6, pc}
 8003280:	f855 3b04 	ldr.w	r3, [r5], #4
 8003284:	4798      	blx	r3
 8003286:	3601      	adds	r6, #1
 8003288:	e7ee      	b.n	8003268 <__libc_init_array+0xc>
 800328a:	f855 3b04 	ldr.w	r3, [r5], #4
 800328e:	4798      	blx	r3
 8003290:	3601      	adds	r6, #1
 8003292:	e7f2      	b.n	800327a <__libc_init_array+0x1e>
 8003294:	08003498 	.word	0x08003498
 8003298:	08003498 	.word	0x08003498
 800329c:	08003498 	.word	0x08003498
 80032a0:	0800349c 	.word	0x0800349c

080032a4 <malloc>:
 80032a4:	4b02      	ldr	r3, [pc, #8]	; (80032b0 <malloc+0xc>)
 80032a6:	4601      	mov	r1, r0
 80032a8:	6818      	ldr	r0, [r3, #0]
 80032aa:	f000 b85f 	b.w	800336c <_malloc_r>
 80032ae:	bf00      	nop
 80032b0:	20000040 	.word	0x20000040

080032b4 <free>:
 80032b4:	4b02      	ldr	r3, [pc, #8]	; (80032c0 <free+0xc>)
 80032b6:	4601      	mov	r1, r0
 80032b8:	6818      	ldr	r0, [r3, #0]
 80032ba:	f000 b80b 	b.w	80032d4 <_free_r>
 80032be:	bf00      	nop
 80032c0:	20000040 	.word	0x20000040

080032c4 <memset>:
 80032c4:	4603      	mov	r3, r0
 80032c6:	4402      	add	r2, r0
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d100      	bne.n	80032ce <memset+0xa>
 80032cc:	4770      	bx	lr
 80032ce:	f803 1b01 	strb.w	r1, [r3], #1
 80032d2:	e7f9      	b.n	80032c8 <memset+0x4>

080032d4 <_free_r>:
 80032d4:	b538      	push	{r3, r4, r5, lr}
 80032d6:	4605      	mov	r5, r0
 80032d8:	2900      	cmp	r1, #0
 80032da:	d043      	beq.n	8003364 <_free_r+0x90>
 80032dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032e0:	1f0c      	subs	r4, r1, #4
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	bfb8      	it	lt
 80032e6:	18e4      	addlt	r4, r4, r3
 80032e8:	f000 f8aa 	bl	8003440 <__malloc_lock>
 80032ec:	4a1e      	ldr	r2, [pc, #120]	; (8003368 <_free_r+0x94>)
 80032ee:	6813      	ldr	r3, [r2, #0]
 80032f0:	4610      	mov	r0, r2
 80032f2:	b933      	cbnz	r3, 8003302 <_free_r+0x2e>
 80032f4:	6063      	str	r3, [r4, #4]
 80032f6:	6014      	str	r4, [r2, #0]
 80032f8:	4628      	mov	r0, r5
 80032fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80032fe:	f000 b8a5 	b.w	800344c <__malloc_unlock>
 8003302:	42a3      	cmp	r3, r4
 8003304:	d90a      	bls.n	800331c <_free_r+0x48>
 8003306:	6821      	ldr	r1, [r4, #0]
 8003308:	1862      	adds	r2, r4, r1
 800330a:	4293      	cmp	r3, r2
 800330c:	bf01      	itttt	eq
 800330e:	681a      	ldreq	r2, [r3, #0]
 8003310:	685b      	ldreq	r3, [r3, #4]
 8003312:	1852      	addeq	r2, r2, r1
 8003314:	6022      	streq	r2, [r4, #0]
 8003316:	6063      	str	r3, [r4, #4]
 8003318:	6004      	str	r4, [r0, #0]
 800331a:	e7ed      	b.n	80032f8 <_free_r+0x24>
 800331c:	461a      	mov	r2, r3
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	b10b      	cbz	r3, 8003326 <_free_r+0x52>
 8003322:	42a3      	cmp	r3, r4
 8003324:	d9fa      	bls.n	800331c <_free_r+0x48>
 8003326:	6811      	ldr	r1, [r2, #0]
 8003328:	1850      	adds	r0, r2, r1
 800332a:	42a0      	cmp	r0, r4
 800332c:	d10b      	bne.n	8003346 <_free_r+0x72>
 800332e:	6820      	ldr	r0, [r4, #0]
 8003330:	4401      	add	r1, r0
 8003332:	1850      	adds	r0, r2, r1
 8003334:	4283      	cmp	r3, r0
 8003336:	6011      	str	r1, [r2, #0]
 8003338:	d1de      	bne.n	80032f8 <_free_r+0x24>
 800333a:	6818      	ldr	r0, [r3, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	4401      	add	r1, r0
 8003340:	6011      	str	r1, [r2, #0]
 8003342:	6053      	str	r3, [r2, #4]
 8003344:	e7d8      	b.n	80032f8 <_free_r+0x24>
 8003346:	d902      	bls.n	800334e <_free_r+0x7a>
 8003348:	230c      	movs	r3, #12
 800334a:	602b      	str	r3, [r5, #0]
 800334c:	e7d4      	b.n	80032f8 <_free_r+0x24>
 800334e:	6820      	ldr	r0, [r4, #0]
 8003350:	1821      	adds	r1, r4, r0
 8003352:	428b      	cmp	r3, r1
 8003354:	bf01      	itttt	eq
 8003356:	6819      	ldreq	r1, [r3, #0]
 8003358:	685b      	ldreq	r3, [r3, #4]
 800335a:	1809      	addeq	r1, r1, r0
 800335c:	6021      	streq	r1, [r4, #0]
 800335e:	6063      	str	r3, [r4, #4]
 8003360:	6054      	str	r4, [r2, #4]
 8003362:	e7c9      	b.n	80032f8 <_free_r+0x24>
 8003364:	bd38      	pop	{r3, r4, r5, pc}
 8003366:	bf00      	nop
 8003368:	20000104 	.word	0x20000104

0800336c <_malloc_r>:
 800336c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800336e:	1ccd      	adds	r5, r1, #3
 8003370:	f025 0503 	bic.w	r5, r5, #3
 8003374:	3508      	adds	r5, #8
 8003376:	2d0c      	cmp	r5, #12
 8003378:	bf38      	it	cc
 800337a:	250c      	movcc	r5, #12
 800337c:	2d00      	cmp	r5, #0
 800337e:	4606      	mov	r6, r0
 8003380:	db01      	blt.n	8003386 <_malloc_r+0x1a>
 8003382:	42a9      	cmp	r1, r5
 8003384:	d903      	bls.n	800338e <_malloc_r+0x22>
 8003386:	230c      	movs	r3, #12
 8003388:	6033      	str	r3, [r6, #0]
 800338a:	2000      	movs	r0, #0
 800338c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800338e:	f000 f857 	bl	8003440 <__malloc_lock>
 8003392:	4921      	ldr	r1, [pc, #132]	; (8003418 <_malloc_r+0xac>)
 8003394:	680a      	ldr	r2, [r1, #0]
 8003396:	4614      	mov	r4, r2
 8003398:	b99c      	cbnz	r4, 80033c2 <_malloc_r+0x56>
 800339a:	4f20      	ldr	r7, [pc, #128]	; (800341c <_malloc_r+0xb0>)
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	b923      	cbnz	r3, 80033aa <_malloc_r+0x3e>
 80033a0:	4621      	mov	r1, r4
 80033a2:	4630      	mov	r0, r6
 80033a4:	f000 f83c 	bl	8003420 <_sbrk_r>
 80033a8:	6038      	str	r0, [r7, #0]
 80033aa:	4629      	mov	r1, r5
 80033ac:	4630      	mov	r0, r6
 80033ae:	f000 f837 	bl	8003420 <_sbrk_r>
 80033b2:	1c43      	adds	r3, r0, #1
 80033b4:	d123      	bne.n	80033fe <_malloc_r+0x92>
 80033b6:	230c      	movs	r3, #12
 80033b8:	4630      	mov	r0, r6
 80033ba:	6033      	str	r3, [r6, #0]
 80033bc:	f000 f846 	bl	800344c <__malloc_unlock>
 80033c0:	e7e3      	b.n	800338a <_malloc_r+0x1e>
 80033c2:	6823      	ldr	r3, [r4, #0]
 80033c4:	1b5b      	subs	r3, r3, r5
 80033c6:	d417      	bmi.n	80033f8 <_malloc_r+0x8c>
 80033c8:	2b0b      	cmp	r3, #11
 80033ca:	d903      	bls.n	80033d4 <_malloc_r+0x68>
 80033cc:	6023      	str	r3, [r4, #0]
 80033ce:	441c      	add	r4, r3
 80033d0:	6025      	str	r5, [r4, #0]
 80033d2:	e004      	b.n	80033de <_malloc_r+0x72>
 80033d4:	6863      	ldr	r3, [r4, #4]
 80033d6:	42a2      	cmp	r2, r4
 80033d8:	bf0c      	ite	eq
 80033da:	600b      	streq	r3, [r1, #0]
 80033dc:	6053      	strne	r3, [r2, #4]
 80033de:	4630      	mov	r0, r6
 80033e0:	f000 f834 	bl	800344c <__malloc_unlock>
 80033e4:	f104 000b 	add.w	r0, r4, #11
 80033e8:	1d23      	adds	r3, r4, #4
 80033ea:	f020 0007 	bic.w	r0, r0, #7
 80033ee:	1ac2      	subs	r2, r0, r3
 80033f0:	d0cc      	beq.n	800338c <_malloc_r+0x20>
 80033f2:	1a1b      	subs	r3, r3, r0
 80033f4:	50a3      	str	r3, [r4, r2]
 80033f6:	e7c9      	b.n	800338c <_malloc_r+0x20>
 80033f8:	4622      	mov	r2, r4
 80033fa:	6864      	ldr	r4, [r4, #4]
 80033fc:	e7cc      	b.n	8003398 <_malloc_r+0x2c>
 80033fe:	1cc4      	adds	r4, r0, #3
 8003400:	f024 0403 	bic.w	r4, r4, #3
 8003404:	42a0      	cmp	r0, r4
 8003406:	d0e3      	beq.n	80033d0 <_malloc_r+0x64>
 8003408:	1a21      	subs	r1, r4, r0
 800340a:	4630      	mov	r0, r6
 800340c:	f000 f808 	bl	8003420 <_sbrk_r>
 8003410:	3001      	adds	r0, #1
 8003412:	d1dd      	bne.n	80033d0 <_malloc_r+0x64>
 8003414:	e7cf      	b.n	80033b6 <_malloc_r+0x4a>
 8003416:	bf00      	nop
 8003418:	20000104 	.word	0x20000104
 800341c:	20000108 	.word	0x20000108

08003420 <_sbrk_r>:
 8003420:	b538      	push	{r3, r4, r5, lr}
 8003422:	2300      	movs	r3, #0
 8003424:	4d05      	ldr	r5, [pc, #20]	; (800343c <_sbrk_r+0x1c>)
 8003426:	4604      	mov	r4, r0
 8003428:	4608      	mov	r0, r1
 800342a:	602b      	str	r3, [r5, #0]
 800342c:	f7fe f830 	bl	8001490 <_sbrk>
 8003430:	1c43      	adds	r3, r0, #1
 8003432:	d102      	bne.n	800343a <_sbrk_r+0x1a>
 8003434:	682b      	ldr	r3, [r5, #0]
 8003436:	b103      	cbz	r3, 800343a <_sbrk_r+0x1a>
 8003438:	6023      	str	r3, [r4, #0]
 800343a:	bd38      	pop	{r3, r4, r5, pc}
 800343c:	200001c8 	.word	0x200001c8

08003440 <__malloc_lock>:
 8003440:	4801      	ldr	r0, [pc, #4]	; (8003448 <__malloc_lock+0x8>)
 8003442:	f000 b809 	b.w	8003458 <__retarget_lock_acquire_recursive>
 8003446:	bf00      	nop
 8003448:	200001d0 	.word	0x200001d0

0800344c <__malloc_unlock>:
 800344c:	4801      	ldr	r0, [pc, #4]	; (8003454 <__malloc_unlock+0x8>)
 800344e:	f000 b804 	b.w	800345a <__retarget_lock_release_recursive>
 8003452:	bf00      	nop
 8003454:	200001d0 	.word	0x200001d0

08003458 <__retarget_lock_acquire_recursive>:
 8003458:	4770      	bx	lr

0800345a <__retarget_lock_release_recursive>:
 800345a:	4770      	bx	lr

0800345c <_init>:
 800345c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800345e:	bf00      	nop
 8003460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003462:	bc08      	pop	{r3}
 8003464:	469e      	mov	lr, r3
 8003466:	4770      	bx	lr

08003468 <_fini>:
 8003468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800346a:	bf00      	nop
 800346c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800346e:	bc08      	pop	{r3}
 8003470:	469e      	mov	lr, r3
 8003472:	4770      	bx	lr


Assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fec  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080030f8  080030f8  000130f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800311c  0800311c  000200a0  2**0
                  CONTENTS
  4 .ARM          00000000  0800311c  0800311c  000200a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800311c  0800311c  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800311c  0800311c  0001311c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003120  08003120  00013120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08003124  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  200000a0  080031c4  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  080031c4  000201c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aa64  00000000  00000000  000200c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e38  00000000  00000000  0002ab2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad8  00000000  00000000  0002c968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b8  00000000  00000000  0002d440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001817d  00000000  00000000  0002ddf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c8d7  00000000  00000000  00045f75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088c1e  00000000  00000000  0005284c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000db46a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c50  00000000  00000000  000db4c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a0 	.word	0x200000a0
 8000128:	00000000 	.word	0x00000000
 800012c:	080030e0 	.word	0x080030e0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a4 	.word	0x200000a4
 8000148:	080030e0 	.word	0x080030e0

0800014c <button_reading>:
static GPIO_PinState debounceButtonBuffer3[N0_OF_BUTTONS];
//we define a flag for a button pressed more than 1 second.
//we define counter for automatically increasing the value
//after the button is pressed more than 1 second.
int buttonFlag[N0_OF_BUTTONS] = {0};
void button_reading(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	for(int i = 0; i < N0_OF_BUTTONS; i ++){
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e074      	b.n	8000242 <button_reading+0xf6>
		debounceButtonBuffer3[i] =debounceButtonBuffer2[i];
 8000158:	4a3e      	ldr	r2, [pc, #248]	; (8000254 <button_reading+0x108>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	4413      	add	r3, r2
 800015e:	7819      	ldrb	r1, [r3, #0]
 8000160:	4a3d      	ldr	r2, [pc, #244]	; (8000258 <button_reading+0x10c>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	4413      	add	r3, r2
 8000166:	460a      	mov	r2, r1
 8000168:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer2[i] =debounceButtonBuffer1[i];
 800016a:	4a3c      	ldr	r2, [pc, #240]	; (800025c <button_reading+0x110>)
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	4413      	add	r3, r2
 8000170:	7819      	ldrb	r1, [r3, #0]
 8000172:	4a38      	ldr	r2, [pc, #224]	; (8000254 <button_reading+0x108>)
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	4413      	add	r3, r2
 8000178:	460a      	mov	r2, r1
 800017a:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(buttonGPIO[i], buttonPin[i]);
 800017c:	4a38      	ldr	r2, [pc, #224]	; (8000260 <button_reading+0x114>)
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000184:	4937      	ldr	r1, [pc, #220]	; (8000264 <button_reading+0x118>)
 8000186:	687b      	ldr	r3, [r7, #4]
 8000188:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800018c:	b29b      	uxth	r3, r3
 800018e:	4619      	mov	r1, r3
 8000190:	4610      	mov	r0, r2
 8000192:	f001 fb15 	bl	80017c0 <HAL_GPIO_ReadPin>
 8000196:	4603      	mov	r3, r0
 8000198:	4619      	mov	r1, r3
 800019a:	4a30      	ldr	r2, [pc, #192]	; (800025c <button_reading+0x110>)
 800019c:	687b      	ldr	r3, [r7, #4]
 800019e:	4413      	add	r3, r2
 80001a0:	460a      	mov	r2, r1
 80001a2:	701a      	strb	r2, [r3, #0]
		if(debounceButtonBuffer1[i] == debounceButtonBuffer2[i] && debounceButtonBuffer2[i] == debounceButtonBuffer3[i]) {
 80001a4:	4a2d      	ldr	r2, [pc, #180]	; (800025c <button_reading+0x110>)
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	4413      	add	r3, r2
 80001aa:	781a      	ldrb	r2, [r3, #0]
 80001ac:	4929      	ldr	r1, [pc, #164]	; (8000254 <button_reading+0x108>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	440b      	add	r3, r1
 80001b2:	781b      	ldrb	r3, [r3, #0]
 80001b4:	429a      	cmp	r2, r3
 80001b6:	d141      	bne.n	800023c <button_reading+0xf0>
 80001b8:	4a26      	ldr	r2, [pc, #152]	; (8000254 <button_reading+0x108>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	4413      	add	r3, r2
 80001be:	781a      	ldrb	r2, [r3, #0]
 80001c0:	4925      	ldr	r1, [pc, #148]	; (8000258 <button_reading+0x10c>)
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	440b      	add	r3, r1
 80001c6:	781b      	ldrb	r3, [r3, #0]
 80001c8:	429a      	cmp	r2, r3
 80001ca:	d137      	bne.n	800023c <button_reading+0xf0>
			if(debounceButtonBuffer1[i] != buttonBuffer[i]){
 80001cc:	4a23      	ldr	r2, [pc, #140]	; (800025c <button_reading+0x110>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	4413      	add	r3, r2
 80001d2:	781a      	ldrb	r2, [r3, #0]
 80001d4:	4924      	ldr	r1, [pc, #144]	; (8000268 <button_reading+0x11c>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	440b      	add	r3, r1
 80001da:	781b      	ldrb	r3, [r3, #0]
 80001dc:	429a      	cmp	r2, r3
 80001de:	d019      	beq.n	8000214 <button_reading+0xc8>
				buttonBuffer[i] = debounceButtonBuffer1[i];
 80001e0:	4a1e      	ldr	r2, [pc, #120]	; (800025c <button_reading+0x110>)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	4413      	add	r3, r2
 80001e6:	7819      	ldrb	r1, [r3, #0]
 80001e8:	4a1f      	ldr	r2, [pc, #124]	; (8000268 <button_reading+0x11c>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	4413      	add	r3, r2
 80001ee:	460a      	mov	r2, r1
 80001f0:	701a      	strb	r2, [r3, #0]
						if(buttonBuffer[i] == BUTTON_IS_PRESSED){
 80001f2:	4a1d      	ldr	r2, [pc, #116]	; (8000268 <button_reading+0x11c>)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	4413      	add	r3, r2
 80001f8:	781b      	ldrb	r3, [r3, #0]
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d11e      	bne.n	800023c <button_reading+0xf0>
							buttonFlag[i] = 1;
 80001fe:	4a1b      	ldr	r2, [pc, #108]	; (800026c <button_reading+0x120>)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	2101      	movs	r1, #1
 8000204:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							buttonTimeOut[i] = DURATION_FOR_AUTO_INCREASING;
 8000208:	4a19      	ldr	r2, [pc, #100]	; (8000270 <button_reading+0x124>)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	2164      	movs	r1, #100	; 0x64
 800020e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000212:	e013      	b.n	800023c <button_reading+0xf0>
							}
		}
		else {
			buttonTimeOut[i]--;
 8000214:	4a16      	ldr	r2, [pc, #88]	; (8000270 <button_reading+0x124>)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800021c:	1e5a      	subs	r2, r3, #1
 800021e:	4914      	ldr	r1, [pc, #80]	; (8000270 <button_reading+0x124>)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(buttonTimeOut[i] <= 0){
 8000226:	4a12      	ldr	r2, [pc, #72]	; (8000270 <button_reading+0x124>)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800022e:	2b00      	cmp	r3, #0
 8000230:	dc04      	bgt.n	800023c <button_reading+0xf0>
					buttonBuffer[i] = BUTTON_IS_RELEASED;
 8000232:	4a0d      	ldr	r2, [pc, #52]	; (8000268 <button_reading+0x11c>)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	4413      	add	r3, r2
 8000238:	2201      	movs	r2, #1
 800023a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < N0_OF_BUTTONS; i ++){
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	3301      	adds	r3, #1
 8000240:	607b      	str	r3, [r7, #4]
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	2b03      	cmp	r3, #3
 8000246:	dd87      	ble.n	8000158 <button_reading+0xc>
			}
		}
	}
}
}
 8000248:	bf00      	nop
 800024a:	bf00      	nop
 800024c:	3708      	adds	r7, #8
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	200000d0 	.word	0x200000d0
 8000258:	200000d4 	.word	0x200000d4
 800025c:	200000cc 	.word	0x200000cc
 8000260:	20000004 	.word	0x20000004
 8000264:	20000014 	.word	0x20000014
 8000268:	20000000 	.word	0x20000000
 800026c:	200000d8 	.word	0x200000d8
 8000270:	200000bc 	.word	0x200000bc

08000274 <is_button_pressed>:

int is_button_pressed(int index){
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
	if(index >= N0_OF_BUTTONS || index < 0) return 0;
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	2b03      	cmp	r3, #3
 8000280:	dc02      	bgt.n	8000288 <is_button_pressed+0x14>
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	2b00      	cmp	r3, #0
 8000286:	da01      	bge.n	800028c <is_button_pressed+0x18>
 8000288:	2300      	movs	r3, #0
 800028a:	e00d      	b.n	80002a8 <is_button_pressed+0x34>
		if(buttonFlag[index] == 1){
 800028c:	4a09      	ldr	r2, [pc, #36]	; (80002b4 <is_button_pressed+0x40>)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000294:	2b01      	cmp	r3, #1
 8000296:	d106      	bne.n	80002a6 <is_button_pressed+0x32>
			buttonFlag[index] = 0;
 8000298:	4a06      	ldr	r2, [pc, #24]	; (80002b4 <is_button_pressed+0x40>)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	2100      	movs	r1, #0
 800029e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			return 1;
 80002a2:	2301      	movs	r3, #1
 80002a4:	e000      	b.n	80002a8 <is_button_pressed+0x34>
		}
		return 0;
 80002a6:	2300      	movs	r3, #0
}
 80002a8:	4618      	mov	r0, r3
 80002aa:	370c      	adds	r7, #12
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	200000d8 	.word	0x200000d8

080002b8 <clearAllLed1>:
 *      Author: OS
 */
#include "main.h"
#include "displayLed.h"

void clearAllLed1() {
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 80002bc:	2200      	movs	r2, #0
 80002be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002c2:	4805      	ldr	r0, [pc, #20]	; (80002d8 <clearAllLed1+0x20>)
 80002c4:	f001 fa93 	bl	80017ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 80002c8:	2200      	movs	r2, #0
 80002ca:	2108      	movs	r1, #8
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <clearAllLed1+0x24>)
 80002ce:	f001 fa8e 	bl	80017ee <HAL_GPIO_WritePin>
}
 80002d2:	bf00      	nop
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	40010800 	.word	0x40010800
 80002dc:	40010c00 	.word	0x40010c00

080002e0 <clearAllLed2>:

void clearAllLed2() {
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 80002e4:	2200      	movs	r2, #0
 80002e6:	2120      	movs	r1, #32
 80002e8:	4804      	ldr	r0, [pc, #16]	; (80002fc <clearAllLed2+0x1c>)
 80002ea:	f001 fa80 	bl	80017ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 80002ee:	2200      	movs	r2, #0
 80002f0:	2110      	movs	r1, #16
 80002f2:	4802      	ldr	r0, [pc, #8]	; (80002fc <clearAllLed2+0x1c>)
 80002f4:	f001 fa7b 	bl	80017ee <HAL_GPIO_WritePin>
}
 80002f8:	bf00      	nop
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	40010c00 	.word	0x40010c00

08000300 <displayRed1>:
void displayRed1() {
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000304:	2201      	movs	r2, #1
 8000306:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800030a:	4805      	ldr	r0, [pc, #20]	; (8000320 <displayRed1+0x20>)
 800030c:	f001 fa6f 	bl	80017ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8000310:	2200      	movs	r2, #0
 8000312:	2108      	movs	r1, #8
 8000314:	4803      	ldr	r0, [pc, #12]	; (8000324 <displayRed1+0x24>)
 8000316:	f001 fa6a 	bl	80017ee <HAL_GPIO_WritePin>

}
 800031a:	bf00      	nop
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	40010800 	.word	0x40010800
 8000324:	40010c00 	.word	0x40010c00

08000328 <displayYellow1>:

void displayYellow1() {
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 800032c:	2201      	movs	r2, #1
 800032e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000332:	4805      	ldr	r0, [pc, #20]	; (8000348 <displayYellow1+0x20>)
 8000334:	f001 fa5b 	bl	80017ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000338:	2201      	movs	r2, #1
 800033a:	2108      	movs	r1, #8
 800033c:	4803      	ldr	r0, [pc, #12]	; (800034c <displayYellow1+0x24>)
 800033e:	f001 fa56 	bl	80017ee <HAL_GPIO_WritePin>
}
 8000342:	bf00      	nop
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	40010800 	.word	0x40010800
 800034c:	40010c00 	.word	0x40010c00

08000350 <displayGreen1>:

void displayGreen1() {
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8000354:	2200      	movs	r2, #0
 8000356:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800035a:	4805      	ldr	r0, [pc, #20]	; (8000370 <displayGreen1+0x20>)
 800035c:	f001 fa47 	bl	80017ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000360:	2201      	movs	r2, #1
 8000362:	2108      	movs	r1, #8
 8000364:	4803      	ldr	r0, [pc, #12]	; (8000374 <displayGreen1+0x24>)
 8000366:	f001 fa42 	bl	80017ee <HAL_GPIO_WritePin>
}
 800036a:	bf00      	nop
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	40010800 	.word	0x40010800
 8000374:	40010c00 	.word	0x40010c00

08000378 <displayRed2>:

void displayRed2() {
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 800037c:	2201      	movs	r2, #1
 800037e:	2120      	movs	r1, #32
 8000380:	4804      	ldr	r0, [pc, #16]	; (8000394 <displayRed2+0x1c>)
 8000382:	f001 fa34 	bl	80017ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8000386:	2200      	movs	r2, #0
 8000388:	2110      	movs	r1, #16
 800038a:	4802      	ldr	r0, [pc, #8]	; (8000394 <displayRed2+0x1c>)
 800038c:	f001 fa2f 	bl	80017ee <HAL_GPIO_WritePin>
}
 8000390:	bf00      	nop
 8000392:	bd80      	pop	{r7, pc}
 8000394:	40010c00 	.word	0x40010c00

08000398 <displayYellow2>:


void displayYellow2() {
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 800039c:	2201      	movs	r2, #1
 800039e:	2120      	movs	r1, #32
 80003a0:	4804      	ldr	r0, [pc, #16]	; (80003b4 <displayYellow2+0x1c>)
 80003a2:	f001 fa24 	bl	80017ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 80003a6:	2201      	movs	r2, #1
 80003a8:	2110      	movs	r1, #16
 80003aa:	4802      	ldr	r0, [pc, #8]	; (80003b4 <displayYellow2+0x1c>)
 80003ac:	f001 fa1f 	bl	80017ee <HAL_GPIO_WritePin>
}
 80003b0:	bf00      	nop
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	40010c00 	.word	0x40010c00

080003b8 <displayGreen2>:

void displayGreen2() {
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 80003bc:	2200      	movs	r2, #0
 80003be:	2120      	movs	r1, #32
 80003c0:	4804      	ldr	r0, [pc, #16]	; (80003d4 <displayGreen2+0x1c>)
 80003c2:	f001 fa14 	bl	80017ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 80003c6:	2201      	movs	r2, #1
 80003c8:	2110      	movs	r1, #16
 80003ca:	4802      	ldr	r0, [pc, #8]	; (80003d4 <displayGreen2+0x1c>)
 80003cc:	f001 fa0f 	bl	80017ee <HAL_GPIO_WritePin>
}
 80003d0:	bf00      	nop
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	40010c00 	.word	0x40010c00

080003d8 <toggleRed>:

void toggleRed() {// remember to clear all led before toggle
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(D2_GPIO_Port, D2_Pin);
 80003dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003e0:	4804      	ldr	r0, [pc, #16]	; (80003f4 <toggleRed+0x1c>)
 80003e2:	f001 fa1c 	bl	800181e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);
 80003e6:	2120      	movs	r1, #32
 80003e8:	4803      	ldr	r0, [pc, #12]	; (80003f8 <toggleRed+0x20>)
 80003ea:	f001 fa18 	bl	800181e <HAL_GPIO_TogglePin>
}
 80003ee:	bf00      	nop
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	40010800 	.word	0x40010800
 80003f8:	40010c00 	.word	0x40010c00

080003fc <toggleYellow>:

void toggleYellow() {// remember to clear all led before toggle
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(D2_GPIO_Port, D2_Pin);
 8000400:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000404:	4808      	ldr	r0, [pc, #32]	; (8000428 <toggleYellow+0x2c>)
 8000406:	f001 fa0a 	bl	800181e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
 800040a:	2108      	movs	r1, #8
 800040c:	4807      	ldr	r0, [pc, #28]	; (800042c <toggleYellow+0x30>)
 800040e:	f001 fa06 	bl	800181e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);
 8000412:	2120      	movs	r1, #32
 8000414:	4805      	ldr	r0, [pc, #20]	; (800042c <toggleYellow+0x30>)
 8000416:	f001 fa02 	bl	800181e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D5_GPIO_Port, D5_Pin);
 800041a:	2110      	movs	r1, #16
 800041c:	4803      	ldr	r0, [pc, #12]	; (800042c <toggleYellow+0x30>)
 800041e:	f001 f9fe 	bl	800181e <HAL_GPIO_TogglePin>
}
 8000422:	bf00      	nop
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	40010800 	.word	0x40010800
 800042c:	40010c00 	.word	0x40010c00

08000430 <toggleGreen>:

void toggleGreen() {//remember to clear all led before toggle
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
 8000434:	2108      	movs	r1, #8
 8000436:	4804      	ldr	r0, [pc, #16]	; (8000448 <toggleGreen+0x18>)
 8000438:	f001 f9f1 	bl	800181e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D5_GPIO_Port, D5_Pin);
 800043c:	2110      	movs	r1, #16
 800043e:	4802      	ldr	r0, [pc, #8]	; (8000448 <toggleGreen+0x18>)
 8000440:	f001 f9ed 	bl	800181e <HAL_GPIO_TogglePin>
}
 8000444:	bf00      	nop
 8000446:	bd80      	pop	{r7, pc}
 8000448:	40010c00 	.word	0x40010c00

0800044c <increase>:
 */

#include "global.h"

void increase()
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
	time1++;
 8000450:	4b07      	ldr	r3, [pc, #28]	; (8000470 <increase+0x24>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	3301      	adds	r3, #1
 8000456:	4a06      	ldr	r2, [pc, #24]	; (8000470 <increase+0x24>)
 8000458:	6013      	str	r3, [r2, #0]
	if(time1>99)
 800045a:	4b05      	ldr	r3, [pc, #20]	; (8000470 <increase+0x24>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	2b63      	cmp	r3, #99	; 0x63
 8000460:	dd02      	ble.n	8000468 <increase+0x1c>
		time1 = 1;
 8000462:	4b03      	ldr	r3, [pc, #12]	; (8000470 <increase+0x24>)
 8000464:	2201      	movs	r2, #1
 8000466:	601a      	str	r2, [r3, #0]
}
 8000468:	bf00      	nop
 800046a:	46bd      	mov	sp, r7
 800046c:	bc80      	pop	{r7}
 800046e:	4770      	bx	lr
 8000470:	200000ec 	.word	0x200000ec

08000474 <normalState>:

void normalState(void) {
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
	switch(status) {
 8000478:	4b97      	ldr	r3, [pc, #604]	; (80006d8 <normalState+0x264>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	2b0c      	cmp	r3, #12
 800047e:	f200 825a 	bhi.w	8000936 <normalState+0x4c2>
 8000482:	a201      	add	r2, pc, #4	; (adr r2, 8000488 <normalState+0x14>)
 8000484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000488:	080004bd 	.word	0x080004bd
 800048c:	080004f7 	.word	0x080004f7
 8000490:	08000597 	.word	0x08000597
 8000494:	08000937 	.word	0x08000937
 8000498:	08000637 	.word	0x08000637
 800049c:	080006f1 	.word	0x080006f1
 80004a0:	08000937 	.word	0x08000937
 80004a4:	08000937 	.word	0x08000937
 80004a8:	08000937 	.word	0x08000937
 80004ac:	08000937 	.word	0x08000937
 80004b0:	08000791 	.word	0x08000791
 80004b4:	0800080f 	.word	0x0800080f
 80004b8:	0800089d 	.word	0x0800089d
	case INIT:
		clearAllLed1();
 80004bc:	f7ff fefc 	bl	80002b8 <clearAllLed1>
		clearAllLed2();
 80004c0:	f7ff ff0e 	bl	80002e0 <clearAllLed2>
		status=RedGreen;
 80004c4:	4b84      	ldr	r3, [pc, #528]	; (80006d8 <normalState+0x264>)
 80004c6:	2201      	movs	r2, #1
 80004c8:	601a      	str	r2, [r3, #0]
		setTimer(0, timeGreen*100);
 80004ca:	4b84      	ldr	r3, [pc, #528]	; (80006dc <normalState+0x268>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	2264      	movs	r2, #100	; 0x64
 80004d0:	fb02 f303 	mul.w	r3, r2, r3
 80004d4:	4619      	mov	r1, r3
 80004d6:	2000      	movs	r0, #0
 80004d8:	f000 fcf4 	bl	8000ec4 <setTimer>
		setTimer(1, 100);
 80004dc:	2164      	movs	r1, #100	; 0x64
 80004de:	2001      	movs	r0, #1
 80004e0:	f000 fcf0 	bl	8000ec4 <setTimer>
		time1=timeRed;
 80004e4:	4b7e      	ldr	r3, [pc, #504]	; (80006e0 <normalState+0x26c>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a7e      	ldr	r2, [pc, #504]	; (80006e4 <normalState+0x270>)
 80004ea:	6013      	str	r3, [r2, #0]
		time2=timeGreen;
 80004ec:	4b7b      	ldr	r3, [pc, #492]	; (80006dc <normalState+0x268>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a7d      	ldr	r2, [pc, #500]	; (80006e8 <normalState+0x274>)
 80004f2:	6013      	str	r3, [r2, #0]
		break;
 80004f4:	e22e      	b.n	8000954 <normalState+0x4e0>
	case RedGreen:
		displayRed1();
 80004f6:	f7ff ff03 	bl	8000300 <displayRed1>
		displayGreen2();
 80004fa:	f7ff ff5d 	bl	80003b8 <displayGreen2>
		if(IsTimerUp(0)==1) {// transit state
 80004fe:	2000      	movs	r0, #0
 8000500:	f000 fccc 	bl	8000e9c <IsTimerUp>
 8000504:	4603      	mov	r3, r0
 8000506:	2b01      	cmp	r3, #1
 8000508:	d117      	bne.n	800053a <normalState+0xc6>
			status=RedAm;
 800050a:	4b73      	ldr	r3, [pc, #460]	; (80006d8 <normalState+0x264>)
 800050c:	2202      	movs	r2, #2
 800050e:	601a      	str	r2, [r3, #0]
			setTimer(0, timeYellow*100);
 8000510:	4b76      	ldr	r3, [pc, #472]	; (80006ec <normalState+0x278>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2264      	movs	r2, #100	; 0x64
 8000516:	fb02 f303 	mul.w	r3, r2, r3
 800051a:	4619      	mov	r1, r3
 800051c:	2000      	movs	r0, #0
 800051e:	f000 fcd1 	bl	8000ec4 <setTimer>
			setTimer(1, 100);
 8000522:	2164      	movs	r1, #100	; 0x64
 8000524:	2001      	movs	r0, #1
 8000526:	f000 fccd 	bl	8000ec4 <setTimer>
			time1=timeYellow;
 800052a:	4b70      	ldr	r3, [pc, #448]	; (80006ec <normalState+0x278>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	4a6d      	ldr	r2, [pc, #436]	; (80006e4 <normalState+0x270>)
 8000530:	6013      	str	r3, [r2, #0]
			time2=timeYellow;
 8000532:	4b6e      	ldr	r3, [pc, #440]	; (80006ec <normalState+0x278>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	4a6c      	ldr	r2, [pc, #432]	; (80006e8 <normalState+0x274>)
 8000538:	6013      	str	r3, [r2, #0]
		}

		if(IsTimerUp(1)==1) {// update time
 800053a:	2001      	movs	r0, #1
 800053c:	f000 fcae 	bl	8000e9c <IsTimerUp>
 8000540:	4603      	mov	r3, r0
 8000542:	2b01      	cmp	r3, #1
 8000544:	d10d      	bne.n	8000562 <normalState+0xee>
			setTimer(1, 100);
 8000546:	2164      	movs	r1, #100	; 0x64
 8000548:	2001      	movs	r0, #1
 800054a:	f000 fcbb 	bl	8000ec4 <setTimer>
			time1--;
 800054e:	4b65      	ldr	r3, [pc, #404]	; (80006e4 <normalState+0x270>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	3b01      	subs	r3, #1
 8000554:	4a63      	ldr	r2, [pc, #396]	; (80006e4 <normalState+0x270>)
 8000556:	6013      	str	r3, [r2, #0]
			time2--;
 8000558:	4b63      	ldr	r3, [pc, #396]	; (80006e8 <normalState+0x274>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	3b01      	subs	r3, #1
 800055e:	4a62      	ldr	r2, [pc, #392]	; (80006e8 <normalState+0x274>)
 8000560:	6013      	str	r3, [r2, #0]
		}

		if(is_button_pressed(1)) {
 8000562:	2001      	movs	r0, #1
 8000564:	f7ff fe86 	bl	8000274 <is_button_pressed>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	f000 81e5 	beq.w	800093a <normalState+0x4c6>
			status=ManRed;
 8000570:	4b59      	ldr	r3, [pc, #356]	; (80006d8 <normalState+0x264>)
 8000572:	220a      	movs	r2, #10
 8000574:	601a      	str	r2, [r3, #0]
			time1=timeRed;
 8000576:	4b5a      	ldr	r3, [pc, #360]	; (80006e0 <normalState+0x26c>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4a5a      	ldr	r2, [pc, #360]	; (80006e4 <normalState+0x270>)
 800057c:	6013      	str	r3, [r2, #0]
			time2=2;
 800057e:	4b5a      	ldr	r3, [pc, #360]	; (80006e8 <normalState+0x274>)
 8000580:	2202      	movs	r2, #2
 8000582:	601a      	str	r2, [r3, #0]
			clearAllLed1();
 8000584:	f7ff fe98 	bl	80002b8 <clearAllLed1>
			clearAllLed2();
 8000588:	f7ff feaa 	bl	80002e0 <clearAllLed2>
			setTimer(2, 25);
 800058c:	2119      	movs	r1, #25
 800058e:	2002      	movs	r0, #2
 8000590:	f000 fc98 	bl	8000ec4 <setTimer>
		}

		break;
 8000594:	e1d1      	b.n	800093a <normalState+0x4c6>
	case RedAm:
		displayRed1();
 8000596:	f7ff feb3 	bl	8000300 <displayRed1>
		displayYellow2();
 800059a:	f7ff fefd 	bl	8000398 <displayYellow2>
		if(IsTimerUp(0)==1) { //transit state
 800059e:	2000      	movs	r0, #0
 80005a0:	f000 fc7c 	bl	8000e9c <IsTimerUp>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b01      	cmp	r3, #1
 80005a8:	d117      	bne.n	80005da <normalState+0x166>
			status=GreenRed;
 80005aa:	4b4b      	ldr	r3, [pc, #300]	; (80006d8 <normalState+0x264>)
 80005ac:	2204      	movs	r2, #4
 80005ae:	601a      	str	r2, [r3, #0]
			setTimer(0, timeGreen*100);
 80005b0:	4b4a      	ldr	r3, [pc, #296]	; (80006dc <normalState+0x268>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	2264      	movs	r2, #100	; 0x64
 80005b6:	fb02 f303 	mul.w	r3, r2, r3
 80005ba:	4619      	mov	r1, r3
 80005bc:	2000      	movs	r0, #0
 80005be:	f000 fc81 	bl	8000ec4 <setTimer>
			setTimer(1, 100);
 80005c2:	2164      	movs	r1, #100	; 0x64
 80005c4:	2001      	movs	r0, #1
 80005c6:	f000 fc7d 	bl	8000ec4 <setTimer>
			time1=timeGreen;
 80005ca:	4b44      	ldr	r3, [pc, #272]	; (80006dc <normalState+0x268>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4a45      	ldr	r2, [pc, #276]	; (80006e4 <normalState+0x270>)
 80005d0:	6013      	str	r3, [r2, #0]
			time2=timeRed;
 80005d2:	4b43      	ldr	r3, [pc, #268]	; (80006e0 <normalState+0x26c>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4a44      	ldr	r2, [pc, #272]	; (80006e8 <normalState+0x274>)
 80005d8:	6013      	str	r3, [r2, #0]
		}

		if(IsTimerUp(0)==1) { //update time
 80005da:	2000      	movs	r0, #0
 80005dc:	f000 fc5e 	bl	8000e9c <IsTimerUp>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d10d      	bne.n	8000602 <normalState+0x18e>
			time1--;
 80005e6:	4b3f      	ldr	r3, [pc, #252]	; (80006e4 <normalState+0x270>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	3b01      	subs	r3, #1
 80005ec:	4a3d      	ldr	r2, [pc, #244]	; (80006e4 <normalState+0x270>)
 80005ee:	6013      	str	r3, [r2, #0]
			time2--;
 80005f0:	4b3d      	ldr	r3, [pc, #244]	; (80006e8 <normalState+0x274>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	3b01      	subs	r3, #1
 80005f6:	4a3c      	ldr	r2, [pc, #240]	; (80006e8 <normalState+0x274>)
 80005f8:	6013      	str	r3, [r2, #0]
			setTimer(1, 100);
 80005fa:	2164      	movs	r1, #100	; 0x64
 80005fc:	2001      	movs	r0, #1
 80005fe:	f000 fc61 	bl	8000ec4 <setTimer>
		}

		if(is_button_pressed(1)) {
 8000602:	2001      	movs	r0, #1
 8000604:	f7ff fe36 	bl	8000274 <is_button_pressed>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	f000 8197 	beq.w	800093e <normalState+0x4ca>
			status=ManRed;
 8000610:	4b31      	ldr	r3, [pc, #196]	; (80006d8 <normalState+0x264>)
 8000612:	220a      	movs	r2, #10
 8000614:	601a      	str	r2, [r3, #0]
			time1=timeRed;
 8000616:	4b32      	ldr	r3, [pc, #200]	; (80006e0 <normalState+0x26c>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4a32      	ldr	r2, [pc, #200]	; (80006e4 <normalState+0x270>)
 800061c:	6013      	str	r3, [r2, #0]
			time2=2;
 800061e:	4b32      	ldr	r3, [pc, #200]	; (80006e8 <normalState+0x274>)
 8000620:	2202      	movs	r2, #2
 8000622:	601a      	str	r2, [r3, #0]
			clearAllLed1();
 8000624:	f7ff fe48 	bl	80002b8 <clearAllLed1>
			clearAllLed2();
 8000628:	f7ff fe5a 	bl	80002e0 <clearAllLed2>
			setTimer(2, 25);
 800062c:	2119      	movs	r1, #25
 800062e:	2002      	movs	r0, #2
 8000630:	f000 fc48 	bl	8000ec4 <setTimer>
		}

		break;
 8000634:	e183      	b.n	800093e <normalState+0x4ca>
	case GreenRed:
		displayGreen1();
 8000636:	f7ff fe8b 	bl	8000350 <displayGreen1>
		displayRed2();
 800063a:	f7ff fe9d 	bl	8000378 <displayRed2>
		if(IsTimerUp(0)==1) { //transit state
 800063e:	2000      	movs	r0, #0
 8000640:	f000 fc2c 	bl	8000e9c <IsTimerUp>
 8000644:	4603      	mov	r3, r0
 8000646:	2b01      	cmp	r3, #1
 8000648:	d117      	bne.n	800067a <normalState+0x206>
			status=AmRed;
 800064a:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <normalState+0x264>)
 800064c:	2205      	movs	r2, #5
 800064e:	601a      	str	r2, [r3, #0]
			setTimer(0, timeYellow*100);
 8000650:	4b26      	ldr	r3, [pc, #152]	; (80006ec <normalState+0x278>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	2264      	movs	r2, #100	; 0x64
 8000656:	fb02 f303 	mul.w	r3, r2, r3
 800065a:	4619      	mov	r1, r3
 800065c:	2000      	movs	r0, #0
 800065e:	f000 fc31 	bl	8000ec4 <setTimer>
			setTimer(1, 100);
 8000662:	2164      	movs	r1, #100	; 0x64
 8000664:	2001      	movs	r0, #1
 8000666:	f000 fc2d 	bl	8000ec4 <setTimer>
			time1=timeYellow;
 800066a:	4b20      	ldr	r3, [pc, #128]	; (80006ec <normalState+0x278>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4a1d      	ldr	r2, [pc, #116]	; (80006e4 <normalState+0x270>)
 8000670:	6013      	str	r3, [r2, #0]
			time2=timeYellow;
 8000672:	4b1e      	ldr	r3, [pc, #120]	; (80006ec <normalState+0x278>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a1c      	ldr	r2, [pc, #112]	; (80006e8 <normalState+0x274>)
 8000678:	6013      	str	r3, [r2, #0]
		}

		if(IsTimerUp(1)==1) {//update time
 800067a:	2001      	movs	r0, #1
 800067c:	f000 fc0e 	bl	8000e9c <IsTimerUp>
 8000680:	4603      	mov	r3, r0
 8000682:	2b01      	cmp	r3, #1
 8000684:	d10d      	bne.n	80006a2 <normalState+0x22e>
			setTimer(1, 100);
 8000686:	2164      	movs	r1, #100	; 0x64
 8000688:	2001      	movs	r0, #1
 800068a:	f000 fc1b 	bl	8000ec4 <setTimer>
			time1--;
 800068e:	4b15      	ldr	r3, [pc, #84]	; (80006e4 <normalState+0x270>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	3b01      	subs	r3, #1
 8000694:	4a13      	ldr	r2, [pc, #76]	; (80006e4 <normalState+0x270>)
 8000696:	6013      	str	r3, [r2, #0]
			time2--;
 8000698:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <normalState+0x274>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	3b01      	subs	r3, #1
 800069e:	4a12      	ldr	r2, [pc, #72]	; (80006e8 <normalState+0x274>)
 80006a0:	6013      	str	r3, [r2, #0]
		}

		if(is_button_pressed(1)) {
 80006a2:	2001      	movs	r0, #1
 80006a4:	f7ff fde6 	bl	8000274 <is_button_pressed>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	f000 8149 	beq.w	8000942 <normalState+0x4ce>
			status=ManRed;
 80006b0:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <normalState+0x264>)
 80006b2:	220a      	movs	r2, #10
 80006b4:	601a      	str	r2, [r3, #0]
			time1=timeRed;
 80006b6:	4b0a      	ldr	r3, [pc, #40]	; (80006e0 <normalState+0x26c>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4a0a      	ldr	r2, [pc, #40]	; (80006e4 <normalState+0x270>)
 80006bc:	6013      	str	r3, [r2, #0]
			time2=2;
 80006be:	4b0a      	ldr	r3, [pc, #40]	; (80006e8 <normalState+0x274>)
 80006c0:	2202      	movs	r2, #2
 80006c2:	601a      	str	r2, [r3, #0]
			clearAllLed1();
 80006c4:	f7ff fdf8 	bl	80002b8 <clearAllLed1>
			clearAllLed2();
 80006c8:	f7ff fe0a 	bl	80002e0 <clearAllLed2>
			setTimer(2, 25);
 80006cc:	2119      	movs	r1, #25
 80006ce:	2002      	movs	r0, #2
 80006d0:	f000 fbf8 	bl	8000ec4 <setTimer>
		}
		break;
 80006d4:	e135      	b.n	8000942 <normalState+0x4ce>
 80006d6:	bf00      	nop
 80006d8:	200000e8 	.word	0x200000e8
 80006dc:	2000002c 	.word	0x2000002c
 80006e0:	20000024 	.word	0x20000024
 80006e4:	200000ec 	.word	0x200000ec
 80006e8:	200000f0 	.word	0x200000f0
 80006ec:	20000028 	.word	0x20000028
	case AmRed:
		displayYellow1();
 80006f0:	f7ff fe1a 	bl	8000328 <displayYellow1>
		displayRed2();
 80006f4:	f7ff fe40 	bl	8000378 <displayRed2>
		if(IsTimerUp(0)==1) { //transit state
 80006f8:	2000      	movs	r0, #0
 80006fa:	f000 fbcf 	bl	8000e9c <IsTimerUp>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b01      	cmp	r3, #1
 8000702:	d117      	bne.n	8000734 <normalState+0x2c0>
			status=RedGreen;
 8000704:	4b94      	ldr	r3, [pc, #592]	; (8000958 <normalState+0x4e4>)
 8000706:	2201      	movs	r2, #1
 8000708:	601a      	str	r2, [r3, #0]
			setTimer(0, timeGreen*100);
 800070a:	4b94      	ldr	r3, [pc, #592]	; (800095c <normalState+0x4e8>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	2264      	movs	r2, #100	; 0x64
 8000710:	fb02 f303 	mul.w	r3, r2, r3
 8000714:	4619      	mov	r1, r3
 8000716:	2000      	movs	r0, #0
 8000718:	f000 fbd4 	bl	8000ec4 <setTimer>
			setTimer(1, 100);
 800071c:	2164      	movs	r1, #100	; 0x64
 800071e:	2001      	movs	r0, #1
 8000720:	f000 fbd0 	bl	8000ec4 <setTimer>
			time1=timeRed;
 8000724:	4b8e      	ldr	r3, [pc, #568]	; (8000960 <normalState+0x4ec>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a8e      	ldr	r2, [pc, #568]	; (8000964 <normalState+0x4f0>)
 800072a:	6013      	str	r3, [r2, #0]
			time2=timeGreen;
 800072c:	4b8b      	ldr	r3, [pc, #556]	; (800095c <normalState+0x4e8>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a8d      	ldr	r2, [pc, #564]	; (8000968 <normalState+0x4f4>)
 8000732:	6013      	str	r3, [r2, #0]
		}

		if(IsTimerUp(1)==1) {//update time
 8000734:	2001      	movs	r0, #1
 8000736:	f000 fbb1 	bl	8000e9c <IsTimerUp>
 800073a:	4603      	mov	r3, r0
 800073c:	2b01      	cmp	r3, #1
 800073e:	d10d      	bne.n	800075c <normalState+0x2e8>
			time1--;
 8000740:	4b88      	ldr	r3, [pc, #544]	; (8000964 <normalState+0x4f0>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	3b01      	subs	r3, #1
 8000746:	4a87      	ldr	r2, [pc, #540]	; (8000964 <normalState+0x4f0>)
 8000748:	6013      	str	r3, [r2, #0]
			time2--;
 800074a:	4b87      	ldr	r3, [pc, #540]	; (8000968 <normalState+0x4f4>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	3b01      	subs	r3, #1
 8000750:	4a85      	ldr	r2, [pc, #532]	; (8000968 <normalState+0x4f4>)
 8000752:	6013      	str	r3, [r2, #0]
			setTimer(1, 100);
 8000754:	2164      	movs	r1, #100	; 0x64
 8000756:	2001      	movs	r0, #1
 8000758:	f000 fbb4 	bl	8000ec4 <setTimer>
		}

		if(is_button_pressed(1)) {
 800075c:	2001      	movs	r0, #1
 800075e:	f7ff fd89 	bl	8000274 <is_button_pressed>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	f000 80ee 	beq.w	8000946 <normalState+0x4d2>
			status=ManRed;
 800076a:	4b7b      	ldr	r3, [pc, #492]	; (8000958 <normalState+0x4e4>)
 800076c:	220a      	movs	r2, #10
 800076e:	601a      	str	r2, [r3, #0]
			time1=timeRed;
 8000770:	4b7b      	ldr	r3, [pc, #492]	; (8000960 <normalState+0x4ec>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a7b      	ldr	r2, [pc, #492]	; (8000964 <normalState+0x4f0>)
 8000776:	6013      	str	r3, [r2, #0]
			time2=2;
 8000778:	4b7b      	ldr	r3, [pc, #492]	; (8000968 <normalState+0x4f4>)
 800077a:	2202      	movs	r2, #2
 800077c:	601a      	str	r2, [r3, #0]
			clearAllLed1();
 800077e:	f7ff fd9b 	bl	80002b8 <clearAllLed1>
			clearAllLed2();
 8000782:	f7ff fdad 	bl	80002e0 <clearAllLed2>
			setTimer(2, 25);
 8000786:	2119      	movs	r1, #25
 8000788:	2002      	movs	r0, #2
 800078a:	f000 fb9b 	bl	8000ec4 <setTimer>
		}
		break;
 800078e:	e0da      	b.n	8000946 <normalState+0x4d2>
	case ManRed:
		if(IsTimerUp(2)==1) {
 8000790:	2002      	movs	r0, #2
 8000792:	f000 fb83 	bl	8000e9c <IsTimerUp>
 8000796:	4603      	mov	r3, r0
 8000798:	2b01      	cmp	r3, #1
 800079a:	d105      	bne.n	80007a8 <normalState+0x334>
			setTimer(2, 25);
 800079c:	2119      	movs	r1, #25
 800079e:	2002      	movs	r0, #2
 80007a0:	f000 fb90 	bl	8000ec4 <setTimer>
			toggleRed();
 80007a4:	f7ff fe18 	bl	80003d8 <toggleRed>
		}
		if(is_button_pressed(2)) {
 80007a8:	2002      	movs	r0, #2
 80007aa:	f7ff fd63 	bl	8000274 <is_button_pressed>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <normalState+0x344>
			increase();
 80007b4:	f7ff fe4a 	bl	800044c <increase>
		}
		if(is_button_pressed(3)) {
 80007b8:	2003      	movs	r0, #3
 80007ba:	f7ff fd5b 	bl	8000274 <is_button_pressed>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d00a      	beq.n	80007da <normalState+0x366>
			timeRed=time1;
 80007c4:	4b67      	ldr	r3, [pc, #412]	; (8000964 <normalState+0x4f0>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a65      	ldr	r2, [pc, #404]	; (8000960 <normalState+0x4ec>)
 80007ca:	6013      	str	r3, [r2, #0]
			timeGreen=timeRed-timeYellow;
 80007cc:	4b64      	ldr	r3, [pc, #400]	; (8000960 <normalState+0x4ec>)
 80007ce:	681a      	ldr	r2, [r3, #0]
 80007d0:	4b66      	ldr	r3, [pc, #408]	; (800096c <normalState+0x4f8>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	1ad3      	subs	r3, r2, r3
 80007d6:	4a61      	ldr	r2, [pc, #388]	; (800095c <normalState+0x4e8>)
 80007d8:	6013      	str	r3, [r2, #0]

		}
		if(is_button_pressed(1)) {
 80007da:	2001      	movs	r0, #1
 80007dc:	f7ff fd4a 	bl	8000274 <is_button_pressed>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	f000 80b1 	beq.w	800094a <normalState+0x4d6>
			status=ManAm;
 80007e8:	4b5b      	ldr	r3, [pc, #364]	; (8000958 <normalState+0x4e4>)
 80007ea:	220b      	movs	r2, #11
 80007ec:	601a      	str	r2, [r3, #0]
			time1=timeYellow;
 80007ee:	4b5f      	ldr	r3, [pc, #380]	; (800096c <normalState+0x4f8>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4a5c      	ldr	r2, [pc, #368]	; (8000964 <normalState+0x4f0>)
 80007f4:	6013      	str	r3, [r2, #0]
			time2=3;
 80007f6:	4b5c      	ldr	r3, [pc, #368]	; (8000968 <normalState+0x4f4>)
 80007f8:	2203      	movs	r2, #3
 80007fa:	601a      	str	r2, [r3, #0]
			clearAllLed1();
 80007fc:	f7ff fd5c 	bl	80002b8 <clearAllLed1>
			clearAllLed2();
 8000800:	f7ff fd6e 	bl	80002e0 <clearAllLed2>
			setTimer(2, 25);
 8000804:	2119      	movs	r1, #25
 8000806:	2002      	movs	r0, #2
 8000808:	f000 fb5c 	bl	8000ec4 <setTimer>
		}
		break;
 800080c:	e09d      	b.n	800094a <normalState+0x4d6>
	case ManAm:
		if(IsTimerUp(2)==1) {
 800080e:	2002      	movs	r0, #2
 8000810:	f000 fb44 	bl	8000e9c <IsTimerUp>
 8000814:	4603      	mov	r3, r0
 8000816:	2b01      	cmp	r3, #1
 8000818:	d105      	bne.n	8000826 <normalState+0x3b2>
			setTimer(2, 25);
 800081a:	2119      	movs	r1, #25
 800081c:	2002      	movs	r0, #2
 800081e:	f000 fb51 	bl	8000ec4 <setTimer>
			toggleYellow();
 8000822:	f7ff fdeb 	bl	80003fc <toggleYellow>
		}
		if(is_button_pressed(2)) {
 8000826:	2002      	movs	r0, #2
 8000828:	f7ff fd24 	bl	8000274 <is_button_pressed>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <normalState+0x3c2>
			increase();
 8000832:	f7ff fe0b 	bl	800044c <increase>
		}
		if(is_button_pressed(3)) {
 8000836:	2003      	movs	r0, #3
 8000838:	f7ff fd1c 	bl	8000274 <is_button_pressed>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d013      	beq.n	800086a <normalState+0x3f6>
			timeYellow=time1;
 8000842:	4b48      	ldr	r3, [pc, #288]	; (8000964 <normalState+0x4f0>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4a49      	ldr	r2, [pc, #292]	; (800096c <normalState+0x4f8>)
 8000848:	6013      	str	r3, [r2, #0]
			if(timeYellow >=timeRed) {
 800084a:	4b48      	ldr	r3, [pc, #288]	; (800096c <normalState+0x4f8>)
 800084c:	681a      	ldr	r2, [r3, #0]
 800084e:	4b44      	ldr	r3, [pc, #272]	; (8000960 <normalState+0x4ec>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	429a      	cmp	r2, r3
 8000854:	db02      	blt.n	800085c <normalState+0x3e8>
				timeRed=60;
 8000856:	4b42      	ldr	r3, [pc, #264]	; (8000960 <normalState+0x4ec>)
 8000858:	223c      	movs	r2, #60	; 0x3c
 800085a:	601a      	str	r2, [r3, #0]
			}
			timeGreen=timeRed-timeYellow;
 800085c:	4b40      	ldr	r3, [pc, #256]	; (8000960 <normalState+0x4ec>)
 800085e:	681a      	ldr	r2, [r3, #0]
 8000860:	4b42      	ldr	r3, [pc, #264]	; (800096c <normalState+0x4f8>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	1ad3      	subs	r3, r2, r3
 8000866:	4a3d      	ldr	r2, [pc, #244]	; (800095c <normalState+0x4e8>)
 8000868:	6013      	str	r3, [r2, #0]
		}
		if(is_button_pressed(1)) {
 800086a:	2001      	movs	r0, #1
 800086c:	f7ff fd02 	bl	8000274 <is_button_pressed>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d06b      	beq.n	800094e <normalState+0x4da>
			status=ManGreen;
 8000876:	4b38      	ldr	r3, [pc, #224]	; (8000958 <normalState+0x4e4>)
 8000878:	220c      	movs	r2, #12
 800087a:	601a      	str	r2, [r3, #0]
			time1=timeGreen;
 800087c:	4b37      	ldr	r3, [pc, #220]	; (800095c <normalState+0x4e8>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a38      	ldr	r2, [pc, #224]	; (8000964 <normalState+0x4f0>)
 8000882:	6013      	str	r3, [r2, #0]
			time2=4;
 8000884:	4b38      	ldr	r3, [pc, #224]	; (8000968 <normalState+0x4f4>)
 8000886:	2204      	movs	r2, #4
 8000888:	601a      	str	r2, [r3, #0]
			clearAllLed1();
 800088a:	f7ff fd15 	bl	80002b8 <clearAllLed1>
			clearAllLed2();
 800088e:	f7ff fd27 	bl	80002e0 <clearAllLed2>
			setTimer(2, 25);
 8000892:	2119      	movs	r1, #25
 8000894:	2002      	movs	r0, #2
 8000896:	f000 fb15 	bl	8000ec4 <setTimer>
		}
		break;
 800089a:	e058      	b.n	800094e <normalState+0x4da>
	case ManGreen:
		if(IsTimerUp(2)==1) {
 800089c:	2002      	movs	r0, #2
 800089e:	f000 fafd 	bl	8000e9c <IsTimerUp>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	d105      	bne.n	80008b4 <normalState+0x440>
			setTimer(2, 25);
 80008a8:	2119      	movs	r1, #25
 80008aa:	2002      	movs	r0, #2
 80008ac:	f000 fb0a 	bl	8000ec4 <setTimer>
			toggleGreen();
 80008b0:	f7ff fdbe 	bl	8000430 <toggleGreen>
		}
		if(is_button_pressed(2)) {
 80008b4:	2002      	movs	r0, #2
 80008b6:	f7ff fcdd 	bl	8000274 <is_button_pressed>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <normalState+0x450>
			increase();
 80008c0:	f7ff fdc4 	bl	800044c <increase>
		}
		if(is_button_pressed(3)) {
 80008c4:	2003      	movs	r0, #3
 80008c6:	f7ff fcd5 	bl	8000274 <is_button_pressed>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d013      	beq.n	80008f8 <normalState+0x484>
			timeGreen=time1;
 80008d0:	4b24      	ldr	r3, [pc, #144]	; (8000964 <normalState+0x4f0>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a21      	ldr	r2, [pc, #132]	; (800095c <normalState+0x4e8>)
 80008d6:	6013      	str	r3, [r2, #0]
			if(timeGreen >=timeRed) {
 80008d8:	4b20      	ldr	r3, [pc, #128]	; (800095c <normalState+0x4e8>)
 80008da:	681a      	ldr	r2, [r3, #0]
 80008dc:	4b20      	ldr	r3, [pc, #128]	; (8000960 <normalState+0x4ec>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	429a      	cmp	r2, r3
 80008e2:	db02      	blt.n	80008ea <normalState+0x476>
				timeRed=60;
 80008e4:	4b1e      	ldr	r3, [pc, #120]	; (8000960 <normalState+0x4ec>)
 80008e6:	223c      	movs	r2, #60	; 0x3c
 80008e8:	601a      	str	r2, [r3, #0]
			}
			timeYellow=timeRed-timeGreen;
 80008ea:	4b1d      	ldr	r3, [pc, #116]	; (8000960 <normalState+0x4ec>)
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	4b1b      	ldr	r3, [pc, #108]	; (800095c <normalState+0x4e8>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	1ad3      	subs	r3, r2, r3
 80008f4:	4a1d      	ldr	r2, [pc, #116]	; (800096c <normalState+0x4f8>)
 80008f6:	6013      	str	r3, [r2, #0]
		}
		if(is_button_pressed(1)) {
 80008f8:	2001      	movs	r0, #1
 80008fa:	f7ff fcbb 	bl	8000274 <is_button_pressed>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d026      	beq.n	8000952 <normalState+0x4de>
			status=RedGreen;
 8000904:	4b14      	ldr	r3, [pc, #80]	; (8000958 <normalState+0x4e4>)
 8000906:	2201      	movs	r2, #1
 8000908:	601a      	str	r2, [r3, #0]
			setTimer(0, timeGreen*100);
 800090a:	4b14      	ldr	r3, [pc, #80]	; (800095c <normalState+0x4e8>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	2264      	movs	r2, #100	; 0x64
 8000910:	fb02 f303 	mul.w	r3, r2, r3
 8000914:	4619      	mov	r1, r3
 8000916:	2000      	movs	r0, #0
 8000918:	f000 fad4 	bl	8000ec4 <setTimer>
			setTimer(1, 100);
 800091c:	2164      	movs	r1, #100	; 0x64
 800091e:	2001      	movs	r0, #1
 8000920:	f000 fad0 	bl	8000ec4 <setTimer>
			time1=timeRed;
 8000924:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <normalState+0x4ec>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a0e      	ldr	r2, [pc, #56]	; (8000964 <normalState+0x4f0>)
 800092a:	6013      	str	r3, [r2, #0]
			time2=timeGreen;
 800092c:	4b0b      	ldr	r3, [pc, #44]	; (800095c <normalState+0x4e8>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a0d      	ldr	r2, [pc, #52]	; (8000968 <normalState+0x4f4>)
 8000932:	6013      	str	r3, [r2, #0]
		}
		break;
 8000934:	e00d      	b.n	8000952 <normalState+0x4de>
	default:
		break;
 8000936:	bf00      	nop
 8000938:	e00c      	b.n	8000954 <normalState+0x4e0>
		break;
 800093a:	bf00      	nop
 800093c:	e00a      	b.n	8000954 <normalState+0x4e0>
		break;
 800093e:	bf00      	nop
 8000940:	e008      	b.n	8000954 <normalState+0x4e0>
		break;
 8000942:	bf00      	nop
 8000944:	e006      	b.n	8000954 <normalState+0x4e0>
		break;
 8000946:	bf00      	nop
 8000948:	e004      	b.n	8000954 <normalState+0x4e0>
		break;
 800094a:	bf00      	nop
 800094c:	e002      	b.n	8000954 <normalState+0x4e0>
		break;
 800094e:	bf00      	nop
 8000950:	e000      	b.n	8000954 <normalState+0x4e0>
		break;
 8000952:	bf00      	nop
	}
}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}
 8000958:	200000e8 	.word	0x200000e8
 800095c:	2000002c 	.word	0x2000002c
 8000960:	20000024 	.word	0x20000024
 8000964:	200000ec 	.word	0x200000ec
 8000968:	200000f0 	.word	0x200000f0
 800096c:	20000028 	.word	0x20000028

08000970 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
	timerRun();
 8000978:	f000 fabc 	bl	8000ef4 <timerRun>
	SCH_Update();
 800097c:	f000 fa4a 	bl	8000e14 <SCH_Update>
	button_reading();
 8000980:	f7ff fbe4 	bl	800014c <button_reading>
}
 8000984:	bf00      	nop
 8000986:	3708      	adds	r7, #8
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}

0800098c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000990:	f000 fc22 	bl	80011d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000994:	f000 f81c 	bl	80009d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000998:	f000 f91e 	bl	8000bd8 <MX_GPIO_Init>
  MX_TIM3_Init();
 800099c:	f000 f8a6 	bl	8000aec <MX_TIM3_Init>
  MX_TIM2_Init();
 80009a0:	f000 f858 	bl	8000a54 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
 HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80009a4:	2100      	movs	r1, #0
 80009a6:	4807      	ldr	r0, [pc, #28]	; (80009c4 <main+0x38>)
 80009a8:	f001 fc28 	bl	80021fc <HAL_TIM_PWM_Start>
 HAL_TIM_Base_Start_IT(&htim2);
 80009ac:	4806      	ldr	r0, [pc, #24]	; (80009c8 <main+0x3c>)
 80009ae:	f001 fb7b 	bl	80020a8 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  uint8_t value=0;
 	 //htim3.Instance->CCR1=2048;
// SCH_Add_Task(timerRun, 0, 1);
 SCH_Add_Task(normalState, 1, 1);
 80009b2:	2201      	movs	r2, #1
 80009b4:	2101      	movs	r1, #1
 80009b6:	4805      	ldr	r0, [pc, #20]	; (80009cc <main+0x40>)
 80009b8:	f000 fa0e 	bl	8000dd8 <SCH_Add_Task>
  while (1)
  {
    /* USER CODE END WHILE */
	  SCH_Dispatch_Tasks();
 80009bc:	f000 fa46 	bl	8000e4c <SCH_Dispatch_Tasks>
 80009c0:	e7fc      	b.n	80009bc <main+0x30>
 80009c2:	bf00      	nop
 80009c4:	20000104 	.word	0x20000104
 80009c8:	2000014c 	.word	0x2000014c
 80009cc:	08000475 	.word	0x08000475

080009d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b090      	sub	sp, #64	; 0x40
 80009d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009d6:	f107 0318 	add.w	r3, r7, #24
 80009da:	2228      	movs	r2, #40	; 0x28
 80009dc:	2100      	movs	r1, #0
 80009de:	4618      	mov	r0, r3
 80009e0:	f002 fab2 	bl	8002f48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e4:	1d3b      	adds	r3, r7, #4
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
 80009ec:	609a      	str	r2, [r3, #8]
 80009ee:	60da      	str	r2, [r3, #12]
 80009f0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009f2:	2302      	movs	r3, #2
 80009f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009f6:	2301      	movs	r3, #1
 80009f8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009fa:	2310      	movs	r3, #16
 80009fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009fe:	2302      	movs	r3, #2
 8000a00:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000a02:	2300      	movs	r3, #0
 8000a04:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000a06:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a0c:	f107 0318 	add.w	r3, r7, #24
 8000a10:	4618      	mov	r0, r3
 8000a12:	f000 ff1d 	bl	8001850 <HAL_RCC_OscConfig>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000a1c:	f000 f94a 	bl	8000cb4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a20:	230f      	movs	r3, #15
 8000a22:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a24:	2302      	movs	r3, #2
 8000a26:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a32:	2300      	movs	r3, #0
 8000a34:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	2102      	movs	r1, #2
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f001 f988 	bl	8001d50 <HAL_RCC_ClockConfig>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000a46:	f000 f935 	bl	8000cb4 <Error_Handler>
  }
}
 8000a4a:	bf00      	nop
 8000a4c:	3740      	adds	r7, #64	; 0x40
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
	...

08000a54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b086      	sub	sp, #24
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a5a:	f107 0308 	add.w	r3, r7, #8
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]
 8000a64:	609a      	str	r2, [r3, #8]
 8000a66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a68:	463b      	mov	r3, r7
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a70:	4b1d      	ldr	r3, [pc, #116]	; (8000ae8 <MX_TIM2_Init+0x94>)
 8000a72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6399;
 8000a78:	4b1b      	ldr	r3, [pc, #108]	; (8000ae8 <MX_TIM2_Init+0x94>)
 8000a7a:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8000a7e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a80:	4b19      	ldr	r3, [pc, #100]	; (8000ae8 <MX_TIM2_Init+0x94>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000a86:	4b18      	ldr	r3, [pc, #96]	; (8000ae8 <MX_TIM2_Init+0x94>)
 8000a88:	2263      	movs	r2, #99	; 0x63
 8000a8a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a8c:	4b16      	ldr	r3, [pc, #88]	; (8000ae8 <MX_TIM2_Init+0x94>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a92:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <MX_TIM2_Init+0x94>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a98:	4813      	ldr	r0, [pc, #76]	; (8000ae8 <MX_TIM2_Init+0x94>)
 8000a9a:	f001 fab5 	bl	8002008 <HAL_TIM_Base_Init>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000aa4:	f000 f906 	bl	8000cb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000aae:	f107 0308 	add.w	r3, r7, #8
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	480c      	ldr	r0, [pc, #48]	; (8000ae8 <MX_TIM2_Init+0x94>)
 8000ab6:	f001 fe0d 	bl	80026d4 <HAL_TIM_ConfigClockSource>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ac0:	f000 f8f8 	bl	8000cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000acc:	463b      	mov	r3, r7
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <MX_TIM2_Init+0x94>)
 8000ad2:	f002 f98f 	bl	8002df4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000adc:	f000 f8ea 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ae0:	bf00      	nop
 8000ae2:	3718      	adds	r7, #24
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	2000014c 	.word	0x2000014c

08000aec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08e      	sub	sp, #56	; 0x38
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000af2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	609a      	str	r2, [r3, #8]
 8000afe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b00:	f107 0320 	add.w	r3, r7, #32
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b0a:	1d3b      	adds	r3, r7, #4
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
 8000b18:	615a      	str	r2, [r3, #20]
 8000b1a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b1c:	4b2c      	ldr	r3, [pc, #176]	; (8000bd0 <MX_TIM3_Init+0xe4>)
 8000b1e:	4a2d      	ldr	r2, [pc, #180]	; (8000bd4 <MX_TIM3_Init+0xe8>)
 8000b20:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000b22:	4b2b      	ldr	r3, [pc, #172]	; (8000bd0 <MX_TIM3_Init+0xe4>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b28:	4b29      	ldr	r3, [pc, #164]	; (8000bd0 <MX_TIM3_Init+0xe4>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000b2e:	4b28      	ldr	r3, [pc, #160]	; (8000bd0 <MX_TIM3_Init+0xe4>)
 8000b30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b34:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b36:	4b26      	ldr	r3, [pc, #152]	; (8000bd0 <MX_TIM3_Init+0xe4>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b3c:	4b24      	ldr	r3, [pc, #144]	; (8000bd0 <MX_TIM3_Init+0xe4>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b42:	4823      	ldr	r0, [pc, #140]	; (8000bd0 <MX_TIM3_Init+0xe4>)
 8000b44:	f001 fa60 	bl	8002008 <HAL_TIM_Base_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000b4e:	f000 f8b1 	bl	8000cb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b56:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b58:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	481c      	ldr	r0, [pc, #112]	; (8000bd0 <MX_TIM3_Init+0xe4>)
 8000b60:	f001 fdb8 	bl	80026d4 <HAL_TIM_ConfigClockSource>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000b6a:	f000 f8a3 	bl	8000cb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b6e:	4818      	ldr	r0, [pc, #96]	; (8000bd0 <MX_TIM3_Init+0xe4>)
 8000b70:	f001 faec 	bl	800214c <HAL_TIM_PWM_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000b7a:	f000 f89b 	bl	8000cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b82:	2300      	movs	r3, #0
 8000b84:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b86:	f107 0320 	add.w	r3, r7, #32
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4810      	ldr	r0, [pc, #64]	; (8000bd0 <MX_TIM3_Init+0xe4>)
 8000b8e:	f002 f931 	bl	8002df4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000b98:	f000 f88c 	bl	8000cb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b9c:	2360      	movs	r3, #96	; 0x60
 8000b9e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bac:	1d3b      	adds	r3, r7, #4
 8000bae:	2200      	movs	r2, #0
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4807      	ldr	r0, [pc, #28]	; (8000bd0 <MX_TIM3_Init+0xe4>)
 8000bb4:	f001 fccc 	bl	8002550 <HAL_TIM_PWM_ConfigChannel>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000bbe:	f000 f879 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000bc2:	4803      	ldr	r0, [pc, #12]	; (8000bd0 <MX_TIM3_Init+0xe4>)
 8000bc4:	f000 fa38 	bl	8001038 <HAL_TIM_MspPostInit>

}
 8000bc8:	bf00      	nop
 8000bca:	3738      	adds	r7, #56	; 0x38
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20000104 	.word	0x20000104
 8000bd4:	40000400 	.word	0x40000400

08000bd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bde:	f107 0308 	add.w	r3, r7, #8
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
 8000bea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bec:	4b2e      	ldr	r3, [pc, #184]	; (8000ca8 <MX_GPIO_Init+0xd0>)
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	4a2d      	ldr	r2, [pc, #180]	; (8000ca8 <MX_GPIO_Init+0xd0>)
 8000bf2:	f043 0304 	orr.w	r3, r3, #4
 8000bf6:	6193      	str	r3, [r2, #24]
 8000bf8:	4b2b      	ldr	r3, [pc, #172]	; (8000ca8 <MX_GPIO_Init+0xd0>)
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	f003 0304 	and.w	r3, r3, #4
 8000c00:	607b      	str	r3, [r7, #4]
 8000c02:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c04:	4b28      	ldr	r3, [pc, #160]	; (8000ca8 <MX_GPIO_Init+0xd0>)
 8000c06:	699b      	ldr	r3, [r3, #24]
 8000c08:	4a27      	ldr	r2, [pc, #156]	; (8000ca8 <MX_GPIO_Init+0xd0>)
 8000c0a:	f043 0308 	orr.w	r3, r3, #8
 8000c0e:	6193      	str	r3, [r2, #24]
 8000c10:	4b25      	ldr	r3, [pc, #148]	; (8000ca8 <MX_GPIO_Init+0xd0>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	f003 0308 	and.w	r3, r3, #8
 8000c18:	603b      	str	r3, [r7, #0]
 8000c1a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f44f 6186 	mov.w	r1, #1072	; 0x430
 8000c22:	4822      	ldr	r0, [pc, #136]	; (8000cac <MX_GPIO_Init+0xd4>)
 8000c24:	f000 fde3 	bl	80017ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_Pin|D2_Pin, GPIO_PIN_RESET);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000c2e:	4820      	ldr	r0, [pc, #128]	; (8000cb0 <MX_GPIO_Init+0xd8>)
 8000c30:	f000 fddd 	bl	80017ee <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin;
 8000c34:	2313      	movs	r3, #19
 8000c36:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c40:	f107 0308 	add.w	r3, r7, #8
 8000c44:	4619      	mov	r1, r3
 8000c46:	481a      	ldr	r0, [pc, #104]	; (8000cb0 <MX_GPIO_Init+0xd8>)
 8000c48:	f000 fc36 	bl	80014b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : A3_Pin D3_Pin */
  GPIO_InitStruct.Pin = A3_Pin|D3_Pin;
 8000c4c:	2309      	movs	r3, #9
 8000c4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c50:	2300      	movs	r3, #0
 8000c52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c58:	f107 0308 	add.w	r3, r7, #8
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4813      	ldr	r0, [pc, #76]	; (8000cac <MX_GPIO_Init+0xd4>)
 8000c60:	f000 fc2a 	bl	80014b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D5_Pin|D4_Pin;
 8000c64:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8000c68:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c72:	2302      	movs	r3, #2
 8000c74:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c76:	f107 0308 	add.w	r3, r7, #8
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	480b      	ldr	r0, [pc, #44]	; (8000cac <MX_GPIO_Init+0xd4>)
 8000c7e:	f000 fc1b 	bl	80014b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D2_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D2_Pin;
 8000c82:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000c86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c90:	2302      	movs	r3, #2
 8000c92:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c94:	f107 0308 	add.w	r3, r7, #8
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4805      	ldr	r0, [pc, #20]	; (8000cb0 <MX_GPIO_Init+0xd8>)
 8000c9c:	f000 fc0c 	bl	80014b8 <HAL_GPIO_Init>

}
 8000ca0:	bf00      	nop
 8000ca2:	3718      	adds	r7, #24
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40021000 	.word	0x40021000
 8000cac:	40010c00 	.word	0x40010c00
 8000cb0:	40010800 	.word	0x40010800

08000cb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb8:	b672      	cpsid	i
}
 8000cba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cbc:	e7fe      	b.n	8000cbc <Error_Handler+0x8>
	...

08000cc0 <addNode>:

void SCH_Init(void) {
	head=NULL;
}

void addNode(sTask newTask) {
 8000cc0:	b590      	push	{r4, r7, lr}
 8000cc2:	b087      	sub	sp, #28
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	463c      	mov	r4, r7
 8000cc8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
 8000ccc:	2014      	movs	r0, #20
 8000cce:	f002 f92b 	bl	8002f28 <malloc>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	613b      	str	r3, [r7, #16]
	newNode->data.pTask = newTask.pTask;
 8000cd6:	683a      	ldr	r2, [r7, #0]
 8000cd8:	693b      	ldr	r3, [r7, #16]
 8000cda:	601a      	str	r2, [r3, #0]
	newNode->data.Delay = newTask.Delay;
 8000cdc:	687a      	ldr	r2, [r7, #4]
 8000cde:	693b      	ldr	r3, [r7, #16]
 8000ce0:	605a      	str	r2, [r3, #4]
	newNode->data.Period = newTask.Period;
 8000ce2:	68ba      	ldr	r2, [r7, #8]
 8000ce4:	693b      	ldr	r3, [r7, #16]
 8000ce6:	609a      	str	r2, [r3, #8]
	newNode->data.RunMe = newTask.RunMe;
 8000ce8:	7b3a      	ldrb	r2, [r7, #12]
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	731a      	strb	r2, [r3, #12]
	newNode->next = NULL;
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	611a      	str	r2, [r3, #16]
	//list is empty just addNode
	if(head == NULL) {
 8000cf4:	4b2b      	ldr	r3, [pc, #172]	; (8000da4 <addNode+0xe4>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d103      	bne.n	8000d04 <addNode+0x44>
		head=newNode;
 8000cfc:	4a29      	ldr	r2, [pc, #164]	; (8000da4 <addNode+0xe4>)
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	6013      	str	r3, [r2, #0]
		return;
 8000d02:	e04c      	b.n	8000d9e <addNode+0xde>
	}
	struct Node* tmp=head;
 8000d04:	4b27      	ldr	r3, [pc, #156]	; (8000da4 <addNode+0xe4>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	617b      	str	r3, [r7, #20]
	//if the list has A5 B3 C2  we add D3 -> D3 A2 B3 C2
	if(newNode->data.Delay < tmp->data.Delay ) {
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	685a      	ldr	r2, [r3, #4]
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d21e      	bcs.n	8000d54 <addNode+0x94>
		tmp->data.Delay-= newNode->data.Delay;
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	685a      	ldr	r2, [r3, #4]
 8000d1a:	693b      	ldr	r3, [r7, #16]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	1ad2      	subs	r2, r2, r3
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	605a      	str	r2, [r3, #4]
		newNode->next=tmp;
 8000d24:	693b      	ldr	r3, [r7, #16]
 8000d26:	697a      	ldr	r2, [r7, #20]
 8000d28:	611a      	str	r2, [r3, #16]
		head=newNode;
 8000d2a:	4a1e      	ldr	r2, [pc, #120]	; (8000da4 <addNode+0xe4>)
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	6013      	str	r3, [r2, #0]
		return;
 8000d30:	e035      	b.n	8000d9e <addNode+0xde>
	}

	// if the list has A5 B3 C2 we add D9 -> A5 B3 D1 C1
	while(tmp->next !=NULL) {
		newNode->data.Delay -= tmp->data.Delay;
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	685a      	ldr	r2, [r3, #4]
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	1ad2      	subs	r2, r2, r3
 8000d3c:	693b      	ldr	r3, [r7, #16]
 8000d3e:	605a      	str	r2, [r3, #4]
		if(newNode->data.Delay <= tmp->next->data.Delay) {
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	685a      	ldr	r2, [r3, #4]
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	691b      	ldr	r3, [r3, #16]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	429a      	cmp	r2, r3
 8000d4c:	d907      	bls.n	8000d5e <addNode+0x9e>
			break;
		}
		tmp=tmp->next;
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	691b      	ldr	r3, [r3, #16]
 8000d52:	617b      	str	r3, [r7, #20]
	while(tmp->next !=NULL) {
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	691b      	ldr	r3, [r3, #16]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d1ea      	bne.n	8000d32 <addNode+0x72>
 8000d5c:	e000      	b.n	8000d60 <addNode+0xa0>
			break;
 8000d5e:	bf00      	nop
	}
	// tmp dang o B3 va D tro thanh D1
	if(tmp->next ==NULL) {
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	691b      	ldr	r3, [r3, #16]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d10a      	bne.n	8000d7e <addNode+0xbe>
		newNode->data.Delay-=tmp->data.Delay;
 8000d68:	693b      	ldr	r3, [r7, #16]
 8000d6a:	685a      	ldr	r2, [r3, #4]
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	1ad2      	subs	r2, r2, r3
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	605a      	str	r2, [r3, #4]
		tmp->next=newNode;
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	693a      	ldr	r2, [r7, #16]
 8000d7a:	611a      	str	r2, [r3, #16]
 8000d7c:	e00f      	b.n	8000d9e <addNode+0xde>
	}
	else {
		tmp->next->data.Delay-= newNode->data.Delay; // chuyen C2 thanh C1
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	691b      	ldr	r3, [r3, #16]
 8000d82:	6859      	ldr	r1, [r3, #4]
 8000d84:	693b      	ldr	r3, [r7, #16]
 8000d86:	685a      	ldr	r2, [r3, #4]
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	691b      	ldr	r3, [r3, #16]
 8000d8c:	1a8a      	subs	r2, r1, r2
 8000d8e:	605a      	str	r2, [r3, #4]
		newNode->next=tmp->next;
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	691a      	ldr	r2, [r3, #16]
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	611a      	str	r2, [r3, #16]
		tmp->next=newNode;
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	611a      	str	r2, [r3, #16]
	}
}
 8000d9e:	371c      	adds	r7, #28
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd90      	pop	{r4, r7, pc}
 8000da4:	200000f4 	.word	0x200000f4

08000da8 <deleteBegin>:

void deleteBegin() {
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
	struct Node* tmp=head;
 8000dae:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <deleteBegin+0x2c>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	607b      	str	r3, [r7, #4]
	if(tmp==NULL) return;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d008      	beq.n	8000dcc <deleteBegin+0x24>
	head=head->next;
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <deleteBegin+0x2c>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	691b      	ldr	r3, [r3, #16]
 8000dc0:	4a04      	ldr	r2, [pc, #16]	; (8000dd4 <deleteBegin+0x2c>)
 8000dc2:	6013      	str	r3, [r2, #0]
	free(tmp);
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f002 f8b7 	bl	8002f38 <free>
 8000dca:	e000      	b.n	8000dce <deleteBegin+0x26>
	if(tmp==NULL) return;
 8000dcc:	bf00      	nop
}
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	200000f4 	.word	0x200000f4

08000dd8 <SCH_Add_Task>:

void SCH_Add_Task(void (*p_function)(), uint32_t DELAY, uint32_t PERIOD){
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b088      	sub	sp, #32
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
	sTask newTask;
	newTask.pTask=p_function;
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	613b      	str	r3, [r7, #16]
	newTask.Delay=DELAY;
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	617b      	str	r3, [r7, #20]
	newTask.Period=PERIOD;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	61bb      	str	r3, [r7, #24]
	if(newTask.Delay==0) {
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d102      	bne.n	8000dfc <SCH_Add_Task+0x24>
		newTask.RunMe=1;
 8000df6:	2301      	movs	r3, #1
 8000df8:	773b      	strb	r3, [r7, #28]
 8000dfa:	e001      	b.n	8000e00 <SCH_Add_Task+0x28>
	}
	else {
		newTask.RunMe=0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	773b      	strb	r3, [r7, #28]
	}
	addNode(newTask);
 8000e00:	f107 0310 	add.w	r3, r7, #16
 8000e04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e06:	f7ff ff5b 	bl	8000cc0 <addNode>
}
 8000e0a:	bf00      	nop
 8000e0c:	3720      	adds	r7, #32
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
	...

08000e14 <SCH_Update>:

void SCH_Update(void) {
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
	if(head==NULL) return;
 8000e18:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <SCH_Update+0x34>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d00f      	beq.n	8000e40 <SCH_Update+0x2c>
	if(head->data.Delay <=0) {
 8000e20:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <SCH_Update+0x34>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d104      	bne.n	8000e34 <SCH_Update+0x20>
		head->data.RunMe=1;
 8000e2a:	4b07      	ldr	r3, [pc, #28]	; (8000e48 <SCH_Update+0x34>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	2201      	movs	r2, #1
 8000e30:	731a      	strb	r2, [r3, #12]
 8000e32:	e006      	b.n	8000e42 <SCH_Update+0x2e>
	}
	else {
		head->data.Delay--;
 8000e34:	4b04      	ldr	r3, [pc, #16]	; (8000e48 <SCH_Update+0x34>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	685a      	ldr	r2, [r3, #4]
 8000e3a:	3a01      	subs	r2, #1
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	e000      	b.n	8000e42 <SCH_Update+0x2e>
	if(head==NULL) return;
 8000e40:	bf00      	nop
	}
}
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bc80      	pop	{r7}
 8000e46:	4770      	bx	lr
 8000e48:	200000f4 	.word	0x200000f4

08000e4c <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void) {
 8000e4c:	b590      	push	{r4, r7, lr}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
	if(head==NULL) return;
 8000e52:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <SCH_Dispatch_Tasks+0x4c>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d01a      	beq.n	8000e90 <SCH_Dispatch_Tasks+0x44>
	if(head->data.RunMe > 0) {
 8000e5a:	4b0f      	ldr	r3, [pc, #60]	; (8000e98 <SCH_Dispatch_Tasks+0x4c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	7b1b      	ldrb	r3, [r3, #12]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d016      	beq.n	8000e92 <SCH_Dispatch_Tasks+0x46>
		(*head->data.pTask)();
 8000e64:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <SCH_Dispatch_Tasks+0x4c>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4798      	blx	r3
		sTask newTask=head->data;
 8000e6c:	4b0a      	ldr	r3, [pc, #40]	; (8000e98 <SCH_Dispatch_Tasks+0x4c>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	463c      	mov	r4, r7
 8000e72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		deleteBegin();
 8000e78:	f7ff ff96 	bl	8000da8 <deleteBegin>
		if(newTask.Period !=0) {
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d007      	beq.n	8000e92 <SCH_Dispatch_Tasks+0x46>
			SCH_Add_Task(newTask.pTask, newTask.Period, newTask.Period);
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	68b9      	ldr	r1, [r7, #8]
 8000e86:	68ba      	ldr	r2, [r7, #8]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff ffa5 	bl	8000dd8 <SCH_Add_Task>
 8000e8e:	e000      	b.n	8000e92 <SCH_Dispatch_Tasks+0x46>
	if(head==NULL) return;
 8000e90:	bf00      	nop
		}
	}
}
 8000e92:	3714      	adds	r7, #20
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd90      	pop	{r4, r7, pc}
 8000e98:	200000f4 	.word	0x200000f4

08000e9c <IsTimerUp>:

int timer_counter[TIMER];
int timer_flag[TIMER];

int IsTimerUp(int timer)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
	return (timer_flag[timer] == 1);
 8000ea4:	4a06      	ldr	r2, [pc, #24]	; (8000ec0 <IsTimerUp+0x24>)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	bf0c      	ite	eq
 8000eb0:	2301      	moveq	r3, #1
 8000eb2:	2300      	movne	r3, #0
 8000eb4:	b2db      	uxtb	r3, r3
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr
 8000ec0:	200001a0 	.word	0x200001a0

08000ec4 <setTimer>:

void setTimer(int timer, int duration)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
	timer_counter[timer] = duration;
 8000ece:	4907      	ldr	r1, [pc, #28]	; (8000eec <setTimer+0x28>)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	683a      	ldr	r2, [r7, #0]
 8000ed4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[timer] = 0;
 8000ed8:	4a05      	ldr	r2, [pc, #20]	; (8000ef0 <setTimer+0x2c>)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2100      	movs	r1, #0
 8000ede:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000ee2:	bf00      	nop
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bc80      	pop	{r7}
 8000eea:	4770      	bx	lr
 8000eec:	20000194 	.word	0x20000194
 8000ef0:	200001a0 	.word	0x200001a0

08000ef4 <timerRun>:
void timerRun(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
	for (int timer = 0; timer < TIMER; timer++)
 8000efa:	2300      	movs	r3, #0
 8000efc:	607b      	str	r3, [r7, #4]
 8000efe:	e01c      	b.n	8000f3a <timerRun+0x46>
	{
		if(timer_counter[timer] > 0)
 8000f00:	4a12      	ldr	r2, [pc, #72]	; (8000f4c <timerRun+0x58>)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	dd13      	ble.n	8000f34 <timerRun+0x40>
		{
			timer_counter[timer]--;
 8000f0c:	4a0f      	ldr	r2, [pc, #60]	; (8000f4c <timerRun+0x58>)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f14:	1e5a      	subs	r2, r3, #1
 8000f16:	490d      	ldr	r1, [pc, #52]	; (8000f4c <timerRun+0x58>)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[timer] == 0)
 8000f1e:	4a0b      	ldr	r2, [pc, #44]	; (8000f4c <timerRun+0x58>)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d104      	bne.n	8000f34 <timerRun+0x40>
				timer_flag[timer] = 1;
 8000f2a:	4a09      	ldr	r2, [pc, #36]	; (8000f50 <timerRun+0x5c>)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2101      	movs	r1, #1
 8000f30:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int timer = 0; timer < TIMER; timer++)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3301      	adds	r3, #1
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2b02      	cmp	r3, #2
 8000f3e:	dddf      	ble.n	8000f00 <timerRun+0xc>
		}
	}
}
 8000f40:	bf00      	nop
 8000f42:	bf00      	nop
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bc80      	pop	{r7}
 8000f4a:	4770      	bx	lr
 8000f4c:	20000194 	.word	0x20000194
 8000f50:	200001a0 	.word	0x200001a0

08000f54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f5a:	4b15      	ldr	r3, [pc, #84]	; (8000fb0 <HAL_MspInit+0x5c>)
 8000f5c:	699b      	ldr	r3, [r3, #24]
 8000f5e:	4a14      	ldr	r2, [pc, #80]	; (8000fb0 <HAL_MspInit+0x5c>)
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	6193      	str	r3, [r2, #24]
 8000f66:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <HAL_MspInit+0x5c>)
 8000f68:	699b      	ldr	r3, [r3, #24]
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	60bb      	str	r3, [r7, #8]
 8000f70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f72:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <HAL_MspInit+0x5c>)
 8000f74:	69db      	ldr	r3, [r3, #28]
 8000f76:	4a0e      	ldr	r2, [pc, #56]	; (8000fb0 <HAL_MspInit+0x5c>)
 8000f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f7c:	61d3      	str	r3, [r2, #28]
 8000f7e:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <HAL_MspInit+0x5c>)
 8000f80:	69db      	ldr	r3, [r3, #28]
 8000f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f8a:	4b0a      	ldr	r3, [pc, #40]	; (8000fb4 <HAL_MspInit+0x60>)
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	4a04      	ldr	r2, [pc, #16]	; (8000fb4 <HAL_MspInit+0x60>)
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	3714      	adds	r7, #20
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bc80      	pop	{r7}
 8000fae:	4770      	bx	lr
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	40010000 	.word	0x40010000

08000fb8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fc8:	d114      	bne.n	8000ff4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fca:	4b19      	ldr	r3, [pc, #100]	; (8001030 <HAL_TIM_Base_MspInit+0x78>)
 8000fcc:	69db      	ldr	r3, [r3, #28]
 8000fce:	4a18      	ldr	r2, [pc, #96]	; (8001030 <HAL_TIM_Base_MspInit+0x78>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	61d3      	str	r3, [r2, #28]
 8000fd6:	4b16      	ldr	r3, [pc, #88]	; (8001030 <HAL_TIM_Base_MspInit+0x78>)
 8000fd8:	69db      	ldr	r3, [r3, #28]
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	201c      	movs	r0, #28
 8000fe8:	f000 fa2f 	bl	800144a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fec:	201c      	movs	r0, #28
 8000fee:	f000 fa48 	bl	8001482 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000ff2:	e018      	b.n	8001026 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a0e      	ldr	r2, [pc, #56]	; (8001034 <HAL_TIM_Base_MspInit+0x7c>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d113      	bne.n	8001026 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <HAL_TIM_Base_MspInit+0x78>)
 8001000:	69db      	ldr	r3, [r3, #28]
 8001002:	4a0b      	ldr	r2, [pc, #44]	; (8001030 <HAL_TIM_Base_MspInit+0x78>)
 8001004:	f043 0302 	orr.w	r3, r3, #2
 8001008:	61d3      	str	r3, [r2, #28]
 800100a:	4b09      	ldr	r3, [pc, #36]	; (8001030 <HAL_TIM_Base_MspInit+0x78>)
 800100c:	69db      	ldr	r3, [r3, #28]
 800100e:	f003 0302 	and.w	r3, r3, #2
 8001012:	60bb      	str	r3, [r7, #8]
 8001014:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001016:	2200      	movs	r2, #0
 8001018:	2100      	movs	r1, #0
 800101a:	201d      	movs	r0, #29
 800101c:	f000 fa15 	bl	800144a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001020:	201d      	movs	r0, #29
 8001022:	f000 fa2e 	bl	8001482 <HAL_NVIC_EnableIRQ>
}
 8001026:	bf00      	nop
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40021000 	.word	0x40021000
 8001034:	40000400 	.word	0x40000400

08001038 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b088      	sub	sp, #32
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001040:	f107 0310 	add.w	r3, r7, #16
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a0f      	ldr	r2, [pc, #60]	; (8001090 <HAL_TIM_MspPostInit+0x58>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d117      	bne.n	8001088 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001058:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <HAL_TIM_MspPostInit+0x5c>)
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	4a0d      	ldr	r2, [pc, #52]	; (8001094 <HAL_TIM_MspPostInit+0x5c>)
 800105e:	f043 0304 	orr.w	r3, r3, #4
 8001062:	6193      	str	r3, [r2, #24]
 8001064:	4b0b      	ldr	r3, [pc, #44]	; (8001094 <HAL_TIM_MspPostInit+0x5c>)
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	f003 0304 	and.w	r3, r3, #4
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001070:	2340      	movs	r3, #64	; 0x40
 8001072:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001074:	2302      	movs	r3, #2
 8001076:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001078:	2302      	movs	r3, #2
 800107a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107c:	f107 0310 	add.w	r3, r7, #16
 8001080:	4619      	mov	r1, r3
 8001082:	4805      	ldr	r0, [pc, #20]	; (8001098 <HAL_TIM_MspPostInit+0x60>)
 8001084:	f000 fa18 	bl	80014b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001088:	bf00      	nop
 800108a:	3720      	adds	r7, #32
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40000400 	.word	0x40000400
 8001094:	40021000 	.word	0x40021000
 8001098:	40010800 	.word	0x40010800

0800109c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010a0:	e7fe      	b.n	80010a0 <NMI_Handler+0x4>

080010a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010a2:	b480      	push	{r7}
 80010a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010a6:	e7fe      	b.n	80010a6 <HardFault_Handler+0x4>

080010a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010ac:	e7fe      	b.n	80010ac <MemManage_Handler+0x4>

080010ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ae:	b480      	push	{r7}
 80010b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010b2:	e7fe      	b.n	80010b2 <BusFault_Handler+0x4>

080010b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b8:	e7fe      	b.n	80010b8 <UsageFault_Handler+0x4>

080010ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ba:	b480      	push	{r7}
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bc80      	pop	{r7}
 80010c4:	4770      	bx	lr

080010c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010c6:	b480      	push	{r7}
 80010c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bc80      	pop	{r7}
 80010d0:	4770      	bx	lr

080010d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010d2:	b480      	push	{r7}
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	46bd      	mov	sp, r7
 80010da:	bc80      	pop	{r7}
 80010dc:	4770      	bx	lr

080010de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010e2:	f000 f8bf 	bl	8001264 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
	...

080010ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010f0:	4802      	ldr	r0, [pc, #8]	; (80010fc <TIM2_IRQHandler+0x10>)
 80010f2:	f001 f925 	bl	8002340 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	2000014c 	.word	0x2000014c

08001100 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001104:	4802      	ldr	r0, [pc, #8]	; (8001110 <TIM3_IRQHandler+0x10>)
 8001106:	f001 f91b 	bl	8002340 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000104 	.word	0x20000104

08001114 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800111c:	4a14      	ldr	r2, [pc, #80]	; (8001170 <_sbrk+0x5c>)
 800111e:	4b15      	ldr	r3, [pc, #84]	; (8001174 <_sbrk+0x60>)
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001128:	4b13      	ldr	r3, [pc, #76]	; (8001178 <_sbrk+0x64>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d102      	bne.n	8001136 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001130:	4b11      	ldr	r3, [pc, #68]	; (8001178 <_sbrk+0x64>)
 8001132:	4a12      	ldr	r2, [pc, #72]	; (800117c <_sbrk+0x68>)
 8001134:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001136:	4b10      	ldr	r3, [pc, #64]	; (8001178 <_sbrk+0x64>)
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4413      	add	r3, r2
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	429a      	cmp	r2, r3
 8001142:	d207      	bcs.n	8001154 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001144:	f001 fec6 	bl	8002ed4 <__errno>
 8001148:	4603      	mov	r3, r0
 800114a:	220c      	movs	r2, #12
 800114c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800114e:	f04f 33ff 	mov.w	r3, #4294967295
 8001152:	e009      	b.n	8001168 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001154:	4b08      	ldr	r3, [pc, #32]	; (8001178 <_sbrk+0x64>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800115a:	4b07      	ldr	r3, [pc, #28]	; (8001178 <_sbrk+0x64>)
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4413      	add	r3, r2
 8001162:	4a05      	ldr	r2, [pc, #20]	; (8001178 <_sbrk+0x64>)
 8001164:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001166:	68fb      	ldr	r3, [r7, #12]
}
 8001168:	4618      	mov	r0, r3
 800116a:	3718      	adds	r7, #24
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20005000 	.word	0x20005000
 8001174:	00000400 	.word	0x00000400
 8001178:	200000f8 	.word	0x200000f8
 800117c:	200001c0 	.word	0x200001c0

08001180 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	bc80      	pop	{r7}
 800118a:	4770      	bx	lr

0800118c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800118c:	f7ff fff8 	bl	8001180 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001190:	480b      	ldr	r0, [pc, #44]	; (80011c0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001192:	490c      	ldr	r1, [pc, #48]	; (80011c4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001194:	4a0c      	ldr	r2, [pc, #48]	; (80011c8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001196:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001198:	e002      	b.n	80011a0 <LoopCopyDataInit>

0800119a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800119a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800119c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800119e:	3304      	adds	r3, #4

080011a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011a4:	d3f9      	bcc.n	800119a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011a6:	4a09      	ldr	r2, [pc, #36]	; (80011cc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80011a8:	4c09      	ldr	r4, [pc, #36]	; (80011d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011ac:	e001      	b.n	80011b2 <LoopFillZerobss>

080011ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011b0:	3204      	adds	r2, #4

080011b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011b4:	d3fb      	bcc.n	80011ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011b6:	f001 fe93 	bl	8002ee0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011ba:	f7ff fbe7 	bl	800098c <main>
  bx lr
 80011be:	4770      	bx	lr
  ldr r0, =_sdata
 80011c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011c4:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 80011c8:	08003124 	.word	0x08003124
  ldr r2, =_sbss
 80011cc:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 80011d0:	200001c0 	.word	0x200001c0

080011d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011d4:	e7fe      	b.n	80011d4 <ADC1_2_IRQHandler>
	...

080011d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011dc:	4b08      	ldr	r3, [pc, #32]	; (8001200 <HAL_Init+0x28>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a07      	ldr	r2, [pc, #28]	; (8001200 <HAL_Init+0x28>)
 80011e2:	f043 0310 	orr.w	r3, r3, #16
 80011e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e8:	2003      	movs	r0, #3
 80011ea:	f000 f923 	bl	8001434 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ee:	200f      	movs	r0, #15
 80011f0:	f000 f808 	bl	8001204 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011f4:	f7ff feae 	bl	8000f54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40022000 	.word	0x40022000

08001204 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800120c:	4b12      	ldr	r3, [pc, #72]	; (8001258 <HAL_InitTick+0x54>)
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	4b12      	ldr	r3, [pc, #72]	; (800125c <HAL_InitTick+0x58>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	4619      	mov	r1, r3
 8001216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800121a:	fbb3 f3f1 	udiv	r3, r3, r1
 800121e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001222:	4618      	mov	r0, r3
 8001224:	f000 f93b 	bl	800149e <HAL_SYSTICK_Config>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e00e      	b.n	8001250 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2b0f      	cmp	r3, #15
 8001236:	d80a      	bhi.n	800124e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001238:	2200      	movs	r2, #0
 800123a:	6879      	ldr	r1, [r7, #4]
 800123c:	f04f 30ff 	mov.w	r0, #4294967295
 8001240:	f000 f903 	bl	800144a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001244:	4a06      	ldr	r2, [pc, #24]	; (8001260 <HAL_InitTick+0x5c>)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800124a:	2300      	movs	r3, #0
 800124c:	e000      	b.n	8001250 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
}
 8001250:	4618      	mov	r0, r3
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20000030 	.word	0x20000030
 800125c:	20000038 	.word	0x20000038
 8001260:	20000034 	.word	0x20000034

08001264 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001268:	4b05      	ldr	r3, [pc, #20]	; (8001280 <HAL_IncTick+0x1c>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	461a      	mov	r2, r3
 800126e:	4b05      	ldr	r3, [pc, #20]	; (8001284 <HAL_IncTick+0x20>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4413      	add	r3, r2
 8001274:	4a03      	ldr	r2, [pc, #12]	; (8001284 <HAL_IncTick+0x20>)
 8001276:	6013      	str	r3, [r2, #0]
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr
 8001280:	20000038 	.word	0x20000038
 8001284:	200001ac 	.word	0x200001ac

08001288 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  return uwTick;
 800128c:	4b02      	ldr	r3, [pc, #8]	; (8001298 <HAL_GetTick+0x10>)
 800128e:	681b      	ldr	r3, [r3, #0]
}
 8001290:	4618      	mov	r0, r3
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr
 8001298:	200001ac 	.word	0x200001ac

0800129c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f003 0307 	and.w	r3, r3, #7
 80012aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012ac:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <__NVIC_SetPriorityGrouping+0x44>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012b2:	68ba      	ldr	r2, [r7, #8]
 80012b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012b8:	4013      	ands	r3, r2
 80012ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ce:	4a04      	ldr	r2, [pc, #16]	; (80012e0 <__NVIC_SetPriorityGrouping+0x44>)
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	60d3      	str	r3, [r2, #12]
}
 80012d4:	bf00      	nop
 80012d6:	3714      	adds	r7, #20
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012e8:	4b04      	ldr	r3, [pc, #16]	; (80012fc <__NVIC_GetPriorityGrouping+0x18>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	0a1b      	lsrs	r3, r3, #8
 80012ee:	f003 0307 	and.w	r3, r3, #7
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bc80      	pop	{r7}
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	e000ed00 	.word	0xe000ed00

08001300 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800130a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130e:	2b00      	cmp	r3, #0
 8001310:	db0b      	blt.n	800132a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	f003 021f 	and.w	r2, r3, #31
 8001318:	4906      	ldr	r1, [pc, #24]	; (8001334 <__NVIC_EnableIRQ+0x34>)
 800131a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131e:	095b      	lsrs	r3, r3, #5
 8001320:	2001      	movs	r0, #1
 8001322:	fa00 f202 	lsl.w	r2, r0, r2
 8001326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	bc80      	pop	{r7}
 8001332:	4770      	bx	lr
 8001334:	e000e100 	.word	0xe000e100

08001338 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	6039      	str	r1, [r7, #0]
 8001342:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001348:	2b00      	cmp	r3, #0
 800134a:	db0a      	blt.n	8001362 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	b2da      	uxtb	r2, r3
 8001350:	490c      	ldr	r1, [pc, #48]	; (8001384 <__NVIC_SetPriority+0x4c>)
 8001352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001356:	0112      	lsls	r2, r2, #4
 8001358:	b2d2      	uxtb	r2, r2
 800135a:	440b      	add	r3, r1
 800135c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001360:	e00a      	b.n	8001378 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	b2da      	uxtb	r2, r3
 8001366:	4908      	ldr	r1, [pc, #32]	; (8001388 <__NVIC_SetPriority+0x50>)
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	f003 030f 	and.w	r3, r3, #15
 800136e:	3b04      	subs	r3, #4
 8001370:	0112      	lsls	r2, r2, #4
 8001372:	b2d2      	uxtb	r2, r2
 8001374:	440b      	add	r3, r1
 8001376:	761a      	strb	r2, [r3, #24]
}
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	bc80      	pop	{r7}
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	e000e100 	.word	0xe000e100
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800138c:	b480      	push	{r7}
 800138e:	b089      	sub	sp, #36	; 0x24
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f003 0307 	and.w	r3, r3, #7
 800139e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	f1c3 0307 	rsb	r3, r3, #7
 80013a6:	2b04      	cmp	r3, #4
 80013a8:	bf28      	it	cs
 80013aa:	2304      	movcs	r3, #4
 80013ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	3304      	adds	r3, #4
 80013b2:	2b06      	cmp	r3, #6
 80013b4:	d902      	bls.n	80013bc <NVIC_EncodePriority+0x30>
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	3b03      	subs	r3, #3
 80013ba:	e000      	b.n	80013be <NVIC_EncodePriority+0x32>
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c0:	f04f 32ff 	mov.w	r2, #4294967295
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43da      	mvns	r2, r3
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	401a      	ands	r2, r3
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013d4:	f04f 31ff 	mov.w	r1, #4294967295
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	fa01 f303 	lsl.w	r3, r1, r3
 80013de:	43d9      	mvns	r1, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e4:	4313      	orrs	r3, r2
         );
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3724      	adds	r7, #36	; 0x24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr

080013f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3b01      	subs	r3, #1
 80013fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001400:	d301      	bcc.n	8001406 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001402:	2301      	movs	r3, #1
 8001404:	e00f      	b.n	8001426 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001406:	4a0a      	ldr	r2, [pc, #40]	; (8001430 <SysTick_Config+0x40>)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3b01      	subs	r3, #1
 800140c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800140e:	210f      	movs	r1, #15
 8001410:	f04f 30ff 	mov.w	r0, #4294967295
 8001414:	f7ff ff90 	bl	8001338 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001418:	4b05      	ldr	r3, [pc, #20]	; (8001430 <SysTick_Config+0x40>)
 800141a:	2200      	movs	r2, #0
 800141c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800141e:	4b04      	ldr	r3, [pc, #16]	; (8001430 <SysTick_Config+0x40>)
 8001420:	2207      	movs	r2, #7
 8001422:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	e000e010 	.word	0xe000e010

08001434 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f7ff ff2d 	bl	800129c <__NVIC_SetPriorityGrouping>
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800144a:	b580      	push	{r7, lr}
 800144c:	b086      	sub	sp, #24
 800144e:	af00      	add	r7, sp, #0
 8001450:	4603      	mov	r3, r0
 8001452:	60b9      	str	r1, [r7, #8]
 8001454:	607a      	str	r2, [r7, #4]
 8001456:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800145c:	f7ff ff42 	bl	80012e4 <__NVIC_GetPriorityGrouping>
 8001460:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	68b9      	ldr	r1, [r7, #8]
 8001466:	6978      	ldr	r0, [r7, #20]
 8001468:	f7ff ff90 	bl	800138c <NVIC_EncodePriority>
 800146c:	4602      	mov	r2, r0
 800146e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001472:	4611      	mov	r1, r2
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff ff5f 	bl	8001338 <__NVIC_SetPriority>
}
 800147a:	bf00      	nop
 800147c:	3718      	adds	r7, #24
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b082      	sub	sp, #8
 8001486:	af00      	add	r7, sp, #0
 8001488:	4603      	mov	r3, r0
 800148a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800148c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff ff35 	bl	8001300 <__NVIC_EnableIRQ>
}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b082      	sub	sp, #8
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f7ff ffa2 	bl	80013f0 <SysTick_Config>
 80014ac:	4603      	mov	r3, r0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
	...

080014b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b08b      	sub	sp, #44	; 0x2c
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014c2:	2300      	movs	r3, #0
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014c6:	2300      	movs	r3, #0
 80014c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ca:	e169      	b.n	80017a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014cc:	2201      	movs	r2, #1
 80014ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	69fa      	ldr	r2, [r7, #28]
 80014dc:	4013      	ands	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	f040 8158 	bne.w	800179a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	4a9a      	ldr	r2, [pc, #616]	; (8001758 <HAL_GPIO_Init+0x2a0>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d05e      	beq.n	80015b2 <HAL_GPIO_Init+0xfa>
 80014f4:	4a98      	ldr	r2, [pc, #608]	; (8001758 <HAL_GPIO_Init+0x2a0>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d875      	bhi.n	80015e6 <HAL_GPIO_Init+0x12e>
 80014fa:	4a98      	ldr	r2, [pc, #608]	; (800175c <HAL_GPIO_Init+0x2a4>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d058      	beq.n	80015b2 <HAL_GPIO_Init+0xfa>
 8001500:	4a96      	ldr	r2, [pc, #600]	; (800175c <HAL_GPIO_Init+0x2a4>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d86f      	bhi.n	80015e6 <HAL_GPIO_Init+0x12e>
 8001506:	4a96      	ldr	r2, [pc, #600]	; (8001760 <HAL_GPIO_Init+0x2a8>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d052      	beq.n	80015b2 <HAL_GPIO_Init+0xfa>
 800150c:	4a94      	ldr	r2, [pc, #592]	; (8001760 <HAL_GPIO_Init+0x2a8>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d869      	bhi.n	80015e6 <HAL_GPIO_Init+0x12e>
 8001512:	4a94      	ldr	r2, [pc, #592]	; (8001764 <HAL_GPIO_Init+0x2ac>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d04c      	beq.n	80015b2 <HAL_GPIO_Init+0xfa>
 8001518:	4a92      	ldr	r2, [pc, #584]	; (8001764 <HAL_GPIO_Init+0x2ac>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d863      	bhi.n	80015e6 <HAL_GPIO_Init+0x12e>
 800151e:	4a92      	ldr	r2, [pc, #584]	; (8001768 <HAL_GPIO_Init+0x2b0>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d046      	beq.n	80015b2 <HAL_GPIO_Init+0xfa>
 8001524:	4a90      	ldr	r2, [pc, #576]	; (8001768 <HAL_GPIO_Init+0x2b0>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d85d      	bhi.n	80015e6 <HAL_GPIO_Init+0x12e>
 800152a:	2b12      	cmp	r3, #18
 800152c:	d82a      	bhi.n	8001584 <HAL_GPIO_Init+0xcc>
 800152e:	2b12      	cmp	r3, #18
 8001530:	d859      	bhi.n	80015e6 <HAL_GPIO_Init+0x12e>
 8001532:	a201      	add	r2, pc, #4	; (adr r2, 8001538 <HAL_GPIO_Init+0x80>)
 8001534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001538:	080015b3 	.word	0x080015b3
 800153c:	0800158d 	.word	0x0800158d
 8001540:	0800159f 	.word	0x0800159f
 8001544:	080015e1 	.word	0x080015e1
 8001548:	080015e7 	.word	0x080015e7
 800154c:	080015e7 	.word	0x080015e7
 8001550:	080015e7 	.word	0x080015e7
 8001554:	080015e7 	.word	0x080015e7
 8001558:	080015e7 	.word	0x080015e7
 800155c:	080015e7 	.word	0x080015e7
 8001560:	080015e7 	.word	0x080015e7
 8001564:	080015e7 	.word	0x080015e7
 8001568:	080015e7 	.word	0x080015e7
 800156c:	080015e7 	.word	0x080015e7
 8001570:	080015e7 	.word	0x080015e7
 8001574:	080015e7 	.word	0x080015e7
 8001578:	080015e7 	.word	0x080015e7
 800157c:	08001595 	.word	0x08001595
 8001580:	080015a9 	.word	0x080015a9
 8001584:	4a79      	ldr	r2, [pc, #484]	; (800176c <HAL_GPIO_Init+0x2b4>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d013      	beq.n	80015b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800158a:	e02c      	b.n	80015e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	623b      	str	r3, [r7, #32]
          break;
 8001592:	e029      	b.n	80015e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	3304      	adds	r3, #4
 800159a:	623b      	str	r3, [r7, #32]
          break;
 800159c:	e024      	b.n	80015e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	68db      	ldr	r3, [r3, #12]
 80015a2:	3308      	adds	r3, #8
 80015a4:	623b      	str	r3, [r7, #32]
          break;
 80015a6:	e01f      	b.n	80015e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	330c      	adds	r3, #12
 80015ae:	623b      	str	r3, [r7, #32]
          break;
 80015b0:	e01a      	b.n	80015e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d102      	bne.n	80015c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015ba:	2304      	movs	r3, #4
 80015bc:	623b      	str	r3, [r7, #32]
          break;
 80015be:	e013      	b.n	80015e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d105      	bne.n	80015d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015c8:	2308      	movs	r3, #8
 80015ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	69fa      	ldr	r2, [r7, #28]
 80015d0:	611a      	str	r2, [r3, #16]
          break;
 80015d2:	e009      	b.n	80015e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015d4:	2308      	movs	r3, #8
 80015d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	69fa      	ldr	r2, [r7, #28]
 80015dc:	615a      	str	r2, [r3, #20]
          break;
 80015de:	e003      	b.n	80015e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015e0:	2300      	movs	r3, #0
 80015e2:	623b      	str	r3, [r7, #32]
          break;
 80015e4:	e000      	b.n	80015e8 <HAL_GPIO_Init+0x130>
          break;
 80015e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	2bff      	cmp	r3, #255	; 0xff
 80015ec:	d801      	bhi.n	80015f2 <HAL_GPIO_Init+0x13a>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	e001      	b.n	80015f6 <HAL_GPIO_Init+0x13e>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	3304      	adds	r3, #4
 80015f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	2bff      	cmp	r3, #255	; 0xff
 80015fc:	d802      	bhi.n	8001604 <HAL_GPIO_Init+0x14c>
 80015fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	e002      	b.n	800160a <HAL_GPIO_Init+0x152>
 8001604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001606:	3b08      	subs	r3, #8
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	210f      	movs	r1, #15
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	fa01 f303 	lsl.w	r3, r1, r3
 8001618:	43db      	mvns	r3, r3
 800161a:	401a      	ands	r2, r3
 800161c:	6a39      	ldr	r1, [r7, #32]
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	fa01 f303 	lsl.w	r3, r1, r3
 8001624:	431a      	orrs	r2, r3
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001632:	2b00      	cmp	r3, #0
 8001634:	f000 80b1 	beq.w	800179a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001638:	4b4d      	ldr	r3, [pc, #308]	; (8001770 <HAL_GPIO_Init+0x2b8>)
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	4a4c      	ldr	r2, [pc, #304]	; (8001770 <HAL_GPIO_Init+0x2b8>)
 800163e:	f043 0301 	orr.w	r3, r3, #1
 8001642:	6193      	str	r3, [r2, #24]
 8001644:	4b4a      	ldr	r3, [pc, #296]	; (8001770 <HAL_GPIO_Init+0x2b8>)
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	f003 0301 	and.w	r3, r3, #1
 800164c:	60bb      	str	r3, [r7, #8]
 800164e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001650:	4a48      	ldr	r2, [pc, #288]	; (8001774 <HAL_GPIO_Init+0x2bc>)
 8001652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001654:	089b      	lsrs	r3, r3, #2
 8001656:	3302      	adds	r3, #2
 8001658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800165c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001660:	f003 0303 	and.w	r3, r3, #3
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	220f      	movs	r2, #15
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	43db      	mvns	r3, r3
 800166e:	68fa      	ldr	r2, [r7, #12]
 8001670:	4013      	ands	r3, r2
 8001672:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4a40      	ldr	r2, [pc, #256]	; (8001778 <HAL_GPIO_Init+0x2c0>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d013      	beq.n	80016a4 <HAL_GPIO_Init+0x1ec>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4a3f      	ldr	r2, [pc, #252]	; (800177c <HAL_GPIO_Init+0x2c4>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d00d      	beq.n	80016a0 <HAL_GPIO_Init+0x1e8>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	4a3e      	ldr	r2, [pc, #248]	; (8001780 <HAL_GPIO_Init+0x2c8>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d007      	beq.n	800169c <HAL_GPIO_Init+0x1e4>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a3d      	ldr	r2, [pc, #244]	; (8001784 <HAL_GPIO_Init+0x2cc>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d101      	bne.n	8001698 <HAL_GPIO_Init+0x1e0>
 8001694:	2303      	movs	r3, #3
 8001696:	e006      	b.n	80016a6 <HAL_GPIO_Init+0x1ee>
 8001698:	2304      	movs	r3, #4
 800169a:	e004      	b.n	80016a6 <HAL_GPIO_Init+0x1ee>
 800169c:	2302      	movs	r3, #2
 800169e:	e002      	b.n	80016a6 <HAL_GPIO_Init+0x1ee>
 80016a0:	2301      	movs	r3, #1
 80016a2:	e000      	b.n	80016a6 <HAL_GPIO_Init+0x1ee>
 80016a4:	2300      	movs	r3, #0
 80016a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016a8:	f002 0203 	and.w	r2, r2, #3
 80016ac:	0092      	lsls	r2, r2, #2
 80016ae:	4093      	lsls	r3, r2
 80016b0:	68fa      	ldr	r2, [r7, #12]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016b6:	492f      	ldr	r1, [pc, #188]	; (8001774 <HAL_GPIO_Init+0x2bc>)
 80016b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ba:	089b      	lsrs	r3, r3, #2
 80016bc:	3302      	adds	r3, #2
 80016be:	68fa      	ldr	r2, [r7, #12]
 80016c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d006      	beq.n	80016de <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016d0:	4b2d      	ldr	r3, [pc, #180]	; (8001788 <HAL_GPIO_Init+0x2d0>)
 80016d2:	689a      	ldr	r2, [r3, #8]
 80016d4:	492c      	ldr	r1, [pc, #176]	; (8001788 <HAL_GPIO_Init+0x2d0>)
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	4313      	orrs	r3, r2
 80016da:	608b      	str	r3, [r1, #8]
 80016dc:	e006      	b.n	80016ec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016de:	4b2a      	ldr	r3, [pc, #168]	; (8001788 <HAL_GPIO_Init+0x2d0>)
 80016e0:	689a      	ldr	r2, [r3, #8]
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	43db      	mvns	r3, r3
 80016e6:	4928      	ldr	r1, [pc, #160]	; (8001788 <HAL_GPIO_Init+0x2d0>)
 80016e8:	4013      	ands	r3, r2
 80016ea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d006      	beq.n	8001706 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016f8:	4b23      	ldr	r3, [pc, #140]	; (8001788 <HAL_GPIO_Init+0x2d0>)
 80016fa:	68da      	ldr	r2, [r3, #12]
 80016fc:	4922      	ldr	r1, [pc, #136]	; (8001788 <HAL_GPIO_Init+0x2d0>)
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	4313      	orrs	r3, r2
 8001702:	60cb      	str	r3, [r1, #12]
 8001704:	e006      	b.n	8001714 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001706:	4b20      	ldr	r3, [pc, #128]	; (8001788 <HAL_GPIO_Init+0x2d0>)
 8001708:	68da      	ldr	r2, [r3, #12]
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	43db      	mvns	r3, r3
 800170e:	491e      	ldr	r1, [pc, #120]	; (8001788 <HAL_GPIO_Init+0x2d0>)
 8001710:	4013      	ands	r3, r2
 8001712:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d006      	beq.n	800172e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001720:	4b19      	ldr	r3, [pc, #100]	; (8001788 <HAL_GPIO_Init+0x2d0>)
 8001722:	685a      	ldr	r2, [r3, #4]
 8001724:	4918      	ldr	r1, [pc, #96]	; (8001788 <HAL_GPIO_Init+0x2d0>)
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	4313      	orrs	r3, r2
 800172a:	604b      	str	r3, [r1, #4]
 800172c:	e006      	b.n	800173c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800172e:	4b16      	ldr	r3, [pc, #88]	; (8001788 <HAL_GPIO_Init+0x2d0>)
 8001730:	685a      	ldr	r2, [r3, #4]
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	43db      	mvns	r3, r3
 8001736:	4914      	ldr	r1, [pc, #80]	; (8001788 <HAL_GPIO_Init+0x2d0>)
 8001738:	4013      	ands	r3, r2
 800173a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d021      	beq.n	800178c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001748:	4b0f      	ldr	r3, [pc, #60]	; (8001788 <HAL_GPIO_Init+0x2d0>)
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	490e      	ldr	r1, [pc, #56]	; (8001788 <HAL_GPIO_Init+0x2d0>)
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	4313      	orrs	r3, r2
 8001752:	600b      	str	r3, [r1, #0]
 8001754:	e021      	b.n	800179a <HAL_GPIO_Init+0x2e2>
 8001756:	bf00      	nop
 8001758:	10320000 	.word	0x10320000
 800175c:	10310000 	.word	0x10310000
 8001760:	10220000 	.word	0x10220000
 8001764:	10210000 	.word	0x10210000
 8001768:	10120000 	.word	0x10120000
 800176c:	10110000 	.word	0x10110000
 8001770:	40021000 	.word	0x40021000
 8001774:	40010000 	.word	0x40010000
 8001778:	40010800 	.word	0x40010800
 800177c:	40010c00 	.word	0x40010c00
 8001780:	40011000 	.word	0x40011000
 8001784:	40011400 	.word	0x40011400
 8001788:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800178c:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <HAL_GPIO_Init+0x304>)
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	43db      	mvns	r3, r3
 8001794:	4909      	ldr	r1, [pc, #36]	; (80017bc <HAL_GPIO_Init+0x304>)
 8001796:	4013      	ands	r3, r2
 8001798:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800179a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179c:	3301      	adds	r3, #1
 800179e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a6:	fa22 f303 	lsr.w	r3, r2, r3
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f47f ae8e 	bne.w	80014cc <HAL_GPIO_Init+0x14>
  }
}
 80017b0:	bf00      	nop
 80017b2:	bf00      	nop
 80017b4:	372c      	adds	r7, #44	; 0x2c
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr
 80017bc:	40010400 	.word	0x40010400

080017c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	460b      	mov	r3, r1
 80017ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689a      	ldr	r2, [r3, #8]
 80017d0:	887b      	ldrh	r3, [r7, #2]
 80017d2:	4013      	ands	r3, r2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d002      	beq.n	80017de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017d8:	2301      	movs	r3, #1
 80017da:	73fb      	strb	r3, [r7, #15]
 80017dc:	e001      	b.n	80017e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017de:	2300      	movs	r3, #0
 80017e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3714      	adds	r7, #20
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bc80      	pop	{r7}
 80017ec:	4770      	bx	lr

080017ee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017ee:	b480      	push	{r7}
 80017f0:	b083      	sub	sp, #12
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
 80017f6:	460b      	mov	r3, r1
 80017f8:	807b      	strh	r3, [r7, #2]
 80017fa:	4613      	mov	r3, r2
 80017fc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017fe:	787b      	ldrb	r3, [r7, #1]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d003      	beq.n	800180c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001804:	887a      	ldrh	r2, [r7, #2]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800180a:	e003      	b.n	8001814 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800180c:	887b      	ldrh	r3, [r7, #2]
 800180e:	041a      	lsls	r2, r3, #16
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	611a      	str	r2, [r3, #16]
}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	bc80      	pop	{r7}
 800181c:	4770      	bx	lr

0800181e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800181e:	b480      	push	{r7}
 8001820:	b085      	sub	sp, #20
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
 8001826:	460b      	mov	r3, r1
 8001828:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001830:	887a      	ldrh	r2, [r7, #2]
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	4013      	ands	r3, r2
 8001836:	041a      	lsls	r2, r3, #16
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	43d9      	mvns	r1, r3
 800183c:	887b      	ldrh	r3, [r7, #2]
 800183e:	400b      	ands	r3, r1
 8001840:	431a      	orrs	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	611a      	str	r2, [r3, #16]
}
 8001846:	bf00      	nop
 8001848:	3714      	adds	r7, #20
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr

08001850 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e26c      	b.n	8001d3c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	2b00      	cmp	r3, #0
 800186c:	f000 8087 	beq.w	800197e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001870:	4b92      	ldr	r3, [pc, #584]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f003 030c 	and.w	r3, r3, #12
 8001878:	2b04      	cmp	r3, #4
 800187a:	d00c      	beq.n	8001896 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800187c:	4b8f      	ldr	r3, [pc, #572]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f003 030c 	and.w	r3, r3, #12
 8001884:	2b08      	cmp	r3, #8
 8001886:	d112      	bne.n	80018ae <HAL_RCC_OscConfig+0x5e>
 8001888:	4b8c      	ldr	r3, [pc, #560]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001890:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001894:	d10b      	bne.n	80018ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001896:	4b89      	ldr	r3, [pc, #548]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d06c      	beq.n	800197c <HAL_RCC_OscConfig+0x12c>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d168      	bne.n	800197c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e246      	b.n	8001d3c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018b6:	d106      	bne.n	80018c6 <HAL_RCC_OscConfig+0x76>
 80018b8:	4b80      	ldr	r3, [pc, #512]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a7f      	ldr	r2, [pc, #508]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 80018be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c2:	6013      	str	r3, [r2, #0]
 80018c4:	e02e      	b.n	8001924 <HAL_RCC_OscConfig+0xd4>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d10c      	bne.n	80018e8 <HAL_RCC_OscConfig+0x98>
 80018ce:	4b7b      	ldr	r3, [pc, #492]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a7a      	ldr	r2, [pc, #488]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 80018d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018d8:	6013      	str	r3, [r2, #0]
 80018da:	4b78      	ldr	r3, [pc, #480]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a77      	ldr	r2, [pc, #476]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 80018e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018e4:	6013      	str	r3, [r2, #0]
 80018e6:	e01d      	b.n	8001924 <HAL_RCC_OscConfig+0xd4>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018f0:	d10c      	bne.n	800190c <HAL_RCC_OscConfig+0xbc>
 80018f2:	4b72      	ldr	r3, [pc, #456]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a71      	ldr	r2, [pc, #452]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 80018f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018fc:	6013      	str	r3, [r2, #0]
 80018fe:	4b6f      	ldr	r3, [pc, #444]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a6e      	ldr	r2, [pc, #440]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 8001904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001908:	6013      	str	r3, [r2, #0]
 800190a:	e00b      	b.n	8001924 <HAL_RCC_OscConfig+0xd4>
 800190c:	4b6b      	ldr	r3, [pc, #428]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a6a      	ldr	r2, [pc, #424]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 8001912:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001916:	6013      	str	r3, [r2, #0]
 8001918:	4b68      	ldr	r3, [pc, #416]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a67      	ldr	r2, [pc, #412]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 800191e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001922:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d013      	beq.n	8001954 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192c:	f7ff fcac 	bl	8001288 <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001934:	f7ff fca8 	bl	8001288 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b64      	cmp	r3, #100	; 0x64
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e1fa      	b.n	8001d3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001946:	4b5d      	ldr	r3, [pc, #372]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d0f0      	beq.n	8001934 <HAL_RCC_OscConfig+0xe4>
 8001952:	e014      	b.n	800197e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001954:	f7ff fc98 	bl	8001288 <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800195c:	f7ff fc94 	bl	8001288 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b64      	cmp	r3, #100	; 0x64
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e1e6      	b.n	8001d3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800196e:	4b53      	ldr	r3, [pc, #332]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1f0      	bne.n	800195c <HAL_RCC_OscConfig+0x10c>
 800197a:	e000      	b.n	800197e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800197c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d063      	beq.n	8001a52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800198a:	4b4c      	ldr	r3, [pc, #304]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f003 030c 	and.w	r3, r3, #12
 8001992:	2b00      	cmp	r3, #0
 8001994:	d00b      	beq.n	80019ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001996:	4b49      	ldr	r3, [pc, #292]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f003 030c 	and.w	r3, r3, #12
 800199e:	2b08      	cmp	r3, #8
 80019a0:	d11c      	bne.n	80019dc <HAL_RCC_OscConfig+0x18c>
 80019a2:	4b46      	ldr	r3, [pc, #280]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d116      	bne.n	80019dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ae:	4b43      	ldr	r3, [pc, #268]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d005      	beq.n	80019c6 <HAL_RCC_OscConfig+0x176>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	691b      	ldr	r3, [r3, #16]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d001      	beq.n	80019c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e1ba      	b.n	8001d3c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019c6:	4b3d      	ldr	r3, [pc, #244]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	695b      	ldr	r3, [r3, #20]
 80019d2:	00db      	lsls	r3, r3, #3
 80019d4:	4939      	ldr	r1, [pc, #228]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 80019d6:	4313      	orrs	r3, r2
 80019d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019da:	e03a      	b.n	8001a52 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d020      	beq.n	8001a26 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019e4:	4b36      	ldr	r3, [pc, #216]	; (8001ac0 <HAL_RCC_OscConfig+0x270>)
 80019e6:	2201      	movs	r2, #1
 80019e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ea:	f7ff fc4d 	bl	8001288 <HAL_GetTick>
 80019ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f0:	e008      	b.n	8001a04 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019f2:	f7ff fc49 	bl	8001288 <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d901      	bls.n	8001a04 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e19b      	b.n	8001d3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a04:	4b2d      	ldr	r3, [pc, #180]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0302 	and.w	r3, r3, #2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d0f0      	beq.n	80019f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a10:	4b2a      	ldr	r3, [pc, #168]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	695b      	ldr	r3, [r3, #20]
 8001a1c:	00db      	lsls	r3, r3, #3
 8001a1e:	4927      	ldr	r1, [pc, #156]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 8001a20:	4313      	orrs	r3, r2
 8001a22:	600b      	str	r3, [r1, #0]
 8001a24:	e015      	b.n	8001a52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a26:	4b26      	ldr	r3, [pc, #152]	; (8001ac0 <HAL_RCC_OscConfig+0x270>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2c:	f7ff fc2c 	bl	8001288 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a34:	f7ff fc28 	bl	8001288 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e17a      	b.n	8001d3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a46:	4b1d      	ldr	r3, [pc, #116]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1f0      	bne.n	8001a34 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0308 	and.w	r3, r3, #8
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d03a      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d019      	beq.n	8001a9a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a66:	4b17      	ldr	r3, [pc, #92]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 8001a68:	2201      	movs	r2, #1
 8001a6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a6c:	f7ff fc0c 	bl	8001288 <HAL_GetTick>
 8001a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a74:	f7ff fc08 	bl	8001288 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e15a      	b.n	8001d3c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a86:	4b0d      	ldr	r3, [pc, #52]	; (8001abc <HAL_RCC_OscConfig+0x26c>)
 8001a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d0f0      	beq.n	8001a74 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a92:	2001      	movs	r0, #1
 8001a94:	f000 fa9a 	bl	8001fcc <RCC_Delay>
 8001a98:	e01c      	b.n	8001ad4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a9a:	4b0a      	ldr	r3, [pc, #40]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa0:	f7ff fbf2 	bl	8001288 <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aa6:	e00f      	b.n	8001ac8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aa8:	f7ff fbee 	bl	8001288 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d908      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e140      	b.n	8001d3c <HAL_RCC_OscConfig+0x4ec>
 8001aba:	bf00      	nop
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	42420000 	.word	0x42420000
 8001ac4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ac8:	4b9e      	ldr	r3, [pc, #632]	; (8001d44 <HAL_RCC_OscConfig+0x4f4>)
 8001aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d1e9      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0304 	and.w	r3, r3, #4
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f000 80a6 	beq.w	8001c2e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ae6:	4b97      	ldr	r3, [pc, #604]	; (8001d44 <HAL_RCC_OscConfig+0x4f4>)
 8001ae8:	69db      	ldr	r3, [r3, #28]
 8001aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d10d      	bne.n	8001b0e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001af2:	4b94      	ldr	r3, [pc, #592]	; (8001d44 <HAL_RCC_OscConfig+0x4f4>)
 8001af4:	69db      	ldr	r3, [r3, #28]
 8001af6:	4a93      	ldr	r2, [pc, #588]	; (8001d44 <HAL_RCC_OscConfig+0x4f4>)
 8001af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001afc:	61d3      	str	r3, [r2, #28]
 8001afe:	4b91      	ldr	r3, [pc, #580]	; (8001d44 <HAL_RCC_OscConfig+0x4f4>)
 8001b00:	69db      	ldr	r3, [r3, #28]
 8001b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b06:	60bb      	str	r3, [r7, #8]
 8001b08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b0e:	4b8e      	ldr	r3, [pc, #568]	; (8001d48 <HAL_RCC_OscConfig+0x4f8>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d118      	bne.n	8001b4c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b1a:	4b8b      	ldr	r3, [pc, #556]	; (8001d48 <HAL_RCC_OscConfig+0x4f8>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a8a      	ldr	r2, [pc, #552]	; (8001d48 <HAL_RCC_OscConfig+0x4f8>)
 8001b20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b26:	f7ff fbaf 	bl	8001288 <HAL_GetTick>
 8001b2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b2c:	e008      	b.n	8001b40 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b2e:	f7ff fbab 	bl	8001288 <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	2b64      	cmp	r3, #100	; 0x64
 8001b3a:	d901      	bls.n	8001b40 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e0fd      	b.n	8001d3c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b40:	4b81      	ldr	r3, [pc, #516]	; (8001d48 <HAL_RCC_OscConfig+0x4f8>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d0f0      	beq.n	8001b2e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d106      	bne.n	8001b62 <HAL_RCC_OscConfig+0x312>
 8001b54:	4b7b      	ldr	r3, [pc, #492]	; (8001d44 <HAL_RCC_OscConfig+0x4f4>)
 8001b56:	6a1b      	ldr	r3, [r3, #32]
 8001b58:	4a7a      	ldr	r2, [pc, #488]	; (8001d44 <HAL_RCC_OscConfig+0x4f4>)
 8001b5a:	f043 0301 	orr.w	r3, r3, #1
 8001b5e:	6213      	str	r3, [r2, #32]
 8001b60:	e02d      	b.n	8001bbe <HAL_RCC_OscConfig+0x36e>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d10c      	bne.n	8001b84 <HAL_RCC_OscConfig+0x334>
 8001b6a:	4b76      	ldr	r3, [pc, #472]	; (8001d44 <HAL_RCC_OscConfig+0x4f4>)
 8001b6c:	6a1b      	ldr	r3, [r3, #32]
 8001b6e:	4a75      	ldr	r2, [pc, #468]	; (8001d44 <HAL_RCC_OscConfig+0x4f4>)
 8001b70:	f023 0301 	bic.w	r3, r3, #1
 8001b74:	6213      	str	r3, [r2, #32]
 8001b76:	4b73      	ldr	r3, [pc, #460]	; (8001d44 <HAL_RCC_OscConfig+0x4f4>)
 8001b78:	6a1b      	ldr	r3, [r3, #32]
 8001b7a:	4a72      	ldr	r2, [pc, #456]	; (8001d44 <HAL_RCC_OscConfig+0x4f4>)
 8001b7c:	f023 0304 	bic.w	r3, r3, #4
 8001b80:	6213      	str	r3, [r2, #32]
 8001b82:	e01c      	b.n	8001bbe <HAL_RCC_OscConfig+0x36e>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	2b05      	cmp	r3, #5
 8001b8a:	d10c      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x356>
 8001b8c:	4b6d      	ldr	r3, [pc, #436]	; (8001d44 <HAL_RCC_OscConfig+0x4f4>)
 8001b8e:	6a1b      	ldr	r3, [r3, #32]
 8001b90:	4a6c      	ldr	r2, [pc, #432]	; (8001d44 <HAL_RCC_OscConfig+0x4f4>)
 8001b92:	f043 0304 	orr.w	r3, r3, #4
 8001b96:	6213      	str	r3, [r2, #32]
 8001b98:	4b6a      	ldr	r3, [pc, #424]	; (8001d44 <HAL_RCC_OscConfig+0x4f4>)
 8001b9a:	6a1b      	ldr	r3, [r3, #32]
 8001b9c:	4a69      	ldr	r2, [pc, #420]	; (8001d44 <HAL_RCC_OscConfig+0x4f4>)
 8001b9e:	f043 0301 	orr.w	r3, r3, #1
 8001ba2:	6213      	str	r3, [r2, #32]
 8001ba4:	e00b      	b.n	8001bbe <HAL_RCC_OscConfig+0x36e>
 8001ba6:	4b67      	ldr	r3, [pc, #412]	; (8001d44 <HAL_RCC_OscConfig+0x4f4>)
 8001ba8:	6a1b      	ldr	r3, [r3, #32]
 8001baa:	4a66      	ldr	r2, [pc, #408]	; (8001d44 <HAL_RCC_OscConfig+0x4f4>)
 8001bac:	f023 0301 	bic.w	r3, r3, #1
 8001bb0:	6213      	str	r3, [r2, #32]
 8001bb2:	4b64      	ldr	r3, [pc, #400]	; (8001d44 <HAL_RCC_OscConfig+0x4f4>)
 8001bb4:	6a1b      	ldr	r3, [r3, #32]
 8001bb6:	4a63      	ldr	r2, [pc, #396]	; (8001d44 <HAL_RCC_OscConfig+0x4f4>)
 8001bb8:	f023 0304 	bic.w	r3, r3, #4
 8001bbc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d015      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bc6:	f7ff fb5f 	bl	8001288 <HAL_GetTick>
 8001bca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bcc:	e00a      	b.n	8001be4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bce:	f7ff fb5b 	bl	8001288 <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d901      	bls.n	8001be4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e0ab      	b.n	8001d3c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001be4:	4b57      	ldr	r3, [pc, #348]	; (8001d44 <HAL_RCC_OscConfig+0x4f4>)
 8001be6:	6a1b      	ldr	r3, [r3, #32]
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d0ee      	beq.n	8001bce <HAL_RCC_OscConfig+0x37e>
 8001bf0:	e014      	b.n	8001c1c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf2:	f7ff fb49 	bl	8001288 <HAL_GetTick>
 8001bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bf8:	e00a      	b.n	8001c10 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bfa:	f7ff fb45 	bl	8001288 <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e095      	b.n	8001d3c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c10:	4b4c      	ldr	r3, [pc, #304]	; (8001d44 <HAL_RCC_OscConfig+0x4f4>)
 8001c12:	6a1b      	ldr	r3, [r3, #32]
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1ee      	bne.n	8001bfa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c1c:	7dfb      	ldrb	r3, [r7, #23]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d105      	bne.n	8001c2e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c22:	4b48      	ldr	r3, [pc, #288]	; (8001d44 <HAL_RCC_OscConfig+0x4f4>)
 8001c24:	69db      	ldr	r3, [r3, #28]
 8001c26:	4a47      	ldr	r2, [pc, #284]	; (8001d44 <HAL_RCC_OscConfig+0x4f4>)
 8001c28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c2c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	69db      	ldr	r3, [r3, #28]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	f000 8081 	beq.w	8001d3a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c38:	4b42      	ldr	r3, [pc, #264]	; (8001d44 <HAL_RCC_OscConfig+0x4f4>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f003 030c 	and.w	r3, r3, #12
 8001c40:	2b08      	cmp	r3, #8
 8001c42:	d061      	beq.n	8001d08 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	69db      	ldr	r3, [r3, #28]
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d146      	bne.n	8001cda <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c4c:	4b3f      	ldr	r3, [pc, #252]	; (8001d4c <HAL_RCC_OscConfig+0x4fc>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c52:	f7ff fb19 	bl	8001288 <HAL_GetTick>
 8001c56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c58:	e008      	b.n	8001c6c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c5a:	f7ff fb15 	bl	8001288 <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d901      	bls.n	8001c6c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e067      	b.n	8001d3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c6c:	4b35      	ldr	r3, [pc, #212]	; (8001d44 <HAL_RCC_OscConfig+0x4f4>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d1f0      	bne.n	8001c5a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a1b      	ldr	r3, [r3, #32]
 8001c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c80:	d108      	bne.n	8001c94 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c82:	4b30      	ldr	r3, [pc, #192]	; (8001d44 <HAL_RCC_OscConfig+0x4f4>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	492d      	ldr	r1, [pc, #180]	; (8001d44 <HAL_RCC_OscConfig+0x4f4>)
 8001c90:	4313      	orrs	r3, r2
 8001c92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c94:	4b2b      	ldr	r3, [pc, #172]	; (8001d44 <HAL_RCC_OscConfig+0x4f4>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a19      	ldr	r1, [r3, #32]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca4:	430b      	orrs	r3, r1
 8001ca6:	4927      	ldr	r1, [pc, #156]	; (8001d44 <HAL_RCC_OscConfig+0x4f4>)
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cac:	4b27      	ldr	r3, [pc, #156]	; (8001d4c <HAL_RCC_OscConfig+0x4fc>)
 8001cae:	2201      	movs	r2, #1
 8001cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb2:	f7ff fae9 	bl	8001288 <HAL_GetTick>
 8001cb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cb8:	e008      	b.n	8001ccc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cba:	f7ff fae5 	bl	8001288 <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d901      	bls.n	8001ccc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e037      	b.n	8001d3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ccc:	4b1d      	ldr	r3, [pc, #116]	; (8001d44 <HAL_RCC_OscConfig+0x4f4>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d0f0      	beq.n	8001cba <HAL_RCC_OscConfig+0x46a>
 8001cd8:	e02f      	b.n	8001d3a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cda:	4b1c      	ldr	r3, [pc, #112]	; (8001d4c <HAL_RCC_OscConfig+0x4fc>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce0:	f7ff fad2 	bl	8001288 <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce8:	f7ff face 	bl	8001288 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e020      	b.n	8001d3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cfa:	4b12      	ldr	r3, [pc, #72]	; (8001d44 <HAL_RCC_OscConfig+0x4f4>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d1f0      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x498>
 8001d06:	e018      	b.n	8001d3a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	69db      	ldr	r3, [r3, #28]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d101      	bne.n	8001d14 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e013      	b.n	8001d3c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d14:	4b0b      	ldr	r3, [pc, #44]	; (8001d44 <HAL_RCC_OscConfig+0x4f4>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a1b      	ldr	r3, [r3, #32]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d106      	bne.n	8001d36 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d001      	beq.n	8001d3a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e000      	b.n	8001d3c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001d3a:	2300      	movs	r3, #0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3718      	adds	r7, #24
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	40021000 	.word	0x40021000
 8001d48:	40007000 	.word	0x40007000
 8001d4c:	42420060 	.word	0x42420060

08001d50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d101      	bne.n	8001d64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e0d0      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d64:	4b6a      	ldr	r3, [pc, #424]	; (8001f10 <HAL_RCC_ClockConfig+0x1c0>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0307 	and.w	r3, r3, #7
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d910      	bls.n	8001d94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d72:	4b67      	ldr	r3, [pc, #412]	; (8001f10 <HAL_RCC_ClockConfig+0x1c0>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f023 0207 	bic.w	r2, r3, #7
 8001d7a:	4965      	ldr	r1, [pc, #404]	; (8001f10 <HAL_RCC_ClockConfig+0x1c0>)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d82:	4b63      	ldr	r3, [pc, #396]	; (8001f10 <HAL_RCC_ClockConfig+0x1c0>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0307 	and.w	r3, r3, #7
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d001      	beq.n	8001d94 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e0b8      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d020      	beq.n	8001de2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0304 	and.w	r3, r3, #4
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d005      	beq.n	8001db8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dac:	4b59      	ldr	r3, [pc, #356]	; (8001f14 <HAL_RCC_ClockConfig+0x1c4>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	4a58      	ldr	r2, [pc, #352]	; (8001f14 <HAL_RCC_ClockConfig+0x1c4>)
 8001db2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001db6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0308 	and.w	r3, r3, #8
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d005      	beq.n	8001dd0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dc4:	4b53      	ldr	r3, [pc, #332]	; (8001f14 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	4a52      	ldr	r2, [pc, #328]	; (8001f14 <HAL_RCC_ClockConfig+0x1c4>)
 8001dca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001dce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dd0:	4b50      	ldr	r3, [pc, #320]	; (8001f14 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	494d      	ldr	r1, [pc, #308]	; (8001f14 <HAL_RCC_ClockConfig+0x1c4>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d040      	beq.n	8001e70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d107      	bne.n	8001e06 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001df6:	4b47      	ldr	r3, [pc, #284]	; (8001f14 <HAL_RCC_ClockConfig+0x1c4>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d115      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e07f      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d107      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e0e:	4b41      	ldr	r3, [pc, #260]	; (8001f14 <HAL_RCC_ClockConfig+0x1c4>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d109      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e073      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e1e:	4b3d      	ldr	r3, [pc, #244]	; (8001f14 <HAL_RCC_ClockConfig+0x1c4>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e06b      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e2e:	4b39      	ldr	r3, [pc, #228]	; (8001f14 <HAL_RCC_ClockConfig+0x1c4>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f023 0203 	bic.w	r2, r3, #3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	4936      	ldr	r1, [pc, #216]	; (8001f14 <HAL_RCC_ClockConfig+0x1c4>)
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e40:	f7ff fa22 	bl	8001288 <HAL_GetTick>
 8001e44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e46:	e00a      	b.n	8001e5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e48:	f7ff fa1e 	bl	8001288 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e053      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e5e:	4b2d      	ldr	r3, [pc, #180]	; (8001f14 <HAL_RCC_ClockConfig+0x1c4>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f003 020c 	and.w	r2, r3, #12
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d1eb      	bne.n	8001e48 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e70:	4b27      	ldr	r3, [pc, #156]	; (8001f10 <HAL_RCC_ClockConfig+0x1c0>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0307 	and.w	r3, r3, #7
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d210      	bcs.n	8001ea0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e7e:	4b24      	ldr	r3, [pc, #144]	; (8001f10 <HAL_RCC_ClockConfig+0x1c0>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f023 0207 	bic.w	r2, r3, #7
 8001e86:	4922      	ldr	r1, [pc, #136]	; (8001f10 <HAL_RCC_ClockConfig+0x1c0>)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e8e:	4b20      	ldr	r3, [pc, #128]	; (8001f10 <HAL_RCC_ClockConfig+0x1c0>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d001      	beq.n	8001ea0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e032      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d008      	beq.n	8001ebe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eac:	4b19      	ldr	r3, [pc, #100]	; (8001f14 <HAL_RCC_ClockConfig+0x1c4>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	4916      	ldr	r1, [pc, #88]	; (8001f14 <HAL_RCC_ClockConfig+0x1c4>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0308 	and.w	r3, r3, #8
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d009      	beq.n	8001ede <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001eca:	4b12      	ldr	r3, [pc, #72]	; (8001f14 <HAL_RCC_ClockConfig+0x1c4>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	490e      	ldr	r1, [pc, #56]	; (8001f14 <HAL_RCC_ClockConfig+0x1c4>)
 8001eda:	4313      	orrs	r3, r2
 8001edc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ede:	f000 f821 	bl	8001f24 <HAL_RCC_GetSysClockFreq>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	4b0b      	ldr	r3, [pc, #44]	; (8001f14 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	091b      	lsrs	r3, r3, #4
 8001eea:	f003 030f 	and.w	r3, r3, #15
 8001eee:	490a      	ldr	r1, [pc, #40]	; (8001f18 <HAL_RCC_ClockConfig+0x1c8>)
 8001ef0:	5ccb      	ldrb	r3, [r1, r3]
 8001ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ef6:	4a09      	ldr	r2, [pc, #36]	; (8001f1c <HAL_RCC_ClockConfig+0x1cc>)
 8001ef8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001efa:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <HAL_RCC_ClockConfig+0x1d0>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff f980 	bl	8001204 <HAL_InitTick>

  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40022000 	.word	0x40022000
 8001f14:	40021000 	.word	0x40021000
 8001f18:	080030f8 	.word	0x080030f8
 8001f1c:	20000030 	.word	0x20000030
 8001f20:	20000034 	.word	0x20000034

08001f24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b087      	sub	sp, #28
 8001f28:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	60fb      	str	r3, [r7, #12]
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60bb      	str	r3, [r7, #8]
 8001f32:	2300      	movs	r3, #0
 8001f34:	617b      	str	r3, [r7, #20]
 8001f36:	2300      	movs	r3, #0
 8001f38:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f3e:	4b1e      	ldr	r3, [pc, #120]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f003 030c 	and.w	r3, r3, #12
 8001f4a:	2b04      	cmp	r3, #4
 8001f4c:	d002      	beq.n	8001f54 <HAL_RCC_GetSysClockFreq+0x30>
 8001f4e:	2b08      	cmp	r3, #8
 8001f50:	d003      	beq.n	8001f5a <HAL_RCC_GetSysClockFreq+0x36>
 8001f52:	e027      	b.n	8001fa4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f54:	4b19      	ldr	r3, [pc, #100]	; (8001fbc <HAL_RCC_GetSysClockFreq+0x98>)
 8001f56:	613b      	str	r3, [r7, #16]
      break;
 8001f58:	e027      	b.n	8001faa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	0c9b      	lsrs	r3, r3, #18
 8001f5e:	f003 030f 	and.w	r3, r3, #15
 8001f62:	4a17      	ldr	r2, [pc, #92]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f64:	5cd3      	ldrb	r3, [r2, r3]
 8001f66:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d010      	beq.n	8001f94 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f72:	4b11      	ldr	r3, [pc, #68]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	0c5b      	lsrs	r3, r3, #17
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	4a11      	ldr	r2, [pc, #68]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f7e:	5cd3      	ldrb	r3, [r2, r3]
 8001f80:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a0d      	ldr	r2, [pc, #52]	; (8001fbc <HAL_RCC_GetSysClockFreq+0x98>)
 8001f86:	fb02 f203 	mul.w	r2, r2, r3
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f90:	617b      	str	r3, [r7, #20]
 8001f92:	e004      	b.n	8001f9e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a0c      	ldr	r2, [pc, #48]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f98:	fb02 f303 	mul.w	r3, r2, r3
 8001f9c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	613b      	str	r3, [r7, #16]
      break;
 8001fa2:	e002      	b.n	8001faa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fa4:	4b05      	ldr	r3, [pc, #20]	; (8001fbc <HAL_RCC_GetSysClockFreq+0x98>)
 8001fa6:	613b      	str	r3, [r7, #16]
      break;
 8001fa8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001faa:	693b      	ldr	r3, [r7, #16]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	371c      	adds	r7, #28
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bc80      	pop	{r7}
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	007a1200 	.word	0x007a1200
 8001fc0:	08003108 	.word	0x08003108
 8001fc4:	08003118 	.word	0x08003118
 8001fc8:	003d0900 	.word	0x003d0900

08001fcc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001fd4:	4b0a      	ldr	r3, [pc, #40]	; (8002000 <RCC_Delay+0x34>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a0a      	ldr	r2, [pc, #40]	; (8002004 <RCC_Delay+0x38>)
 8001fda:	fba2 2303 	umull	r2, r3, r2, r3
 8001fde:	0a5b      	lsrs	r3, r3, #9
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	fb02 f303 	mul.w	r3, r2, r3
 8001fe6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001fe8:	bf00      	nop
  }
  while (Delay --);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	1e5a      	subs	r2, r3, #1
 8001fee:	60fa      	str	r2, [r7, #12]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d1f9      	bne.n	8001fe8 <RCC_Delay+0x1c>
}
 8001ff4:	bf00      	nop
 8001ff6:	bf00      	nop
 8001ff8:	3714      	adds	r7, #20
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bc80      	pop	{r7}
 8001ffe:	4770      	bx	lr
 8002000:	20000030 	.word	0x20000030
 8002004:	10624dd3 	.word	0x10624dd3

08002008 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e041      	b.n	800209e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b00      	cmp	r3, #0
 8002024:	d106      	bne.n	8002034 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f7fe ffc2 	bl	8000fb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2202      	movs	r2, #2
 8002038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	3304      	adds	r3, #4
 8002044:	4619      	mov	r1, r3
 8002046:	4610      	mov	r0, r2
 8002048:	f000 fc30 	bl	80028ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
	...

080020a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d001      	beq.n	80020c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e03a      	b.n	8002136 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2202      	movs	r2, #2
 80020c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68da      	ldr	r2, [r3, #12]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f042 0201 	orr.w	r2, r2, #1
 80020d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a18      	ldr	r2, [pc, #96]	; (8002140 <HAL_TIM_Base_Start_IT+0x98>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d00e      	beq.n	8002100 <HAL_TIM_Base_Start_IT+0x58>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020ea:	d009      	beq.n	8002100 <HAL_TIM_Base_Start_IT+0x58>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a14      	ldr	r2, [pc, #80]	; (8002144 <HAL_TIM_Base_Start_IT+0x9c>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d004      	beq.n	8002100 <HAL_TIM_Base_Start_IT+0x58>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a13      	ldr	r2, [pc, #76]	; (8002148 <HAL_TIM_Base_Start_IT+0xa0>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d111      	bne.n	8002124 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f003 0307 	and.w	r3, r3, #7
 800210a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2b06      	cmp	r3, #6
 8002110:	d010      	beq.n	8002134 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f042 0201 	orr.w	r2, r2, #1
 8002120:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002122:	e007      	b.n	8002134 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f042 0201 	orr.w	r2, r2, #1
 8002132:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3714      	adds	r7, #20
 800213a:	46bd      	mov	sp, r7
 800213c:	bc80      	pop	{r7}
 800213e:	4770      	bx	lr
 8002140:	40012c00 	.word	0x40012c00
 8002144:	40000400 	.word	0x40000400
 8002148:	40000800 	.word	0x40000800

0800214c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e041      	b.n	80021e2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b00      	cmp	r3, #0
 8002168:	d106      	bne.n	8002178 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 f839 	bl	80021ea <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2202      	movs	r2, #2
 800217c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	3304      	adds	r3, #4
 8002188:	4619      	mov	r1, r3
 800218a:	4610      	mov	r0, r2
 800218c:	f000 fb8e 	bl	80028ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80021f2:	bf00      	nop
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bc80      	pop	{r7}
 80021fa:	4770      	bx	lr

080021fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d109      	bne.n	8002220 <HAL_TIM_PWM_Start+0x24>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002212:	b2db      	uxtb	r3, r3
 8002214:	2b01      	cmp	r3, #1
 8002216:	bf14      	ite	ne
 8002218:	2301      	movne	r3, #1
 800221a:	2300      	moveq	r3, #0
 800221c:	b2db      	uxtb	r3, r3
 800221e:	e022      	b.n	8002266 <HAL_TIM_PWM_Start+0x6a>
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	2b04      	cmp	r3, #4
 8002224:	d109      	bne.n	800223a <HAL_TIM_PWM_Start+0x3e>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b01      	cmp	r3, #1
 8002230:	bf14      	ite	ne
 8002232:	2301      	movne	r3, #1
 8002234:	2300      	moveq	r3, #0
 8002236:	b2db      	uxtb	r3, r3
 8002238:	e015      	b.n	8002266 <HAL_TIM_PWM_Start+0x6a>
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	2b08      	cmp	r3, #8
 800223e:	d109      	bne.n	8002254 <HAL_TIM_PWM_Start+0x58>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002246:	b2db      	uxtb	r3, r3
 8002248:	2b01      	cmp	r3, #1
 800224a:	bf14      	ite	ne
 800224c:	2301      	movne	r3, #1
 800224e:	2300      	moveq	r3, #0
 8002250:	b2db      	uxtb	r3, r3
 8002252:	e008      	b.n	8002266 <HAL_TIM_PWM_Start+0x6a>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2b01      	cmp	r3, #1
 800225e:	bf14      	ite	ne
 8002260:	2301      	movne	r3, #1
 8002262:	2300      	moveq	r3, #0
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e05e      	b.n	800232c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d104      	bne.n	800227e <HAL_TIM_PWM_Start+0x82>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2202      	movs	r2, #2
 8002278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800227c:	e013      	b.n	80022a6 <HAL_TIM_PWM_Start+0xaa>
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	2b04      	cmp	r3, #4
 8002282:	d104      	bne.n	800228e <HAL_TIM_PWM_Start+0x92>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2202      	movs	r2, #2
 8002288:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800228c:	e00b      	b.n	80022a6 <HAL_TIM_PWM_Start+0xaa>
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	2b08      	cmp	r3, #8
 8002292:	d104      	bne.n	800229e <HAL_TIM_PWM_Start+0xa2>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2202      	movs	r2, #2
 8002298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800229c:	e003      	b.n	80022a6 <HAL_TIM_PWM_Start+0xaa>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2202      	movs	r2, #2
 80022a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2201      	movs	r2, #1
 80022ac:	6839      	ldr	r1, [r7, #0]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f000 fd7c 	bl	8002dac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a1e      	ldr	r2, [pc, #120]	; (8002334 <HAL_TIM_PWM_Start+0x138>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d107      	bne.n	80022ce <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a18      	ldr	r2, [pc, #96]	; (8002334 <HAL_TIM_PWM_Start+0x138>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d00e      	beq.n	80022f6 <HAL_TIM_PWM_Start+0xfa>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022e0:	d009      	beq.n	80022f6 <HAL_TIM_PWM_Start+0xfa>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a14      	ldr	r2, [pc, #80]	; (8002338 <HAL_TIM_PWM_Start+0x13c>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d004      	beq.n	80022f6 <HAL_TIM_PWM_Start+0xfa>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a12      	ldr	r2, [pc, #72]	; (800233c <HAL_TIM_PWM_Start+0x140>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d111      	bne.n	800231a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f003 0307 	and.w	r3, r3, #7
 8002300:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2b06      	cmp	r3, #6
 8002306:	d010      	beq.n	800232a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f042 0201 	orr.w	r2, r2, #1
 8002316:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002318:	e007      	b.n	800232a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f042 0201 	orr.w	r2, r2, #1
 8002328:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	3710      	adds	r7, #16
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40012c00 	.word	0x40012c00
 8002338:	40000400 	.word	0x40000400
 800233c:	40000800 	.word	0x40000800

08002340 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b02      	cmp	r3, #2
 8002354:	d122      	bne.n	800239c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	2b02      	cmp	r3, #2
 8002362:	d11b      	bne.n	800239c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f06f 0202 	mvn.w	r2, #2
 800236c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2201      	movs	r2, #1
 8002372:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	f003 0303 	and.w	r3, r3, #3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d003      	beq.n	800238a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f000 fa76 	bl	8002874 <HAL_TIM_IC_CaptureCallback>
 8002388:	e005      	b.n	8002396 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f000 fa69 	bl	8002862 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f000 fa78 	bl	8002886 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	f003 0304 	and.w	r3, r3, #4
 80023a6:	2b04      	cmp	r3, #4
 80023a8:	d122      	bne.n	80023f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	f003 0304 	and.w	r3, r3, #4
 80023b4:	2b04      	cmp	r3, #4
 80023b6:	d11b      	bne.n	80023f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f06f 0204 	mvn.w	r2, #4
 80023c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2202      	movs	r2, #2
 80023c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d003      	beq.n	80023de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f000 fa4c 	bl	8002874 <HAL_TIM_IC_CaptureCallback>
 80023dc:	e005      	b.n	80023ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 fa3f 	bl	8002862 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f000 fa4e 	bl	8002886 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	f003 0308 	and.w	r3, r3, #8
 80023fa:	2b08      	cmp	r3, #8
 80023fc:	d122      	bne.n	8002444 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	f003 0308 	and.w	r3, r3, #8
 8002408:	2b08      	cmp	r3, #8
 800240a:	d11b      	bne.n	8002444 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f06f 0208 	mvn.w	r2, #8
 8002414:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2204      	movs	r2, #4
 800241a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	69db      	ldr	r3, [r3, #28]
 8002422:	f003 0303 	and.w	r3, r3, #3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d003      	beq.n	8002432 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 fa22 	bl	8002874 <HAL_TIM_IC_CaptureCallback>
 8002430:	e005      	b.n	800243e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 fa15 	bl	8002862 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f000 fa24 	bl	8002886 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	f003 0310 	and.w	r3, r3, #16
 800244e:	2b10      	cmp	r3, #16
 8002450:	d122      	bne.n	8002498 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	f003 0310 	and.w	r3, r3, #16
 800245c:	2b10      	cmp	r3, #16
 800245e:	d11b      	bne.n	8002498 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f06f 0210 	mvn.w	r2, #16
 8002468:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2208      	movs	r2, #8
 800246e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	69db      	ldr	r3, [r3, #28]
 8002476:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800247a:	2b00      	cmp	r3, #0
 800247c:	d003      	beq.n	8002486 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 f9f8 	bl	8002874 <HAL_TIM_IC_CaptureCallback>
 8002484:	e005      	b.n	8002492 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 f9eb 	bl	8002862 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f000 f9fa 	bl	8002886 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d10e      	bne.n	80024c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	f003 0301 	and.w	r3, r3, #1
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d107      	bne.n	80024c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f06f 0201 	mvn.w	r2, #1
 80024bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f7fe fa56 	bl	8000970 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ce:	2b80      	cmp	r3, #128	; 0x80
 80024d0:	d10e      	bne.n	80024f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024dc:	2b80      	cmp	r3, #128	; 0x80
 80024de:	d107      	bne.n	80024f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f000 fce9 	bl	8002ec2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024fa:	2b40      	cmp	r3, #64	; 0x40
 80024fc:	d10e      	bne.n	800251c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002508:	2b40      	cmp	r3, #64	; 0x40
 800250a:	d107      	bne.n	800251c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002514:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 f9be 	bl	8002898 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	f003 0320 	and.w	r3, r3, #32
 8002526:	2b20      	cmp	r3, #32
 8002528:	d10e      	bne.n	8002548 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	f003 0320 	and.w	r3, r3, #32
 8002534:	2b20      	cmp	r3, #32
 8002536:	d107      	bne.n	8002548 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f06f 0220 	mvn.w	r2, #32
 8002540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f000 fcb4 	bl	8002eb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002548:	bf00      	nop
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800255c:	2300      	movs	r3, #0
 800255e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002566:	2b01      	cmp	r3, #1
 8002568:	d101      	bne.n	800256e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800256a:	2302      	movs	r3, #2
 800256c:	e0ae      	b.n	80026cc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2201      	movs	r2, #1
 8002572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2b0c      	cmp	r3, #12
 800257a:	f200 809f 	bhi.w	80026bc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800257e:	a201      	add	r2, pc, #4	; (adr r2, 8002584 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002584:	080025b9 	.word	0x080025b9
 8002588:	080026bd 	.word	0x080026bd
 800258c:	080026bd 	.word	0x080026bd
 8002590:	080026bd 	.word	0x080026bd
 8002594:	080025f9 	.word	0x080025f9
 8002598:	080026bd 	.word	0x080026bd
 800259c:	080026bd 	.word	0x080026bd
 80025a0:	080026bd 	.word	0x080026bd
 80025a4:	0800263b 	.word	0x0800263b
 80025a8:	080026bd 	.word	0x080026bd
 80025ac:	080026bd 	.word	0x080026bd
 80025b0:	080026bd 	.word	0x080026bd
 80025b4:	0800267b 	.word	0x0800267b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68b9      	ldr	r1, [r7, #8]
 80025be:	4618      	mov	r0, r3
 80025c0:	f000 f9d6 	bl	8002970 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	699a      	ldr	r2, [r3, #24]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f042 0208 	orr.w	r2, r2, #8
 80025d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	699a      	ldr	r2, [r3, #24]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f022 0204 	bic.w	r2, r2, #4
 80025e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6999      	ldr	r1, [r3, #24]
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	691a      	ldr	r2, [r3, #16]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	430a      	orrs	r2, r1
 80025f4:	619a      	str	r2, [r3, #24]
      break;
 80025f6:	e064      	b.n	80026c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	68b9      	ldr	r1, [r7, #8]
 80025fe:	4618      	mov	r0, r3
 8002600:	f000 fa1c 	bl	8002a3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	699a      	ldr	r2, [r3, #24]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002612:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	699a      	ldr	r2, [r3, #24]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002622:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6999      	ldr	r1, [r3, #24]
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	021a      	lsls	r2, r3, #8
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	430a      	orrs	r2, r1
 8002636:	619a      	str	r2, [r3, #24]
      break;
 8002638:	e043      	b.n	80026c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68b9      	ldr	r1, [r7, #8]
 8002640:	4618      	mov	r0, r3
 8002642:	f000 fa65 	bl	8002b10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	69da      	ldr	r2, [r3, #28]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f042 0208 	orr.w	r2, r2, #8
 8002654:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	69da      	ldr	r2, [r3, #28]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f022 0204 	bic.w	r2, r2, #4
 8002664:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	69d9      	ldr	r1, [r3, #28]
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	691a      	ldr	r2, [r3, #16]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	430a      	orrs	r2, r1
 8002676:	61da      	str	r2, [r3, #28]
      break;
 8002678:	e023      	b.n	80026c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	68b9      	ldr	r1, [r7, #8]
 8002680:	4618      	mov	r0, r3
 8002682:	f000 faaf 	bl	8002be4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	69da      	ldr	r2, [r3, #28]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002694:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	69da      	ldr	r2, [r3, #28]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	69d9      	ldr	r1, [r3, #28]
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	021a      	lsls	r2, r3, #8
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	430a      	orrs	r2, r1
 80026b8:	61da      	str	r2, [r3, #28]
      break;
 80026ba:	e002      	b.n	80026c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	75fb      	strb	r3, [r7, #23]
      break;
 80026c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80026ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3718      	adds	r7, #24
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026de:	2300      	movs	r3, #0
 80026e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d101      	bne.n	80026f0 <HAL_TIM_ConfigClockSource+0x1c>
 80026ec:	2302      	movs	r3, #2
 80026ee:	e0b4      	b.n	800285a <HAL_TIM_ConfigClockSource+0x186>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2202      	movs	r2, #2
 80026fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800270e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002716:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68ba      	ldr	r2, [r7, #8]
 800271e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002728:	d03e      	beq.n	80027a8 <HAL_TIM_ConfigClockSource+0xd4>
 800272a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800272e:	f200 8087 	bhi.w	8002840 <HAL_TIM_ConfigClockSource+0x16c>
 8002732:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002736:	f000 8086 	beq.w	8002846 <HAL_TIM_ConfigClockSource+0x172>
 800273a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800273e:	d87f      	bhi.n	8002840 <HAL_TIM_ConfigClockSource+0x16c>
 8002740:	2b70      	cmp	r3, #112	; 0x70
 8002742:	d01a      	beq.n	800277a <HAL_TIM_ConfigClockSource+0xa6>
 8002744:	2b70      	cmp	r3, #112	; 0x70
 8002746:	d87b      	bhi.n	8002840 <HAL_TIM_ConfigClockSource+0x16c>
 8002748:	2b60      	cmp	r3, #96	; 0x60
 800274a:	d050      	beq.n	80027ee <HAL_TIM_ConfigClockSource+0x11a>
 800274c:	2b60      	cmp	r3, #96	; 0x60
 800274e:	d877      	bhi.n	8002840 <HAL_TIM_ConfigClockSource+0x16c>
 8002750:	2b50      	cmp	r3, #80	; 0x50
 8002752:	d03c      	beq.n	80027ce <HAL_TIM_ConfigClockSource+0xfa>
 8002754:	2b50      	cmp	r3, #80	; 0x50
 8002756:	d873      	bhi.n	8002840 <HAL_TIM_ConfigClockSource+0x16c>
 8002758:	2b40      	cmp	r3, #64	; 0x40
 800275a:	d058      	beq.n	800280e <HAL_TIM_ConfigClockSource+0x13a>
 800275c:	2b40      	cmp	r3, #64	; 0x40
 800275e:	d86f      	bhi.n	8002840 <HAL_TIM_ConfigClockSource+0x16c>
 8002760:	2b30      	cmp	r3, #48	; 0x30
 8002762:	d064      	beq.n	800282e <HAL_TIM_ConfigClockSource+0x15a>
 8002764:	2b30      	cmp	r3, #48	; 0x30
 8002766:	d86b      	bhi.n	8002840 <HAL_TIM_ConfigClockSource+0x16c>
 8002768:	2b20      	cmp	r3, #32
 800276a:	d060      	beq.n	800282e <HAL_TIM_ConfigClockSource+0x15a>
 800276c:	2b20      	cmp	r3, #32
 800276e:	d867      	bhi.n	8002840 <HAL_TIM_ConfigClockSource+0x16c>
 8002770:	2b00      	cmp	r3, #0
 8002772:	d05c      	beq.n	800282e <HAL_TIM_ConfigClockSource+0x15a>
 8002774:	2b10      	cmp	r3, #16
 8002776:	d05a      	beq.n	800282e <HAL_TIM_ConfigClockSource+0x15a>
 8002778:	e062      	b.n	8002840 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6818      	ldr	r0, [r3, #0]
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	6899      	ldr	r1, [r3, #8]
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685a      	ldr	r2, [r3, #4]
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	f000 faf0 	bl	8002d6e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800279c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68ba      	ldr	r2, [r7, #8]
 80027a4:	609a      	str	r2, [r3, #8]
      break;
 80027a6:	e04f      	b.n	8002848 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6818      	ldr	r0, [r3, #0]
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	6899      	ldr	r1, [r3, #8]
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	f000 fad9 	bl	8002d6e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	689a      	ldr	r2, [r3, #8]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027ca:	609a      	str	r2, [r3, #8]
      break;
 80027cc:	e03c      	b.n	8002848 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6818      	ldr	r0, [r3, #0]
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	6859      	ldr	r1, [r3, #4]
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	461a      	mov	r2, r3
 80027dc:	f000 fa50 	bl	8002c80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2150      	movs	r1, #80	; 0x50
 80027e6:	4618      	mov	r0, r3
 80027e8:	f000 faa7 	bl	8002d3a <TIM_ITRx_SetConfig>
      break;
 80027ec:	e02c      	b.n	8002848 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6818      	ldr	r0, [r3, #0]
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	6859      	ldr	r1, [r3, #4]
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	461a      	mov	r2, r3
 80027fc:	f000 fa6e 	bl	8002cdc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2160      	movs	r1, #96	; 0x60
 8002806:	4618      	mov	r0, r3
 8002808:	f000 fa97 	bl	8002d3a <TIM_ITRx_SetConfig>
      break;
 800280c:	e01c      	b.n	8002848 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6818      	ldr	r0, [r3, #0]
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	6859      	ldr	r1, [r3, #4]
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	461a      	mov	r2, r3
 800281c:	f000 fa30 	bl	8002c80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2140      	movs	r1, #64	; 0x40
 8002826:	4618      	mov	r0, r3
 8002828:	f000 fa87 	bl	8002d3a <TIM_ITRx_SetConfig>
      break;
 800282c:	e00c      	b.n	8002848 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4619      	mov	r1, r3
 8002838:	4610      	mov	r0, r2
 800283a:	f000 fa7e 	bl	8002d3a <TIM_ITRx_SetConfig>
      break;
 800283e:	e003      	b.n	8002848 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	73fb      	strb	r3, [r7, #15]
      break;
 8002844:	e000      	b.n	8002848 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002846:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002858:	7bfb      	ldrb	r3, [r7, #15]
}
 800285a:	4618      	mov	r0, r3
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}

08002862 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002862:	b480      	push	{r7}
 8002864:	b083      	sub	sp, #12
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	bc80      	pop	{r7}
 8002872:	4770      	bx	lr

08002874 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	bc80      	pop	{r7}
 8002884:	4770      	bx	lr

08002886 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002886:	b480      	push	{r7}
 8002888:	b083      	sub	sp, #12
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800288e:	bf00      	nop
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	bc80      	pop	{r7}
 8002896:	4770      	bx	lr

08002898 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bc80      	pop	{r7}
 80028a8:	4770      	bx	lr
	...

080028ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a29      	ldr	r2, [pc, #164]	; (8002964 <TIM_Base_SetConfig+0xb8>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d00b      	beq.n	80028dc <TIM_Base_SetConfig+0x30>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ca:	d007      	beq.n	80028dc <TIM_Base_SetConfig+0x30>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a26      	ldr	r2, [pc, #152]	; (8002968 <TIM_Base_SetConfig+0xbc>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d003      	beq.n	80028dc <TIM_Base_SetConfig+0x30>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a25      	ldr	r2, [pc, #148]	; (800296c <TIM_Base_SetConfig+0xc0>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d108      	bne.n	80028ee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a1c      	ldr	r2, [pc, #112]	; (8002964 <TIM_Base_SetConfig+0xb8>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d00b      	beq.n	800290e <TIM_Base_SetConfig+0x62>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028fc:	d007      	beq.n	800290e <TIM_Base_SetConfig+0x62>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a19      	ldr	r2, [pc, #100]	; (8002968 <TIM_Base_SetConfig+0xbc>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d003      	beq.n	800290e <TIM_Base_SetConfig+0x62>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a18      	ldr	r2, [pc, #96]	; (800296c <TIM_Base_SetConfig+0xc0>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d108      	bne.n	8002920 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002914:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	68fa      	ldr	r2, [r7, #12]
 800291c:	4313      	orrs	r3, r2
 800291e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	4313      	orrs	r3, r2
 800292c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	68fa      	ldr	r2, [r7, #12]
 8002932:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	689a      	ldr	r2, [r3, #8]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4a07      	ldr	r2, [pc, #28]	; (8002964 <TIM_Base_SetConfig+0xb8>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d103      	bne.n	8002954 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	691a      	ldr	r2, [r3, #16]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	615a      	str	r2, [r3, #20]
}
 800295a:	bf00      	nop
 800295c:	3714      	adds	r7, #20
 800295e:	46bd      	mov	sp, r7
 8002960:	bc80      	pop	{r7}
 8002962:	4770      	bx	lr
 8002964:	40012c00 	.word	0x40012c00
 8002968:	40000400 	.word	0x40000400
 800296c:	40000800 	.word	0x40000800

08002970 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002970:	b480      	push	{r7}
 8002972:	b087      	sub	sp, #28
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	f023 0201 	bic.w	r2, r3, #1
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800299e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f023 0303 	bic.w	r3, r3, #3
 80029a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	f023 0302 	bic.w	r3, r3, #2
 80029b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a1c      	ldr	r2, [pc, #112]	; (8002a38 <TIM_OC1_SetConfig+0xc8>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d10c      	bne.n	80029e6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	f023 0308 	bic.w	r3, r3, #8
 80029d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	697a      	ldr	r2, [r7, #20]
 80029da:	4313      	orrs	r3, r2
 80029dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	f023 0304 	bic.w	r3, r3, #4
 80029e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a13      	ldr	r2, [pc, #76]	; (8002a38 <TIM_OC1_SetConfig+0xc8>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d111      	bne.n	8002a12 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80029fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	693a      	ldr	r2, [r7, #16]
 8002a16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685a      	ldr	r2, [r3, #4]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	697a      	ldr	r2, [r7, #20]
 8002a2a:	621a      	str	r2, [r3, #32]
}
 8002a2c:	bf00      	nop
 8002a2e:	371c      	adds	r7, #28
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bc80      	pop	{r7}
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	40012c00 	.word	0x40012c00

08002a3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b087      	sub	sp, #28
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a1b      	ldr	r3, [r3, #32]
 8002a50:	f023 0210 	bic.w	r2, r3, #16
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	021b      	lsls	r3, r3, #8
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	f023 0320 	bic.w	r3, r3, #32
 8002a86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	011b      	lsls	r3, r3, #4
 8002a8e:	697a      	ldr	r2, [r7, #20]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a1d      	ldr	r2, [pc, #116]	; (8002b0c <TIM_OC2_SetConfig+0xd0>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d10d      	bne.n	8002ab8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002aa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	011b      	lsls	r3, r3, #4
 8002aaa:	697a      	ldr	r2, [r7, #20]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ab6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4a14      	ldr	r2, [pc, #80]	; (8002b0c <TIM_OC2_SetConfig+0xd0>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d113      	bne.n	8002ae8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ac6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ace:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	695b      	ldr	r3, [r3, #20]
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68fa      	ldr	r2, [r7, #12]
 8002af2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685a      	ldr	r2, [r3, #4]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	697a      	ldr	r2, [r7, #20]
 8002b00:	621a      	str	r2, [r3, #32]
}
 8002b02:	bf00      	nop
 8002b04:	371c      	adds	r7, #28
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bc80      	pop	{r7}
 8002b0a:	4770      	bx	lr
 8002b0c:	40012c00 	.word	0x40012c00

08002b10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b087      	sub	sp, #28
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a1b      	ldr	r3, [r3, #32]
 8002b1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	69db      	ldr	r3, [r3, #28]
 8002b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f023 0303 	bic.w	r3, r3, #3
 8002b46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	021b      	lsls	r3, r3, #8
 8002b60:	697a      	ldr	r2, [r7, #20]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a1d      	ldr	r2, [pc, #116]	; (8002be0 <TIM_OC3_SetConfig+0xd0>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d10d      	bne.n	8002b8a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	021b      	lsls	r3, r3, #8
 8002b7c:	697a      	ldr	r2, [r7, #20]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a14      	ldr	r2, [pc, #80]	; (8002be0 <TIM_OC3_SetConfig+0xd0>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d113      	bne.n	8002bba <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ba0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	011b      	lsls	r3, r3, #4
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	699b      	ldr	r3, [r3, #24]
 8002bb2:	011b      	lsls	r3, r3, #4
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685a      	ldr	r2, [r3, #4]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	697a      	ldr	r2, [r7, #20]
 8002bd2:	621a      	str	r2, [r3, #32]
}
 8002bd4:	bf00      	nop
 8002bd6:	371c      	adds	r7, #28
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bc80      	pop	{r7}
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	40012c00 	.word	0x40012c00

08002be4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b087      	sub	sp, #28
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a1b      	ldr	r3, [r3, #32]
 8002bf2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a1b      	ldr	r3, [r3, #32]
 8002bf8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	69db      	ldr	r3, [r3, #28]
 8002c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	021b      	lsls	r3, r3, #8
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	031b      	lsls	r3, r3, #12
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4a0f      	ldr	r2, [pc, #60]	; (8002c7c <TIM_OC4_SetConfig+0x98>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d109      	bne.n	8002c58 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	695b      	ldr	r3, [r3, #20]
 8002c50:	019b      	lsls	r3, r3, #6
 8002c52:	697a      	ldr	r2, [r7, #20]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685a      	ldr	r2, [r3, #4]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	621a      	str	r2, [r3, #32]
}
 8002c72:	bf00      	nop
 8002c74:	371c      	adds	r7, #28
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bc80      	pop	{r7}
 8002c7a:	4770      	bx	lr
 8002c7c:	40012c00 	.word	0x40012c00

08002c80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b087      	sub	sp, #28
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6a1b      	ldr	r3, [r3, #32]
 8002c90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6a1b      	ldr	r3, [r3, #32]
 8002c96:	f023 0201 	bic.w	r2, r3, #1
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002caa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	011b      	lsls	r3, r3, #4
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	f023 030a 	bic.w	r3, r3, #10
 8002cbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	693a      	ldr	r2, [r7, #16]
 8002cca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	621a      	str	r2, [r3, #32]
}
 8002cd2:	bf00      	nop
 8002cd4:	371c      	adds	r7, #28
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bc80      	pop	{r7}
 8002cda:	4770      	bx	lr

08002cdc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b087      	sub	sp, #28
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6a1b      	ldr	r3, [r3, #32]
 8002cec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6a1b      	ldr	r3, [r3, #32]
 8002cf2:	f023 0210 	bic.w	r2, r3, #16
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	031b      	lsls	r3, r3, #12
 8002d0c:	693a      	ldr	r2, [r7, #16]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d18:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	011b      	lsls	r3, r3, #4
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	697a      	ldr	r2, [r7, #20]
 8002d2e:	621a      	str	r2, [r3, #32]
}
 8002d30:	bf00      	nop
 8002d32:	371c      	adds	r7, #28
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bc80      	pop	{r7}
 8002d38:	4770      	bx	lr

08002d3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	b085      	sub	sp, #20
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
 8002d42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d52:	683a      	ldr	r2, [r7, #0]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	f043 0307 	orr.w	r3, r3, #7
 8002d5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	609a      	str	r2, [r3, #8]
}
 8002d64:	bf00      	nop
 8002d66:	3714      	adds	r7, #20
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bc80      	pop	{r7}
 8002d6c:	4770      	bx	lr

08002d6e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	b087      	sub	sp, #28
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	60f8      	str	r0, [r7, #12]
 8002d76:	60b9      	str	r1, [r7, #8]
 8002d78:	607a      	str	r2, [r7, #4]
 8002d7a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d88:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	021a      	lsls	r2, r3, #8
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	431a      	orrs	r2, r3
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	697a      	ldr	r2, [r7, #20]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	609a      	str	r2, [r3, #8]
}
 8002da2:	bf00      	nop
 8002da4:	371c      	adds	r7, #28
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bc80      	pop	{r7}
 8002daa:	4770      	bx	lr

08002dac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b087      	sub	sp, #28
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	f003 031f 	and.w	r3, r3, #31
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6a1a      	ldr	r2, [r3, #32]
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	401a      	ands	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6a1a      	ldr	r2, [r3, #32]
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	f003 031f 	and.w	r3, r3, #31
 8002dde:	6879      	ldr	r1, [r7, #4]
 8002de0:	fa01 f303 	lsl.w	r3, r1, r3
 8002de4:	431a      	orrs	r2, r3
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	621a      	str	r2, [r3, #32]
}
 8002dea:	bf00      	nop
 8002dec:	371c      	adds	r7, #28
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bc80      	pop	{r7}
 8002df2:	4770      	bx	lr

08002df4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b085      	sub	sp, #20
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d101      	bne.n	8002e0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e08:	2302      	movs	r3, #2
 8002e0a:	e046      	b.n	8002e9a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2202      	movs	r2, #2
 8002e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68fa      	ldr	r2, [r7, #12]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a16      	ldr	r2, [pc, #88]	; (8002ea4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d00e      	beq.n	8002e6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e58:	d009      	beq.n	8002e6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a12      	ldr	r2, [pc, #72]	; (8002ea8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d004      	beq.n	8002e6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a10      	ldr	r2, [pc, #64]	; (8002eac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d10c      	bne.n	8002e88 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	68ba      	ldr	r2, [r7, #8]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68ba      	ldr	r2, [r7, #8]
 8002e86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3714      	adds	r7, #20
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bc80      	pop	{r7}
 8002ea2:	4770      	bx	lr
 8002ea4:	40012c00 	.word	0x40012c00
 8002ea8:	40000400 	.word	0x40000400
 8002eac:	40000800 	.word	0x40000800

08002eb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bc80      	pop	{r7}
 8002ec0:	4770      	bx	lr

08002ec2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	b083      	sub	sp, #12
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002eca:	bf00      	nop
 8002ecc:	370c      	adds	r7, #12
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bc80      	pop	{r7}
 8002ed2:	4770      	bx	lr

08002ed4 <__errno>:
 8002ed4:	4b01      	ldr	r3, [pc, #4]	; (8002edc <__errno+0x8>)
 8002ed6:	6818      	ldr	r0, [r3, #0]
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	2000003c 	.word	0x2000003c

08002ee0 <__libc_init_array>:
 8002ee0:	b570      	push	{r4, r5, r6, lr}
 8002ee2:	2600      	movs	r6, #0
 8002ee4:	4d0c      	ldr	r5, [pc, #48]	; (8002f18 <__libc_init_array+0x38>)
 8002ee6:	4c0d      	ldr	r4, [pc, #52]	; (8002f1c <__libc_init_array+0x3c>)
 8002ee8:	1b64      	subs	r4, r4, r5
 8002eea:	10a4      	asrs	r4, r4, #2
 8002eec:	42a6      	cmp	r6, r4
 8002eee:	d109      	bne.n	8002f04 <__libc_init_array+0x24>
 8002ef0:	f000 f8f6 	bl	80030e0 <_init>
 8002ef4:	2600      	movs	r6, #0
 8002ef6:	4d0a      	ldr	r5, [pc, #40]	; (8002f20 <__libc_init_array+0x40>)
 8002ef8:	4c0a      	ldr	r4, [pc, #40]	; (8002f24 <__libc_init_array+0x44>)
 8002efa:	1b64      	subs	r4, r4, r5
 8002efc:	10a4      	asrs	r4, r4, #2
 8002efe:	42a6      	cmp	r6, r4
 8002f00:	d105      	bne.n	8002f0e <__libc_init_array+0x2e>
 8002f02:	bd70      	pop	{r4, r5, r6, pc}
 8002f04:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f08:	4798      	blx	r3
 8002f0a:	3601      	adds	r6, #1
 8002f0c:	e7ee      	b.n	8002eec <__libc_init_array+0xc>
 8002f0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f12:	4798      	blx	r3
 8002f14:	3601      	adds	r6, #1
 8002f16:	e7f2      	b.n	8002efe <__libc_init_array+0x1e>
 8002f18:	0800311c 	.word	0x0800311c
 8002f1c:	0800311c 	.word	0x0800311c
 8002f20:	0800311c 	.word	0x0800311c
 8002f24:	08003120 	.word	0x08003120

08002f28 <malloc>:
 8002f28:	4b02      	ldr	r3, [pc, #8]	; (8002f34 <malloc+0xc>)
 8002f2a:	4601      	mov	r1, r0
 8002f2c:	6818      	ldr	r0, [r3, #0]
 8002f2e:	f000 b85f 	b.w	8002ff0 <_malloc_r>
 8002f32:	bf00      	nop
 8002f34:	2000003c 	.word	0x2000003c

08002f38 <free>:
 8002f38:	4b02      	ldr	r3, [pc, #8]	; (8002f44 <free+0xc>)
 8002f3a:	4601      	mov	r1, r0
 8002f3c:	6818      	ldr	r0, [r3, #0]
 8002f3e:	f000 b80b 	b.w	8002f58 <_free_r>
 8002f42:	bf00      	nop
 8002f44:	2000003c 	.word	0x2000003c

08002f48 <memset>:
 8002f48:	4603      	mov	r3, r0
 8002f4a:	4402      	add	r2, r0
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d100      	bne.n	8002f52 <memset+0xa>
 8002f50:	4770      	bx	lr
 8002f52:	f803 1b01 	strb.w	r1, [r3], #1
 8002f56:	e7f9      	b.n	8002f4c <memset+0x4>

08002f58 <_free_r>:
 8002f58:	b538      	push	{r3, r4, r5, lr}
 8002f5a:	4605      	mov	r5, r0
 8002f5c:	2900      	cmp	r1, #0
 8002f5e:	d043      	beq.n	8002fe8 <_free_r+0x90>
 8002f60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f64:	1f0c      	subs	r4, r1, #4
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	bfb8      	it	lt
 8002f6a:	18e4      	addlt	r4, r4, r3
 8002f6c:	f000 f8aa 	bl	80030c4 <__malloc_lock>
 8002f70:	4a1e      	ldr	r2, [pc, #120]	; (8002fec <_free_r+0x94>)
 8002f72:	6813      	ldr	r3, [r2, #0]
 8002f74:	4610      	mov	r0, r2
 8002f76:	b933      	cbnz	r3, 8002f86 <_free_r+0x2e>
 8002f78:	6063      	str	r3, [r4, #4]
 8002f7a:	6014      	str	r4, [r2, #0]
 8002f7c:	4628      	mov	r0, r5
 8002f7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f82:	f000 b8a5 	b.w	80030d0 <__malloc_unlock>
 8002f86:	42a3      	cmp	r3, r4
 8002f88:	d90a      	bls.n	8002fa0 <_free_r+0x48>
 8002f8a:	6821      	ldr	r1, [r4, #0]
 8002f8c:	1862      	adds	r2, r4, r1
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	bf01      	itttt	eq
 8002f92:	681a      	ldreq	r2, [r3, #0]
 8002f94:	685b      	ldreq	r3, [r3, #4]
 8002f96:	1852      	addeq	r2, r2, r1
 8002f98:	6022      	streq	r2, [r4, #0]
 8002f9a:	6063      	str	r3, [r4, #4]
 8002f9c:	6004      	str	r4, [r0, #0]
 8002f9e:	e7ed      	b.n	8002f7c <_free_r+0x24>
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	b10b      	cbz	r3, 8002faa <_free_r+0x52>
 8002fa6:	42a3      	cmp	r3, r4
 8002fa8:	d9fa      	bls.n	8002fa0 <_free_r+0x48>
 8002faa:	6811      	ldr	r1, [r2, #0]
 8002fac:	1850      	adds	r0, r2, r1
 8002fae:	42a0      	cmp	r0, r4
 8002fb0:	d10b      	bne.n	8002fca <_free_r+0x72>
 8002fb2:	6820      	ldr	r0, [r4, #0]
 8002fb4:	4401      	add	r1, r0
 8002fb6:	1850      	adds	r0, r2, r1
 8002fb8:	4283      	cmp	r3, r0
 8002fba:	6011      	str	r1, [r2, #0]
 8002fbc:	d1de      	bne.n	8002f7c <_free_r+0x24>
 8002fbe:	6818      	ldr	r0, [r3, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	4401      	add	r1, r0
 8002fc4:	6011      	str	r1, [r2, #0]
 8002fc6:	6053      	str	r3, [r2, #4]
 8002fc8:	e7d8      	b.n	8002f7c <_free_r+0x24>
 8002fca:	d902      	bls.n	8002fd2 <_free_r+0x7a>
 8002fcc:	230c      	movs	r3, #12
 8002fce:	602b      	str	r3, [r5, #0]
 8002fd0:	e7d4      	b.n	8002f7c <_free_r+0x24>
 8002fd2:	6820      	ldr	r0, [r4, #0]
 8002fd4:	1821      	adds	r1, r4, r0
 8002fd6:	428b      	cmp	r3, r1
 8002fd8:	bf01      	itttt	eq
 8002fda:	6819      	ldreq	r1, [r3, #0]
 8002fdc:	685b      	ldreq	r3, [r3, #4]
 8002fde:	1809      	addeq	r1, r1, r0
 8002fe0:	6021      	streq	r1, [r4, #0]
 8002fe2:	6063      	str	r3, [r4, #4]
 8002fe4:	6054      	str	r4, [r2, #4]
 8002fe6:	e7c9      	b.n	8002f7c <_free_r+0x24>
 8002fe8:	bd38      	pop	{r3, r4, r5, pc}
 8002fea:	bf00      	nop
 8002fec:	200000fc 	.word	0x200000fc

08002ff0 <_malloc_r>:
 8002ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ff2:	1ccd      	adds	r5, r1, #3
 8002ff4:	f025 0503 	bic.w	r5, r5, #3
 8002ff8:	3508      	adds	r5, #8
 8002ffa:	2d0c      	cmp	r5, #12
 8002ffc:	bf38      	it	cc
 8002ffe:	250c      	movcc	r5, #12
 8003000:	2d00      	cmp	r5, #0
 8003002:	4606      	mov	r6, r0
 8003004:	db01      	blt.n	800300a <_malloc_r+0x1a>
 8003006:	42a9      	cmp	r1, r5
 8003008:	d903      	bls.n	8003012 <_malloc_r+0x22>
 800300a:	230c      	movs	r3, #12
 800300c:	6033      	str	r3, [r6, #0]
 800300e:	2000      	movs	r0, #0
 8003010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003012:	f000 f857 	bl	80030c4 <__malloc_lock>
 8003016:	4921      	ldr	r1, [pc, #132]	; (800309c <_malloc_r+0xac>)
 8003018:	680a      	ldr	r2, [r1, #0]
 800301a:	4614      	mov	r4, r2
 800301c:	b99c      	cbnz	r4, 8003046 <_malloc_r+0x56>
 800301e:	4f20      	ldr	r7, [pc, #128]	; (80030a0 <_malloc_r+0xb0>)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	b923      	cbnz	r3, 800302e <_malloc_r+0x3e>
 8003024:	4621      	mov	r1, r4
 8003026:	4630      	mov	r0, r6
 8003028:	f000 f83c 	bl	80030a4 <_sbrk_r>
 800302c:	6038      	str	r0, [r7, #0]
 800302e:	4629      	mov	r1, r5
 8003030:	4630      	mov	r0, r6
 8003032:	f000 f837 	bl	80030a4 <_sbrk_r>
 8003036:	1c43      	adds	r3, r0, #1
 8003038:	d123      	bne.n	8003082 <_malloc_r+0x92>
 800303a:	230c      	movs	r3, #12
 800303c:	4630      	mov	r0, r6
 800303e:	6033      	str	r3, [r6, #0]
 8003040:	f000 f846 	bl	80030d0 <__malloc_unlock>
 8003044:	e7e3      	b.n	800300e <_malloc_r+0x1e>
 8003046:	6823      	ldr	r3, [r4, #0]
 8003048:	1b5b      	subs	r3, r3, r5
 800304a:	d417      	bmi.n	800307c <_malloc_r+0x8c>
 800304c:	2b0b      	cmp	r3, #11
 800304e:	d903      	bls.n	8003058 <_malloc_r+0x68>
 8003050:	6023      	str	r3, [r4, #0]
 8003052:	441c      	add	r4, r3
 8003054:	6025      	str	r5, [r4, #0]
 8003056:	e004      	b.n	8003062 <_malloc_r+0x72>
 8003058:	6863      	ldr	r3, [r4, #4]
 800305a:	42a2      	cmp	r2, r4
 800305c:	bf0c      	ite	eq
 800305e:	600b      	streq	r3, [r1, #0]
 8003060:	6053      	strne	r3, [r2, #4]
 8003062:	4630      	mov	r0, r6
 8003064:	f000 f834 	bl	80030d0 <__malloc_unlock>
 8003068:	f104 000b 	add.w	r0, r4, #11
 800306c:	1d23      	adds	r3, r4, #4
 800306e:	f020 0007 	bic.w	r0, r0, #7
 8003072:	1ac2      	subs	r2, r0, r3
 8003074:	d0cc      	beq.n	8003010 <_malloc_r+0x20>
 8003076:	1a1b      	subs	r3, r3, r0
 8003078:	50a3      	str	r3, [r4, r2]
 800307a:	e7c9      	b.n	8003010 <_malloc_r+0x20>
 800307c:	4622      	mov	r2, r4
 800307e:	6864      	ldr	r4, [r4, #4]
 8003080:	e7cc      	b.n	800301c <_malloc_r+0x2c>
 8003082:	1cc4      	adds	r4, r0, #3
 8003084:	f024 0403 	bic.w	r4, r4, #3
 8003088:	42a0      	cmp	r0, r4
 800308a:	d0e3      	beq.n	8003054 <_malloc_r+0x64>
 800308c:	1a21      	subs	r1, r4, r0
 800308e:	4630      	mov	r0, r6
 8003090:	f000 f808 	bl	80030a4 <_sbrk_r>
 8003094:	3001      	adds	r0, #1
 8003096:	d1dd      	bne.n	8003054 <_malloc_r+0x64>
 8003098:	e7cf      	b.n	800303a <_malloc_r+0x4a>
 800309a:	bf00      	nop
 800309c:	200000fc 	.word	0x200000fc
 80030a0:	20000100 	.word	0x20000100

080030a4 <_sbrk_r>:
 80030a4:	b538      	push	{r3, r4, r5, lr}
 80030a6:	2300      	movs	r3, #0
 80030a8:	4d05      	ldr	r5, [pc, #20]	; (80030c0 <_sbrk_r+0x1c>)
 80030aa:	4604      	mov	r4, r0
 80030ac:	4608      	mov	r0, r1
 80030ae:	602b      	str	r3, [r5, #0]
 80030b0:	f7fe f830 	bl	8001114 <_sbrk>
 80030b4:	1c43      	adds	r3, r0, #1
 80030b6:	d102      	bne.n	80030be <_sbrk_r+0x1a>
 80030b8:	682b      	ldr	r3, [r5, #0]
 80030ba:	b103      	cbz	r3, 80030be <_sbrk_r+0x1a>
 80030bc:	6023      	str	r3, [r4, #0]
 80030be:	bd38      	pop	{r3, r4, r5, pc}
 80030c0:	200001b0 	.word	0x200001b0

080030c4 <__malloc_lock>:
 80030c4:	4801      	ldr	r0, [pc, #4]	; (80030cc <__malloc_lock+0x8>)
 80030c6:	f000 b809 	b.w	80030dc <__retarget_lock_acquire_recursive>
 80030ca:	bf00      	nop
 80030cc:	200001b8 	.word	0x200001b8

080030d0 <__malloc_unlock>:
 80030d0:	4801      	ldr	r0, [pc, #4]	; (80030d8 <__malloc_unlock+0x8>)
 80030d2:	f000 b804 	b.w	80030de <__retarget_lock_release_recursive>
 80030d6:	bf00      	nop
 80030d8:	200001b8 	.word	0x200001b8

080030dc <__retarget_lock_acquire_recursive>:
 80030dc:	4770      	bx	lr

080030de <__retarget_lock_release_recursive>:
 80030de:	4770      	bx	lr

080030e0 <_init>:
 80030e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030e2:	bf00      	nop
 80030e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030e6:	bc08      	pop	{r3}
 80030e8:	469e      	mov	lr, r3
 80030ea:	4770      	bx	lr

080030ec <_fini>:
 80030ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ee:	bf00      	nop
 80030f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030f2:	bc08      	pop	{r3}
 80030f4:	469e      	mov	lr, r3
 80030f6:	4770      	bx	lr


Assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033bc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080034c8  080034c8  000134c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034ec  080034ec  000200a4  2**0
                  CONTENTS
  4 .ARM          00000000  080034ec  080034ec  000200a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080034ec  080034ec  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034ec  080034ec  000134ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034f0  080034f0  000134f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  080034f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  200000a4  08003598  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  08003598  000201d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000caaa  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002316  00000000  00000000  0002cb77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b20  00000000  00000000  0002ee90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009e0  00000000  00000000  0002f9b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000185e9  00000000  00000000  00030390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d8ae  00000000  00000000  00048979  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088cfb  00000000  00000000  00056227  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000def22  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cd4  00000000  00000000  000def78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a4 	.word	0x200000a4
 8000128:	00000000 	.word	0x00000000
 800012c:	080034b0 	.word	0x080034b0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a8 	.word	0x200000a8
 8000148:	080034b0 	.word	0x080034b0

0800014c <Button_Reading>:
// Defining  counter for automatically increasing the value
// After the button is pressed more than 1 second.

int buttonFlag[N0_OF_BUTTONS] = {0};
void Button_Reading(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	for(int i = 0; i < N0_OF_BUTTONS; i ++)
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e076      	b.n	8000246 <Button_Reading+0xfa>
	{
		debounceButtonBuffer3[i] =debounceButtonBuffer2[i];
 8000158:	4a3f      	ldr	r2, [pc, #252]	; (8000258 <Button_Reading+0x10c>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	4413      	add	r3, r2
 800015e:	7819      	ldrb	r1, [r3, #0]
 8000160:	4a3e      	ldr	r2, [pc, #248]	; (800025c <Button_Reading+0x110>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	4413      	add	r3, r2
 8000166:	460a      	mov	r2, r1
 8000168:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer2[i] =debounceButtonBuffer1[i];
 800016a:	4a3d      	ldr	r2, [pc, #244]	; (8000260 <Button_Reading+0x114>)
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	4413      	add	r3, r2
 8000170:	7819      	ldrb	r1, [r3, #0]
 8000172:	4a39      	ldr	r2, [pc, #228]	; (8000258 <Button_Reading+0x10c>)
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	4413      	add	r3, r2
 8000178:	460a      	mov	r2, r1
 800017a:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(buttonGPIO[i], buttonPin[i]);
 800017c:	4a39      	ldr	r2, [pc, #228]	; (8000264 <Button_Reading+0x118>)
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000184:	4938      	ldr	r1, [pc, #224]	; (8000268 <Button_Reading+0x11c>)
 8000186:	687b      	ldr	r3, [r7, #4]
 8000188:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800018c:	b29b      	uxth	r3, r3
 800018e:	4619      	mov	r1, r3
 8000190:	4610      	mov	r0, r2
 8000192:	f001 fcfd 	bl	8001b90 <HAL_GPIO_ReadPin>
 8000196:	4603      	mov	r3, r0
 8000198:	4619      	mov	r1, r3
 800019a:	4a31      	ldr	r2, [pc, #196]	; (8000260 <Button_Reading+0x114>)
 800019c:	687b      	ldr	r3, [r7, #4]
 800019e:	4413      	add	r3, r2
 80001a0:	460a      	mov	r2, r1
 80001a2:	701a      	strb	r2, [r3, #0]
		if(debounceButtonBuffer1[i] == debounceButtonBuffer2[i] && debounceButtonBuffer2[i] == debounceButtonBuffer3[i])
 80001a4:	4a2e      	ldr	r2, [pc, #184]	; (8000260 <Button_Reading+0x114>)
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	4413      	add	r3, r2
 80001aa:	781a      	ldrb	r2, [r3, #0]
 80001ac:	492a      	ldr	r1, [pc, #168]	; (8000258 <Button_Reading+0x10c>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	440b      	add	r3, r1
 80001b2:	781b      	ldrb	r3, [r3, #0]
 80001b4:	429a      	cmp	r2, r3
 80001b6:	d12d      	bne.n	8000214 <Button_Reading+0xc8>
 80001b8:	4a27      	ldr	r2, [pc, #156]	; (8000258 <Button_Reading+0x10c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	4413      	add	r3, r2
 80001be:	781a      	ldrb	r2, [r3, #0]
 80001c0:	4926      	ldr	r1, [pc, #152]	; (800025c <Button_Reading+0x110>)
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	440b      	add	r3, r1
 80001c6:	781b      	ldrb	r3, [r3, #0]
 80001c8:	429a      	cmp	r2, r3
 80001ca:	d123      	bne.n	8000214 <Button_Reading+0xc8>
		{
			if(debounceButtonBuffer1[i] != buttonBuffer[i])
 80001cc:	4a24      	ldr	r2, [pc, #144]	; (8000260 <Button_Reading+0x114>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	4413      	add	r3, r2
 80001d2:	781a      	ldrb	r2, [r3, #0]
 80001d4:	4925      	ldr	r1, [pc, #148]	; (800026c <Button_Reading+0x120>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	440b      	add	r3, r1
 80001da:	781b      	ldrb	r3, [r3, #0]
 80001dc:	429a      	cmp	r2, r3
 80001de:	d02e      	beq.n	800023e <Button_Reading+0xf2>
			{
				buttonBuffer[i] = debounceButtonBuffer1[i];
 80001e0:	4a1f      	ldr	r2, [pc, #124]	; (8000260 <Button_Reading+0x114>)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	4413      	add	r3, r2
 80001e6:	7819      	ldrb	r1, [r3, #0]
 80001e8:	4a20      	ldr	r2, [pc, #128]	; (800026c <Button_Reading+0x120>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	4413      	add	r3, r2
 80001ee:	460a      	mov	r2, r1
 80001f0:	701a      	strb	r2, [r3, #0]
						if(buttonBuffer[i] == BUTTON_IS_PRESSED)
 80001f2:	4a1e      	ldr	r2, [pc, #120]	; (800026c <Button_Reading+0x120>)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	4413      	add	r3, r2
 80001f8:	781b      	ldrb	r3, [r3, #0]
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d11f      	bne.n	800023e <Button_Reading+0xf2>
						{
							buttonFlag[i] = 1;
 80001fe:	4a1c      	ldr	r2, [pc, #112]	; (8000270 <Button_Reading+0x124>)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	2101      	movs	r1, #1
 8000204:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							buttonTimeOut[i] = DURATION_FOR_AUTO_INCREASING;
 8000208:	4a1a      	ldr	r2, [pc, #104]	; (8000274 <Button_Reading+0x128>)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	2164      	movs	r1, #100	; 0x64
 800020e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if(debounceButtonBuffer1[i] != buttonBuffer[i])
 8000212:	e014      	b.n	800023e <Button_Reading+0xf2>
						}
			}
		}
		else
		{
			buttonTimeOut[i]--;
 8000214:	4a17      	ldr	r2, [pc, #92]	; (8000274 <Button_Reading+0x128>)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800021c:	1e5a      	subs	r2, r3, #1
 800021e:	4915      	ldr	r1, [pc, #84]	; (8000274 <Button_Reading+0x128>)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(buttonTimeOut[i] <= 0)
 8000226:	4a13      	ldr	r2, [pc, #76]	; (8000274 <Button_Reading+0x128>)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800022e:	2b00      	cmp	r3, #0
 8000230:	dc06      	bgt.n	8000240 <Button_Reading+0xf4>
					buttonBuffer[i] = BUTTON_IS_RELEASED;
 8000232:	4a0e      	ldr	r2, [pc, #56]	; (800026c <Button_Reading+0x120>)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	4413      	add	r3, r2
 8000238:	2201      	movs	r2, #1
 800023a:	701a      	strb	r2, [r3, #0]
 800023c:	e000      	b.n	8000240 <Button_Reading+0xf4>
			if(debounceButtonBuffer1[i] != buttonBuffer[i])
 800023e:	bf00      	nop
	for(int i = 0; i < N0_OF_BUTTONS; i ++)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	3301      	adds	r3, #1
 8000244:	607b      	str	r3, [r7, #4]
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	2b03      	cmp	r3, #3
 800024a:	dd85      	ble.n	8000158 <Button_Reading+0xc>
		}
	}
}
 800024c:	bf00      	nop
 800024e:	bf00      	nop
 8000250:	3708      	adds	r7, #8
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}
 8000256:	bf00      	nop
 8000258:	200000d4 	.word	0x200000d4
 800025c:	200000d8 	.word	0x200000d8
 8000260:	200000d0 	.word	0x200000d0
 8000264:	20000004 	.word	0x20000004
 8000268:	20000014 	.word	0x20000014
 800026c:	20000000 	.word	0x20000000
 8000270:	200000dc 	.word	0x200000dc
 8000274:	200000c0 	.word	0x200000c0

08000278 <Is_Button_Pressed>:

int Is_Button_Pressed(int index)
{
 8000278:	b480      	push	{r7}
 800027a:	b083      	sub	sp, #12
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
	if(index >= N0_OF_BUTTONS || index < 0)	return 0;
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	2b03      	cmp	r3, #3
 8000284:	dc02      	bgt.n	800028c <Is_Button_Pressed+0x14>
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	2b00      	cmp	r3, #0
 800028a:	da01      	bge.n	8000290 <Is_Button_Pressed+0x18>
 800028c:	2300      	movs	r3, #0
 800028e:	e00d      	b.n	80002ac <Is_Button_Pressed+0x34>

		if(buttonFlag[index] == 1)
 8000290:	4a09      	ldr	r2, [pc, #36]	; (80002b8 <Is_Button_Pressed+0x40>)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000298:	2b01      	cmp	r3, #1
 800029a:	d106      	bne.n	80002aa <Is_Button_Pressed+0x32>
		{
			buttonFlag[index] = 0;
 800029c:	4a06      	ldr	r2, [pc, #24]	; (80002b8 <Is_Button_Pressed+0x40>)
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	2100      	movs	r1, #0
 80002a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			return 1;
 80002a6:	2301      	movs	r3, #1
 80002a8:	e000      	b.n	80002ac <Is_Button_Pressed+0x34>
		}
		return 0;
 80002aa:	2300      	movs	r3, #0
}
 80002ac:	4618      	mov	r0, r3
 80002ae:	370c      	adds	r7, #12
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bc80      	pop	{r7}
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	200000dc 	.word	0x200000dc

080002bc <buzzer>:
 */

#include "buzzer.h"

void buzzer()
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
	 htim3.Instance->CCR1=buzzerValue;
 80002c0:	4b04      	ldr	r3, [pc, #16]	; (80002d4 <buzzer+0x18>)
 80002c2:	681a      	ldr	r2, [r3, #0]
 80002c4:	4b04      	ldr	r3, [pc, #16]	; (80002d8 <buzzer+0x1c>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80002ca:	bf00      	nop
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bc80      	pop	{r7}
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
 80002d4:	200000f4 	.word	0x200000f4
 80002d8:	2000010c 	.word	0x2000010c

080002dc <clearAllLed1>:
 */
#include "main.h"
#include "displayLed.h"

void clearAllLed1()
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 80002e0:	2200      	movs	r2, #0
 80002e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002e6:	4805      	ldr	r0, [pc, #20]	; (80002fc <clearAllLed1+0x20>)
 80002e8:	f001 fc69 	bl	8001bbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 80002ec:	2200      	movs	r2, #0
 80002ee:	2108      	movs	r1, #8
 80002f0:	4803      	ldr	r0, [pc, #12]	; (8000300 <clearAllLed1+0x24>)
 80002f2:	f001 fc64 	bl	8001bbe <HAL_GPIO_WritePin>
}
 80002f6:	bf00      	nop
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	40010800 	.word	0x40010800
 8000300:	40010c00 	.word	0x40010c00

08000304 <clearAllLed2>:

void clearAllLed2()
{
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 8000308:	2200      	movs	r2, #0
 800030a:	2120      	movs	r1, #32
 800030c:	4804      	ldr	r0, [pc, #16]	; (8000320 <clearAllLed2+0x1c>)
 800030e:	f001 fc56 	bl	8001bbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8000312:	2200      	movs	r2, #0
 8000314:	2110      	movs	r1, #16
 8000316:	4802      	ldr	r0, [pc, #8]	; (8000320 <clearAllLed2+0x1c>)
 8000318:	f001 fc51 	bl	8001bbe <HAL_GPIO_WritePin>
}
 800031c:	bf00      	nop
 800031e:	bd80      	pop	{r7, pc}
 8000320:	40010c00 	.word	0x40010c00

08000324 <displayRed1>:
void displayRed1()
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000328:	2201      	movs	r2, #1
 800032a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800032e:	4805      	ldr	r0, [pc, #20]	; (8000344 <displayRed1+0x20>)
 8000330:	f001 fc45 	bl	8001bbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8000334:	2200      	movs	r2, #0
 8000336:	2108      	movs	r1, #8
 8000338:	4803      	ldr	r0, [pc, #12]	; (8000348 <displayRed1+0x24>)
 800033a:	f001 fc40 	bl	8001bbe <HAL_GPIO_WritePin>

}
 800033e:	bf00      	nop
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	40010800 	.word	0x40010800
 8000348:	40010c00 	.word	0x40010c00

0800034c <displayYellow1>:

void displayYellow1()
{
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000350:	2201      	movs	r2, #1
 8000352:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000356:	4805      	ldr	r0, [pc, #20]	; (800036c <displayYellow1+0x20>)
 8000358:	f001 fc31 	bl	8001bbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 800035c:	2201      	movs	r2, #1
 800035e:	2108      	movs	r1, #8
 8000360:	4803      	ldr	r0, [pc, #12]	; (8000370 <displayYellow1+0x24>)
 8000362:	f001 fc2c 	bl	8001bbe <HAL_GPIO_WritePin>
}
 8000366:	bf00      	nop
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	40010800 	.word	0x40010800
 8000370:	40010c00 	.word	0x40010c00

08000374 <displayGreen1>:

void displayGreen1()
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8000378:	2200      	movs	r2, #0
 800037a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800037e:	4805      	ldr	r0, [pc, #20]	; (8000394 <displayGreen1+0x20>)
 8000380:	f001 fc1d 	bl	8001bbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000384:	2201      	movs	r2, #1
 8000386:	2108      	movs	r1, #8
 8000388:	4803      	ldr	r0, [pc, #12]	; (8000398 <displayGreen1+0x24>)
 800038a:	f001 fc18 	bl	8001bbe <HAL_GPIO_WritePin>
}
 800038e:	bf00      	nop
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	40010800 	.word	0x40010800
 8000398:	40010c00 	.word	0x40010c00

0800039c <displayRed2>:

void displayRed2()
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 80003a0:	2201      	movs	r2, #1
 80003a2:	2120      	movs	r1, #32
 80003a4:	4804      	ldr	r0, [pc, #16]	; (80003b8 <displayRed2+0x1c>)
 80003a6:	f001 fc0a 	bl	8001bbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 80003aa:	2200      	movs	r2, #0
 80003ac:	2110      	movs	r1, #16
 80003ae:	4802      	ldr	r0, [pc, #8]	; (80003b8 <displayRed2+0x1c>)
 80003b0:	f001 fc05 	bl	8001bbe <HAL_GPIO_WritePin>
}
 80003b4:	bf00      	nop
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	40010c00 	.word	0x40010c00

080003bc <displayYellow2>:


void displayYellow2()
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 80003c0:	2201      	movs	r2, #1
 80003c2:	2120      	movs	r1, #32
 80003c4:	4804      	ldr	r0, [pc, #16]	; (80003d8 <displayYellow2+0x1c>)
 80003c6:	f001 fbfa 	bl	8001bbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 80003ca:	2201      	movs	r2, #1
 80003cc:	2110      	movs	r1, #16
 80003ce:	4802      	ldr	r0, [pc, #8]	; (80003d8 <displayYellow2+0x1c>)
 80003d0:	f001 fbf5 	bl	8001bbe <HAL_GPIO_WritePin>
}
 80003d4:	bf00      	nop
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	40010c00 	.word	0x40010c00

080003dc <displayGreen2>:

void displayGreen2()
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 80003e0:	2200      	movs	r2, #0
 80003e2:	2120      	movs	r1, #32
 80003e4:	4804      	ldr	r0, [pc, #16]	; (80003f8 <displayGreen2+0x1c>)
 80003e6:	f001 fbea 	bl	8001bbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 80003ea:	2201      	movs	r2, #1
 80003ec:	2110      	movs	r1, #16
 80003ee:	4802      	ldr	r0, [pc, #8]	; (80003f8 <displayGreen2+0x1c>)
 80003f0:	f001 fbe5 	bl	8001bbe <HAL_GPIO_WritePin>
}
 80003f4:	bf00      	nop
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	40010c00 	.word	0x40010c00

080003fc <toggleRed>:

void toggleRed()
{	// Remember to clear all led before toggle
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(D2_GPIO_Port, D2_Pin);
 8000400:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000404:	4804      	ldr	r0, [pc, #16]	; (8000418 <toggleRed+0x1c>)
 8000406:	f001 fbf2 	bl	8001bee <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);
 800040a:	2120      	movs	r1, #32
 800040c:	4803      	ldr	r0, [pc, #12]	; (800041c <toggleRed+0x20>)
 800040e:	f001 fbee 	bl	8001bee <HAL_GPIO_TogglePin>
}
 8000412:	bf00      	nop
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	40010800 	.word	0x40010800
 800041c:	40010c00 	.word	0x40010c00

08000420 <toggleYellow>:

void toggleYellow()
{	// Remember to clear all led before toggle
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(D2_GPIO_Port, D2_Pin);
 8000424:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000428:	4808      	ldr	r0, [pc, #32]	; (800044c <toggleYellow+0x2c>)
 800042a:	f001 fbe0 	bl	8001bee <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
 800042e:	2108      	movs	r1, #8
 8000430:	4807      	ldr	r0, [pc, #28]	; (8000450 <toggleYellow+0x30>)
 8000432:	f001 fbdc 	bl	8001bee <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);
 8000436:	2120      	movs	r1, #32
 8000438:	4805      	ldr	r0, [pc, #20]	; (8000450 <toggleYellow+0x30>)
 800043a:	f001 fbd8 	bl	8001bee <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D5_GPIO_Port, D5_Pin);
 800043e:	2110      	movs	r1, #16
 8000440:	4803      	ldr	r0, [pc, #12]	; (8000450 <toggleYellow+0x30>)
 8000442:	f001 fbd4 	bl	8001bee <HAL_GPIO_TogglePin>
}
 8000446:	bf00      	nop
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	40010800 	.word	0x40010800
 8000450:	40010c00 	.word	0x40010c00

08000454 <toggleGreen>:

void toggleGreen()
{	// Remember to clear all led before toggle
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
 8000458:	2108      	movs	r1, #8
 800045a:	4804      	ldr	r0, [pc, #16]	; (800046c <toggleGreen+0x18>)
 800045c:	f001 fbc7 	bl	8001bee <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D5_GPIO_Port, D5_Pin);
 8000460:	2110      	movs	r1, #16
 8000462:	4802      	ldr	r0, [pc, #8]	; (800046c <toggleGreen+0x18>)
 8000464:	f001 fbc3 	bl	8001bee <HAL_GPIO_TogglePin>
}
 8000468:	bf00      	nop
 800046a:	bd80      	pop	{r7, pc}
 800046c:	40010c00 	.word	0x40010c00

08000470 <clearPedestrian>:

void clearPedestrian()
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8000474:	2200      	movs	r2, #0
 8000476:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800047a:	4805      	ldr	r0, [pc, #20]	; (8000490 <clearPedestrian+0x20>)
 800047c:	f001 fb9f 	bl	8001bbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 8000480:	2200      	movs	r2, #0
 8000482:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000486:	4803      	ldr	r0, [pc, #12]	; (8000494 <clearPedestrian+0x24>)
 8000488:	f001 fb99 	bl	8001bbe <HAL_GPIO_WritePin>
}
 800048c:	bf00      	nop
 800048e:	bd80      	pop	{r7, pc}
 8000490:	40010c00 	.word	0x40010c00
 8000494:	40010800 	.word	0x40010800

08000498 <displayPedestrianRed>:

void displayPedestrianRed()
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
 800049c:	2201      	movs	r2, #1
 800049e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004a2:	4805      	ldr	r0, [pc, #20]	; (80004b8 <displayPedestrianRed+0x20>)
 80004a4:	f001 fb8b 	bl	8001bbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 80004a8:	2200      	movs	r2, #0
 80004aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004ae:	4803      	ldr	r0, [pc, #12]	; (80004bc <displayPedestrianRed+0x24>)
 80004b0:	f001 fb85 	bl	8001bbe <HAL_GPIO_WritePin>
}
 80004b4:	bf00      	nop
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	40010c00 	.word	0x40010c00
 80004bc:	40010800 	.word	0x40010800

080004c0 <displayPedestrianGreen>:
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
}

void displayPedestrianGreen()
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 80004c4:	2200      	movs	r2, #0
 80004c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004ca:	4805      	ldr	r0, [pc, #20]	; (80004e0 <displayPedestrianGreen+0x20>)
 80004cc:	f001 fb77 	bl	8001bbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 80004d0:	2201      	movs	r2, #1
 80004d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004d6:	4803      	ldr	r0, [pc, #12]	; (80004e4 <displayPedestrianGreen+0x24>)
 80004d8:	f001 fb71 	bl	8001bbe <HAL_GPIO_WritePin>
}
 80004dc:	bf00      	nop
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	40010c00 	.word	0x40010c00
 80004e4:	40010800 	.word	0x40010800

080004e8 <increase>:
 */

#include "global.h"

void increase()
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
	time1++;
 80004ec:	4b07      	ldr	r3, [pc, #28]	; (800050c <increase+0x24>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	3301      	adds	r3, #1
 80004f2:	4a06      	ldr	r2, [pc, #24]	; (800050c <increase+0x24>)
 80004f4:	6013      	str	r3, [r2, #0]
	if(time1 > 99)
 80004f6:	4b05      	ldr	r3, [pc, #20]	; (800050c <increase+0x24>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	2b63      	cmp	r3, #99	; 0x63
 80004fc:	dd02      	ble.n	8000504 <increase+0x1c>
		time1 = 1;
 80004fe:	4b03      	ldr	r3, [pc, #12]	; (800050c <increase+0x24>)
 8000500:	2201      	movs	r2, #1
 8000502:	601a      	str	r2, [r3, #0]
}
 8000504:	bf00      	nop
 8000506:	46bd      	mov	sp, r7
 8000508:	bc80      	pop	{r7}
 800050a:	4770      	bx	lr
 800050c:	20000108 	.word	0x20000108

08000510 <balance>:

void balance(int RED, int AMBER, int GREEN)
{
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
 8000516:	60f8      	str	r0, [r7, #12]
 8000518:	60b9      	str	r1, [r7, #8]
 800051a:	607a      	str	r2, [r7, #4]
	if(RED > timeRed)
 800051c:	4b5c      	ldr	r3, [pc, #368]	; (8000690 <balance+0x180>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	68fa      	ldr	r2, [r7, #12]
 8000522:	429a      	cmp	r2, r3
 8000524:	dd19      	ble.n	800055a <balance+0x4a>
	{
		timeYellow = timeYellow * (RED / timeRed);
 8000526:	4b5a      	ldr	r3, [pc, #360]	; (8000690 <balance+0x180>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	68fa      	ldr	r2, [r7, #12]
 800052c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000530:	4a58      	ldr	r2, [pc, #352]	; (8000694 <balance+0x184>)
 8000532:	6812      	ldr	r2, [r2, #0]
 8000534:	fb02 f303 	mul.w	r3, r2, r3
 8000538:	4a56      	ldr	r2, [pc, #344]	; (8000694 <balance+0x184>)
 800053a:	6013      	str	r3, [r2, #0]
		timeGreen = timeGreen * (RED / timeRed);
 800053c:	4b54      	ldr	r3, [pc, #336]	; (8000690 <balance+0x180>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	68fa      	ldr	r2, [r7, #12]
 8000542:	fb92 f3f3 	sdiv	r3, r2, r3
 8000546:	4a54      	ldr	r2, [pc, #336]	; (8000698 <balance+0x188>)
 8000548:	6812      	ldr	r2, [r2, #0]
 800054a:	fb02 f303 	mul.w	r3, r2, r3
 800054e:	4a52      	ldr	r2, [pc, #328]	; (8000698 <balance+0x188>)
 8000550:	6013      	str	r3, [r2, #0]
		timeRed = RED;
 8000552:	4a4f      	ldr	r2, [pc, #316]	; (8000690 <balance+0x180>)
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	6013      	str	r3, [r2, #0]
	{
		timeRed = (GREEN / 3) * 5;
		timeYellow = (GREEN / 3) * 2;
		timeGreen = GREEN;
	}
}
 8000558:	e094      	b.n	8000684 <balance+0x174>
	else if(AMBER > timeYellow)
 800055a:	4b4e      	ldr	r3, [pc, #312]	; (8000694 <balance+0x184>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	68ba      	ldr	r2, [r7, #8]
 8000560:	429a      	cmp	r2, r3
 8000562:	dd19      	ble.n	8000598 <balance+0x88>
		timeRed = timeRed * (AMBER / timeYellow);
 8000564:	4b4b      	ldr	r3, [pc, #300]	; (8000694 <balance+0x184>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	68ba      	ldr	r2, [r7, #8]
 800056a:	fb92 f3f3 	sdiv	r3, r2, r3
 800056e:	4a48      	ldr	r2, [pc, #288]	; (8000690 <balance+0x180>)
 8000570:	6812      	ldr	r2, [r2, #0]
 8000572:	fb02 f303 	mul.w	r3, r2, r3
 8000576:	4a46      	ldr	r2, [pc, #280]	; (8000690 <balance+0x180>)
 8000578:	6013      	str	r3, [r2, #0]
		timeGreen = timeGreen * (AMBER / timeYellow);
 800057a:	4b46      	ldr	r3, [pc, #280]	; (8000694 <balance+0x184>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	68ba      	ldr	r2, [r7, #8]
 8000580:	fb92 f3f3 	sdiv	r3, r2, r3
 8000584:	4a44      	ldr	r2, [pc, #272]	; (8000698 <balance+0x188>)
 8000586:	6812      	ldr	r2, [r2, #0]
 8000588:	fb02 f303 	mul.w	r3, r2, r3
 800058c:	4a42      	ldr	r2, [pc, #264]	; (8000698 <balance+0x188>)
 800058e:	6013      	str	r3, [r2, #0]
		timeYellow = AMBER;
 8000590:	4a40      	ldr	r2, [pc, #256]	; (8000694 <balance+0x184>)
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	6013      	str	r3, [r2, #0]
}
 8000596:	e075      	b.n	8000684 <balance+0x174>
	else if(GREEN > timeGreen)
 8000598:	4b3f      	ldr	r3, [pc, #252]	; (8000698 <balance+0x188>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	687a      	ldr	r2, [r7, #4]
 800059e:	429a      	cmp	r2, r3
 80005a0:	dd18      	ble.n	80005d4 <balance+0xc4>
		timeRed = timeRed * (GREEN / timeGreen);
 80005a2:	4b3d      	ldr	r3, [pc, #244]	; (8000698 <balance+0x188>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	687a      	ldr	r2, [r7, #4]
 80005a8:	fb92 f3f3 	sdiv	r3, r2, r3
 80005ac:	4a38      	ldr	r2, [pc, #224]	; (8000690 <balance+0x180>)
 80005ae:	6812      	ldr	r2, [r2, #0]
 80005b0:	fb02 f303 	mul.w	r3, r2, r3
 80005b4:	4a36      	ldr	r2, [pc, #216]	; (8000690 <balance+0x180>)
 80005b6:	6013      	str	r3, [r2, #0]
		timeYellow = AMBER * (GREEN / timeGreen);
 80005b8:	4b37      	ldr	r3, [pc, #220]	; (8000698 <balance+0x188>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	687a      	ldr	r2, [r7, #4]
 80005be:	fb92 f3f3 	sdiv	r3, r2, r3
 80005c2:	68ba      	ldr	r2, [r7, #8]
 80005c4:	fb02 f303 	mul.w	r3, r2, r3
 80005c8:	4a32      	ldr	r2, [pc, #200]	; (8000694 <balance+0x184>)
 80005ca:	6013      	str	r3, [r2, #0]
		timeGreen = GREEN;
 80005cc:	4a32      	ldr	r2, [pc, #200]	; (8000698 <balance+0x188>)
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	6013      	str	r3, [r2, #0]
}
 80005d2:	e057      	b.n	8000684 <balance+0x174>
	else if(RED < timeRed)
 80005d4:	4b2e      	ldr	r3, [pc, #184]	; (8000690 <balance+0x180>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	68fa      	ldr	r2, [r7, #12]
 80005da:	429a      	cmp	r2, r3
 80005dc:	da19      	bge.n	8000612 <balance+0x102>
		timeYellow = (RED / 5) * 2;
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	4a2e      	ldr	r2, [pc, #184]	; (800069c <balance+0x18c>)
 80005e2:	fb82 1203 	smull	r1, r2, r2, r3
 80005e6:	1052      	asrs	r2, r2, #1
 80005e8:	17db      	asrs	r3, r3, #31
 80005ea:	1ad3      	subs	r3, r2, r3
 80005ec:	005b      	lsls	r3, r3, #1
 80005ee:	4a29      	ldr	r2, [pc, #164]	; (8000694 <balance+0x184>)
 80005f0:	6013      	str	r3, [r2, #0]
		timeGreen = (RED / 5) * 3;
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	4a29      	ldr	r2, [pc, #164]	; (800069c <balance+0x18c>)
 80005f6:	fb82 1203 	smull	r1, r2, r2, r3
 80005fa:	1052      	asrs	r2, r2, #1
 80005fc:	17db      	asrs	r3, r3, #31
 80005fe:	1ad2      	subs	r2, r2, r3
 8000600:	4613      	mov	r3, r2
 8000602:	005b      	lsls	r3, r3, #1
 8000604:	4413      	add	r3, r2
 8000606:	4a24      	ldr	r2, [pc, #144]	; (8000698 <balance+0x188>)
 8000608:	6013      	str	r3, [r2, #0]
		timeRed = RED;
 800060a:	4a21      	ldr	r2, [pc, #132]	; (8000690 <balance+0x180>)
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	6013      	str	r3, [r2, #0]
}
 8000610:	e038      	b.n	8000684 <balance+0x174>
	else if(AMBER < timeYellow)
 8000612:	4b20      	ldr	r3, [pc, #128]	; (8000694 <balance+0x184>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	68ba      	ldr	r2, [r7, #8]
 8000618:	429a      	cmp	r2, r3
 800061a:	da17      	bge.n	800064c <balance+0x13c>
		timeRed = (AMBER / 2) * 5;
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	0fda      	lsrs	r2, r3, #31
 8000620:	4413      	add	r3, r2
 8000622:	105b      	asrs	r3, r3, #1
 8000624:	461a      	mov	r2, r3
 8000626:	4613      	mov	r3, r2
 8000628:	009b      	lsls	r3, r3, #2
 800062a:	4413      	add	r3, r2
 800062c:	4a18      	ldr	r2, [pc, #96]	; (8000690 <balance+0x180>)
 800062e:	6013      	str	r3, [r2, #0]
		timeGreen = (AMBER / 2) * 3;
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	0fda      	lsrs	r2, r3, #31
 8000634:	4413      	add	r3, r2
 8000636:	105b      	asrs	r3, r3, #1
 8000638:	461a      	mov	r2, r3
 800063a:	4613      	mov	r3, r2
 800063c:	005b      	lsls	r3, r3, #1
 800063e:	4413      	add	r3, r2
 8000640:	4a15      	ldr	r2, [pc, #84]	; (8000698 <balance+0x188>)
 8000642:	6013      	str	r3, [r2, #0]
		timeYellow = AMBER;
 8000644:	4a13      	ldr	r2, [pc, #76]	; (8000694 <balance+0x184>)
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	6013      	str	r3, [r2, #0]
}
 800064a:	e01b      	b.n	8000684 <balance+0x174>
	else if(GREEN < timeGreen)
 800064c:	4b12      	ldr	r3, [pc, #72]	; (8000698 <balance+0x188>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	687a      	ldr	r2, [r7, #4]
 8000652:	429a      	cmp	r2, r3
 8000654:	da16      	bge.n	8000684 <balance+0x174>
		timeRed = (GREEN / 3) * 5;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	4a11      	ldr	r2, [pc, #68]	; (80006a0 <balance+0x190>)
 800065a:	fb82 1203 	smull	r1, r2, r2, r3
 800065e:	17db      	asrs	r3, r3, #31
 8000660:	1ad2      	subs	r2, r2, r3
 8000662:	4613      	mov	r3, r2
 8000664:	009b      	lsls	r3, r3, #2
 8000666:	4413      	add	r3, r2
 8000668:	4a09      	ldr	r2, [pc, #36]	; (8000690 <balance+0x180>)
 800066a:	6013      	str	r3, [r2, #0]
		timeYellow = (GREEN / 3) * 2;
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	4a0c      	ldr	r2, [pc, #48]	; (80006a0 <balance+0x190>)
 8000670:	fb82 1203 	smull	r1, r2, r2, r3
 8000674:	17db      	asrs	r3, r3, #31
 8000676:	1ad3      	subs	r3, r2, r3
 8000678:	005b      	lsls	r3, r3, #1
 800067a:	4a06      	ldr	r2, [pc, #24]	; (8000694 <balance+0x184>)
 800067c:	6013      	str	r3, [r2, #0]
		timeGreen = GREEN;
 800067e:	4a06      	ldr	r2, [pc, #24]	; (8000698 <balance+0x188>)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	6013      	str	r3, [r2, #0]
}
 8000684:	bf00      	nop
 8000686:	3714      	adds	r7, #20
 8000688:	46bd      	mov	sp, r7
 800068a:	bc80      	pop	{r7}
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	20000024 	.word	0x20000024
 8000694:	20000028 	.word	0x20000028
 8000698:	2000002c 	.word	0x2000002c
 800069c:	66666667 	.word	0x66666667
 80006a0:	55555556 	.word	0x55555556

080006a4 <normalState>:

void normalState(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
	switch(status)
 80006a8:	4b87      	ldr	r3, [pc, #540]	; (80008c8 <normalState+0x224>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2b0c      	cmp	r3, #12
 80006ae:	f200 82e9 	bhi.w	8000c84 <normalState+0x5e0>
 80006b2:	a201      	add	r2, pc, #4	; (adr r2, 80006b8 <normalState+0x14>)
 80006b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006b8:	080006ed 	.word	0x080006ed
 80006bc:	08000727 	.word	0x08000727
 80006c0:	080007f1 	.word	0x080007f1
 80006c4:	080008e5 	.word	0x080008e5
 80006c8:	080009db 	.word	0x080009db
 80006cc:	08000c85 	.word	0x08000c85
 80006d0:	08000c85 	.word	0x08000c85
 80006d4:	08000c85 	.word	0x08000c85
 80006d8:	08000c85 	.word	0x08000c85
 80006dc:	08000c85 	.word	0x08000c85
 80006e0:	08000aed 	.word	0x08000aed
 80006e4:	08000b89 	.word	0x08000b89
 80006e8:	08000c01 	.word	0x08000c01
	{
	case INIT:
		clearAllLed1();
 80006ec:	f7ff fdf6 	bl	80002dc <clearAllLed1>
		clearAllLed2();
 80006f0:	f7ff fe08 	bl	8000304 <clearAllLed2>

		status = RedGreen;
 80006f4:	4b74      	ldr	r3, [pc, #464]	; (80008c8 <normalState+0x224>)
 80006f6:	2201      	movs	r2, #1
 80006f8:	601a      	str	r2, [r3, #0]

		setTimer(0, timeGreen * 100);
 80006fa:	4b74      	ldr	r3, [pc, #464]	; (80008cc <normalState+0x228>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	2264      	movs	r2, #100	; 0x64
 8000700:	fb02 f303 	mul.w	r3, r2, r3
 8000704:	4619      	mov	r1, r3
 8000706:	2000      	movs	r0, #0
 8000708:	f000 fdc4 	bl	8001294 <setTimer>
		setTimer(1, 100);
 800070c:	2164      	movs	r1, #100	; 0x64
 800070e:	2001      	movs	r0, #1
 8000710:	f000 fdc0 	bl	8001294 <setTimer>

		time1 = timeRed;
 8000714:	4b6e      	ldr	r3, [pc, #440]	; (80008d0 <normalState+0x22c>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a6e      	ldr	r2, [pc, #440]	; (80008d4 <normalState+0x230>)
 800071a:	6013      	str	r3, [r2, #0]
		time2 = timeGreen;
 800071c:	4b6b      	ldr	r3, [pc, #428]	; (80008cc <normalState+0x228>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a6d      	ldr	r2, [pc, #436]	; (80008d8 <normalState+0x234>)
 8000722:	6013      	str	r3, [r2, #0]

		break;
 8000724:	e2bd      	b.n	8000ca2 <normalState+0x5fe>

	case RedGreen:
		displayRed1();
 8000726:	f7ff fdfd 	bl	8000324 <displayRed1>
		displayGreen2();
 800072a:	f7ff fe57 	bl	80003dc <displayGreen2>

		if(isTimerUp(0) == 1)	// Transit State
 800072e:	2000      	movs	r0, #0
 8000730:	f000 fd9c 	bl	800126c <isTimerUp>
 8000734:	4603      	mov	r3, r0
 8000736:	2b01      	cmp	r3, #1
 8000738:	d117      	bne.n	800076a <normalState+0xc6>
		{
			status = RedAmber;
 800073a:	4b63      	ldr	r3, [pc, #396]	; (80008c8 <normalState+0x224>)
 800073c:	2202      	movs	r2, #2
 800073e:	601a      	str	r2, [r3, #0]

			setTimer(0, timeYellow * 100);
 8000740:	4b66      	ldr	r3, [pc, #408]	; (80008dc <normalState+0x238>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	2264      	movs	r2, #100	; 0x64
 8000746:	fb02 f303 	mul.w	r3, r2, r3
 800074a:	4619      	mov	r1, r3
 800074c:	2000      	movs	r0, #0
 800074e:	f000 fda1 	bl	8001294 <setTimer>
			setTimer(1, 100);
 8000752:	2164      	movs	r1, #100	; 0x64
 8000754:	2001      	movs	r0, #1
 8000756:	f000 fd9d 	bl	8001294 <setTimer>

			time1 = timeYellow;
 800075a:	4b60      	ldr	r3, [pc, #384]	; (80008dc <normalState+0x238>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4a5d      	ldr	r2, [pc, #372]	; (80008d4 <normalState+0x230>)
 8000760:	6013      	str	r3, [r2, #0]
			time2 = timeYellow;
 8000762:	4b5e      	ldr	r3, [pc, #376]	; (80008dc <normalState+0x238>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4a5c      	ldr	r2, [pc, #368]	; (80008d8 <normalState+0x234>)
 8000768:	6013      	str	r3, [r2, #0]
		}

		if(isTimerUp(1) == 1)	// Update Time
 800076a:	2001      	movs	r0, #1
 800076c:	f000 fd7e 	bl	800126c <isTimerUp>
 8000770:	4603      	mov	r3, r0
 8000772:	2b01      	cmp	r3, #1
 8000774:	d10d      	bne.n	8000792 <normalState+0xee>
		{
			setTimer(1, 100);
 8000776:	2164      	movs	r1, #100	; 0x64
 8000778:	2001      	movs	r0, #1
 800077a:	f000 fd8b 	bl	8001294 <setTimer>

			time1--;
 800077e:	4b55      	ldr	r3, [pc, #340]	; (80008d4 <normalState+0x230>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	3b01      	subs	r3, #1
 8000784:	4a53      	ldr	r2, [pc, #332]	; (80008d4 <normalState+0x230>)
 8000786:	6013      	str	r3, [r2, #0]
			time2--;
 8000788:	4b53      	ldr	r3, [pc, #332]	; (80008d8 <normalState+0x234>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	3b01      	subs	r3, #1
 800078e:	4a52      	ldr	r2, [pc, #328]	; (80008d8 <normalState+0x234>)
 8000790:	6013      	str	r3, [r2, #0]
		}

		if(Is_Button_Pressed(1))
 8000792:	2001      	movs	r0, #1
 8000794:	f7ff fd70 	bl	8000278 <Is_Button_Pressed>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d011      	beq.n	80007c2 <normalState+0x11e>
		{
			status = ManRed;
 800079e:	4b4a      	ldr	r3, [pc, #296]	; (80008c8 <normalState+0x224>)
 80007a0:	220a      	movs	r2, #10
 80007a2:	601a      	str	r2, [r3, #0]

			time1 = timeRed;
 80007a4:	4b4a      	ldr	r3, [pc, #296]	; (80008d0 <normalState+0x22c>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a4a      	ldr	r2, [pc, #296]	; (80008d4 <normalState+0x230>)
 80007aa:	6013      	str	r3, [r2, #0]
			time2 = 2;
 80007ac:	4b4a      	ldr	r3, [pc, #296]	; (80008d8 <normalState+0x234>)
 80007ae:	2202      	movs	r2, #2
 80007b0:	601a      	str	r2, [r3, #0]

			clearAllLed1();
 80007b2:	f7ff fd93 	bl	80002dc <clearAllLed1>
			clearAllLed2();
 80007b6:	f7ff fda5 	bl	8000304 <clearAllLed2>

			setTimer(2, 25);
 80007ba:	2119      	movs	r1, #25
 80007bc:	2002      	movs	r0, #2
 80007be:	f000 fd69 	bl	8001294 <setTimer>
		}
		if(Is_Button_Pressed(0))
 80007c2:	2000      	movs	r0, #0
 80007c4:	f7ff fd58 	bl	8000278 <Is_Button_Pressed>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	f000 825c 	beq.w	8000c88 <normalState+0x5e4>
		{
			pedestrian_flag = Pedestrian_RED;
 80007d0:	4b43      	ldr	r3, [pc, #268]	; (80008e0 <normalState+0x23c>)
 80007d2:	2208      	movs	r2, #8
 80007d4:	601a      	str	r2, [r3, #0]
			setTimer(3, (timeRed + timeGreen) * 100);
 80007d6:	4b3e      	ldr	r3, [pc, #248]	; (80008d0 <normalState+0x22c>)
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	4b3c      	ldr	r3, [pc, #240]	; (80008cc <normalState+0x228>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4413      	add	r3, r2
 80007e0:	2264      	movs	r2, #100	; 0x64
 80007e2:	fb02 f303 	mul.w	r3, r2, r3
 80007e6:	4619      	mov	r1, r3
 80007e8:	2003      	movs	r0, #3
 80007ea:	f000 fd53 	bl	8001294 <setTimer>
		}

		break;
 80007ee:	e24b      	b.n	8000c88 <normalState+0x5e4>

	case RedAmber:
		displayRed1();
 80007f0:	f7ff fd98 	bl	8000324 <displayRed1>
		displayYellow2();
 80007f4:	f7ff fde2 	bl	80003bc <displayYellow2>

		if(isTimerUp(0)==1)		// Transit State
 80007f8:	2000      	movs	r0, #0
 80007fa:	f000 fd37 	bl	800126c <isTimerUp>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b01      	cmp	r3, #1
 8000802:	d11e      	bne.n	8000842 <normalState+0x19e>
		{
			status = GreenRed;
 8000804:	4b30      	ldr	r3, [pc, #192]	; (80008c8 <normalState+0x224>)
 8000806:	2203      	movs	r2, #3
 8000808:	601a      	str	r2, [r3, #0]

			setTimer(0, timeGreen * 100);
 800080a:	4b30      	ldr	r3, [pc, #192]	; (80008cc <normalState+0x228>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	2264      	movs	r2, #100	; 0x64
 8000810:	fb02 f303 	mul.w	r3, r2, r3
 8000814:	4619      	mov	r1, r3
 8000816:	2000      	movs	r0, #0
 8000818:	f000 fd3c 	bl	8001294 <setTimer>
			setTimer(1, 100);
 800081c:	2164      	movs	r1, #100	; 0x64
 800081e:	2001      	movs	r0, #1
 8000820:	f000 fd38 	bl	8001294 <setTimer>

			time1 = timeGreen;
 8000824:	4b29      	ldr	r3, [pc, #164]	; (80008cc <normalState+0x228>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a2a      	ldr	r2, [pc, #168]	; (80008d4 <normalState+0x230>)
 800082a:	6013      	str	r3, [r2, #0]
			time2 = timeRed;
 800082c:	4b28      	ldr	r3, [pc, #160]	; (80008d0 <normalState+0x22c>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a29      	ldr	r2, [pc, #164]	; (80008d8 <normalState+0x234>)
 8000832:	6013      	str	r3, [r2, #0]

			if(pedestrian_flag == Pedestrian_RED)
 8000834:	4b2a      	ldr	r3, [pc, #168]	; (80008e0 <normalState+0x23c>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2b08      	cmp	r3, #8
 800083a:	d102      	bne.n	8000842 <normalState+0x19e>
				pedestrian_flag = Pedestrian_GREEN;
 800083c:	4b28      	ldr	r3, [pc, #160]	; (80008e0 <normalState+0x23c>)
 800083e:	2209      	movs	r2, #9
 8000840:	601a      	str	r2, [r3, #0]
		}

		if(isTimerUp(0) == 1)	// Update Time
 8000842:	2000      	movs	r0, #0
 8000844:	f000 fd12 	bl	800126c <isTimerUp>
 8000848:	4603      	mov	r3, r0
 800084a:	2b01      	cmp	r3, #1
 800084c:	d10d      	bne.n	800086a <normalState+0x1c6>
		{
			setTimer(1, 100);
 800084e:	2164      	movs	r1, #100	; 0x64
 8000850:	2001      	movs	r0, #1
 8000852:	f000 fd1f 	bl	8001294 <setTimer>

			time1--;
 8000856:	4b1f      	ldr	r3, [pc, #124]	; (80008d4 <normalState+0x230>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	3b01      	subs	r3, #1
 800085c:	4a1d      	ldr	r2, [pc, #116]	; (80008d4 <normalState+0x230>)
 800085e:	6013      	str	r3, [r2, #0]
			time2--;
 8000860:	4b1d      	ldr	r3, [pc, #116]	; (80008d8 <normalState+0x234>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	3b01      	subs	r3, #1
 8000866:	4a1c      	ldr	r2, [pc, #112]	; (80008d8 <normalState+0x234>)
 8000868:	6013      	str	r3, [r2, #0]
		}

		if(Is_Button_Pressed(1))
 800086a:	2001      	movs	r0, #1
 800086c:	f7ff fd04 	bl	8000278 <Is_Button_Pressed>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d011      	beq.n	800089a <normalState+0x1f6>
		{
			status = ManRed;
 8000876:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <normalState+0x224>)
 8000878:	220a      	movs	r2, #10
 800087a:	601a      	str	r2, [r3, #0]

			time1 = timeRed;
 800087c:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <normalState+0x22c>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a14      	ldr	r2, [pc, #80]	; (80008d4 <normalState+0x230>)
 8000882:	6013      	str	r3, [r2, #0]
			time2 = 2;
 8000884:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <normalState+0x234>)
 8000886:	2202      	movs	r2, #2
 8000888:	601a      	str	r2, [r3, #0]

			clearAllLed1();
 800088a:	f7ff fd27 	bl	80002dc <clearAllLed1>
			clearAllLed2();
 800088e:	f7ff fd39 	bl	8000304 <clearAllLed2>

			setTimer(2, 25);
 8000892:	2119      	movs	r1, #25
 8000894:	2002      	movs	r0, #2
 8000896:	f000 fcfd 	bl	8001294 <setTimer>
		}

		if(Is_Button_Pressed(0))
 800089a:	2000      	movs	r0, #0
 800089c:	f7ff fcec 	bl	8000278 <Is_Button_Pressed>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	f000 81f2 	beq.w	8000c8c <normalState+0x5e8>
		{
			pedestrian_flag = Pedestrian_RED;
 80008a8:	4b0d      	ldr	r3, [pc, #52]	; (80008e0 <normalState+0x23c>)
 80008aa:	2208      	movs	r2, #8
 80008ac:	601a      	str	r2, [r3, #0]
			setTimer(3, (timeRed + timeGreen) * 100);
 80008ae:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <normalState+0x22c>)
 80008b0:	681a      	ldr	r2, [r3, #0]
 80008b2:	4b06      	ldr	r3, [pc, #24]	; (80008cc <normalState+0x228>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4413      	add	r3, r2
 80008b8:	2264      	movs	r2, #100	; 0x64
 80008ba:	fb02 f303 	mul.w	r3, r2, r3
 80008be:	4619      	mov	r1, r3
 80008c0:	2003      	movs	r0, #3
 80008c2:	f000 fce7 	bl	8001294 <setTimer>
		}

		break;
 80008c6:	e1e1      	b.n	8000c8c <normalState+0x5e8>
 80008c8:	200000ec 	.word	0x200000ec
 80008cc:	2000002c 	.word	0x2000002c
 80008d0:	20000024 	.word	0x20000024
 80008d4:	20000108 	.word	0x20000108
 80008d8:	200000f0 	.word	0x200000f0
 80008dc:	20000028 	.word	0x20000028
 80008e0:	20000030 	.word	0x20000030

	case GreenRed:
		displayGreen1();
 80008e4:	f7ff fd46 	bl	8000374 <displayGreen1>
		displayRed2();
 80008e8:	f7ff fd58 	bl	800039c <displayRed2>

		if(isTimerUp(0) == 1)	// Transit State
 80008ec:	2000      	movs	r0, #0
 80008ee:	f000 fcbd 	bl	800126c <isTimerUp>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d117      	bne.n	8000928 <normalState+0x284>
		{
			status = AmberRed;
 80008f8:	4b9b      	ldr	r3, [pc, #620]	; (8000b68 <normalState+0x4c4>)
 80008fa:	2204      	movs	r2, #4
 80008fc:	601a      	str	r2, [r3, #0]

			setTimer(0, timeYellow * 100);
 80008fe:	4b9b      	ldr	r3, [pc, #620]	; (8000b6c <normalState+0x4c8>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	2264      	movs	r2, #100	; 0x64
 8000904:	fb02 f303 	mul.w	r3, r2, r3
 8000908:	4619      	mov	r1, r3
 800090a:	2000      	movs	r0, #0
 800090c:	f000 fcc2 	bl	8001294 <setTimer>
			setTimer(1, 100);
 8000910:	2164      	movs	r1, #100	; 0x64
 8000912:	2001      	movs	r0, #1
 8000914:	f000 fcbe 	bl	8001294 <setTimer>

			time1 = timeYellow;
 8000918:	4b94      	ldr	r3, [pc, #592]	; (8000b6c <normalState+0x4c8>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a94      	ldr	r2, [pc, #592]	; (8000b70 <normalState+0x4cc>)
 800091e:	6013      	str	r3, [r2, #0]
			time2 = timeYellow;
 8000920:	4b92      	ldr	r3, [pc, #584]	; (8000b6c <normalState+0x4c8>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a93      	ldr	r2, [pc, #588]	; (8000b74 <normalState+0x4d0>)
 8000926:	6013      	str	r3, [r2, #0]
		}

		if(isTimerUp(1)==1)		// Update Time
 8000928:	2001      	movs	r0, #1
 800092a:	f000 fc9f 	bl	800126c <isTimerUp>
 800092e:	4603      	mov	r3, r0
 8000930:	2b01      	cmp	r3, #1
 8000932:	d10d      	bne.n	8000950 <normalState+0x2ac>
		{
			setTimer(1, 100);
 8000934:	2164      	movs	r1, #100	; 0x64
 8000936:	2001      	movs	r0, #1
 8000938:	f000 fcac 	bl	8001294 <setTimer>

			time1--;
 800093c:	4b8c      	ldr	r3, [pc, #560]	; (8000b70 <normalState+0x4cc>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	3b01      	subs	r3, #1
 8000942:	4a8b      	ldr	r2, [pc, #556]	; (8000b70 <normalState+0x4cc>)
 8000944:	6013      	str	r3, [r2, #0]
			time2--;
 8000946:	4b8b      	ldr	r3, [pc, #556]	; (8000b74 <normalState+0x4d0>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	3b01      	subs	r3, #1
 800094c:	4a89      	ldr	r2, [pc, #548]	; (8000b74 <normalState+0x4d0>)
 800094e:	6013      	str	r3, [r2, #0]
		}

		if(timeYellow < 5 && time1 <= 5 - timeYellow)
 8000950:	4b86      	ldr	r3, [pc, #536]	; (8000b6c <normalState+0x4c8>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	2b04      	cmp	r3, #4
 8000956:	dc11      	bgt.n	800097c <normalState+0x2d8>
 8000958:	4b84      	ldr	r3, [pc, #528]	; (8000b6c <normalState+0x4c8>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f1c3 0205 	rsb	r2, r3, #5
 8000960:	4b83      	ldr	r3, [pc, #524]	; (8000b70 <normalState+0x4cc>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	429a      	cmp	r2, r3
 8000966:	db09      	blt.n	800097c <normalState+0x2d8>
				buzzerValue = 512 * (5 - timeYellow - time1);
 8000968:	4b80      	ldr	r3, [pc, #512]	; (8000b6c <normalState+0x4c8>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f1c3 0205 	rsb	r2, r3, #5
 8000970:	4b7f      	ldr	r3, [pc, #508]	; (8000b70 <normalState+0x4cc>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	025b      	lsls	r3, r3, #9
 8000978:	4a7f      	ldr	r2, [pc, #508]	; (8000b78 <normalState+0x4d4>)
 800097a:	6013      	str	r3, [r2, #0]

		if(Is_Button_Pressed(1))
 800097c:	2001      	movs	r0, #1
 800097e:	f7ff fc7b 	bl	8000278 <Is_Button_Pressed>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d011      	beq.n	80009ac <normalState+0x308>
		{
			status = ManRed;
 8000988:	4b77      	ldr	r3, [pc, #476]	; (8000b68 <normalState+0x4c4>)
 800098a:	220a      	movs	r2, #10
 800098c:	601a      	str	r2, [r3, #0]

			time1 = timeRed;
 800098e:	4b7b      	ldr	r3, [pc, #492]	; (8000b7c <normalState+0x4d8>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4a77      	ldr	r2, [pc, #476]	; (8000b70 <normalState+0x4cc>)
 8000994:	6013      	str	r3, [r2, #0]
			time2 = 2;
 8000996:	4b77      	ldr	r3, [pc, #476]	; (8000b74 <normalState+0x4d0>)
 8000998:	2202      	movs	r2, #2
 800099a:	601a      	str	r2, [r3, #0]

			clearAllLed1();
 800099c:	f7ff fc9e 	bl	80002dc <clearAllLed1>
			clearAllLed2();
 80009a0:	f7ff fcb0 	bl	8000304 <clearAllLed2>

			setTimer(2, 25);
 80009a4:	2119      	movs	r1, #25
 80009a6:	2002      	movs	r0, #2
 80009a8:	f000 fc74 	bl	8001294 <setTimer>
		}

		if(Is_Button_Pressed(0))
 80009ac:	2000      	movs	r0, #0
 80009ae:	f7ff fc63 	bl	8000278 <Is_Button_Pressed>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	f000 816b 	beq.w	8000c90 <normalState+0x5ec>
		{
			pedestrian_flag = Pedestrian_GREEN;
 80009ba:	4b71      	ldr	r3, [pc, #452]	; (8000b80 <normalState+0x4dc>)
 80009bc:	2209      	movs	r2, #9
 80009be:	601a      	str	r2, [r3, #0]
			setTimer(3, (timeRed + timeGreen) * 100);
 80009c0:	4b6e      	ldr	r3, [pc, #440]	; (8000b7c <normalState+0x4d8>)
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	4b6f      	ldr	r3, [pc, #444]	; (8000b84 <normalState+0x4e0>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4413      	add	r3, r2
 80009ca:	2264      	movs	r2, #100	; 0x64
 80009cc:	fb02 f303 	mul.w	r3, r2, r3
 80009d0:	4619      	mov	r1, r3
 80009d2:	2003      	movs	r0, #3
 80009d4:	f000 fc5e 	bl	8001294 <setTimer>
		}

		break;
 80009d8:	e15a      	b.n	8000c90 <normalState+0x5ec>

	case AmberRed:
		displayYellow1();
 80009da:	f7ff fcb7 	bl	800034c <displayYellow1>
		displayRed2();
 80009de:	f7ff fcdd 	bl	800039c <displayRed2>

		if(isTimerUp(0) == 1)	// Transit State
 80009e2:	2000      	movs	r0, #0
 80009e4:	f000 fc42 	bl	800126c <isTimerUp>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d11e      	bne.n	8000a2c <normalState+0x388>
		{
			status = RedGreen;
 80009ee:	4b5e      	ldr	r3, [pc, #376]	; (8000b68 <normalState+0x4c4>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	601a      	str	r2, [r3, #0]

			setTimer(0, timeGreen * 100);
 80009f4:	4b63      	ldr	r3, [pc, #396]	; (8000b84 <normalState+0x4e0>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	2264      	movs	r2, #100	; 0x64
 80009fa:	fb02 f303 	mul.w	r3, r2, r3
 80009fe:	4619      	mov	r1, r3
 8000a00:	2000      	movs	r0, #0
 8000a02:	f000 fc47 	bl	8001294 <setTimer>
			setTimer(1, 100);
 8000a06:	2164      	movs	r1, #100	; 0x64
 8000a08:	2001      	movs	r0, #1
 8000a0a:	f000 fc43 	bl	8001294 <setTimer>

			time1 = timeRed;
 8000a0e:	4b5b      	ldr	r3, [pc, #364]	; (8000b7c <normalState+0x4d8>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a57      	ldr	r2, [pc, #348]	; (8000b70 <normalState+0x4cc>)
 8000a14:	6013      	str	r3, [r2, #0]
			time2 = timeGreen;
 8000a16:	4b5b      	ldr	r3, [pc, #364]	; (8000b84 <normalState+0x4e0>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4a56      	ldr	r2, [pc, #344]	; (8000b74 <normalState+0x4d0>)
 8000a1c:	6013      	str	r3, [r2, #0]

			if(pedestrian_flag == Pedestrian_GREEN)
 8000a1e:	4b58      	ldr	r3, [pc, #352]	; (8000b80 <normalState+0x4dc>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	2b09      	cmp	r3, #9
 8000a24:	d102      	bne.n	8000a2c <normalState+0x388>
				pedestrian_flag = Pedestrian_RED;
 8000a26:	4b56      	ldr	r3, [pc, #344]	; (8000b80 <normalState+0x4dc>)
 8000a28:	2208      	movs	r2, #8
 8000a2a:	601a      	str	r2, [r3, #0]
		}

		if (timeYellow >= 5 && time1 <= 5)
 8000a2c:	4b4f      	ldr	r3, [pc, #316]	; (8000b6c <normalState+0x4c8>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2b04      	cmp	r3, #4
 8000a32:	dd0a      	ble.n	8000a4a <normalState+0x3a6>
 8000a34:	4b4e      	ldr	r3, [pc, #312]	; (8000b70 <normalState+0x4cc>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	2b05      	cmp	r3, #5
 8000a3a:	dc06      	bgt.n	8000a4a <normalState+0x3a6>
			buzzerValue = 512 * (5 - time1);
 8000a3c:	4b4c      	ldr	r3, [pc, #304]	; (8000b70 <normalState+0x4cc>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f1c3 0305 	rsb	r3, r3, #5
 8000a44:	025b      	lsls	r3, r3, #9
 8000a46:	4a4c      	ldr	r2, [pc, #304]	; (8000b78 <normalState+0x4d4>)
 8000a48:	6013      	str	r3, [r2, #0]

		if(timeYellow < 5)
 8000a4a:	4b48      	ldr	r3, [pc, #288]	; (8000b6c <normalState+0x4c8>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	2b04      	cmp	r3, #4
 8000a50:	dc09      	bgt.n	8000a66 <normalState+0x3c2>
			buzzerValue += 256 * (5 - time1);
 8000a52:	4b47      	ldr	r3, [pc, #284]	; (8000b70 <normalState+0x4cc>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f1c3 0305 	rsb	r3, r3, #5
 8000a5a:	021a      	lsls	r2, r3, #8
 8000a5c:	4b46      	ldr	r3, [pc, #280]	; (8000b78 <normalState+0x4d4>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4413      	add	r3, r2
 8000a62:	4a45      	ldr	r2, [pc, #276]	; (8000b78 <normalState+0x4d4>)
 8000a64:	6013      	str	r3, [r2, #0]

		if(isTimerUp(1) == 1)	// Update Time
 8000a66:	2001      	movs	r0, #1
 8000a68:	f000 fc00 	bl	800126c <isTimerUp>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	d10d      	bne.n	8000a8e <normalState+0x3ea>
		{
			setTimer(1, 100);
 8000a72:	2164      	movs	r1, #100	; 0x64
 8000a74:	2001      	movs	r0, #1
 8000a76:	f000 fc0d 	bl	8001294 <setTimer>

			time1--;
 8000a7a:	4b3d      	ldr	r3, [pc, #244]	; (8000b70 <normalState+0x4cc>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	3b01      	subs	r3, #1
 8000a80:	4a3b      	ldr	r2, [pc, #236]	; (8000b70 <normalState+0x4cc>)
 8000a82:	6013      	str	r3, [r2, #0]
			time2--;
 8000a84:	4b3b      	ldr	r3, [pc, #236]	; (8000b74 <normalState+0x4d0>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	3b01      	subs	r3, #1
 8000a8a:	4a3a      	ldr	r2, [pc, #232]	; (8000b74 <normalState+0x4d0>)
 8000a8c:	6013      	str	r3, [r2, #0]
		}

		if(Is_Button_Pressed(1))
 8000a8e:	2001      	movs	r0, #1
 8000a90:	f7ff fbf2 	bl	8000278 <Is_Button_Pressed>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d011      	beq.n	8000abe <normalState+0x41a>
		{
			status = ManRed;
 8000a9a:	4b33      	ldr	r3, [pc, #204]	; (8000b68 <normalState+0x4c4>)
 8000a9c:	220a      	movs	r2, #10
 8000a9e:	601a      	str	r2, [r3, #0]

			time1 = timeRed;
 8000aa0:	4b36      	ldr	r3, [pc, #216]	; (8000b7c <normalState+0x4d8>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a32      	ldr	r2, [pc, #200]	; (8000b70 <normalState+0x4cc>)
 8000aa6:	6013      	str	r3, [r2, #0]
			time2 = 2;
 8000aa8:	4b32      	ldr	r3, [pc, #200]	; (8000b74 <normalState+0x4d0>)
 8000aaa:	2202      	movs	r2, #2
 8000aac:	601a      	str	r2, [r3, #0]

			clearAllLed1();
 8000aae:	f7ff fc15 	bl	80002dc <clearAllLed1>
			clearAllLed2();
 8000ab2:	f7ff fc27 	bl	8000304 <clearAllLed2>

			setTimer(2, 25);
 8000ab6:	2119      	movs	r1, #25
 8000ab8:	2002      	movs	r0, #2
 8000aba:	f000 fbeb 	bl	8001294 <setTimer>
		}

		if(Is_Button_Pressed(0))
 8000abe:	2000      	movs	r0, #0
 8000ac0:	f7ff fbda 	bl	8000278 <Is_Button_Pressed>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	f000 80e4 	beq.w	8000c94 <normalState+0x5f0>
		{
			pedestrian_flag = Pedestrian_GREEN;
 8000acc:	4b2c      	ldr	r3, [pc, #176]	; (8000b80 <normalState+0x4dc>)
 8000ace:	2209      	movs	r2, #9
 8000ad0:	601a      	str	r2, [r3, #0]
			setTimer(3, (timeRed + timeGreen) * 100);
 8000ad2:	4b2a      	ldr	r3, [pc, #168]	; (8000b7c <normalState+0x4d8>)
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	4b2b      	ldr	r3, [pc, #172]	; (8000b84 <normalState+0x4e0>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4413      	add	r3, r2
 8000adc:	2264      	movs	r2, #100	; 0x64
 8000ade:	fb02 f303 	mul.w	r3, r2, r3
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	2003      	movs	r0, #3
 8000ae6:	f000 fbd5 	bl	8001294 <setTimer>
		}

		break;
 8000aea:	e0d3      	b.n	8000c94 <normalState+0x5f0>

	case ManRed:
		if(isTimerUp(2) == 1)
 8000aec:	2002      	movs	r0, #2
 8000aee:	f000 fbbd 	bl	800126c <isTimerUp>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d105      	bne.n	8000b04 <normalState+0x460>
		{
			setTimer(2, 25);
 8000af8:	2119      	movs	r1, #25
 8000afa:	2002      	movs	r0, #2
 8000afc:	f000 fbca 	bl	8001294 <setTimer>
			toggleRed();
 8000b00:	f7ff fc7c 	bl	80003fc <toggleRed>
		}

		if(Is_Button_Pressed(2))
 8000b04:	2002      	movs	r0, #2
 8000b06:	f7ff fbb7 	bl	8000278 <Is_Button_Pressed>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <normalState+0x470>
			increase();
 8000b10:	f7ff fcea 	bl	80004e8 <increase>

		if(Is_Button_Pressed(3))
 8000b14:	2003      	movs	r0, #3
 8000b16:	f7ff fbaf 	bl	8000278 <Is_Button_Pressed>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d008      	beq.n	8000b32 <normalState+0x48e>
			balance(time1, timeYellow, timeGreen);
 8000b20:	4b13      	ldr	r3, [pc, #76]	; (8000b70 <normalState+0x4cc>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a11      	ldr	r2, [pc, #68]	; (8000b6c <normalState+0x4c8>)
 8000b26:	6811      	ldr	r1, [r2, #0]
 8000b28:	4a16      	ldr	r2, [pc, #88]	; (8000b84 <normalState+0x4e0>)
 8000b2a:	6812      	ldr	r2, [r2, #0]
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff fcef 	bl	8000510 <balance>

		if(Is_Button_Pressed(1))
 8000b32:	2001      	movs	r0, #1
 8000b34:	f7ff fba0 	bl	8000278 <Is_Button_Pressed>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	f000 80ac 	beq.w	8000c98 <normalState+0x5f4>
		{
			status = ManAmber;
 8000b40:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <normalState+0x4c4>)
 8000b42:	220b      	movs	r2, #11
 8000b44:	601a      	str	r2, [r3, #0]

			time1 = timeYellow;
 8000b46:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <normalState+0x4c8>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a09      	ldr	r2, [pc, #36]	; (8000b70 <normalState+0x4cc>)
 8000b4c:	6013      	str	r3, [r2, #0]
			time2 = 3;
 8000b4e:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <normalState+0x4d0>)
 8000b50:	2203      	movs	r2, #3
 8000b52:	601a      	str	r2, [r3, #0]

			clearAllLed1();
 8000b54:	f7ff fbc2 	bl	80002dc <clearAllLed1>
			clearAllLed2();
 8000b58:	f7ff fbd4 	bl	8000304 <clearAllLed2>

			setTimer(2, 25);
 8000b5c:	2119      	movs	r1, #25
 8000b5e:	2002      	movs	r0, #2
 8000b60:	f000 fb98 	bl	8001294 <setTimer>
		}

		break;
 8000b64:	e098      	b.n	8000c98 <normalState+0x5f4>
 8000b66:	bf00      	nop
 8000b68:	200000ec 	.word	0x200000ec
 8000b6c:	20000028 	.word	0x20000028
 8000b70:	20000108 	.word	0x20000108
 8000b74:	200000f0 	.word	0x200000f0
 8000b78:	200000f4 	.word	0x200000f4
 8000b7c:	20000024 	.word	0x20000024
 8000b80:	20000030 	.word	0x20000030
 8000b84:	2000002c 	.word	0x2000002c

	case ManAmber:
		if(isTimerUp(2) == 1)
 8000b88:	2002      	movs	r0, #2
 8000b8a:	f000 fb6f 	bl	800126c <isTimerUp>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d105      	bne.n	8000ba0 <normalState+0x4fc>
		{
			setTimer(2, 25);
 8000b94:	2119      	movs	r1, #25
 8000b96:	2002      	movs	r0, #2
 8000b98:	f000 fb7c 	bl	8001294 <setTimer>
			toggleYellow();
 8000b9c:	f7ff fc40 	bl	8000420 <toggleYellow>
		}

		if(Is_Button_Pressed(2))
 8000ba0:	2002      	movs	r0, #2
 8000ba2:	f7ff fb69 	bl	8000278 <Is_Button_Pressed>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <normalState+0x50c>
			increase();
 8000bac:	f7ff fc9c 	bl	80004e8 <increase>

		if(Is_Button_Pressed(3))
 8000bb0:	2003      	movs	r0, #3
 8000bb2:	f7ff fb61 	bl	8000278 <Is_Button_Pressed>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d008      	beq.n	8000bce <normalState+0x52a>
			balance(timeRed, time1, timeGreen);
 8000bbc:	4b3a      	ldr	r3, [pc, #232]	; (8000ca8 <normalState+0x604>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a3a      	ldr	r2, [pc, #232]	; (8000cac <normalState+0x608>)
 8000bc2:	6811      	ldr	r1, [r2, #0]
 8000bc4:	4a3a      	ldr	r2, [pc, #232]	; (8000cb0 <normalState+0x60c>)
 8000bc6:	6812      	ldr	r2, [r2, #0]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff fca1 	bl	8000510 <balance>

		if(Is_Button_Pressed(1))
 8000bce:	2001      	movs	r0, #1
 8000bd0:	f7ff fb52 	bl	8000278 <Is_Button_Pressed>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d060      	beq.n	8000c9c <normalState+0x5f8>
		{
			status = ManGreen;
 8000bda:	4b36      	ldr	r3, [pc, #216]	; (8000cb4 <normalState+0x610>)
 8000bdc:	220c      	movs	r2, #12
 8000bde:	601a      	str	r2, [r3, #0]

			time1 = timeGreen;
 8000be0:	4b33      	ldr	r3, [pc, #204]	; (8000cb0 <normalState+0x60c>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a31      	ldr	r2, [pc, #196]	; (8000cac <normalState+0x608>)
 8000be6:	6013      	str	r3, [r2, #0]
			time2 = 4;
 8000be8:	4b33      	ldr	r3, [pc, #204]	; (8000cb8 <normalState+0x614>)
 8000bea:	2204      	movs	r2, #4
 8000bec:	601a      	str	r2, [r3, #0]

			clearAllLed1();
 8000bee:	f7ff fb75 	bl	80002dc <clearAllLed1>
			clearAllLed2();
 8000bf2:	f7ff fb87 	bl	8000304 <clearAllLed2>

			setTimer(2, 25);
 8000bf6:	2119      	movs	r1, #25
 8000bf8:	2002      	movs	r0, #2
 8000bfa:	f000 fb4b 	bl	8001294 <setTimer>
		}

		break;
 8000bfe:	e04d      	b.n	8000c9c <normalState+0x5f8>

	case ManGreen:
		if(isTimerUp(2) == 1)
 8000c00:	2002      	movs	r0, #2
 8000c02:	f000 fb33 	bl	800126c <isTimerUp>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d105      	bne.n	8000c18 <normalState+0x574>
		{
			setTimer(2, 25);
 8000c0c:	2119      	movs	r1, #25
 8000c0e:	2002      	movs	r0, #2
 8000c10:	f000 fb40 	bl	8001294 <setTimer>
			toggleGreen();
 8000c14:	f7ff fc1e 	bl	8000454 <toggleGreen>
		}

		if(Is_Button_Pressed(2))
 8000c18:	2002      	movs	r0, #2
 8000c1a:	f7ff fb2d 	bl	8000278 <Is_Button_Pressed>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <normalState+0x584>
			increase();
 8000c24:	f7ff fc60 	bl	80004e8 <increase>

		if(Is_Button_Pressed(3))
 8000c28:	2003      	movs	r0, #3
 8000c2a:	f7ff fb25 	bl	8000278 <Is_Button_Pressed>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d008      	beq.n	8000c46 <normalState+0x5a2>
			balance(timeRed, timeYellow, time1);
 8000c34:	4b1c      	ldr	r3, [pc, #112]	; (8000ca8 <normalState+0x604>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a20      	ldr	r2, [pc, #128]	; (8000cbc <normalState+0x618>)
 8000c3a:	6811      	ldr	r1, [r2, #0]
 8000c3c:	4a1b      	ldr	r2, [pc, #108]	; (8000cac <normalState+0x608>)
 8000c3e:	6812      	ldr	r2, [r2, #0]
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff fc65 	bl	8000510 <balance>

		if(Is_Button_Pressed(1))
 8000c46:	2001      	movs	r0, #1
 8000c48:	f7ff fb16 	bl	8000278 <Is_Button_Pressed>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d026      	beq.n	8000ca0 <normalState+0x5fc>
		{
			status = RedGreen;
 8000c52:	4b18      	ldr	r3, [pc, #96]	; (8000cb4 <normalState+0x610>)
 8000c54:	2201      	movs	r2, #1
 8000c56:	601a      	str	r2, [r3, #0]

			setTimer(0, timeGreen * 100);
 8000c58:	4b15      	ldr	r3, [pc, #84]	; (8000cb0 <normalState+0x60c>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2264      	movs	r2, #100	; 0x64
 8000c5e:	fb02 f303 	mul.w	r3, r2, r3
 8000c62:	4619      	mov	r1, r3
 8000c64:	2000      	movs	r0, #0
 8000c66:	f000 fb15 	bl	8001294 <setTimer>
			setTimer(1, 100);
 8000c6a:	2164      	movs	r1, #100	; 0x64
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	f000 fb11 	bl	8001294 <setTimer>

			time1 = timeRed;
 8000c72:	4b0d      	ldr	r3, [pc, #52]	; (8000ca8 <normalState+0x604>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a0d      	ldr	r2, [pc, #52]	; (8000cac <normalState+0x608>)
 8000c78:	6013      	str	r3, [r2, #0]
			time2 = timeGreen;
 8000c7a:	4b0d      	ldr	r3, [pc, #52]	; (8000cb0 <normalState+0x60c>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a0e      	ldr	r2, [pc, #56]	; (8000cb8 <normalState+0x614>)
 8000c80:	6013      	str	r3, [r2, #0]
		}

		break;
 8000c82:	e00d      	b.n	8000ca0 <normalState+0x5fc>

	default:
		break;
 8000c84:	bf00      	nop
 8000c86:	e00c      	b.n	8000ca2 <normalState+0x5fe>
		break;
 8000c88:	bf00      	nop
 8000c8a:	e00a      	b.n	8000ca2 <normalState+0x5fe>
		break;
 8000c8c:	bf00      	nop
 8000c8e:	e008      	b.n	8000ca2 <normalState+0x5fe>
		break;
 8000c90:	bf00      	nop
 8000c92:	e006      	b.n	8000ca2 <normalState+0x5fe>
		break;
 8000c94:	bf00      	nop
 8000c96:	e004      	b.n	8000ca2 <normalState+0x5fe>
		break;
 8000c98:	bf00      	nop
 8000c9a:	e002      	b.n	8000ca2 <normalState+0x5fe>
		break;
 8000c9c:	bf00      	nop
 8000c9e:	e000      	b.n	8000ca2 <normalState+0x5fe>
		break;
 8000ca0:	bf00      	nop
	}
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20000024 	.word	0x20000024
 8000cac:	20000108 	.word	0x20000108
 8000cb0:	2000002c 	.word	0x2000002c
 8000cb4:	200000ec 	.word	0x200000ec
 8000cb8:	200000f0 	.word	0x200000f0
 8000cbc:	20000028 	.word	0x20000028

08000cc0 <fsm_pedestrian>:
 */

#include "global.h"

void fsm_pedestrian(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
	switch(pedestrian_flag)
 8000cc4:	4b19      	ldr	r3, [pc, #100]	; (8000d2c <fsm_pedestrian+0x6c>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2b09      	cmp	r3, #9
 8000cca:	d01f      	beq.n	8000d0c <fsm_pedestrian+0x4c>
 8000ccc:	2b09      	cmp	r3, #9
 8000cce:	dc2b      	bgt.n	8000d28 <fsm_pedestrian+0x68>
 8000cd0:	2b07      	cmp	r3, #7
 8000cd2:	d002      	beq.n	8000cda <fsm_pedestrian+0x1a>
 8000cd4:	2b08      	cmp	r3, #8
 8000cd6:	d008      	beq.n	8000cea <fsm_pedestrian+0x2a>
			displayPedestrianGreen();

			buzzer();
			break;
	}
}
 8000cd8:	e026      	b.n	8000d28 <fsm_pedestrian+0x68>
			clearPedestrian();
 8000cda:	f7ff fbc9 	bl	8000470 <clearPedestrian>
			buzzerValue = 0;
 8000cde:	4b14      	ldr	r3, [pc, #80]	; (8000d30 <fsm_pedestrian+0x70>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
			buzzer();
 8000ce4:	f7ff faea 	bl	80002bc <buzzer>
			break;
 8000ce8:	e01e      	b.n	8000d28 <fsm_pedestrian+0x68>
			if(isTimerUp(3) == 1)
 8000cea:	2003      	movs	r0, #3
 8000cec:	f000 fabe 	bl	800126c <isTimerUp>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d102      	bne.n	8000cfc <fsm_pedestrian+0x3c>
				pedestrian_flag = Pedestrian_INIT;
 8000cf6:	4b0d      	ldr	r3, [pc, #52]	; (8000d2c <fsm_pedestrian+0x6c>)
 8000cf8:	2207      	movs	r2, #7
 8000cfa:	601a      	str	r2, [r3, #0]
			displayPedestrianRed();
 8000cfc:	f7ff fbcc 	bl	8000498 <displayPedestrianRed>
			buzzerValue = 0;
 8000d00:	4b0b      	ldr	r3, [pc, #44]	; (8000d30 <fsm_pedestrian+0x70>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
			buzzer();
 8000d06:	f7ff fad9 	bl	80002bc <buzzer>
			break;
 8000d0a:	e00d      	b.n	8000d28 <fsm_pedestrian+0x68>
			if(isTimerUp(3) == 1)
 8000d0c:	2003      	movs	r0, #3
 8000d0e:	f000 faad 	bl	800126c <isTimerUp>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d102      	bne.n	8000d1e <fsm_pedestrian+0x5e>
				pedestrian_flag = Pedestrian_INIT;
 8000d18:	4b04      	ldr	r3, [pc, #16]	; (8000d2c <fsm_pedestrian+0x6c>)
 8000d1a:	2207      	movs	r2, #7
 8000d1c:	601a      	str	r2, [r3, #0]
			displayPedestrianGreen();
 8000d1e:	f7ff fbcf 	bl	80004c0 <displayPedestrianGreen>
			buzzer();
 8000d22:	f7ff facb 	bl	80002bc <buzzer>
			break;
 8000d26:	bf00      	nop
}
 8000d28:	bf00      	nop
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20000030 	.word	0x20000030
 8000d30:	200000f4 	.word	0x200000f4

08000d34 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
	timerRun();
 8000d3c:	f000 fac2 	bl	80012c4 <timerRun>
	SCH_Update();
 8000d40:	f000 fa50 	bl	80011e4 <SCH_Update>
	Button_Reading();
 8000d44:	f7ff fa02 	bl	800014c <Button_Reading>
}
 8000d48:	bf00      	nop
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d54:	f000 fc28 	bl	80015a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d58:	f000 f822 	bl	8000da0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d5c:	f000 f924 	bl	8000fa8 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000d60:	f000 f8ac 	bl	8000ebc <MX_TIM3_Init>
  MX_TIM2_Init();
 8000d64:	f000 f85e 	bl	8000e24 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

 HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4809      	ldr	r0, [pc, #36]	; (8000d90 <main+0x40>)
 8000d6c:	f001 fc2e 	bl	80025cc <HAL_TIM_PWM_Start>
 HAL_TIM_Base_Start_IT(&htim2);
 8000d70:	4808      	ldr	r0, [pc, #32]	; (8000d94 <main+0x44>)
 8000d72:	f001 fb81 	bl	8002478 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

// SCH_Add_Task(timerRun, 0, 1);
 SCH_Add_Task(normalState, 1, 1);
 8000d76:	2201      	movs	r2, #1
 8000d78:	2101      	movs	r1, #1
 8000d7a:	4807      	ldr	r0, [pc, #28]	; (8000d98 <main+0x48>)
 8000d7c:	f000 fa14 	bl	80011a8 <SCH_Add_Task>
 SCH_Add_Task(fsm_pedestrian, 1, 1);
 8000d80:	2201      	movs	r2, #1
 8000d82:	2101      	movs	r1, #1
 8000d84:	4805      	ldr	r0, [pc, #20]	; (8000d9c <main+0x4c>)
 8000d86:	f000 fa0f 	bl	80011a8 <SCH_Add_Task>
  while (1)
  {
    /* USER CODE END WHILE */

	  SCH_Dispatch_Tasks();
 8000d8a:	f000 fa47 	bl	800121c <SCH_Dispatch_Tasks>
 8000d8e:	e7fc      	b.n	8000d8a <main+0x3a>
 8000d90:	2000010c 	.word	0x2000010c
 8000d94:	20000154 	.word	0x20000154
 8000d98:	080006a5 	.word	0x080006a5
 8000d9c:	08000cc1 	.word	0x08000cc1

08000da0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b090      	sub	sp, #64	; 0x40
 8000da4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000da6:	f107 0318 	add.w	r3, r7, #24
 8000daa:	2228      	movs	r2, #40	; 0x28
 8000dac:	2100      	movs	r1, #0
 8000dae:	4618      	mov	r0, r3
 8000db0:	f002 fab2 	bl	8003318 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000db4:	1d3b      	adds	r3, r7, #4
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	605a      	str	r2, [r3, #4]
 8000dbc:	609a      	str	r2, [r3, #8]
 8000dbe:	60da      	str	r2, [r3, #12]
 8000dc0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dca:	2310      	movs	r3, #16
 8000dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000dd6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000dda:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ddc:	f107 0318 	add.w	r3, r7, #24
 8000de0:	4618      	mov	r0, r3
 8000de2:	f000 ff1d 	bl	8001c20 <HAL_RCC_OscConfig>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000dec:	f000 f94a 	bl	8001084 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000df0:	230f      	movs	r3, #15
 8000df2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000df4:	2302      	movs	r3, #2
 8000df6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e06:	1d3b      	adds	r3, r7, #4
 8000e08:	2102      	movs	r1, #2
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f001 f988 	bl	8002120 <HAL_RCC_ClockConfig>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000e16:	f000 f935 	bl	8001084 <Error_Handler>
  }
}
 8000e1a:	bf00      	nop
 8000e1c:	3740      	adds	r7, #64	; 0x40
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
	...

08000e24 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e2a:	f107 0308 	add.w	r3, r7, #8
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]
 8000e36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e38:	463b      	mov	r3, r7
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e40:	4b1d      	ldr	r3, [pc, #116]	; (8000eb8 <MX_TIM2_Init+0x94>)
 8000e42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e46:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6399;
 8000e48:	4b1b      	ldr	r3, [pc, #108]	; (8000eb8 <MX_TIM2_Init+0x94>)
 8000e4a:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8000e4e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e50:	4b19      	ldr	r3, [pc, #100]	; (8000eb8 <MX_TIM2_Init+0x94>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000e56:	4b18      	ldr	r3, [pc, #96]	; (8000eb8 <MX_TIM2_Init+0x94>)
 8000e58:	2263      	movs	r2, #99	; 0x63
 8000e5a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e5c:	4b16      	ldr	r3, [pc, #88]	; (8000eb8 <MX_TIM2_Init+0x94>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e62:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <MX_TIM2_Init+0x94>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e68:	4813      	ldr	r0, [pc, #76]	; (8000eb8 <MX_TIM2_Init+0x94>)
 8000e6a:	f001 fab5 	bl	80023d8 <HAL_TIM_Base_Init>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000e74:	f000 f906 	bl	8001084 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e7e:	f107 0308 	add.w	r3, r7, #8
 8000e82:	4619      	mov	r1, r3
 8000e84:	480c      	ldr	r0, [pc, #48]	; (8000eb8 <MX_TIM2_Init+0x94>)
 8000e86:	f001 fe0d 	bl	8002aa4 <HAL_TIM_ConfigClockSource>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000e90:	f000 f8f8 	bl	8001084 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e94:	2300      	movs	r3, #0
 8000e96:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e9c:	463b      	mov	r3, r7
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4805      	ldr	r0, [pc, #20]	; (8000eb8 <MX_TIM2_Init+0x94>)
 8000ea2:	f002 f98f 	bl	80031c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000eac:	f000 f8ea 	bl	8001084 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000eb0:	bf00      	nop
 8000eb2:	3718      	adds	r7, #24
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20000154 	.word	0x20000154

08000ebc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08e      	sub	sp, #56	; 0x38
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ec2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]
 8000ece:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ed0:	f107 0320 	add.w	r3, r7, #32
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eda:	1d3b      	adds	r3, r7, #4
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]
 8000ee8:	615a      	str	r2, [r3, #20]
 8000eea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000eec:	4b2c      	ldr	r3, [pc, #176]	; (8000fa0 <MX_TIM3_Init+0xe4>)
 8000eee:	4a2d      	ldr	r2, [pc, #180]	; (8000fa4 <MX_TIM3_Init+0xe8>)
 8000ef0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000ef2:	4b2b      	ldr	r3, [pc, #172]	; (8000fa0 <MX_TIM3_Init+0xe4>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef8:	4b29      	ldr	r3, [pc, #164]	; (8000fa0 <MX_TIM3_Init+0xe4>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000efe:	4b28      	ldr	r3, [pc, #160]	; (8000fa0 <MX_TIM3_Init+0xe4>)
 8000f00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f04:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f06:	4b26      	ldr	r3, [pc, #152]	; (8000fa0 <MX_TIM3_Init+0xe4>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f0c:	4b24      	ldr	r3, [pc, #144]	; (8000fa0 <MX_TIM3_Init+0xe4>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f12:	4823      	ldr	r0, [pc, #140]	; (8000fa0 <MX_TIM3_Init+0xe4>)
 8000f14:	f001 fa60 	bl	80023d8 <HAL_TIM_Base_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000f1e:	f000 f8b1 	bl	8001084 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f26:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	481c      	ldr	r0, [pc, #112]	; (8000fa0 <MX_TIM3_Init+0xe4>)
 8000f30:	f001 fdb8 	bl	8002aa4 <HAL_TIM_ConfigClockSource>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000f3a:	f000 f8a3 	bl	8001084 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f3e:	4818      	ldr	r0, [pc, #96]	; (8000fa0 <MX_TIM3_Init+0xe4>)
 8000f40:	f001 faec 	bl	800251c <HAL_TIM_PWM_Init>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000f4a:	f000 f89b 	bl	8001084 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f52:	2300      	movs	r3, #0
 8000f54:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f56:	f107 0320 	add.w	r3, r7, #32
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4810      	ldr	r0, [pc, #64]	; (8000fa0 <MX_TIM3_Init+0xe4>)
 8000f5e:	f002 f931 	bl	80031c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000f68:	f000 f88c 	bl	8001084 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f6c:	2360      	movs	r3, #96	; 0x60
 8000f6e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f74:	2300      	movs	r3, #0
 8000f76:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f7c:	1d3b      	adds	r3, r7, #4
 8000f7e:	2200      	movs	r2, #0
 8000f80:	4619      	mov	r1, r3
 8000f82:	4807      	ldr	r0, [pc, #28]	; (8000fa0 <MX_TIM3_Init+0xe4>)
 8000f84:	f001 fccc 	bl	8002920 <HAL_TIM_PWM_ConfigChannel>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000f8e:	f000 f879 	bl	8001084 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f92:	4803      	ldr	r0, [pc, #12]	; (8000fa0 <MX_TIM3_Init+0xe4>)
 8000f94:	f000 fa38 	bl	8001408 <HAL_TIM_MspPostInit>

}
 8000f98:	bf00      	nop
 8000f9a:	3738      	adds	r7, #56	; 0x38
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	2000010c 	.word	0x2000010c
 8000fa4:	40000400 	.word	0x40000400

08000fa8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fae:	f107 0308 	add.w	r3, r7, #8
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	605a      	str	r2, [r3, #4]
 8000fb8:	609a      	str	r2, [r3, #8]
 8000fba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbc:	4b2e      	ldr	r3, [pc, #184]	; (8001078 <MX_GPIO_Init+0xd0>)
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	4a2d      	ldr	r2, [pc, #180]	; (8001078 <MX_GPIO_Init+0xd0>)
 8000fc2:	f043 0304 	orr.w	r3, r3, #4
 8000fc6:	6193      	str	r3, [r2, #24]
 8000fc8:	4b2b      	ldr	r3, [pc, #172]	; (8001078 <MX_GPIO_Init+0xd0>)
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	f003 0304 	and.w	r3, r3, #4
 8000fd0:	607b      	str	r3, [r7, #4]
 8000fd2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd4:	4b28      	ldr	r3, [pc, #160]	; (8001078 <MX_GPIO_Init+0xd0>)
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	4a27      	ldr	r2, [pc, #156]	; (8001078 <MX_GPIO_Init+0xd0>)
 8000fda:	f043 0308 	orr.w	r3, r3, #8
 8000fde:	6193      	str	r3, [r2, #24]
 8000fe0:	4b25      	ldr	r3, [pc, #148]	; (8001078 <MX_GPIO_Init+0xd0>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	f003 0308 	and.w	r3, r3, #8
 8000fe8:	603b      	str	r3, [r7, #0]
 8000fea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8000fec:	2200      	movs	r2, #0
 8000fee:	f44f 6186 	mov.w	r1, #1072	; 0x430
 8000ff2:	4822      	ldr	r0, [pc, #136]	; (800107c <MX_GPIO_Init+0xd4>)
 8000ff4:	f000 fde3 	bl	8001bbe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_Pin|D2_Pin, GPIO_PIN_RESET);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000ffe:	4820      	ldr	r0, [pc, #128]	; (8001080 <MX_GPIO_Init+0xd8>)
 8001000:	f000 fddd 	bl	8001bbe <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin;
 8001004:	2313      	movs	r3, #19
 8001006:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001008:	2300      	movs	r3, #0
 800100a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001010:	f107 0308 	add.w	r3, r7, #8
 8001014:	4619      	mov	r1, r3
 8001016:	481a      	ldr	r0, [pc, #104]	; (8001080 <MX_GPIO_Init+0xd8>)
 8001018:	f000 fc36 	bl	8001888 <HAL_GPIO_Init>

  /*Configure GPIO pins : A3_Pin D3_Pin */
  GPIO_InitStruct.Pin = A3_Pin|D3_Pin;
 800101c:	2309      	movs	r3, #9
 800101e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001020:	2300      	movs	r3, #0
 8001022:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001028:	f107 0308 	add.w	r3, r7, #8
 800102c:	4619      	mov	r1, r3
 800102e:	4813      	ldr	r0, [pc, #76]	; (800107c <MX_GPIO_Init+0xd4>)
 8001030:	f000 fc2a 	bl	8001888 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D5_Pin|D4_Pin;
 8001034:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8001038:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103a:	2301      	movs	r3, #1
 800103c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001042:	2302      	movs	r3, #2
 8001044:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001046:	f107 0308 	add.w	r3, r7, #8
 800104a:	4619      	mov	r1, r3
 800104c:	480b      	ldr	r0, [pc, #44]	; (800107c <MX_GPIO_Init+0xd4>)
 800104e:	f000 fc1b 	bl	8001888 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D2_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D2_Pin;
 8001052:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001056:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001058:	2301      	movs	r3, #1
 800105a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001060:	2302      	movs	r3, #2
 8001062:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001064:	f107 0308 	add.w	r3, r7, #8
 8001068:	4619      	mov	r1, r3
 800106a:	4805      	ldr	r0, [pc, #20]	; (8001080 <MX_GPIO_Init+0xd8>)
 800106c:	f000 fc0c 	bl	8001888 <HAL_GPIO_Init>

}
 8001070:	bf00      	nop
 8001072:	3718      	adds	r7, #24
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40021000 	.word	0x40021000
 800107c:	40010c00 	.word	0x40010c00
 8001080:	40010800 	.word	0x40010800

08001084 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001088:	b672      	cpsid	i
}
 800108a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800108c:	e7fe      	b.n	800108c <Error_Handler+0x8>
	...

08001090 <AddNode>:
{
	head = NULL;
}

void AddNode(sTask NewTask)
{
 8001090:	b590      	push	{r4, r7, lr}
 8001092:	b087      	sub	sp, #28
 8001094:	af00      	add	r7, sp, #0
 8001096:	463c      	mov	r4, r7
 8001098:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	struct Node* NewNode = (struct Node*)malloc(sizeof(struct Node));
 800109c:	2014      	movs	r0, #20
 800109e:	f002 f92b 	bl	80032f8 <malloc>
 80010a2:	4603      	mov	r3, r0
 80010a4:	613b      	str	r3, [r7, #16]
	NewNode -> data.pTask = NewTask.pTask;
 80010a6:	683a      	ldr	r2, [r7, #0]
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	601a      	str	r2, [r3, #0]
	NewNode -> data.Delay = NewTask.Delay;
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	605a      	str	r2, [r3, #4]
	NewNode -> data.Period = NewTask.Period;
 80010b2:	68ba      	ldr	r2, [r7, #8]
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	609a      	str	r2, [r3, #8]
	NewNode -> data.RunMe = NewTask.RunMe;
 80010b8:	7b3a      	ldrb	r2, [r7, #12]
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	731a      	strb	r2, [r3, #12]
	NewNode -> next = NULL;
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	2200      	movs	r2, #0
 80010c2:	611a      	str	r2, [r3, #16]

	// List is empty, just addNode
	if(head == NULL)
 80010c4:	4b2b      	ldr	r3, [pc, #172]	; (8001174 <AddNode+0xe4>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d103      	bne.n	80010d4 <AddNode+0x44>
	{
		head = NewNode;
 80010cc:	4a29      	ldr	r2, [pc, #164]	; (8001174 <AddNode+0xe4>)
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	6013      	str	r3, [r2, #0]
		return;
 80010d2:	e04c      	b.n	800116e <AddNode+0xde>
	}
	struct Node* temp = head;
 80010d4:	4b27      	ldr	r3, [pc, #156]	; (8001174 <AddNode+0xe4>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	617b      	str	r3, [r7, #20]

	// If the list has A5 B3 C2 Adding D3  ->  D3 A2 B3 C2
	if(NewNode -> data.Delay < temp -> data.Delay )
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	685a      	ldr	r2, [r3, #4]
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d21e      	bcs.n	8001124 <AddNode+0x94>
	{
		temp -> data.Delay -= NewNode -> data.Delay;
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	685a      	ldr	r2, [r3, #4]
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	1ad2      	subs	r2, r2, r3
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	605a      	str	r2, [r3, #4]
		NewNode -> next = temp;
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	697a      	ldr	r2, [r7, #20]
 80010f8:	611a      	str	r2, [r3, #16]
		head = NewNode;
 80010fa:	4a1e      	ldr	r2, [pc, #120]	; (8001174 <AddNode+0xe4>)
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	6013      	str	r3, [r2, #0]
		return;
 8001100:	e035      	b.n	800116e <AddNode+0xde>
	}

	// If the list has A5 B3 C2 Adding D9  ->  A5 B3 D1 C1
	while(temp -> next != NULL)
	{
		NewNode -> data.Delay -= temp -> data.Delay;
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	685a      	ldr	r2, [r3, #4]
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	1ad2      	subs	r2, r2, r3
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	605a      	str	r2, [r3, #4]
		if(NewNode -> data.Delay <= temp -> next -> data.Delay)
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	685a      	ldr	r2, [r3, #4]
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	691b      	ldr	r3, [r3, #16]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	429a      	cmp	r2, r3
 800111c:	d907      	bls.n	800112e <AddNode+0x9e>
			break;

		temp = temp -> next;
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	691b      	ldr	r3, [r3, #16]
 8001122:	617b      	str	r3, [r7, #20]
	while(temp -> next != NULL)
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	691b      	ldr	r3, [r3, #16]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d1ea      	bne.n	8001102 <AddNode+0x72>
 800112c:	e000      	b.n	8001130 <AddNode+0xa0>
			break;
 800112e:	bf00      	nop
	}

	// temp current in B3 and D become D1
	if(temp -> next == NULL)
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	691b      	ldr	r3, [r3, #16]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d10a      	bne.n	800114e <AddNode+0xbe>
	{
		NewNode -> data.Delay -= temp -> data.Delay;
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	685a      	ldr	r2, [r3, #4]
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	1ad2      	subs	r2, r2, r3
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	605a      	str	r2, [r3, #4]
		temp -> next = NewNode;
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	611a      	str	r2, [r3, #16]
 800114c:	e00f      	b.n	800116e <AddNode+0xde>
	}
	else
	{
		temp -> next -> data.Delay -= NewNode -> data.Delay; // convert C2 to C1
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	691b      	ldr	r3, [r3, #16]
 8001152:	6859      	ldr	r1, [r3, #4]
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	685a      	ldr	r2, [r3, #4]
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	691b      	ldr	r3, [r3, #16]
 800115c:	1a8a      	subs	r2, r1, r2
 800115e:	605a      	str	r2, [r3, #4]
		NewNode -> next = temp -> next;
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	691a      	ldr	r2, [r3, #16]
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	611a      	str	r2, [r3, #16]
		temp -> next = NewNode;
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	611a      	str	r2, [r3, #16]
	}
}
 800116e:	371c      	adds	r7, #28
 8001170:	46bd      	mov	sp, r7
 8001172:	bd90      	pop	{r4, r7, pc}
 8001174:	200000f8 	.word	0x200000f8

08001178 <DeleteBegin>:

void DeleteBegin()
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
	struct Node* temp = head;
 800117e:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <DeleteBegin+0x2c>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	607b      	str	r3, [r7, #4]
	if(temp == NULL) return;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d008      	beq.n	800119c <DeleteBegin+0x24>
	head = head -> next;
 800118a:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <DeleteBegin+0x2c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	691b      	ldr	r3, [r3, #16]
 8001190:	4a04      	ldr	r2, [pc, #16]	; (80011a4 <DeleteBegin+0x2c>)
 8001192:	6013      	str	r3, [r2, #0]
	free(temp);
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f002 f8b7 	bl	8003308 <free>
 800119a:	e000      	b.n	800119e <DeleteBegin+0x26>
	if(temp == NULL) return;
 800119c:	bf00      	nop
}
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	200000f8 	.word	0x200000f8

080011a8 <SCH_Add_Task>:

void SCH_Add_Task(void (*p_function)(), uint32_t DELAY, uint32_t PERIOD)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b088      	sub	sp, #32
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
	sTask NewTask;
	NewTask.pTask = p_function;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	613b      	str	r3, [r7, #16]
	NewTask.Delay = DELAY;
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	617b      	str	r3, [r7, #20]
	NewTask.Period = PERIOD;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	61bb      	str	r3, [r7, #24]

	if(NewTask.Delay == 0)
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d102      	bne.n	80011cc <SCH_Add_Task+0x24>
		NewTask.RunMe = 1;
 80011c6:	2301      	movs	r3, #1
 80011c8:	773b      	strb	r3, [r7, #28]
 80011ca:	e001      	b.n	80011d0 <SCH_Add_Task+0x28>
	else
		NewTask.RunMe = 0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	773b      	strb	r3, [r7, #28]

	AddNode(NewTask);
 80011d0:	f107 0310 	add.w	r3, r7, #16
 80011d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011d6:	f7ff ff5b 	bl	8001090 <AddNode>
}
 80011da:	bf00      	nop
 80011dc:	3720      	adds	r7, #32
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
	...

080011e4 <SCH_Update>:

void SCH_Update(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
	if(head == NULL) return;
 80011e8:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <SCH_Update+0x34>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d00f      	beq.n	8001210 <SCH_Update+0x2c>

	if(head -> data.Delay <= 0)
 80011f0:	4b09      	ldr	r3, [pc, #36]	; (8001218 <SCH_Update+0x34>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d104      	bne.n	8001204 <SCH_Update+0x20>
		head -> data.RunMe = 1;
 80011fa:	4b07      	ldr	r3, [pc, #28]	; (8001218 <SCH_Update+0x34>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	2201      	movs	r2, #1
 8001200:	731a      	strb	r2, [r3, #12]
 8001202:	e006      	b.n	8001212 <SCH_Update+0x2e>
	else
		head -> data.Delay--;
 8001204:	4b04      	ldr	r3, [pc, #16]	; (8001218 <SCH_Update+0x34>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	685a      	ldr	r2, [r3, #4]
 800120a:	3a01      	subs	r2, #1
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	e000      	b.n	8001212 <SCH_Update+0x2e>
	if(head == NULL) return;
 8001210:	bf00      	nop
}
 8001212:	46bd      	mov	sp, r7
 8001214:	bc80      	pop	{r7}
 8001216:	4770      	bx	lr
 8001218:	200000f8 	.word	0x200000f8

0800121c <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void)
{
 800121c:	b590      	push	{r4, r7, lr}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
	if(head == NULL) return;
 8001222:	4b11      	ldr	r3, [pc, #68]	; (8001268 <SCH_Dispatch_Tasks+0x4c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d01a      	beq.n	8001260 <SCH_Dispatch_Tasks+0x44>

	if(head -> data.RunMe > 0)
 800122a:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <SCH_Dispatch_Tasks+0x4c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	7b1b      	ldrb	r3, [r3, #12]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d016      	beq.n	8001262 <SCH_Dispatch_Tasks+0x46>
	{
		(*head -> data.pTask)();
 8001234:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <SCH_Dispatch_Tasks+0x4c>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4798      	blx	r3
		sTask NewTask = head -> data;
 800123c:	4b0a      	ldr	r3, [pc, #40]	; (8001268 <SCH_Dispatch_Tasks+0x4c>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	463c      	mov	r4, r7
 8001242:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001244:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		DeleteBegin();
 8001248:	f7ff ff96 	bl	8001178 <DeleteBegin>

		if(NewTask.Period != 0)
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d007      	beq.n	8001262 <SCH_Dispatch_Tasks+0x46>
			SCH_Add_Task(NewTask.pTask, NewTask.Period, NewTask.Period);
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	68b9      	ldr	r1, [r7, #8]
 8001256:	68ba      	ldr	r2, [r7, #8]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff ffa5 	bl	80011a8 <SCH_Add_Task>
 800125e:	e000      	b.n	8001262 <SCH_Dispatch_Tasks+0x46>
	if(head == NULL) return;
 8001260:	bf00      	nop
	}
}
 8001262:	3714      	adds	r7, #20
 8001264:	46bd      	mov	sp, r7
 8001266:	bd90      	pop	{r4, r7, pc}
 8001268:	200000f8 	.word	0x200000f8

0800126c <isTimerUp>:

int timer_counter[TIMER];
int timer_flag[TIMER];

int isTimerUp(int timer)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
	return (timer_flag[timer] == 1);
 8001274:	4a06      	ldr	r2, [pc, #24]	; (8001290 <isTimerUp+0x24>)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800127c:	2b01      	cmp	r3, #1
 800127e:	bf0c      	ite	eq
 8001280:	2301      	moveq	r3, #1
 8001282:	2300      	movne	r3, #0
 8001284:	b2db      	uxtb	r3, r3
}
 8001286:	4618      	mov	r0, r3
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr
 8001290:	200001b0 	.word	0x200001b0

08001294 <setTimer>:

void setTimer(int timer, int duration)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
	timer_counter[timer] = duration;
 800129e:	4907      	ldr	r1, [pc, #28]	; (80012bc <setTimer+0x28>)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	683a      	ldr	r2, [r7, #0]
 80012a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[timer] = 0;
 80012a8:	4a05      	ldr	r2, [pc, #20]	; (80012c0 <setTimer+0x2c>)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2100      	movs	r1, #0
 80012ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr
 80012bc:	2000019c 	.word	0x2000019c
 80012c0:	200001b0 	.word	0x200001b0

080012c4 <timerRun>:
void timerRun(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
	for (int timer = 0; timer < TIMER; timer++)
 80012ca:	2300      	movs	r3, #0
 80012cc:	607b      	str	r3, [r7, #4]
 80012ce:	e01c      	b.n	800130a <timerRun+0x46>
	{
		if(timer_counter[timer] > 0)
 80012d0:	4a12      	ldr	r2, [pc, #72]	; (800131c <timerRun+0x58>)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	dd13      	ble.n	8001304 <timerRun+0x40>
		{
			timer_counter[timer]--;
 80012dc:	4a0f      	ldr	r2, [pc, #60]	; (800131c <timerRun+0x58>)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012e4:	1e5a      	subs	r2, r3, #1
 80012e6:	490d      	ldr	r1, [pc, #52]	; (800131c <timerRun+0x58>)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[timer] == 0)
 80012ee:	4a0b      	ldr	r2, [pc, #44]	; (800131c <timerRun+0x58>)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d104      	bne.n	8001304 <timerRun+0x40>
				timer_flag[timer] = 1;
 80012fa:	4a09      	ldr	r2, [pc, #36]	; (8001320 <timerRun+0x5c>)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2101      	movs	r1, #1
 8001300:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int timer = 0; timer < TIMER; timer++)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3301      	adds	r3, #1
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2b04      	cmp	r3, #4
 800130e:	dddf      	ble.n	80012d0 <timerRun+0xc>
		}
	}
}
 8001310:	bf00      	nop
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	bc80      	pop	{r7}
 800131a:	4770      	bx	lr
 800131c:	2000019c 	.word	0x2000019c
 8001320:	200001b0 	.word	0x200001b0

08001324 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800132a:	4b15      	ldr	r3, [pc, #84]	; (8001380 <HAL_MspInit+0x5c>)
 800132c:	699b      	ldr	r3, [r3, #24]
 800132e:	4a14      	ldr	r2, [pc, #80]	; (8001380 <HAL_MspInit+0x5c>)
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	6193      	str	r3, [r2, #24]
 8001336:	4b12      	ldr	r3, [pc, #72]	; (8001380 <HAL_MspInit+0x5c>)
 8001338:	699b      	ldr	r3, [r3, #24]
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	60bb      	str	r3, [r7, #8]
 8001340:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001342:	4b0f      	ldr	r3, [pc, #60]	; (8001380 <HAL_MspInit+0x5c>)
 8001344:	69db      	ldr	r3, [r3, #28]
 8001346:	4a0e      	ldr	r2, [pc, #56]	; (8001380 <HAL_MspInit+0x5c>)
 8001348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800134c:	61d3      	str	r3, [r2, #28]
 800134e:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <HAL_MspInit+0x5c>)
 8001350:	69db      	ldr	r3, [r3, #28]
 8001352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800135a:	4b0a      	ldr	r3, [pc, #40]	; (8001384 <HAL_MspInit+0x60>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	4a04      	ldr	r2, [pc, #16]	; (8001384 <HAL_MspInit+0x60>)
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001376:	bf00      	nop
 8001378:	3714      	adds	r7, #20
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr
 8001380:	40021000 	.word	0x40021000
 8001384:	40010000 	.word	0x40010000

08001388 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001398:	d114      	bne.n	80013c4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800139a:	4b19      	ldr	r3, [pc, #100]	; (8001400 <HAL_TIM_Base_MspInit+0x78>)
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	4a18      	ldr	r2, [pc, #96]	; (8001400 <HAL_TIM_Base_MspInit+0x78>)
 80013a0:	f043 0301 	orr.w	r3, r3, #1
 80013a4:	61d3      	str	r3, [r2, #28]
 80013a6:	4b16      	ldr	r3, [pc, #88]	; (8001400 <HAL_TIM_Base_MspInit+0x78>)
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013b2:	2200      	movs	r2, #0
 80013b4:	2100      	movs	r1, #0
 80013b6:	201c      	movs	r0, #28
 80013b8:	f000 fa2f 	bl	800181a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013bc:	201c      	movs	r0, #28
 80013be:	f000 fa48 	bl	8001852 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80013c2:	e018      	b.n	80013f6 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a0e      	ldr	r2, [pc, #56]	; (8001404 <HAL_TIM_Base_MspInit+0x7c>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d113      	bne.n	80013f6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013ce:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <HAL_TIM_Base_MspInit+0x78>)
 80013d0:	69db      	ldr	r3, [r3, #28]
 80013d2:	4a0b      	ldr	r2, [pc, #44]	; (8001400 <HAL_TIM_Base_MspInit+0x78>)
 80013d4:	f043 0302 	orr.w	r3, r3, #2
 80013d8:	61d3      	str	r3, [r2, #28]
 80013da:	4b09      	ldr	r3, [pc, #36]	; (8001400 <HAL_TIM_Base_MspInit+0x78>)
 80013dc:	69db      	ldr	r3, [r3, #28]
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	60bb      	str	r3, [r7, #8]
 80013e4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80013e6:	2200      	movs	r2, #0
 80013e8:	2100      	movs	r1, #0
 80013ea:	201d      	movs	r0, #29
 80013ec:	f000 fa15 	bl	800181a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80013f0:	201d      	movs	r0, #29
 80013f2:	f000 fa2e 	bl	8001852 <HAL_NVIC_EnableIRQ>
}
 80013f6:	bf00      	nop
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40021000 	.word	0x40021000
 8001404:	40000400 	.word	0x40000400

08001408 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b088      	sub	sp, #32
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001410:	f107 0310 	add.w	r3, r7, #16
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a0f      	ldr	r2, [pc, #60]	; (8001460 <HAL_TIM_MspPostInit+0x58>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d117      	bne.n	8001458 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001428:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <HAL_TIM_MspPostInit+0x5c>)
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	4a0d      	ldr	r2, [pc, #52]	; (8001464 <HAL_TIM_MspPostInit+0x5c>)
 800142e:	f043 0304 	orr.w	r3, r3, #4
 8001432:	6193      	str	r3, [r2, #24]
 8001434:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <HAL_TIM_MspPostInit+0x5c>)
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	f003 0304 	and.w	r3, r3, #4
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001440:	2340      	movs	r3, #64	; 0x40
 8001442:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001444:	2302      	movs	r3, #2
 8001446:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001448:	2302      	movs	r3, #2
 800144a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144c:	f107 0310 	add.w	r3, r7, #16
 8001450:	4619      	mov	r1, r3
 8001452:	4805      	ldr	r0, [pc, #20]	; (8001468 <HAL_TIM_MspPostInit+0x60>)
 8001454:	f000 fa18 	bl	8001888 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001458:	bf00      	nop
 800145a:	3720      	adds	r7, #32
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40000400 	.word	0x40000400
 8001464:	40021000 	.word	0x40021000
 8001468:	40010800 	.word	0x40010800

0800146c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001470:	e7fe      	b.n	8001470 <NMI_Handler+0x4>

08001472 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001472:	b480      	push	{r7}
 8001474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001476:	e7fe      	b.n	8001476 <HardFault_Handler+0x4>

08001478 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800147c:	e7fe      	b.n	800147c <MemManage_Handler+0x4>

0800147e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001482:	e7fe      	b.n	8001482 <BusFault_Handler+0x4>

08001484 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001488:	e7fe      	b.n	8001488 <UsageFault_Handler+0x4>

0800148a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	46bd      	mov	sp, r7
 8001492:	bc80      	pop	{r7}
 8001494:	4770      	bx	lr

08001496 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	46bd      	mov	sp, r7
 800149e:	bc80      	pop	{r7}
 80014a0:	4770      	bx	lr

080014a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr

080014ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014b2:	f000 f8bf 	bl	8001634 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
	...

080014bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014c0:	4802      	ldr	r0, [pc, #8]	; (80014cc <TIM2_IRQHandler+0x10>)
 80014c2:	f001 f925 	bl	8002710 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000154 	.word	0x20000154

080014d0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80014d4:	4802      	ldr	r0, [pc, #8]	; (80014e0 <TIM3_IRQHandler+0x10>)
 80014d6:	f001 f91b 	bl	8002710 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	2000010c 	.word	0x2000010c

080014e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014ec:	4a14      	ldr	r2, [pc, #80]	; (8001540 <_sbrk+0x5c>)
 80014ee:	4b15      	ldr	r3, [pc, #84]	; (8001544 <_sbrk+0x60>)
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014f8:	4b13      	ldr	r3, [pc, #76]	; (8001548 <_sbrk+0x64>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d102      	bne.n	8001506 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001500:	4b11      	ldr	r3, [pc, #68]	; (8001548 <_sbrk+0x64>)
 8001502:	4a12      	ldr	r2, [pc, #72]	; (800154c <_sbrk+0x68>)
 8001504:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001506:	4b10      	ldr	r3, [pc, #64]	; (8001548 <_sbrk+0x64>)
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4413      	add	r3, r2
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	429a      	cmp	r2, r3
 8001512:	d207      	bcs.n	8001524 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001514:	f001 fec6 	bl	80032a4 <__errno>
 8001518:	4603      	mov	r3, r0
 800151a:	220c      	movs	r2, #12
 800151c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800151e:	f04f 33ff 	mov.w	r3, #4294967295
 8001522:	e009      	b.n	8001538 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001524:	4b08      	ldr	r3, [pc, #32]	; (8001548 <_sbrk+0x64>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800152a:	4b07      	ldr	r3, [pc, #28]	; (8001548 <_sbrk+0x64>)
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4413      	add	r3, r2
 8001532:	4a05      	ldr	r2, [pc, #20]	; (8001548 <_sbrk+0x64>)
 8001534:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001536:	68fb      	ldr	r3, [r7, #12]
}
 8001538:	4618      	mov	r0, r3
 800153a:	3718      	adds	r7, #24
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20005000 	.word	0x20005000
 8001544:	00000400 	.word	0x00000400
 8001548:	200000fc 	.word	0x200000fc
 800154c:	200001d8 	.word	0x200001d8

08001550 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr

0800155c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800155c:	f7ff fff8 	bl	8001550 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001560:	480b      	ldr	r0, [pc, #44]	; (8001590 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001562:	490c      	ldr	r1, [pc, #48]	; (8001594 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001564:	4a0c      	ldr	r2, [pc, #48]	; (8001598 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001566:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001568:	e002      	b.n	8001570 <LoopCopyDataInit>

0800156a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800156a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800156c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800156e:	3304      	adds	r3, #4

08001570 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001570:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001572:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001574:	d3f9      	bcc.n	800156a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001576:	4a09      	ldr	r2, [pc, #36]	; (800159c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001578:	4c09      	ldr	r4, [pc, #36]	; (80015a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800157a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800157c:	e001      	b.n	8001582 <LoopFillZerobss>

0800157e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800157e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001580:	3204      	adds	r2, #4

08001582 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001582:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001584:	d3fb      	bcc.n	800157e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001586:	f001 fe93 	bl	80032b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800158a:	f7ff fbe1 	bl	8000d50 <main>
  bx lr
 800158e:	4770      	bx	lr
  ldr r0, =_sdata
 8001590:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001594:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8001598:	080034f4 	.word	0x080034f4
  ldr r2, =_sbss
 800159c:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 80015a0:	200001d8 	.word	0x200001d8

080015a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015a4:	e7fe      	b.n	80015a4 <ADC1_2_IRQHandler>
	...

080015a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015ac:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <HAL_Init+0x28>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a07      	ldr	r2, [pc, #28]	; (80015d0 <HAL_Init+0x28>)
 80015b2:	f043 0310 	orr.w	r3, r3, #16
 80015b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015b8:	2003      	movs	r0, #3
 80015ba:	f000 f923 	bl	8001804 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015be:	200f      	movs	r0, #15
 80015c0:	f000 f808 	bl	80015d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015c4:	f7ff feae 	bl	8001324 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40022000 	.word	0x40022000

080015d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015dc:	4b12      	ldr	r3, [pc, #72]	; (8001628 <HAL_InitTick+0x54>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	4b12      	ldr	r3, [pc, #72]	; (800162c <HAL_InitTick+0x58>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	4619      	mov	r1, r3
 80015e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80015f2:	4618      	mov	r0, r3
 80015f4:	f000 f93b 	bl	800186e <HAL_SYSTICK_Config>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e00e      	b.n	8001620 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2b0f      	cmp	r3, #15
 8001606:	d80a      	bhi.n	800161e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001608:	2200      	movs	r2, #0
 800160a:	6879      	ldr	r1, [r7, #4]
 800160c:	f04f 30ff 	mov.w	r0, #4294967295
 8001610:	f000 f903 	bl	800181a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001614:	4a06      	ldr	r2, [pc, #24]	; (8001630 <HAL_InitTick+0x5c>)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800161a:	2300      	movs	r3, #0
 800161c:	e000      	b.n	8001620 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
}
 8001620:	4618      	mov	r0, r3
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20000034 	.word	0x20000034
 800162c:	2000003c 	.word	0x2000003c
 8001630:	20000038 	.word	0x20000038

08001634 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001638:	4b05      	ldr	r3, [pc, #20]	; (8001650 <HAL_IncTick+0x1c>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	461a      	mov	r2, r3
 800163e:	4b05      	ldr	r3, [pc, #20]	; (8001654 <HAL_IncTick+0x20>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4413      	add	r3, r2
 8001644:	4a03      	ldr	r2, [pc, #12]	; (8001654 <HAL_IncTick+0x20>)
 8001646:	6013      	str	r3, [r2, #0]
}
 8001648:	bf00      	nop
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr
 8001650:	2000003c 	.word	0x2000003c
 8001654:	200001c4 	.word	0x200001c4

08001658 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  return uwTick;
 800165c:	4b02      	ldr	r3, [pc, #8]	; (8001668 <HAL_GetTick+0x10>)
 800165e:	681b      	ldr	r3, [r3, #0]
}
 8001660:	4618      	mov	r0, r3
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr
 8001668:	200001c4 	.word	0x200001c4

0800166c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800167c:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <__NVIC_SetPriorityGrouping+0x44>)
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001682:	68ba      	ldr	r2, [r7, #8]
 8001684:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001688:	4013      	ands	r3, r2
 800168a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001694:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800169c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800169e:	4a04      	ldr	r2, [pc, #16]	; (80016b0 <__NVIC_SetPriorityGrouping+0x44>)
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	60d3      	str	r3, [r2, #12]
}
 80016a4:	bf00      	nop
 80016a6:	3714      	adds	r7, #20
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc80      	pop	{r7}
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	e000ed00 	.word	0xe000ed00

080016b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016b8:	4b04      	ldr	r3, [pc, #16]	; (80016cc <__NVIC_GetPriorityGrouping+0x18>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	0a1b      	lsrs	r3, r3, #8
 80016be:	f003 0307 	and.w	r3, r3, #7
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	db0b      	blt.n	80016fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016e2:	79fb      	ldrb	r3, [r7, #7]
 80016e4:	f003 021f 	and.w	r2, r3, #31
 80016e8:	4906      	ldr	r1, [pc, #24]	; (8001704 <__NVIC_EnableIRQ+0x34>)
 80016ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ee:	095b      	lsrs	r3, r3, #5
 80016f0:	2001      	movs	r0, #1
 80016f2:	fa00 f202 	lsl.w	r2, r0, r2
 80016f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr
 8001704:	e000e100 	.word	0xe000e100

08001708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	6039      	str	r1, [r7, #0]
 8001712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001718:	2b00      	cmp	r3, #0
 800171a:	db0a      	blt.n	8001732 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	b2da      	uxtb	r2, r3
 8001720:	490c      	ldr	r1, [pc, #48]	; (8001754 <__NVIC_SetPriority+0x4c>)
 8001722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001726:	0112      	lsls	r2, r2, #4
 8001728:	b2d2      	uxtb	r2, r2
 800172a:	440b      	add	r3, r1
 800172c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001730:	e00a      	b.n	8001748 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	b2da      	uxtb	r2, r3
 8001736:	4908      	ldr	r1, [pc, #32]	; (8001758 <__NVIC_SetPriority+0x50>)
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	f003 030f 	and.w	r3, r3, #15
 800173e:	3b04      	subs	r3, #4
 8001740:	0112      	lsls	r2, r2, #4
 8001742:	b2d2      	uxtb	r2, r2
 8001744:	440b      	add	r3, r1
 8001746:	761a      	strb	r2, [r3, #24]
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	bc80      	pop	{r7}
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	e000e100 	.word	0xe000e100
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800175c:	b480      	push	{r7}
 800175e:	b089      	sub	sp, #36	; 0x24
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	f1c3 0307 	rsb	r3, r3, #7
 8001776:	2b04      	cmp	r3, #4
 8001778:	bf28      	it	cs
 800177a:	2304      	movcs	r3, #4
 800177c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	3304      	adds	r3, #4
 8001782:	2b06      	cmp	r3, #6
 8001784:	d902      	bls.n	800178c <NVIC_EncodePriority+0x30>
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	3b03      	subs	r3, #3
 800178a:	e000      	b.n	800178e <NVIC_EncodePriority+0x32>
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001790:	f04f 32ff 	mov.w	r2, #4294967295
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	43da      	mvns	r2, r3
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	401a      	ands	r2, r3
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017a4:	f04f 31ff 	mov.w	r1, #4294967295
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	fa01 f303 	lsl.w	r3, r1, r3
 80017ae:	43d9      	mvns	r1, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b4:	4313      	orrs	r3, r2
         );
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3724      	adds	r7, #36	; 0x24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr

080017c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3b01      	subs	r3, #1
 80017cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017d0:	d301      	bcc.n	80017d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017d2:	2301      	movs	r3, #1
 80017d4:	e00f      	b.n	80017f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017d6:	4a0a      	ldr	r2, [pc, #40]	; (8001800 <SysTick_Config+0x40>)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3b01      	subs	r3, #1
 80017dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017de:	210f      	movs	r1, #15
 80017e0:	f04f 30ff 	mov.w	r0, #4294967295
 80017e4:	f7ff ff90 	bl	8001708 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017e8:	4b05      	ldr	r3, [pc, #20]	; (8001800 <SysTick_Config+0x40>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ee:	4b04      	ldr	r3, [pc, #16]	; (8001800 <SysTick_Config+0x40>)
 80017f0:	2207      	movs	r2, #7
 80017f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	e000e010 	.word	0xe000e010

08001804 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f7ff ff2d 	bl	800166c <__NVIC_SetPriorityGrouping>
}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800181a:	b580      	push	{r7, lr}
 800181c:	b086      	sub	sp, #24
 800181e:	af00      	add	r7, sp, #0
 8001820:	4603      	mov	r3, r0
 8001822:	60b9      	str	r1, [r7, #8]
 8001824:	607a      	str	r2, [r7, #4]
 8001826:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800182c:	f7ff ff42 	bl	80016b4 <__NVIC_GetPriorityGrouping>
 8001830:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	68b9      	ldr	r1, [r7, #8]
 8001836:	6978      	ldr	r0, [r7, #20]
 8001838:	f7ff ff90 	bl	800175c <NVIC_EncodePriority>
 800183c:	4602      	mov	r2, r0
 800183e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001842:	4611      	mov	r1, r2
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff ff5f 	bl	8001708 <__NVIC_SetPriority>
}
 800184a:	bf00      	nop
 800184c:	3718      	adds	r7, #24
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b082      	sub	sp, #8
 8001856:	af00      	add	r7, sp, #0
 8001858:	4603      	mov	r3, r0
 800185a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800185c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff ff35 	bl	80016d0 <__NVIC_EnableIRQ>
}
 8001866:	bf00      	nop
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b082      	sub	sp, #8
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7ff ffa2 	bl	80017c0 <SysTick_Config>
 800187c:	4603      	mov	r3, r0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
	...

08001888 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001888:	b480      	push	{r7}
 800188a:	b08b      	sub	sp, #44	; 0x2c
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001892:	2300      	movs	r3, #0
 8001894:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001896:	2300      	movs	r3, #0
 8001898:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800189a:	e169      	b.n	8001b70 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800189c:	2201      	movs	r2, #1
 800189e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	69fa      	ldr	r2, [r7, #28]
 80018ac:	4013      	ands	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	f040 8158 	bne.w	8001b6a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	4a9a      	ldr	r2, [pc, #616]	; (8001b28 <HAL_GPIO_Init+0x2a0>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d05e      	beq.n	8001982 <HAL_GPIO_Init+0xfa>
 80018c4:	4a98      	ldr	r2, [pc, #608]	; (8001b28 <HAL_GPIO_Init+0x2a0>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d875      	bhi.n	80019b6 <HAL_GPIO_Init+0x12e>
 80018ca:	4a98      	ldr	r2, [pc, #608]	; (8001b2c <HAL_GPIO_Init+0x2a4>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d058      	beq.n	8001982 <HAL_GPIO_Init+0xfa>
 80018d0:	4a96      	ldr	r2, [pc, #600]	; (8001b2c <HAL_GPIO_Init+0x2a4>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d86f      	bhi.n	80019b6 <HAL_GPIO_Init+0x12e>
 80018d6:	4a96      	ldr	r2, [pc, #600]	; (8001b30 <HAL_GPIO_Init+0x2a8>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d052      	beq.n	8001982 <HAL_GPIO_Init+0xfa>
 80018dc:	4a94      	ldr	r2, [pc, #592]	; (8001b30 <HAL_GPIO_Init+0x2a8>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d869      	bhi.n	80019b6 <HAL_GPIO_Init+0x12e>
 80018e2:	4a94      	ldr	r2, [pc, #592]	; (8001b34 <HAL_GPIO_Init+0x2ac>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d04c      	beq.n	8001982 <HAL_GPIO_Init+0xfa>
 80018e8:	4a92      	ldr	r2, [pc, #584]	; (8001b34 <HAL_GPIO_Init+0x2ac>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d863      	bhi.n	80019b6 <HAL_GPIO_Init+0x12e>
 80018ee:	4a92      	ldr	r2, [pc, #584]	; (8001b38 <HAL_GPIO_Init+0x2b0>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d046      	beq.n	8001982 <HAL_GPIO_Init+0xfa>
 80018f4:	4a90      	ldr	r2, [pc, #576]	; (8001b38 <HAL_GPIO_Init+0x2b0>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d85d      	bhi.n	80019b6 <HAL_GPIO_Init+0x12e>
 80018fa:	2b12      	cmp	r3, #18
 80018fc:	d82a      	bhi.n	8001954 <HAL_GPIO_Init+0xcc>
 80018fe:	2b12      	cmp	r3, #18
 8001900:	d859      	bhi.n	80019b6 <HAL_GPIO_Init+0x12e>
 8001902:	a201      	add	r2, pc, #4	; (adr r2, 8001908 <HAL_GPIO_Init+0x80>)
 8001904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001908:	08001983 	.word	0x08001983
 800190c:	0800195d 	.word	0x0800195d
 8001910:	0800196f 	.word	0x0800196f
 8001914:	080019b1 	.word	0x080019b1
 8001918:	080019b7 	.word	0x080019b7
 800191c:	080019b7 	.word	0x080019b7
 8001920:	080019b7 	.word	0x080019b7
 8001924:	080019b7 	.word	0x080019b7
 8001928:	080019b7 	.word	0x080019b7
 800192c:	080019b7 	.word	0x080019b7
 8001930:	080019b7 	.word	0x080019b7
 8001934:	080019b7 	.word	0x080019b7
 8001938:	080019b7 	.word	0x080019b7
 800193c:	080019b7 	.word	0x080019b7
 8001940:	080019b7 	.word	0x080019b7
 8001944:	080019b7 	.word	0x080019b7
 8001948:	080019b7 	.word	0x080019b7
 800194c:	08001965 	.word	0x08001965
 8001950:	08001979 	.word	0x08001979
 8001954:	4a79      	ldr	r2, [pc, #484]	; (8001b3c <HAL_GPIO_Init+0x2b4>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d013      	beq.n	8001982 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800195a:	e02c      	b.n	80019b6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	623b      	str	r3, [r7, #32]
          break;
 8001962:	e029      	b.n	80019b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	3304      	adds	r3, #4
 800196a:	623b      	str	r3, [r7, #32]
          break;
 800196c:	e024      	b.n	80019b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	3308      	adds	r3, #8
 8001974:	623b      	str	r3, [r7, #32]
          break;
 8001976:	e01f      	b.n	80019b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	330c      	adds	r3, #12
 800197e:	623b      	str	r3, [r7, #32]
          break;
 8001980:	e01a      	b.n	80019b8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d102      	bne.n	8001990 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800198a:	2304      	movs	r3, #4
 800198c:	623b      	str	r3, [r7, #32]
          break;
 800198e:	e013      	b.n	80019b8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d105      	bne.n	80019a4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001998:	2308      	movs	r3, #8
 800199a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	69fa      	ldr	r2, [r7, #28]
 80019a0:	611a      	str	r2, [r3, #16]
          break;
 80019a2:	e009      	b.n	80019b8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019a4:	2308      	movs	r3, #8
 80019a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	69fa      	ldr	r2, [r7, #28]
 80019ac:	615a      	str	r2, [r3, #20]
          break;
 80019ae:	e003      	b.n	80019b8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019b0:	2300      	movs	r3, #0
 80019b2:	623b      	str	r3, [r7, #32]
          break;
 80019b4:	e000      	b.n	80019b8 <HAL_GPIO_Init+0x130>
          break;
 80019b6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	2bff      	cmp	r3, #255	; 0xff
 80019bc:	d801      	bhi.n	80019c2 <HAL_GPIO_Init+0x13a>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	e001      	b.n	80019c6 <HAL_GPIO_Init+0x13e>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	3304      	adds	r3, #4
 80019c6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	2bff      	cmp	r3, #255	; 0xff
 80019cc:	d802      	bhi.n	80019d4 <HAL_GPIO_Init+0x14c>
 80019ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	e002      	b.n	80019da <HAL_GPIO_Init+0x152>
 80019d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d6:	3b08      	subs	r3, #8
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	210f      	movs	r1, #15
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	fa01 f303 	lsl.w	r3, r1, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	401a      	ands	r2, r3
 80019ec:	6a39      	ldr	r1, [r7, #32]
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	fa01 f303 	lsl.w	r3, r1, r3
 80019f4:	431a      	orrs	r2, r3
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	f000 80b1 	beq.w	8001b6a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a08:	4b4d      	ldr	r3, [pc, #308]	; (8001b40 <HAL_GPIO_Init+0x2b8>)
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	4a4c      	ldr	r2, [pc, #304]	; (8001b40 <HAL_GPIO_Init+0x2b8>)
 8001a0e:	f043 0301 	orr.w	r3, r3, #1
 8001a12:	6193      	str	r3, [r2, #24]
 8001a14:	4b4a      	ldr	r3, [pc, #296]	; (8001b40 <HAL_GPIO_Init+0x2b8>)
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	60bb      	str	r3, [r7, #8]
 8001a1e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a20:	4a48      	ldr	r2, [pc, #288]	; (8001b44 <HAL_GPIO_Init+0x2bc>)
 8001a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a24:	089b      	lsrs	r3, r3, #2
 8001a26:	3302      	adds	r3, #2
 8001a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a2c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a30:	f003 0303 	and.w	r3, r3, #3
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	220f      	movs	r2, #15
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	68fa      	ldr	r2, [r7, #12]
 8001a40:	4013      	ands	r3, r2
 8001a42:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4a40      	ldr	r2, [pc, #256]	; (8001b48 <HAL_GPIO_Init+0x2c0>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d013      	beq.n	8001a74 <HAL_GPIO_Init+0x1ec>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4a3f      	ldr	r2, [pc, #252]	; (8001b4c <HAL_GPIO_Init+0x2c4>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d00d      	beq.n	8001a70 <HAL_GPIO_Init+0x1e8>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	4a3e      	ldr	r2, [pc, #248]	; (8001b50 <HAL_GPIO_Init+0x2c8>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d007      	beq.n	8001a6c <HAL_GPIO_Init+0x1e4>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	4a3d      	ldr	r2, [pc, #244]	; (8001b54 <HAL_GPIO_Init+0x2cc>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d101      	bne.n	8001a68 <HAL_GPIO_Init+0x1e0>
 8001a64:	2303      	movs	r3, #3
 8001a66:	e006      	b.n	8001a76 <HAL_GPIO_Init+0x1ee>
 8001a68:	2304      	movs	r3, #4
 8001a6a:	e004      	b.n	8001a76 <HAL_GPIO_Init+0x1ee>
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	e002      	b.n	8001a76 <HAL_GPIO_Init+0x1ee>
 8001a70:	2301      	movs	r3, #1
 8001a72:	e000      	b.n	8001a76 <HAL_GPIO_Init+0x1ee>
 8001a74:	2300      	movs	r3, #0
 8001a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a78:	f002 0203 	and.w	r2, r2, #3
 8001a7c:	0092      	lsls	r2, r2, #2
 8001a7e:	4093      	lsls	r3, r2
 8001a80:	68fa      	ldr	r2, [r7, #12]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a86:	492f      	ldr	r1, [pc, #188]	; (8001b44 <HAL_GPIO_Init+0x2bc>)
 8001a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8a:	089b      	lsrs	r3, r3, #2
 8001a8c:	3302      	adds	r3, #2
 8001a8e:	68fa      	ldr	r2, [r7, #12]
 8001a90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d006      	beq.n	8001aae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001aa0:	4b2d      	ldr	r3, [pc, #180]	; (8001b58 <HAL_GPIO_Init+0x2d0>)
 8001aa2:	689a      	ldr	r2, [r3, #8]
 8001aa4:	492c      	ldr	r1, [pc, #176]	; (8001b58 <HAL_GPIO_Init+0x2d0>)
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	608b      	str	r3, [r1, #8]
 8001aac:	e006      	b.n	8001abc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001aae:	4b2a      	ldr	r3, [pc, #168]	; (8001b58 <HAL_GPIO_Init+0x2d0>)
 8001ab0:	689a      	ldr	r2, [r3, #8]
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	4928      	ldr	r1, [pc, #160]	; (8001b58 <HAL_GPIO_Init+0x2d0>)
 8001ab8:	4013      	ands	r3, r2
 8001aba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d006      	beq.n	8001ad6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ac8:	4b23      	ldr	r3, [pc, #140]	; (8001b58 <HAL_GPIO_Init+0x2d0>)
 8001aca:	68da      	ldr	r2, [r3, #12]
 8001acc:	4922      	ldr	r1, [pc, #136]	; (8001b58 <HAL_GPIO_Init+0x2d0>)
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	60cb      	str	r3, [r1, #12]
 8001ad4:	e006      	b.n	8001ae4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ad6:	4b20      	ldr	r3, [pc, #128]	; (8001b58 <HAL_GPIO_Init+0x2d0>)
 8001ad8:	68da      	ldr	r2, [r3, #12]
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	43db      	mvns	r3, r3
 8001ade:	491e      	ldr	r1, [pc, #120]	; (8001b58 <HAL_GPIO_Init+0x2d0>)
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d006      	beq.n	8001afe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001af0:	4b19      	ldr	r3, [pc, #100]	; (8001b58 <HAL_GPIO_Init+0x2d0>)
 8001af2:	685a      	ldr	r2, [r3, #4]
 8001af4:	4918      	ldr	r1, [pc, #96]	; (8001b58 <HAL_GPIO_Init+0x2d0>)
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	604b      	str	r3, [r1, #4]
 8001afc:	e006      	b.n	8001b0c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001afe:	4b16      	ldr	r3, [pc, #88]	; (8001b58 <HAL_GPIO_Init+0x2d0>)
 8001b00:	685a      	ldr	r2, [r3, #4]
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	43db      	mvns	r3, r3
 8001b06:	4914      	ldr	r1, [pc, #80]	; (8001b58 <HAL_GPIO_Init+0x2d0>)
 8001b08:	4013      	ands	r3, r2
 8001b0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d021      	beq.n	8001b5c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b18:	4b0f      	ldr	r3, [pc, #60]	; (8001b58 <HAL_GPIO_Init+0x2d0>)
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	490e      	ldr	r1, [pc, #56]	; (8001b58 <HAL_GPIO_Init+0x2d0>)
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	600b      	str	r3, [r1, #0]
 8001b24:	e021      	b.n	8001b6a <HAL_GPIO_Init+0x2e2>
 8001b26:	bf00      	nop
 8001b28:	10320000 	.word	0x10320000
 8001b2c:	10310000 	.word	0x10310000
 8001b30:	10220000 	.word	0x10220000
 8001b34:	10210000 	.word	0x10210000
 8001b38:	10120000 	.word	0x10120000
 8001b3c:	10110000 	.word	0x10110000
 8001b40:	40021000 	.word	0x40021000
 8001b44:	40010000 	.word	0x40010000
 8001b48:	40010800 	.word	0x40010800
 8001b4c:	40010c00 	.word	0x40010c00
 8001b50:	40011000 	.word	0x40011000
 8001b54:	40011400 	.word	0x40011400
 8001b58:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b5c:	4b0b      	ldr	r3, [pc, #44]	; (8001b8c <HAL_GPIO_Init+0x304>)
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	43db      	mvns	r3, r3
 8001b64:	4909      	ldr	r1, [pc, #36]	; (8001b8c <HAL_GPIO_Init+0x304>)
 8001b66:	4013      	ands	r3, r2
 8001b68:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b76:	fa22 f303 	lsr.w	r3, r2, r3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f47f ae8e 	bne.w	800189c <HAL_GPIO_Init+0x14>
  }
}
 8001b80:	bf00      	nop
 8001b82:	bf00      	nop
 8001b84:	372c      	adds	r7, #44	; 0x2c
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bc80      	pop	{r7}
 8001b8a:	4770      	bx	lr
 8001b8c:	40010400 	.word	0x40010400

08001b90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	460b      	mov	r3, r1
 8001b9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689a      	ldr	r2, [r3, #8]
 8001ba0:	887b      	ldrh	r3, [r7, #2]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d002      	beq.n	8001bae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	73fb      	strb	r3, [r7, #15]
 8001bac:	e001      	b.n	8001bb2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bc80      	pop	{r7}
 8001bbc:	4770      	bx	lr

08001bbe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	807b      	strh	r3, [r7, #2]
 8001bca:	4613      	mov	r3, r2
 8001bcc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bce:	787b      	ldrb	r3, [r7, #1]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d003      	beq.n	8001bdc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bd4:	887a      	ldrh	r2, [r7, #2]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001bda:	e003      	b.n	8001be4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bdc:	887b      	ldrh	r3, [r7, #2]
 8001bde:	041a      	lsls	r2, r3, #16
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	611a      	str	r2, [r3, #16]
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bc80      	pop	{r7}
 8001bec:	4770      	bx	lr

08001bee <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b085      	sub	sp, #20
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c00:	887a      	ldrh	r2, [r7, #2]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	4013      	ands	r3, r2
 8001c06:	041a      	lsls	r2, r3, #16
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	43d9      	mvns	r1, r3
 8001c0c:	887b      	ldrh	r3, [r7, #2]
 8001c0e:	400b      	ands	r3, r1
 8001c10:	431a      	orrs	r2, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	611a      	str	r2, [r3, #16]
}
 8001c16:	bf00      	nop
 8001c18:	3714      	adds	r7, #20
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr

08001c20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e26c      	b.n	800210c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f000 8087 	beq.w	8001d4e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c40:	4b92      	ldr	r3, [pc, #584]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f003 030c 	and.w	r3, r3, #12
 8001c48:	2b04      	cmp	r3, #4
 8001c4a:	d00c      	beq.n	8001c66 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c4c:	4b8f      	ldr	r3, [pc, #572]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f003 030c 	and.w	r3, r3, #12
 8001c54:	2b08      	cmp	r3, #8
 8001c56:	d112      	bne.n	8001c7e <HAL_RCC_OscConfig+0x5e>
 8001c58:	4b8c      	ldr	r3, [pc, #560]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c64:	d10b      	bne.n	8001c7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c66:	4b89      	ldr	r3, [pc, #548]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d06c      	beq.n	8001d4c <HAL_RCC_OscConfig+0x12c>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d168      	bne.n	8001d4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e246      	b.n	800210c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c86:	d106      	bne.n	8001c96 <HAL_RCC_OscConfig+0x76>
 8001c88:	4b80      	ldr	r3, [pc, #512]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a7f      	ldr	r2, [pc, #508]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001c8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c92:	6013      	str	r3, [r2, #0]
 8001c94:	e02e      	b.n	8001cf4 <HAL_RCC_OscConfig+0xd4>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d10c      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x98>
 8001c9e:	4b7b      	ldr	r3, [pc, #492]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a7a      	ldr	r2, [pc, #488]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001ca4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ca8:	6013      	str	r3, [r2, #0]
 8001caa:	4b78      	ldr	r3, [pc, #480]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a77      	ldr	r2, [pc, #476]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001cb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cb4:	6013      	str	r3, [r2, #0]
 8001cb6:	e01d      	b.n	8001cf4 <HAL_RCC_OscConfig+0xd4>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cc0:	d10c      	bne.n	8001cdc <HAL_RCC_OscConfig+0xbc>
 8001cc2:	4b72      	ldr	r3, [pc, #456]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a71      	ldr	r2, [pc, #452]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001cc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ccc:	6013      	str	r3, [r2, #0]
 8001cce:	4b6f      	ldr	r3, [pc, #444]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a6e      	ldr	r2, [pc, #440]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cd8:	6013      	str	r3, [r2, #0]
 8001cda:	e00b      	b.n	8001cf4 <HAL_RCC_OscConfig+0xd4>
 8001cdc:	4b6b      	ldr	r3, [pc, #428]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a6a      	ldr	r2, [pc, #424]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001ce2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ce6:	6013      	str	r3, [r2, #0]
 8001ce8:	4b68      	ldr	r3, [pc, #416]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a67      	ldr	r2, [pc, #412]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001cee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cf2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d013      	beq.n	8001d24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cfc:	f7ff fcac 	bl	8001658 <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d04:	f7ff fca8 	bl	8001658 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b64      	cmp	r3, #100	; 0x64
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e1fa      	b.n	800210c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d16:	4b5d      	ldr	r3, [pc, #372]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d0f0      	beq.n	8001d04 <HAL_RCC_OscConfig+0xe4>
 8001d22:	e014      	b.n	8001d4e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d24:	f7ff fc98 	bl	8001658 <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d2c:	f7ff fc94 	bl	8001658 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b64      	cmp	r3, #100	; 0x64
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e1e6      	b.n	800210c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d3e:	4b53      	ldr	r3, [pc, #332]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1f0      	bne.n	8001d2c <HAL_RCC_OscConfig+0x10c>
 8001d4a:	e000      	b.n	8001d4e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d063      	beq.n	8001e22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d5a:	4b4c      	ldr	r3, [pc, #304]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f003 030c 	and.w	r3, r3, #12
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d00b      	beq.n	8001d7e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d66:	4b49      	ldr	r3, [pc, #292]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f003 030c 	and.w	r3, r3, #12
 8001d6e:	2b08      	cmp	r3, #8
 8001d70:	d11c      	bne.n	8001dac <HAL_RCC_OscConfig+0x18c>
 8001d72:	4b46      	ldr	r3, [pc, #280]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d116      	bne.n	8001dac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d7e:	4b43      	ldr	r3, [pc, #268]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d005      	beq.n	8001d96 <HAL_RCC_OscConfig+0x176>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d001      	beq.n	8001d96 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e1ba      	b.n	800210c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d96:	4b3d      	ldr	r3, [pc, #244]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	695b      	ldr	r3, [r3, #20]
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	4939      	ldr	r1, [pc, #228]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001daa:	e03a      	b.n	8001e22 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	691b      	ldr	r3, [r3, #16]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d020      	beq.n	8001df6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001db4:	4b36      	ldr	r3, [pc, #216]	; (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001db6:	2201      	movs	r2, #1
 8001db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dba:	f7ff fc4d 	bl	8001658 <HAL_GetTick>
 8001dbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dc0:	e008      	b.n	8001dd4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dc2:	f7ff fc49 	bl	8001658 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e19b      	b.n	800210c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd4:	4b2d      	ldr	r3, [pc, #180]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d0f0      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de0:	4b2a      	ldr	r3, [pc, #168]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	695b      	ldr	r3, [r3, #20]
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	4927      	ldr	r1, [pc, #156]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	600b      	str	r3, [r1, #0]
 8001df4:	e015      	b.n	8001e22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001df6:	4b26      	ldr	r3, [pc, #152]	; (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dfc:	f7ff fc2c 	bl	8001658 <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e04:	f7ff fc28 	bl	8001658 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e17a      	b.n	800210c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e16:	4b1d      	ldr	r3, [pc, #116]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1f0      	bne.n	8001e04 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0308 	and.w	r3, r3, #8
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d03a      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d019      	beq.n	8001e6a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e36:	4b17      	ldr	r3, [pc, #92]	; (8001e94 <HAL_RCC_OscConfig+0x274>)
 8001e38:	2201      	movs	r2, #1
 8001e3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e3c:	f7ff fc0c 	bl	8001658 <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e44:	f7ff fc08 	bl	8001658 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e15a      	b.n	800210c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e56:	4b0d      	ldr	r3, [pc, #52]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d0f0      	beq.n	8001e44 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e62:	2001      	movs	r0, #1
 8001e64:	f000 fa9a 	bl	800239c <RCC_Delay>
 8001e68:	e01c      	b.n	8001ea4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e6a:	4b0a      	ldr	r3, [pc, #40]	; (8001e94 <HAL_RCC_OscConfig+0x274>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e70:	f7ff fbf2 	bl	8001658 <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e76:	e00f      	b.n	8001e98 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e78:	f7ff fbee 	bl	8001658 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d908      	bls.n	8001e98 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e140      	b.n	800210c <HAL_RCC_OscConfig+0x4ec>
 8001e8a:	bf00      	nop
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	42420000 	.word	0x42420000
 8001e94:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e98:	4b9e      	ldr	r3, [pc, #632]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d1e9      	bne.n	8001e78 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0304 	and.w	r3, r3, #4
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	f000 80a6 	beq.w	8001ffe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eb6:	4b97      	ldr	r3, [pc, #604]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d10d      	bne.n	8001ede <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ec2:	4b94      	ldr	r3, [pc, #592]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	4a93      	ldr	r2, [pc, #588]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001ec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ecc:	61d3      	str	r3, [r2, #28]
 8001ece:	4b91      	ldr	r3, [pc, #580]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001ed0:	69db      	ldr	r3, [r3, #28]
 8001ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed6:	60bb      	str	r3, [r7, #8]
 8001ed8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eda:	2301      	movs	r3, #1
 8001edc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ede:	4b8e      	ldr	r3, [pc, #568]	; (8002118 <HAL_RCC_OscConfig+0x4f8>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d118      	bne.n	8001f1c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eea:	4b8b      	ldr	r3, [pc, #556]	; (8002118 <HAL_RCC_OscConfig+0x4f8>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a8a      	ldr	r2, [pc, #552]	; (8002118 <HAL_RCC_OscConfig+0x4f8>)
 8001ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ef4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ef6:	f7ff fbaf 	bl	8001658 <HAL_GetTick>
 8001efa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001efc:	e008      	b.n	8001f10 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001efe:	f7ff fbab 	bl	8001658 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b64      	cmp	r3, #100	; 0x64
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e0fd      	b.n	800210c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f10:	4b81      	ldr	r3, [pc, #516]	; (8002118 <HAL_RCC_OscConfig+0x4f8>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d0f0      	beq.n	8001efe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d106      	bne.n	8001f32 <HAL_RCC_OscConfig+0x312>
 8001f24:	4b7b      	ldr	r3, [pc, #492]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001f26:	6a1b      	ldr	r3, [r3, #32]
 8001f28:	4a7a      	ldr	r2, [pc, #488]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001f2a:	f043 0301 	orr.w	r3, r3, #1
 8001f2e:	6213      	str	r3, [r2, #32]
 8001f30:	e02d      	b.n	8001f8e <HAL_RCC_OscConfig+0x36e>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d10c      	bne.n	8001f54 <HAL_RCC_OscConfig+0x334>
 8001f3a:	4b76      	ldr	r3, [pc, #472]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001f3c:	6a1b      	ldr	r3, [r3, #32]
 8001f3e:	4a75      	ldr	r2, [pc, #468]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001f40:	f023 0301 	bic.w	r3, r3, #1
 8001f44:	6213      	str	r3, [r2, #32]
 8001f46:	4b73      	ldr	r3, [pc, #460]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001f48:	6a1b      	ldr	r3, [r3, #32]
 8001f4a:	4a72      	ldr	r2, [pc, #456]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001f4c:	f023 0304 	bic.w	r3, r3, #4
 8001f50:	6213      	str	r3, [r2, #32]
 8001f52:	e01c      	b.n	8001f8e <HAL_RCC_OscConfig+0x36e>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	2b05      	cmp	r3, #5
 8001f5a:	d10c      	bne.n	8001f76 <HAL_RCC_OscConfig+0x356>
 8001f5c:	4b6d      	ldr	r3, [pc, #436]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001f5e:	6a1b      	ldr	r3, [r3, #32]
 8001f60:	4a6c      	ldr	r2, [pc, #432]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001f62:	f043 0304 	orr.w	r3, r3, #4
 8001f66:	6213      	str	r3, [r2, #32]
 8001f68:	4b6a      	ldr	r3, [pc, #424]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001f6a:	6a1b      	ldr	r3, [r3, #32]
 8001f6c:	4a69      	ldr	r2, [pc, #420]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001f6e:	f043 0301 	orr.w	r3, r3, #1
 8001f72:	6213      	str	r3, [r2, #32]
 8001f74:	e00b      	b.n	8001f8e <HAL_RCC_OscConfig+0x36e>
 8001f76:	4b67      	ldr	r3, [pc, #412]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001f78:	6a1b      	ldr	r3, [r3, #32]
 8001f7a:	4a66      	ldr	r2, [pc, #408]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001f7c:	f023 0301 	bic.w	r3, r3, #1
 8001f80:	6213      	str	r3, [r2, #32]
 8001f82:	4b64      	ldr	r3, [pc, #400]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001f84:	6a1b      	ldr	r3, [r3, #32]
 8001f86:	4a63      	ldr	r2, [pc, #396]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001f88:	f023 0304 	bic.w	r3, r3, #4
 8001f8c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d015      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f96:	f7ff fb5f 	bl	8001658 <HAL_GetTick>
 8001f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f9c:	e00a      	b.n	8001fb4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f9e:	f7ff fb5b 	bl	8001658 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e0ab      	b.n	800210c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fb4:	4b57      	ldr	r3, [pc, #348]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d0ee      	beq.n	8001f9e <HAL_RCC_OscConfig+0x37e>
 8001fc0:	e014      	b.n	8001fec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fc2:	f7ff fb49 	bl	8001658 <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fc8:	e00a      	b.n	8001fe0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fca:	f7ff fb45 	bl	8001658 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e095      	b.n	800210c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fe0:	4b4c      	ldr	r3, [pc, #304]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001fe2:	6a1b      	ldr	r3, [r3, #32]
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1ee      	bne.n	8001fca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fec:	7dfb      	ldrb	r3, [r7, #23]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d105      	bne.n	8001ffe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ff2:	4b48      	ldr	r3, [pc, #288]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	4a47      	ldr	r2, [pc, #284]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001ff8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ffc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	2b00      	cmp	r3, #0
 8002004:	f000 8081 	beq.w	800210a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002008:	4b42      	ldr	r3, [pc, #264]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f003 030c 	and.w	r3, r3, #12
 8002010:	2b08      	cmp	r3, #8
 8002012:	d061      	beq.n	80020d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	69db      	ldr	r3, [r3, #28]
 8002018:	2b02      	cmp	r3, #2
 800201a:	d146      	bne.n	80020aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800201c:	4b3f      	ldr	r3, [pc, #252]	; (800211c <HAL_RCC_OscConfig+0x4fc>)
 800201e:	2200      	movs	r2, #0
 8002020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002022:	f7ff fb19 	bl	8001658 <HAL_GetTick>
 8002026:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002028:	e008      	b.n	800203c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800202a:	f7ff fb15 	bl	8001658 <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d901      	bls.n	800203c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e067      	b.n	800210c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800203c:	4b35      	ldr	r3, [pc, #212]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d1f0      	bne.n	800202a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a1b      	ldr	r3, [r3, #32]
 800204c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002050:	d108      	bne.n	8002064 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002052:	4b30      	ldr	r3, [pc, #192]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	492d      	ldr	r1, [pc, #180]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8002060:	4313      	orrs	r3, r2
 8002062:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002064:	4b2b      	ldr	r3, [pc, #172]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a19      	ldr	r1, [r3, #32]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002074:	430b      	orrs	r3, r1
 8002076:	4927      	ldr	r1, [pc, #156]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8002078:	4313      	orrs	r3, r2
 800207a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800207c:	4b27      	ldr	r3, [pc, #156]	; (800211c <HAL_RCC_OscConfig+0x4fc>)
 800207e:	2201      	movs	r2, #1
 8002080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002082:	f7ff fae9 	bl	8001658 <HAL_GetTick>
 8002086:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002088:	e008      	b.n	800209c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800208a:	f7ff fae5 	bl	8001658 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d901      	bls.n	800209c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e037      	b.n	800210c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800209c:	4b1d      	ldr	r3, [pc, #116]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d0f0      	beq.n	800208a <HAL_RCC_OscConfig+0x46a>
 80020a8:	e02f      	b.n	800210a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020aa:	4b1c      	ldr	r3, [pc, #112]	; (800211c <HAL_RCC_OscConfig+0x4fc>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b0:	f7ff fad2 	bl	8001658 <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b8:	f7ff face 	bl	8001658 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e020      	b.n	800210c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020ca:	4b12      	ldr	r3, [pc, #72]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1f0      	bne.n	80020b8 <HAL_RCC_OscConfig+0x498>
 80020d6:	e018      	b.n	800210a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	69db      	ldr	r3, [r3, #28]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d101      	bne.n	80020e4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e013      	b.n	800210c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020e4:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a1b      	ldr	r3, [r3, #32]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d106      	bne.n	8002106 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002102:	429a      	cmp	r2, r3
 8002104:	d001      	beq.n	800210a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e000      	b.n	800210c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	3718      	adds	r7, #24
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40021000 	.word	0x40021000
 8002118:	40007000 	.word	0x40007000
 800211c:	42420060 	.word	0x42420060

08002120 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d101      	bne.n	8002134 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e0d0      	b.n	80022d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002134:	4b6a      	ldr	r3, [pc, #424]	; (80022e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0307 	and.w	r3, r3, #7
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	429a      	cmp	r2, r3
 8002140:	d910      	bls.n	8002164 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002142:	4b67      	ldr	r3, [pc, #412]	; (80022e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f023 0207 	bic.w	r2, r3, #7
 800214a:	4965      	ldr	r1, [pc, #404]	; (80022e0 <HAL_RCC_ClockConfig+0x1c0>)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	4313      	orrs	r3, r2
 8002150:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002152:	4b63      	ldr	r3, [pc, #396]	; (80022e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	683a      	ldr	r2, [r7, #0]
 800215c:	429a      	cmp	r2, r3
 800215e:	d001      	beq.n	8002164 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e0b8      	b.n	80022d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d020      	beq.n	80021b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0304 	and.w	r3, r3, #4
 8002178:	2b00      	cmp	r3, #0
 800217a:	d005      	beq.n	8002188 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800217c:	4b59      	ldr	r3, [pc, #356]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	4a58      	ldr	r2, [pc, #352]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002182:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002186:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0308 	and.w	r3, r3, #8
 8002190:	2b00      	cmp	r3, #0
 8002192:	d005      	beq.n	80021a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002194:	4b53      	ldr	r3, [pc, #332]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	4a52      	ldr	r2, [pc, #328]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 800219a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800219e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021a0:	4b50      	ldr	r3, [pc, #320]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	494d      	ldr	r1, [pc, #308]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d040      	beq.n	8002240 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d107      	bne.n	80021d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021c6:	4b47      	ldr	r3, [pc, #284]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d115      	bne.n	80021fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e07f      	b.n	80022d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d107      	bne.n	80021ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021de:	4b41      	ldr	r3, [pc, #260]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d109      	bne.n	80021fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e073      	b.n	80022d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ee:	4b3d      	ldr	r3, [pc, #244]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e06b      	b.n	80022d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021fe:	4b39      	ldr	r3, [pc, #228]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f023 0203 	bic.w	r2, r3, #3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	4936      	ldr	r1, [pc, #216]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 800220c:	4313      	orrs	r3, r2
 800220e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002210:	f7ff fa22 	bl	8001658 <HAL_GetTick>
 8002214:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002216:	e00a      	b.n	800222e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002218:	f7ff fa1e 	bl	8001658 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	f241 3288 	movw	r2, #5000	; 0x1388
 8002226:	4293      	cmp	r3, r2
 8002228:	d901      	bls.n	800222e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e053      	b.n	80022d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800222e:	4b2d      	ldr	r3, [pc, #180]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f003 020c 	and.w	r2, r3, #12
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	429a      	cmp	r2, r3
 800223e:	d1eb      	bne.n	8002218 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002240:	4b27      	ldr	r3, [pc, #156]	; (80022e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0307 	and.w	r3, r3, #7
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	429a      	cmp	r2, r3
 800224c:	d210      	bcs.n	8002270 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800224e:	4b24      	ldr	r3, [pc, #144]	; (80022e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f023 0207 	bic.w	r2, r3, #7
 8002256:	4922      	ldr	r1, [pc, #136]	; (80022e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	4313      	orrs	r3, r2
 800225c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800225e:	4b20      	ldr	r3, [pc, #128]	; (80022e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0307 	and.w	r3, r3, #7
 8002266:	683a      	ldr	r2, [r7, #0]
 8002268:	429a      	cmp	r2, r3
 800226a:	d001      	beq.n	8002270 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e032      	b.n	80022d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0304 	and.w	r3, r3, #4
 8002278:	2b00      	cmp	r3, #0
 800227a:	d008      	beq.n	800228e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800227c:	4b19      	ldr	r3, [pc, #100]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	4916      	ldr	r1, [pc, #88]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 800228a:	4313      	orrs	r3, r2
 800228c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0308 	and.w	r3, r3, #8
 8002296:	2b00      	cmp	r3, #0
 8002298:	d009      	beq.n	80022ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800229a:	4b12      	ldr	r3, [pc, #72]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	490e      	ldr	r1, [pc, #56]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022ae:	f000 f821 	bl	80022f4 <HAL_RCC_GetSysClockFreq>
 80022b2:	4602      	mov	r2, r0
 80022b4:	4b0b      	ldr	r3, [pc, #44]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	091b      	lsrs	r3, r3, #4
 80022ba:	f003 030f 	and.w	r3, r3, #15
 80022be:	490a      	ldr	r1, [pc, #40]	; (80022e8 <HAL_RCC_ClockConfig+0x1c8>)
 80022c0:	5ccb      	ldrb	r3, [r1, r3]
 80022c2:	fa22 f303 	lsr.w	r3, r2, r3
 80022c6:	4a09      	ldr	r2, [pc, #36]	; (80022ec <HAL_RCC_ClockConfig+0x1cc>)
 80022c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022ca:	4b09      	ldr	r3, [pc, #36]	; (80022f0 <HAL_RCC_ClockConfig+0x1d0>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff f980 	bl	80015d4 <HAL_InitTick>

  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	40022000 	.word	0x40022000
 80022e4:	40021000 	.word	0x40021000
 80022e8:	080034c8 	.word	0x080034c8
 80022ec:	20000034 	.word	0x20000034
 80022f0:	20000038 	.word	0x20000038

080022f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b087      	sub	sp, #28
 80022f8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022fa:	2300      	movs	r3, #0
 80022fc:	60fb      	str	r3, [r7, #12]
 80022fe:	2300      	movs	r3, #0
 8002300:	60bb      	str	r3, [r7, #8]
 8002302:	2300      	movs	r3, #0
 8002304:	617b      	str	r3, [r7, #20]
 8002306:	2300      	movs	r3, #0
 8002308:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800230a:	2300      	movs	r3, #0
 800230c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800230e:	4b1e      	ldr	r3, [pc, #120]	; (8002388 <HAL_RCC_GetSysClockFreq+0x94>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f003 030c 	and.w	r3, r3, #12
 800231a:	2b04      	cmp	r3, #4
 800231c:	d002      	beq.n	8002324 <HAL_RCC_GetSysClockFreq+0x30>
 800231e:	2b08      	cmp	r3, #8
 8002320:	d003      	beq.n	800232a <HAL_RCC_GetSysClockFreq+0x36>
 8002322:	e027      	b.n	8002374 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002324:	4b19      	ldr	r3, [pc, #100]	; (800238c <HAL_RCC_GetSysClockFreq+0x98>)
 8002326:	613b      	str	r3, [r7, #16]
      break;
 8002328:	e027      	b.n	800237a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	0c9b      	lsrs	r3, r3, #18
 800232e:	f003 030f 	and.w	r3, r3, #15
 8002332:	4a17      	ldr	r2, [pc, #92]	; (8002390 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002334:	5cd3      	ldrb	r3, [r2, r3]
 8002336:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d010      	beq.n	8002364 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002342:	4b11      	ldr	r3, [pc, #68]	; (8002388 <HAL_RCC_GetSysClockFreq+0x94>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	0c5b      	lsrs	r3, r3, #17
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	4a11      	ldr	r2, [pc, #68]	; (8002394 <HAL_RCC_GetSysClockFreq+0xa0>)
 800234e:	5cd3      	ldrb	r3, [r2, r3]
 8002350:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a0d      	ldr	r2, [pc, #52]	; (800238c <HAL_RCC_GetSysClockFreq+0x98>)
 8002356:	fb02 f203 	mul.w	r2, r2, r3
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002360:	617b      	str	r3, [r7, #20]
 8002362:	e004      	b.n	800236e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4a0c      	ldr	r2, [pc, #48]	; (8002398 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002368:	fb02 f303 	mul.w	r3, r2, r3
 800236c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	613b      	str	r3, [r7, #16]
      break;
 8002372:	e002      	b.n	800237a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002374:	4b05      	ldr	r3, [pc, #20]	; (800238c <HAL_RCC_GetSysClockFreq+0x98>)
 8002376:	613b      	str	r3, [r7, #16]
      break;
 8002378:	bf00      	nop
    }
  }
  return sysclockfreq;
 800237a:	693b      	ldr	r3, [r7, #16]
}
 800237c:	4618      	mov	r0, r3
 800237e:	371c      	adds	r7, #28
 8002380:	46bd      	mov	sp, r7
 8002382:	bc80      	pop	{r7}
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	40021000 	.word	0x40021000
 800238c:	007a1200 	.word	0x007a1200
 8002390:	080034d8 	.word	0x080034d8
 8002394:	080034e8 	.word	0x080034e8
 8002398:	003d0900 	.word	0x003d0900

0800239c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023a4:	4b0a      	ldr	r3, [pc, #40]	; (80023d0 <RCC_Delay+0x34>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a0a      	ldr	r2, [pc, #40]	; (80023d4 <RCC_Delay+0x38>)
 80023aa:	fba2 2303 	umull	r2, r3, r2, r3
 80023ae:	0a5b      	lsrs	r3, r3, #9
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	fb02 f303 	mul.w	r3, r2, r3
 80023b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023b8:	bf00      	nop
  }
  while (Delay --);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	1e5a      	subs	r2, r3, #1
 80023be:	60fa      	str	r2, [r7, #12]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1f9      	bne.n	80023b8 <RCC_Delay+0x1c>
}
 80023c4:	bf00      	nop
 80023c6:	bf00      	nop
 80023c8:	3714      	adds	r7, #20
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bc80      	pop	{r7}
 80023ce:	4770      	bx	lr
 80023d0:	20000034 	.word	0x20000034
 80023d4:	10624dd3 	.word	0x10624dd3

080023d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e041      	b.n	800246e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d106      	bne.n	8002404 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f7fe ffc2 	bl	8001388 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2202      	movs	r2, #2
 8002408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	3304      	adds	r3, #4
 8002414:	4619      	mov	r1, r3
 8002416:	4610      	mov	r0, r2
 8002418:	f000 fc30 	bl	8002c7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
	...

08002478 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002486:	b2db      	uxtb	r3, r3
 8002488:	2b01      	cmp	r3, #1
 800248a:	d001      	beq.n	8002490 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e03a      	b.n	8002506 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2202      	movs	r2, #2
 8002494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68da      	ldr	r2, [r3, #12]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f042 0201 	orr.w	r2, r2, #1
 80024a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a18      	ldr	r2, [pc, #96]	; (8002510 <HAL_TIM_Base_Start_IT+0x98>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d00e      	beq.n	80024d0 <HAL_TIM_Base_Start_IT+0x58>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024ba:	d009      	beq.n	80024d0 <HAL_TIM_Base_Start_IT+0x58>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a14      	ldr	r2, [pc, #80]	; (8002514 <HAL_TIM_Base_Start_IT+0x9c>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d004      	beq.n	80024d0 <HAL_TIM_Base_Start_IT+0x58>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a13      	ldr	r2, [pc, #76]	; (8002518 <HAL_TIM_Base_Start_IT+0xa0>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d111      	bne.n	80024f4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2b06      	cmp	r3, #6
 80024e0:	d010      	beq.n	8002504 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f042 0201 	orr.w	r2, r2, #1
 80024f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024f2:	e007      	b.n	8002504 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f042 0201 	orr.w	r2, r2, #1
 8002502:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3714      	adds	r7, #20
 800250a:	46bd      	mov	sp, r7
 800250c:	bc80      	pop	{r7}
 800250e:	4770      	bx	lr
 8002510:	40012c00 	.word	0x40012c00
 8002514:	40000400 	.word	0x40000400
 8002518:	40000800 	.word	0x40000800

0800251c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e041      	b.n	80025b2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b00      	cmp	r3, #0
 8002538:	d106      	bne.n	8002548 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f000 f839 	bl	80025ba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2202      	movs	r2, #2
 800254c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	3304      	adds	r3, #4
 8002558:	4619      	mov	r1, r3
 800255a:	4610      	mov	r0, r2
 800255c:	f000 fb8e 	bl	8002c7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80025ba:	b480      	push	{r7}
 80025bc:	b083      	sub	sp, #12
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80025c2:	bf00      	nop
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bc80      	pop	{r7}
 80025ca:	4770      	bx	lr

080025cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d109      	bne.n	80025f0 <HAL_TIM_PWM_Start+0x24>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	bf14      	ite	ne
 80025e8:	2301      	movne	r3, #1
 80025ea:	2300      	moveq	r3, #0
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	e022      	b.n	8002636 <HAL_TIM_PWM_Start+0x6a>
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	2b04      	cmp	r3, #4
 80025f4:	d109      	bne.n	800260a <HAL_TIM_PWM_Start+0x3e>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b01      	cmp	r3, #1
 8002600:	bf14      	ite	ne
 8002602:	2301      	movne	r3, #1
 8002604:	2300      	moveq	r3, #0
 8002606:	b2db      	uxtb	r3, r3
 8002608:	e015      	b.n	8002636 <HAL_TIM_PWM_Start+0x6a>
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	2b08      	cmp	r3, #8
 800260e:	d109      	bne.n	8002624 <HAL_TIM_PWM_Start+0x58>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002616:	b2db      	uxtb	r3, r3
 8002618:	2b01      	cmp	r3, #1
 800261a:	bf14      	ite	ne
 800261c:	2301      	movne	r3, #1
 800261e:	2300      	moveq	r3, #0
 8002620:	b2db      	uxtb	r3, r3
 8002622:	e008      	b.n	8002636 <HAL_TIM_PWM_Start+0x6a>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800262a:	b2db      	uxtb	r3, r3
 800262c:	2b01      	cmp	r3, #1
 800262e:	bf14      	ite	ne
 8002630:	2301      	movne	r3, #1
 8002632:	2300      	moveq	r3, #0
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e05e      	b.n	80026fc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d104      	bne.n	800264e <HAL_TIM_PWM_Start+0x82>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2202      	movs	r2, #2
 8002648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800264c:	e013      	b.n	8002676 <HAL_TIM_PWM_Start+0xaa>
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	2b04      	cmp	r3, #4
 8002652:	d104      	bne.n	800265e <HAL_TIM_PWM_Start+0x92>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2202      	movs	r2, #2
 8002658:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800265c:	e00b      	b.n	8002676 <HAL_TIM_PWM_Start+0xaa>
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	2b08      	cmp	r3, #8
 8002662:	d104      	bne.n	800266e <HAL_TIM_PWM_Start+0xa2>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2202      	movs	r2, #2
 8002668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800266c:	e003      	b.n	8002676 <HAL_TIM_PWM_Start+0xaa>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2202      	movs	r2, #2
 8002672:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2201      	movs	r2, #1
 800267c:	6839      	ldr	r1, [r7, #0]
 800267e:	4618      	mov	r0, r3
 8002680:	f000 fd7c 	bl	800317c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a1e      	ldr	r2, [pc, #120]	; (8002704 <HAL_TIM_PWM_Start+0x138>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d107      	bne.n	800269e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800269c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a18      	ldr	r2, [pc, #96]	; (8002704 <HAL_TIM_PWM_Start+0x138>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d00e      	beq.n	80026c6 <HAL_TIM_PWM_Start+0xfa>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026b0:	d009      	beq.n	80026c6 <HAL_TIM_PWM_Start+0xfa>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a14      	ldr	r2, [pc, #80]	; (8002708 <HAL_TIM_PWM_Start+0x13c>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d004      	beq.n	80026c6 <HAL_TIM_PWM_Start+0xfa>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a12      	ldr	r2, [pc, #72]	; (800270c <HAL_TIM_PWM_Start+0x140>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d111      	bne.n	80026ea <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f003 0307 	and.w	r3, r3, #7
 80026d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2b06      	cmp	r3, #6
 80026d6:	d010      	beq.n	80026fa <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f042 0201 	orr.w	r2, r2, #1
 80026e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026e8:	e007      	b.n	80026fa <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f042 0201 	orr.w	r2, r2, #1
 80026f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3710      	adds	r7, #16
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	40012c00 	.word	0x40012c00
 8002708:	40000400 	.word	0x40000400
 800270c:	40000800 	.word	0x40000800

08002710 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b02      	cmp	r3, #2
 8002724:	d122      	bne.n	800276c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b02      	cmp	r3, #2
 8002732:	d11b      	bne.n	800276c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f06f 0202 	mvn.w	r2, #2
 800273c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2201      	movs	r2, #1
 8002742:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	f003 0303 	and.w	r3, r3, #3
 800274e:	2b00      	cmp	r3, #0
 8002750:	d003      	beq.n	800275a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 fa76 	bl	8002c44 <HAL_TIM_IC_CaptureCallback>
 8002758:	e005      	b.n	8002766 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 fa69 	bl	8002c32 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f000 fa78 	bl	8002c56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	f003 0304 	and.w	r3, r3, #4
 8002776:	2b04      	cmp	r3, #4
 8002778:	d122      	bne.n	80027c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	f003 0304 	and.w	r3, r3, #4
 8002784:	2b04      	cmp	r3, #4
 8002786:	d11b      	bne.n	80027c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f06f 0204 	mvn.w	r2, #4
 8002790:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2202      	movs	r2, #2
 8002796:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d003      	beq.n	80027ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 fa4c 	bl	8002c44 <HAL_TIM_IC_CaptureCallback>
 80027ac:	e005      	b.n	80027ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 fa3f 	bl	8002c32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f000 fa4e 	bl	8002c56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	f003 0308 	and.w	r3, r3, #8
 80027ca:	2b08      	cmp	r3, #8
 80027cc:	d122      	bne.n	8002814 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	f003 0308 	and.w	r3, r3, #8
 80027d8:	2b08      	cmp	r3, #8
 80027da:	d11b      	bne.n	8002814 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f06f 0208 	mvn.w	r2, #8
 80027e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2204      	movs	r2, #4
 80027ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	f003 0303 	and.w	r3, r3, #3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 fa22 	bl	8002c44 <HAL_TIM_IC_CaptureCallback>
 8002800:	e005      	b.n	800280e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 fa15 	bl	8002c32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 fa24 	bl	8002c56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	f003 0310 	and.w	r3, r3, #16
 800281e:	2b10      	cmp	r3, #16
 8002820:	d122      	bne.n	8002868 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	f003 0310 	and.w	r3, r3, #16
 800282c:	2b10      	cmp	r3, #16
 800282e:	d11b      	bne.n	8002868 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f06f 0210 	mvn.w	r2, #16
 8002838:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2208      	movs	r2, #8
 800283e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800284a:	2b00      	cmp	r3, #0
 800284c:	d003      	beq.n	8002856 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 f9f8 	bl	8002c44 <HAL_TIM_IC_CaptureCallback>
 8002854:	e005      	b.n	8002862 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 f9eb 	bl	8002c32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f000 f9fa 	bl	8002c56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	2b01      	cmp	r3, #1
 8002874:	d10e      	bne.n	8002894 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	f003 0301 	and.w	r3, r3, #1
 8002880:	2b01      	cmp	r3, #1
 8002882:	d107      	bne.n	8002894 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f06f 0201 	mvn.w	r2, #1
 800288c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f7fe fa50 	bl	8000d34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800289e:	2b80      	cmp	r3, #128	; 0x80
 80028a0:	d10e      	bne.n	80028c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ac:	2b80      	cmp	r3, #128	; 0x80
 80028ae:	d107      	bne.n	80028c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80028b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 fce9 	bl	8003292 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ca:	2b40      	cmp	r3, #64	; 0x40
 80028cc:	d10e      	bne.n	80028ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028d8:	2b40      	cmp	r3, #64	; 0x40
 80028da:	d107      	bne.n	80028ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80028e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 f9be 	bl	8002c68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	f003 0320 	and.w	r3, r3, #32
 80028f6:	2b20      	cmp	r3, #32
 80028f8:	d10e      	bne.n	8002918 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	f003 0320 	and.w	r3, r3, #32
 8002904:	2b20      	cmp	r3, #32
 8002906:	d107      	bne.n	8002918 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f06f 0220 	mvn.w	r2, #32
 8002910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 fcb4 	bl	8003280 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002918:	bf00      	nop
 800291a:	3708      	adds	r7, #8
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800292c:	2300      	movs	r3, #0
 800292e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002936:	2b01      	cmp	r3, #1
 8002938:	d101      	bne.n	800293e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800293a:	2302      	movs	r3, #2
 800293c:	e0ae      	b.n	8002a9c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2b0c      	cmp	r3, #12
 800294a:	f200 809f 	bhi.w	8002a8c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800294e:	a201      	add	r2, pc, #4	; (adr r2, 8002954 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002954:	08002989 	.word	0x08002989
 8002958:	08002a8d 	.word	0x08002a8d
 800295c:	08002a8d 	.word	0x08002a8d
 8002960:	08002a8d 	.word	0x08002a8d
 8002964:	080029c9 	.word	0x080029c9
 8002968:	08002a8d 	.word	0x08002a8d
 800296c:	08002a8d 	.word	0x08002a8d
 8002970:	08002a8d 	.word	0x08002a8d
 8002974:	08002a0b 	.word	0x08002a0b
 8002978:	08002a8d 	.word	0x08002a8d
 800297c:	08002a8d 	.word	0x08002a8d
 8002980:	08002a8d 	.word	0x08002a8d
 8002984:	08002a4b 	.word	0x08002a4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68b9      	ldr	r1, [r7, #8]
 800298e:	4618      	mov	r0, r3
 8002990:	f000 f9d6 	bl	8002d40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	699a      	ldr	r2, [r3, #24]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f042 0208 	orr.w	r2, r2, #8
 80029a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	699a      	ldr	r2, [r3, #24]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f022 0204 	bic.w	r2, r2, #4
 80029b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6999      	ldr	r1, [r3, #24]
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	691a      	ldr	r2, [r3, #16]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	430a      	orrs	r2, r1
 80029c4:	619a      	str	r2, [r3, #24]
      break;
 80029c6:	e064      	b.n	8002a92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68b9      	ldr	r1, [r7, #8]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f000 fa1c 	bl	8002e0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	699a      	ldr	r2, [r3, #24]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	699a      	ldr	r2, [r3, #24]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	6999      	ldr	r1, [r3, #24]
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	021a      	lsls	r2, r3, #8
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	430a      	orrs	r2, r1
 8002a06:	619a      	str	r2, [r3, #24]
      break;
 8002a08:	e043      	b.n	8002a92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68b9      	ldr	r1, [r7, #8]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f000 fa65 	bl	8002ee0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	69da      	ldr	r2, [r3, #28]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f042 0208 	orr.w	r2, r2, #8
 8002a24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	69da      	ldr	r2, [r3, #28]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f022 0204 	bic.w	r2, r2, #4
 8002a34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	69d9      	ldr	r1, [r3, #28]
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	691a      	ldr	r2, [r3, #16]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	430a      	orrs	r2, r1
 8002a46:	61da      	str	r2, [r3, #28]
      break;
 8002a48:	e023      	b.n	8002a92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68b9      	ldr	r1, [r7, #8]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f000 faaf 	bl	8002fb4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	69da      	ldr	r2, [r3, #28]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	69da      	ldr	r2, [r3, #28]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	69d9      	ldr	r1, [r3, #28]
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	021a      	lsls	r2, r3, #8
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	430a      	orrs	r2, r1
 8002a88:	61da      	str	r2, [r3, #28]
      break;
 8002a8a:	e002      	b.n	8002a92 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	75fb      	strb	r3, [r7, #23]
      break;
 8002a90:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3718      	adds	r7, #24
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d101      	bne.n	8002ac0 <HAL_TIM_ConfigClockSource+0x1c>
 8002abc:	2302      	movs	r3, #2
 8002abe:	e0b4      	b.n	8002c2a <HAL_TIM_ConfigClockSource+0x186>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2202      	movs	r2, #2
 8002acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ade:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ae6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68ba      	ldr	r2, [r7, #8]
 8002aee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002af8:	d03e      	beq.n	8002b78 <HAL_TIM_ConfigClockSource+0xd4>
 8002afa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002afe:	f200 8087 	bhi.w	8002c10 <HAL_TIM_ConfigClockSource+0x16c>
 8002b02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b06:	f000 8086 	beq.w	8002c16 <HAL_TIM_ConfigClockSource+0x172>
 8002b0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b0e:	d87f      	bhi.n	8002c10 <HAL_TIM_ConfigClockSource+0x16c>
 8002b10:	2b70      	cmp	r3, #112	; 0x70
 8002b12:	d01a      	beq.n	8002b4a <HAL_TIM_ConfigClockSource+0xa6>
 8002b14:	2b70      	cmp	r3, #112	; 0x70
 8002b16:	d87b      	bhi.n	8002c10 <HAL_TIM_ConfigClockSource+0x16c>
 8002b18:	2b60      	cmp	r3, #96	; 0x60
 8002b1a:	d050      	beq.n	8002bbe <HAL_TIM_ConfigClockSource+0x11a>
 8002b1c:	2b60      	cmp	r3, #96	; 0x60
 8002b1e:	d877      	bhi.n	8002c10 <HAL_TIM_ConfigClockSource+0x16c>
 8002b20:	2b50      	cmp	r3, #80	; 0x50
 8002b22:	d03c      	beq.n	8002b9e <HAL_TIM_ConfigClockSource+0xfa>
 8002b24:	2b50      	cmp	r3, #80	; 0x50
 8002b26:	d873      	bhi.n	8002c10 <HAL_TIM_ConfigClockSource+0x16c>
 8002b28:	2b40      	cmp	r3, #64	; 0x40
 8002b2a:	d058      	beq.n	8002bde <HAL_TIM_ConfigClockSource+0x13a>
 8002b2c:	2b40      	cmp	r3, #64	; 0x40
 8002b2e:	d86f      	bhi.n	8002c10 <HAL_TIM_ConfigClockSource+0x16c>
 8002b30:	2b30      	cmp	r3, #48	; 0x30
 8002b32:	d064      	beq.n	8002bfe <HAL_TIM_ConfigClockSource+0x15a>
 8002b34:	2b30      	cmp	r3, #48	; 0x30
 8002b36:	d86b      	bhi.n	8002c10 <HAL_TIM_ConfigClockSource+0x16c>
 8002b38:	2b20      	cmp	r3, #32
 8002b3a:	d060      	beq.n	8002bfe <HAL_TIM_ConfigClockSource+0x15a>
 8002b3c:	2b20      	cmp	r3, #32
 8002b3e:	d867      	bhi.n	8002c10 <HAL_TIM_ConfigClockSource+0x16c>
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d05c      	beq.n	8002bfe <HAL_TIM_ConfigClockSource+0x15a>
 8002b44:	2b10      	cmp	r3, #16
 8002b46:	d05a      	beq.n	8002bfe <HAL_TIM_ConfigClockSource+0x15a>
 8002b48:	e062      	b.n	8002c10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6818      	ldr	r0, [r3, #0]
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	6899      	ldr	r1, [r3, #8]
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	f000 faf0 	bl	800313e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68ba      	ldr	r2, [r7, #8]
 8002b74:	609a      	str	r2, [r3, #8]
      break;
 8002b76:	e04f      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6818      	ldr	r0, [r3, #0]
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	6899      	ldr	r1, [r3, #8]
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685a      	ldr	r2, [r3, #4]
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	f000 fad9 	bl	800313e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	689a      	ldr	r2, [r3, #8]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b9a:	609a      	str	r2, [r3, #8]
      break;
 8002b9c:	e03c      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6818      	ldr	r0, [r3, #0]
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	6859      	ldr	r1, [r3, #4]
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	461a      	mov	r2, r3
 8002bac:	f000 fa50 	bl	8003050 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2150      	movs	r1, #80	; 0x50
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f000 faa7 	bl	800310a <TIM_ITRx_SetConfig>
      break;
 8002bbc:	e02c      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6818      	ldr	r0, [r3, #0]
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	6859      	ldr	r1, [r3, #4]
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	461a      	mov	r2, r3
 8002bcc:	f000 fa6e 	bl	80030ac <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2160      	movs	r1, #96	; 0x60
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f000 fa97 	bl	800310a <TIM_ITRx_SetConfig>
      break;
 8002bdc:	e01c      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6818      	ldr	r0, [r3, #0]
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	6859      	ldr	r1, [r3, #4]
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	461a      	mov	r2, r3
 8002bec:	f000 fa30 	bl	8003050 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2140      	movs	r1, #64	; 0x40
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f000 fa87 	bl	800310a <TIM_ITRx_SetConfig>
      break;
 8002bfc:	e00c      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4619      	mov	r1, r3
 8002c08:	4610      	mov	r0, r2
 8002c0a:	f000 fa7e 	bl	800310a <TIM_ITRx_SetConfig>
      break;
 8002c0e:	e003      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	73fb      	strb	r3, [r7, #15]
      break;
 8002c14:	e000      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002c16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3710      	adds	r7, #16
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c32:	b480      	push	{r7}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c3a:	bf00      	nop
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bc80      	pop	{r7}
 8002c42:	4770      	bx	lr

08002c44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bc80      	pop	{r7}
 8002c54:	4770      	bx	lr

08002c56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c56:	b480      	push	{r7}
 8002c58:	b083      	sub	sp, #12
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bc80      	pop	{r7}
 8002c66:	4770      	bx	lr

08002c68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c70:	bf00      	nop
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bc80      	pop	{r7}
 8002c78:	4770      	bx	lr
	...

08002c7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a29      	ldr	r2, [pc, #164]	; (8002d34 <TIM_Base_SetConfig+0xb8>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d00b      	beq.n	8002cac <TIM_Base_SetConfig+0x30>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c9a:	d007      	beq.n	8002cac <TIM_Base_SetConfig+0x30>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a26      	ldr	r2, [pc, #152]	; (8002d38 <TIM_Base_SetConfig+0xbc>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d003      	beq.n	8002cac <TIM_Base_SetConfig+0x30>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a25      	ldr	r2, [pc, #148]	; (8002d3c <TIM_Base_SetConfig+0xc0>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d108      	bne.n	8002cbe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a1c      	ldr	r2, [pc, #112]	; (8002d34 <TIM_Base_SetConfig+0xb8>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d00b      	beq.n	8002cde <TIM_Base_SetConfig+0x62>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ccc:	d007      	beq.n	8002cde <TIM_Base_SetConfig+0x62>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a19      	ldr	r2, [pc, #100]	; (8002d38 <TIM_Base_SetConfig+0xbc>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d003      	beq.n	8002cde <TIM_Base_SetConfig+0x62>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a18      	ldr	r2, [pc, #96]	; (8002d3c <TIM_Base_SetConfig+0xc0>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d108      	bne.n	8002cf0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ce4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	689a      	ldr	r2, [r3, #8]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a07      	ldr	r2, [pc, #28]	; (8002d34 <TIM_Base_SetConfig+0xb8>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d103      	bne.n	8002d24 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	691a      	ldr	r2, [r3, #16]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	615a      	str	r2, [r3, #20]
}
 8002d2a:	bf00      	nop
 8002d2c:	3714      	adds	r7, #20
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bc80      	pop	{r7}
 8002d32:	4770      	bx	lr
 8002d34:	40012c00 	.word	0x40012c00
 8002d38:	40000400 	.word	0x40000400
 8002d3c:	40000800 	.word	0x40000800

08002d40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b087      	sub	sp, #28
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
 8002d4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	f023 0201 	bic.w	r2, r3, #1
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f023 0303 	bic.w	r3, r3, #3
 8002d76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f023 0302 	bic.w	r3, r3, #2
 8002d88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a1c      	ldr	r2, [pc, #112]	; (8002e08 <TIM_OC1_SetConfig+0xc8>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d10c      	bne.n	8002db6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	f023 0308 	bic.w	r3, r3, #8
 8002da2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	697a      	ldr	r2, [r7, #20]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	f023 0304 	bic.w	r3, r3, #4
 8002db4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a13      	ldr	r2, [pc, #76]	; (8002e08 <TIM_OC1_SetConfig+0xc8>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d111      	bne.n	8002de2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002dc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002dcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	68fa      	ldr	r2, [r7, #12]
 8002dec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	685a      	ldr	r2, [r3, #4]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	697a      	ldr	r2, [r7, #20]
 8002dfa:	621a      	str	r2, [r3, #32]
}
 8002dfc:	bf00      	nop
 8002dfe:	371c      	adds	r7, #28
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bc80      	pop	{r7}
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	40012c00 	.word	0x40012c00

08002e0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b087      	sub	sp, #28
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a1b      	ldr	r3, [r3, #32]
 8002e1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a1b      	ldr	r3, [r3, #32]
 8002e20:	f023 0210 	bic.w	r2, r3, #16
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	021b      	lsls	r3, r3, #8
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	f023 0320 	bic.w	r3, r3, #32
 8002e56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	011b      	lsls	r3, r3, #4
 8002e5e:	697a      	ldr	r2, [r7, #20]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a1d      	ldr	r2, [pc, #116]	; (8002edc <TIM_OC2_SetConfig+0xd0>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d10d      	bne.n	8002e88 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	011b      	lsls	r3, r3, #4
 8002e7a:	697a      	ldr	r2, [r7, #20]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e86:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a14      	ldr	r2, [pc, #80]	; (8002edc <TIM_OC2_SetConfig+0xd0>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d113      	bne.n	8002eb8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	695b      	ldr	r3, [r3, #20]
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685a      	ldr	r2, [r3, #4]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	697a      	ldr	r2, [r7, #20]
 8002ed0:	621a      	str	r2, [r3, #32]
}
 8002ed2:	bf00      	nop
 8002ed4:	371c      	adds	r7, #28
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bc80      	pop	{r7}
 8002eda:	4770      	bx	lr
 8002edc:	40012c00 	.word	0x40012c00

08002ee0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b087      	sub	sp, #28
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f023 0303 	bic.w	r3, r3, #3
 8002f16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	021b      	lsls	r3, r3, #8
 8002f30:	697a      	ldr	r2, [r7, #20]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a1d      	ldr	r2, [pc, #116]	; (8002fb0 <TIM_OC3_SetConfig+0xd0>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d10d      	bne.n	8002f5a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	021b      	lsls	r3, r3, #8
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a14      	ldr	r2, [pc, #80]	; (8002fb0 <TIM_OC3_SetConfig+0xd0>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d113      	bne.n	8002f8a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	011b      	lsls	r3, r3, #4
 8002f78:	693a      	ldr	r2, [r7, #16]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	011b      	lsls	r3, r3, #4
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	693a      	ldr	r2, [r7, #16]
 8002f8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	685a      	ldr	r2, [r3, #4]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	697a      	ldr	r2, [r7, #20]
 8002fa2:	621a      	str	r2, [r3, #32]
}
 8002fa4:	bf00      	nop
 8002fa6:	371c      	adds	r7, #28
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bc80      	pop	{r7}
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	40012c00 	.word	0x40012c00

08002fb4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b087      	sub	sp, #28
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	69db      	ldr	r3, [r3, #28]
 8002fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	021b      	lsls	r3, r3, #8
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ffe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	031b      	lsls	r3, r3, #12
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	4313      	orrs	r3, r2
 800300a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a0f      	ldr	r2, [pc, #60]	; (800304c <TIM_OC4_SetConfig+0x98>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d109      	bne.n	8003028 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800301a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	695b      	ldr	r3, [r3, #20]
 8003020:	019b      	lsls	r3, r3, #6
 8003022:	697a      	ldr	r2, [r7, #20]
 8003024:	4313      	orrs	r3, r2
 8003026:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	697a      	ldr	r2, [r7, #20]
 800302c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685a      	ldr	r2, [r3, #4]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	621a      	str	r2, [r3, #32]
}
 8003042:	bf00      	nop
 8003044:	371c      	adds	r7, #28
 8003046:	46bd      	mov	sp, r7
 8003048:	bc80      	pop	{r7}
 800304a:	4770      	bx	lr
 800304c:	40012c00 	.word	0x40012c00

08003050 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003050:	b480      	push	{r7}
 8003052:	b087      	sub	sp, #28
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6a1b      	ldr	r3, [r3, #32]
 8003066:	f023 0201 	bic.w	r2, r3, #1
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800307a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	011b      	lsls	r3, r3, #4
 8003080:	693a      	ldr	r2, [r7, #16]
 8003082:	4313      	orrs	r3, r2
 8003084:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	f023 030a 	bic.w	r3, r3, #10
 800308c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	4313      	orrs	r3, r2
 8003094:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	621a      	str	r2, [r3, #32]
}
 80030a2:	bf00      	nop
 80030a4:	371c      	adds	r7, #28
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bc80      	pop	{r7}
 80030aa:	4770      	bx	lr

080030ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b087      	sub	sp, #28
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6a1b      	ldr	r3, [r3, #32]
 80030bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	f023 0210 	bic.w	r2, r3, #16
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80030d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	031b      	lsls	r3, r3, #12
 80030dc:	693a      	ldr	r2, [r7, #16]
 80030de:	4313      	orrs	r3, r2
 80030e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80030e8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	011b      	lsls	r3, r3, #4
 80030ee:	697a      	ldr	r2, [r7, #20]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	621a      	str	r2, [r3, #32]
}
 8003100:	bf00      	nop
 8003102:	371c      	adds	r7, #28
 8003104:	46bd      	mov	sp, r7
 8003106:	bc80      	pop	{r7}
 8003108:	4770      	bx	lr

0800310a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800310a:	b480      	push	{r7}
 800310c:	b085      	sub	sp, #20
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
 8003112:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003120:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003122:	683a      	ldr	r2, [r7, #0]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	4313      	orrs	r3, r2
 8003128:	f043 0307 	orr.w	r3, r3, #7
 800312c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	609a      	str	r2, [r3, #8]
}
 8003134:	bf00      	nop
 8003136:	3714      	adds	r7, #20
 8003138:	46bd      	mov	sp, r7
 800313a:	bc80      	pop	{r7}
 800313c:	4770      	bx	lr

0800313e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800313e:	b480      	push	{r7}
 8003140:	b087      	sub	sp, #28
 8003142:	af00      	add	r7, sp, #0
 8003144:	60f8      	str	r0, [r7, #12]
 8003146:	60b9      	str	r1, [r7, #8]
 8003148:	607a      	str	r2, [r7, #4]
 800314a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003158:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	021a      	lsls	r2, r3, #8
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	431a      	orrs	r2, r3
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	4313      	orrs	r3, r2
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	4313      	orrs	r3, r2
 800316a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	697a      	ldr	r2, [r7, #20]
 8003170:	609a      	str	r2, [r3, #8]
}
 8003172:	bf00      	nop
 8003174:	371c      	adds	r7, #28
 8003176:	46bd      	mov	sp, r7
 8003178:	bc80      	pop	{r7}
 800317a:	4770      	bx	lr

0800317c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800317c:	b480      	push	{r7}
 800317e:	b087      	sub	sp, #28
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	f003 031f 	and.w	r3, r3, #31
 800318e:	2201      	movs	r2, #1
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6a1a      	ldr	r2, [r3, #32]
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	43db      	mvns	r3, r3
 800319e:	401a      	ands	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6a1a      	ldr	r2, [r3, #32]
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	f003 031f 	and.w	r3, r3, #31
 80031ae:	6879      	ldr	r1, [r7, #4]
 80031b0:	fa01 f303 	lsl.w	r3, r1, r3
 80031b4:	431a      	orrs	r2, r3
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	621a      	str	r2, [r3, #32]
}
 80031ba:	bf00      	nop
 80031bc:	371c      	adds	r7, #28
 80031be:	46bd      	mov	sp, r7
 80031c0:	bc80      	pop	{r7}
 80031c2:	4770      	bx	lr

080031c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d101      	bne.n	80031dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031d8:	2302      	movs	r3, #2
 80031da:	e046      	b.n	800326a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2202      	movs	r2, #2
 80031e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003202:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68fa      	ldr	r2, [r7, #12]
 800320a:	4313      	orrs	r3, r2
 800320c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a16      	ldr	r2, [pc, #88]	; (8003274 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d00e      	beq.n	800323e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003228:	d009      	beq.n	800323e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a12      	ldr	r2, [pc, #72]	; (8003278 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d004      	beq.n	800323e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a10      	ldr	r2, [pc, #64]	; (800327c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d10c      	bne.n	8003258 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003244:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	68ba      	ldr	r2, [r7, #8]
 800324c:	4313      	orrs	r3, r2
 800324e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68ba      	ldr	r2, [r7, #8]
 8003256:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3714      	adds	r7, #20
 800326e:	46bd      	mov	sp, r7
 8003270:	bc80      	pop	{r7}
 8003272:	4770      	bx	lr
 8003274:	40012c00 	.word	0x40012c00
 8003278:	40000400 	.word	0x40000400
 800327c:	40000800 	.word	0x40000800

08003280 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	bc80      	pop	{r7}
 8003290:	4770      	bx	lr

08003292 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003292:	b480      	push	{r7}
 8003294:	b083      	sub	sp, #12
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800329a:	bf00      	nop
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	bc80      	pop	{r7}
 80032a2:	4770      	bx	lr

080032a4 <__errno>:
 80032a4:	4b01      	ldr	r3, [pc, #4]	; (80032ac <__errno+0x8>)
 80032a6:	6818      	ldr	r0, [r3, #0]
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	20000040 	.word	0x20000040

080032b0 <__libc_init_array>:
 80032b0:	b570      	push	{r4, r5, r6, lr}
 80032b2:	2600      	movs	r6, #0
 80032b4:	4d0c      	ldr	r5, [pc, #48]	; (80032e8 <__libc_init_array+0x38>)
 80032b6:	4c0d      	ldr	r4, [pc, #52]	; (80032ec <__libc_init_array+0x3c>)
 80032b8:	1b64      	subs	r4, r4, r5
 80032ba:	10a4      	asrs	r4, r4, #2
 80032bc:	42a6      	cmp	r6, r4
 80032be:	d109      	bne.n	80032d4 <__libc_init_array+0x24>
 80032c0:	f000 f8f6 	bl	80034b0 <_init>
 80032c4:	2600      	movs	r6, #0
 80032c6:	4d0a      	ldr	r5, [pc, #40]	; (80032f0 <__libc_init_array+0x40>)
 80032c8:	4c0a      	ldr	r4, [pc, #40]	; (80032f4 <__libc_init_array+0x44>)
 80032ca:	1b64      	subs	r4, r4, r5
 80032cc:	10a4      	asrs	r4, r4, #2
 80032ce:	42a6      	cmp	r6, r4
 80032d0:	d105      	bne.n	80032de <__libc_init_array+0x2e>
 80032d2:	bd70      	pop	{r4, r5, r6, pc}
 80032d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80032d8:	4798      	blx	r3
 80032da:	3601      	adds	r6, #1
 80032dc:	e7ee      	b.n	80032bc <__libc_init_array+0xc>
 80032de:	f855 3b04 	ldr.w	r3, [r5], #4
 80032e2:	4798      	blx	r3
 80032e4:	3601      	adds	r6, #1
 80032e6:	e7f2      	b.n	80032ce <__libc_init_array+0x1e>
 80032e8:	080034ec 	.word	0x080034ec
 80032ec:	080034ec 	.word	0x080034ec
 80032f0:	080034ec 	.word	0x080034ec
 80032f4:	080034f0 	.word	0x080034f0

080032f8 <malloc>:
 80032f8:	4b02      	ldr	r3, [pc, #8]	; (8003304 <malloc+0xc>)
 80032fa:	4601      	mov	r1, r0
 80032fc:	6818      	ldr	r0, [r3, #0]
 80032fe:	f000 b85f 	b.w	80033c0 <_malloc_r>
 8003302:	bf00      	nop
 8003304:	20000040 	.word	0x20000040

08003308 <free>:
 8003308:	4b02      	ldr	r3, [pc, #8]	; (8003314 <free+0xc>)
 800330a:	4601      	mov	r1, r0
 800330c:	6818      	ldr	r0, [r3, #0]
 800330e:	f000 b80b 	b.w	8003328 <_free_r>
 8003312:	bf00      	nop
 8003314:	20000040 	.word	0x20000040

08003318 <memset>:
 8003318:	4603      	mov	r3, r0
 800331a:	4402      	add	r2, r0
 800331c:	4293      	cmp	r3, r2
 800331e:	d100      	bne.n	8003322 <memset+0xa>
 8003320:	4770      	bx	lr
 8003322:	f803 1b01 	strb.w	r1, [r3], #1
 8003326:	e7f9      	b.n	800331c <memset+0x4>

08003328 <_free_r>:
 8003328:	b538      	push	{r3, r4, r5, lr}
 800332a:	4605      	mov	r5, r0
 800332c:	2900      	cmp	r1, #0
 800332e:	d043      	beq.n	80033b8 <_free_r+0x90>
 8003330:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003334:	1f0c      	subs	r4, r1, #4
 8003336:	2b00      	cmp	r3, #0
 8003338:	bfb8      	it	lt
 800333a:	18e4      	addlt	r4, r4, r3
 800333c:	f000 f8aa 	bl	8003494 <__malloc_lock>
 8003340:	4a1e      	ldr	r2, [pc, #120]	; (80033bc <_free_r+0x94>)
 8003342:	6813      	ldr	r3, [r2, #0]
 8003344:	4610      	mov	r0, r2
 8003346:	b933      	cbnz	r3, 8003356 <_free_r+0x2e>
 8003348:	6063      	str	r3, [r4, #4]
 800334a:	6014      	str	r4, [r2, #0]
 800334c:	4628      	mov	r0, r5
 800334e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003352:	f000 b8a5 	b.w	80034a0 <__malloc_unlock>
 8003356:	42a3      	cmp	r3, r4
 8003358:	d90a      	bls.n	8003370 <_free_r+0x48>
 800335a:	6821      	ldr	r1, [r4, #0]
 800335c:	1862      	adds	r2, r4, r1
 800335e:	4293      	cmp	r3, r2
 8003360:	bf01      	itttt	eq
 8003362:	681a      	ldreq	r2, [r3, #0]
 8003364:	685b      	ldreq	r3, [r3, #4]
 8003366:	1852      	addeq	r2, r2, r1
 8003368:	6022      	streq	r2, [r4, #0]
 800336a:	6063      	str	r3, [r4, #4]
 800336c:	6004      	str	r4, [r0, #0]
 800336e:	e7ed      	b.n	800334c <_free_r+0x24>
 8003370:	461a      	mov	r2, r3
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	b10b      	cbz	r3, 800337a <_free_r+0x52>
 8003376:	42a3      	cmp	r3, r4
 8003378:	d9fa      	bls.n	8003370 <_free_r+0x48>
 800337a:	6811      	ldr	r1, [r2, #0]
 800337c:	1850      	adds	r0, r2, r1
 800337e:	42a0      	cmp	r0, r4
 8003380:	d10b      	bne.n	800339a <_free_r+0x72>
 8003382:	6820      	ldr	r0, [r4, #0]
 8003384:	4401      	add	r1, r0
 8003386:	1850      	adds	r0, r2, r1
 8003388:	4283      	cmp	r3, r0
 800338a:	6011      	str	r1, [r2, #0]
 800338c:	d1de      	bne.n	800334c <_free_r+0x24>
 800338e:	6818      	ldr	r0, [r3, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	4401      	add	r1, r0
 8003394:	6011      	str	r1, [r2, #0]
 8003396:	6053      	str	r3, [r2, #4]
 8003398:	e7d8      	b.n	800334c <_free_r+0x24>
 800339a:	d902      	bls.n	80033a2 <_free_r+0x7a>
 800339c:	230c      	movs	r3, #12
 800339e:	602b      	str	r3, [r5, #0]
 80033a0:	e7d4      	b.n	800334c <_free_r+0x24>
 80033a2:	6820      	ldr	r0, [r4, #0]
 80033a4:	1821      	adds	r1, r4, r0
 80033a6:	428b      	cmp	r3, r1
 80033a8:	bf01      	itttt	eq
 80033aa:	6819      	ldreq	r1, [r3, #0]
 80033ac:	685b      	ldreq	r3, [r3, #4]
 80033ae:	1809      	addeq	r1, r1, r0
 80033b0:	6021      	streq	r1, [r4, #0]
 80033b2:	6063      	str	r3, [r4, #4]
 80033b4:	6054      	str	r4, [r2, #4]
 80033b6:	e7c9      	b.n	800334c <_free_r+0x24>
 80033b8:	bd38      	pop	{r3, r4, r5, pc}
 80033ba:	bf00      	nop
 80033bc:	20000100 	.word	0x20000100

080033c0 <_malloc_r>:
 80033c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033c2:	1ccd      	adds	r5, r1, #3
 80033c4:	f025 0503 	bic.w	r5, r5, #3
 80033c8:	3508      	adds	r5, #8
 80033ca:	2d0c      	cmp	r5, #12
 80033cc:	bf38      	it	cc
 80033ce:	250c      	movcc	r5, #12
 80033d0:	2d00      	cmp	r5, #0
 80033d2:	4606      	mov	r6, r0
 80033d4:	db01      	blt.n	80033da <_malloc_r+0x1a>
 80033d6:	42a9      	cmp	r1, r5
 80033d8:	d903      	bls.n	80033e2 <_malloc_r+0x22>
 80033da:	230c      	movs	r3, #12
 80033dc:	6033      	str	r3, [r6, #0]
 80033de:	2000      	movs	r0, #0
 80033e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033e2:	f000 f857 	bl	8003494 <__malloc_lock>
 80033e6:	4921      	ldr	r1, [pc, #132]	; (800346c <_malloc_r+0xac>)
 80033e8:	680a      	ldr	r2, [r1, #0]
 80033ea:	4614      	mov	r4, r2
 80033ec:	b99c      	cbnz	r4, 8003416 <_malloc_r+0x56>
 80033ee:	4f20      	ldr	r7, [pc, #128]	; (8003470 <_malloc_r+0xb0>)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	b923      	cbnz	r3, 80033fe <_malloc_r+0x3e>
 80033f4:	4621      	mov	r1, r4
 80033f6:	4630      	mov	r0, r6
 80033f8:	f000 f83c 	bl	8003474 <_sbrk_r>
 80033fc:	6038      	str	r0, [r7, #0]
 80033fe:	4629      	mov	r1, r5
 8003400:	4630      	mov	r0, r6
 8003402:	f000 f837 	bl	8003474 <_sbrk_r>
 8003406:	1c43      	adds	r3, r0, #1
 8003408:	d123      	bne.n	8003452 <_malloc_r+0x92>
 800340a:	230c      	movs	r3, #12
 800340c:	4630      	mov	r0, r6
 800340e:	6033      	str	r3, [r6, #0]
 8003410:	f000 f846 	bl	80034a0 <__malloc_unlock>
 8003414:	e7e3      	b.n	80033de <_malloc_r+0x1e>
 8003416:	6823      	ldr	r3, [r4, #0]
 8003418:	1b5b      	subs	r3, r3, r5
 800341a:	d417      	bmi.n	800344c <_malloc_r+0x8c>
 800341c:	2b0b      	cmp	r3, #11
 800341e:	d903      	bls.n	8003428 <_malloc_r+0x68>
 8003420:	6023      	str	r3, [r4, #0]
 8003422:	441c      	add	r4, r3
 8003424:	6025      	str	r5, [r4, #0]
 8003426:	e004      	b.n	8003432 <_malloc_r+0x72>
 8003428:	6863      	ldr	r3, [r4, #4]
 800342a:	42a2      	cmp	r2, r4
 800342c:	bf0c      	ite	eq
 800342e:	600b      	streq	r3, [r1, #0]
 8003430:	6053      	strne	r3, [r2, #4]
 8003432:	4630      	mov	r0, r6
 8003434:	f000 f834 	bl	80034a0 <__malloc_unlock>
 8003438:	f104 000b 	add.w	r0, r4, #11
 800343c:	1d23      	adds	r3, r4, #4
 800343e:	f020 0007 	bic.w	r0, r0, #7
 8003442:	1ac2      	subs	r2, r0, r3
 8003444:	d0cc      	beq.n	80033e0 <_malloc_r+0x20>
 8003446:	1a1b      	subs	r3, r3, r0
 8003448:	50a3      	str	r3, [r4, r2]
 800344a:	e7c9      	b.n	80033e0 <_malloc_r+0x20>
 800344c:	4622      	mov	r2, r4
 800344e:	6864      	ldr	r4, [r4, #4]
 8003450:	e7cc      	b.n	80033ec <_malloc_r+0x2c>
 8003452:	1cc4      	adds	r4, r0, #3
 8003454:	f024 0403 	bic.w	r4, r4, #3
 8003458:	42a0      	cmp	r0, r4
 800345a:	d0e3      	beq.n	8003424 <_malloc_r+0x64>
 800345c:	1a21      	subs	r1, r4, r0
 800345e:	4630      	mov	r0, r6
 8003460:	f000 f808 	bl	8003474 <_sbrk_r>
 8003464:	3001      	adds	r0, #1
 8003466:	d1dd      	bne.n	8003424 <_malloc_r+0x64>
 8003468:	e7cf      	b.n	800340a <_malloc_r+0x4a>
 800346a:	bf00      	nop
 800346c:	20000100 	.word	0x20000100
 8003470:	20000104 	.word	0x20000104

08003474 <_sbrk_r>:
 8003474:	b538      	push	{r3, r4, r5, lr}
 8003476:	2300      	movs	r3, #0
 8003478:	4d05      	ldr	r5, [pc, #20]	; (8003490 <_sbrk_r+0x1c>)
 800347a:	4604      	mov	r4, r0
 800347c:	4608      	mov	r0, r1
 800347e:	602b      	str	r3, [r5, #0]
 8003480:	f7fe f830 	bl	80014e4 <_sbrk>
 8003484:	1c43      	adds	r3, r0, #1
 8003486:	d102      	bne.n	800348e <_sbrk_r+0x1a>
 8003488:	682b      	ldr	r3, [r5, #0]
 800348a:	b103      	cbz	r3, 800348e <_sbrk_r+0x1a>
 800348c:	6023      	str	r3, [r4, #0]
 800348e:	bd38      	pop	{r3, r4, r5, pc}
 8003490:	200001c8 	.word	0x200001c8

08003494 <__malloc_lock>:
 8003494:	4801      	ldr	r0, [pc, #4]	; (800349c <__malloc_lock+0x8>)
 8003496:	f000 b809 	b.w	80034ac <__retarget_lock_acquire_recursive>
 800349a:	bf00      	nop
 800349c:	200001d0 	.word	0x200001d0

080034a0 <__malloc_unlock>:
 80034a0:	4801      	ldr	r0, [pc, #4]	; (80034a8 <__malloc_unlock+0x8>)
 80034a2:	f000 b804 	b.w	80034ae <__retarget_lock_release_recursive>
 80034a6:	bf00      	nop
 80034a8:	200001d0 	.word	0x200001d0

080034ac <__retarget_lock_acquire_recursive>:
 80034ac:	4770      	bx	lr

080034ae <__retarget_lock_release_recursive>:
 80034ae:	4770      	bx	lr

080034b0 <_init>:
 80034b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034b2:	bf00      	nop
 80034b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034b6:	bc08      	pop	{r3}
 80034b8:	469e      	mov	lr, r3
 80034ba:	4770      	bx	lr

080034bc <_fini>:
 80034bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034be:	bf00      	nop
 80034c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034c2:	bc08      	pop	{r3}
 80034c4:	469e      	mov	lr, r3
 80034c6:	4770      	bx	lr

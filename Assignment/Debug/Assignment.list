
Assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d64  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08005e70  08005e70  00015e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f0c  08005f0c  000200d0  2**0
                  CONTENTS
  4 .ARM          00000000  08005f0c  08005f0c  000200d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005f0c  08005f0c  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f0c  08005f0c  00015f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f10  08005f10  00015f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  08005f14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  200000d0  08005fe4  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  08005fe4  000202a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000124bf  00000000  00000000  000200f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ab0  00000000  00000000  000325b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e78  00000000  00000000  00035068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d38  00000000  00000000  00035ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e7b  00000000  00000000  00036c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011bb0  00000000  00000000  0004fa93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b925  00000000  00000000  00061643  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ecf68  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f34  00000000  00000000  000ecfbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000d0 	.word	0x200000d0
 8000128:	00000000 	.word	0x00000000
 800012c:	08005e58 	.word	0x08005e58

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000d4 	.word	0x200000d4
 8000148:	08005e58 	.word	0x08005e58

0800014c <__aeabi_dmul>:
 800014c:	b570      	push	{r4, r5, r6, lr}
 800014e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000152:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000156:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015a:	bf1d      	ittte	ne
 800015c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000160:	ea94 0f0c 	teqne	r4, ip
 8000164:	ea95 0f0c 	teqne	r5, ip
 8000168:	f000 f8de 	bleq	8000328 <__aeabi_dmul+0x1dc>
 800016c:	442c      	add	r4, r5
 800016e:	ea81 0603 	eor.w	r6, r1, r3
 8000172:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000176:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800017e:	bf18      	it	ne
 8000180:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000184:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000188:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800018c:	d038      	beq.n	8000200 <__aeabi_dmul+0xb4>
 800018e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000192:	f04f 0500 	mov.w	r5, #0
 8000196:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800019e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a2:	f04f 0600 	mov.w	r6, #0
 80001a6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001aa:	f09c 0f00 	teq	ip, #0
 80001ae:	bf18      	it	ne
 80001b0:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001b8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001bc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c0:	d204      	bcs.n	80001cc <__aeabi_dmul+0x80>
 80001c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001c6:	416d      	adcs	r5, r5
 80001c8:	eb46 0606 	adc.w	r6, r6, r6
 80001cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e4:	bf88      	it	hi
 80001e6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ea:	d81e      	bhi.n	800022a <__aeabi_dmul+0xde>
 80001ec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f0:	bf08      	it	eq
 80001f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001f6:	f150 0000 	adcs.w	r0, r0, #0
 80001fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80001fe:	bd70      	pop	{r4, r5, r6, pc}
 8000200:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000204:	ea46 0101 	orr.w	r1, r6, r1
 8000208:	ea40 0002 	orr.w	r0, r0, r2
 800020c:	ea81 0103 	eor.w	r1, r1, r3
 8000210:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000214:	bfc2      	ittt	gt
 8000216:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800021e:	bd70      	popgt	{r4, r5, r6, pc}
 8000220:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000224:	f04f 0e00 	mov.w	lr, #0
 8000228:	3c01      	subs	r4, #1
 800022a:	f300 80ab 	bgt.w	8000384 <__aeabi_dmul+0x238>
 800022e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000232:	bfde      	ittt	le
 8000234:	2000      	movle	r0, #0
 8000236:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023a:	bd70      	pople	{r4, r5, r6, pc}
 800023c:	f1c4 0400 	rsb	r4, r4, #0
 8000240:	3c20      	subs	r4, #32
 8000242:	da35      	bge.n	80002b0 <__aeabi_dmul+0x164>
 8000244:	340c      	adds	r4, #12
 8000246:	dc1b      	bgt.n	8000280 <__aeabi_dmul+0x134>
 8000248:	f104 0414 	add.w	r4, r4, #20
 800024c:	f1c4 0520 	rsb	r5, r4, #32
 8000250:	fa00 f305 	lsl.w	r3, r0, r5
 8000254:	fa20 f004 	lsr.w	r0, r0, r4
 8000258:	fa01 f205 	lsl.w	r2, r1, r5
 800025c:	ea40 0002 	orr.w	r0, r0, r2
 8000260:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000264:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000268:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800026c:	fa21 f604 	lsr.w	r6, r1, r4
 8000270:	eb42 0106 	adc.w	r1, r2, r6
 8000274:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000278:	bf08      	it	eq
 800027a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800027e:	bd70      	pop	{r4, r5, r6, pc}
 8000280:	f1c4 040c 	rsb	r4, r4, #12
 8000284:	f1c4 0520 	rsb	r5, r4, #32
 8000288:	fa00 f304 	lsl.w	r3, r0, r4
 800028c:	fa20 f005 	lsr.w	r0, r0, r5
 8000290:	fa01 f204 	lsl.w	r2, r1, r4
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800029c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a0:	f141 0100 	adc.w	r1, r1, #0
 80002a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002a8:	bf08      	it	eq
 80002aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ae:	bd70      	pop	{r4, r5, r6, pc}
 80002b0:	f1c4 0520 	rsb	r5, r4, #32
 80002b4:	fa00 f205 	lsl.w	r2, r0, r5
 80002b8:	ea4e 0e02 	orr.w	lr, lr, r2
 80002bc:	fa20 f304 	lsr.w	r3, r0, r4
 80002c0:	fa01 f205 	lsl.w	r2, r1, r5
 80002c4:	ea43 0302 	orr.w	r3, r3, r2
 80002c8:	fa21 f004 	lsr.w	r0, r1, r4
 80002cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d0:	fa21 f204 	lsr.w	r2, r1, r4
 80002d4:	ea20 0002 	bic.w	r0, r0, r2
 80002d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e0:	bf08      	it	eq
 80002e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002e6:	bd70      	pop	{r4, r5, r6, pc}
 80002e8:	f094 0f00 	teq	r4, #0
 80002ec:	d10f      	bne.n	800030e <__aeabi_dmul+0x1c2>
 80002ee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f2:	0040      	lsls	r0, r0, #1
 80002f4:	eb41 0101 	adc.w	r1, r1, r1
 80002f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002fc:	bf08      	it	eq
 80002fe:	3c01      	subeq	r4, #1
 8000300:	d0f7      	beq.n	80002f2 <__aeabi_dmul+0x1a6>
 8000302:	ea41 0106 	orr.w	r1, r1, r6
 8000306:	f095 0f00 	teq	r5, #0
 800030a:	bf18      	it	ne
 800030c:	4770      	bxne	lr
 800030e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000312:	0052      	lsls	r2, r2, #1
 8000314:	eb43 0303 	adc.w	r3, r3, r3
 8000318:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800031c:	bf08      	it	eq
 800031e:	3d01      	subeq	r5, #1
 8000320:	d0f7      	beq.n	8000312 <__aeabi_dmul+0x1c6>
 8000322:	ea43 0306 	orr.w	r3, r3, r6
 8000326:	4770      	bx	lr
 8000328:	ea94 0f0c 	teq	r4, ip
 800032c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000330:	bf18      	it	ne
 8000332:	ea95 0f0c 	teqne	r5, ip
 8000336:	d00c      	beq.n	8000352 <__aeabi_dmul+0x206>
 8000338:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800033c:	bf18      	it	ne
 800033e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000342:	d1d1      	bne.n	80002e8 <__aeabi_dmul+0x19c>
 8000344:	ea81 0103 	eor.w	r1, r1, r3
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	f04f 0000 	mov.w	r0, #0
 8000350:	bd70      	pop	{r4, r5, r6, pc}
 8000352:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000356:	bf06      	itte	eq
 8000358:	4610      	moveq	r0, r2
 800035a:	4619      	moveq	r1, r3
 800035c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000360:	d019      	beq.n	8000396 <__aeabi_dmul+0x24a>
 8000362:	ea94 0f0c 	teq	r4, ip
 8000366:	d102      	bne.n	800036e <__aeabi_dmul+0x222>
 8000368:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800036c:	d113      	bne.n	8000396 <__aeabi_dmul+0x24a>
 800036e:	ea95 0f0c 	teq	r5, ip
 8000372:	d105      	bne.n	8000380 <__aeabi_dmul+0x234>
 8000374:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000378:	bf1c      	itt	ne
 800037a:	4610      	movne	r0, r2
 800037c:	4619      	movne	r1, r3
 800037e:	d10a      	bne.n	8000396 <__aeabi_dmul+0x24a>
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000388:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800038c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000390:	f04f 0000 	mov.w	r0, #0
 8000394:	bd70      	pop	{r4, r5, r6, pc}
 8000396:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800039e:	bd70      	pop	{r4, r5, r6, pc}

080003a0 <__aeabi_drsub>:
 80003a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a4:	e002      	b.n	80003ac <__adddf3>
 80003a6:	bf00      	nop

080003a8 <__aeabi_dsub>:
 80003a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003ac <__adddf3>:
 80003ac:	b530      	push	{r4, r5, lr}
 80003ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003b6:	ea94 0f05 	teq	r4, r5
 80003ba:	bf08      	it	eq
 80003bc:	ea90 0f02 	teqeq	r0, r2
 80003c0:	bf1f      	itttt	ne
 80003c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d2:	f000 80e2 	beq.w	800059a <__adddf3+0x1ee>
 80003d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003de:	bfb8      	it	lt
 80003e0:	426d      	neglt	r5, r5
 80003e2:	dd0c      	ble.n	80003fe <__adddf3+0x52>
 80003e4:	442c      	add	r4, r5
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	ea82 0000 	eor.w	r0, r2, r0
 80003f2:	ea83 0101 	eor.w	r1, r3, r1
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	2d36      	cmp	r5, #54	; 0x36
 8000400:	bf88      	it	hi
 8000402:	bd30      	pophi	{r4, r5, pc}
 8000404:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000408:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800040c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000410:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000414:	d002      	beq.n	800041c <__adddf3+0x70>
 8000416:	4240      	negs	r0, r0
 8000418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800041c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000420:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000424:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x84>
 800042a:	4252      	negs	r2, r2
 800042c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000430:	ea94 0f05 	teq	r4, r5
 8000434:	f000 80a7 	beq.w	8000586 <__adddf3+0x1da>
 8000438:	f1a4 0401 	sub.w	r4, r4, #1
 800043c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000440:	db0d      	blt.n	800045e <__adddf3+0xb2>
 8000442:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000446:	fa22 f205 	lsr.w	r2, r2, r5
 800044a:	1880      	adds	r0, r0, r2
 800044c:	f141 0100 	adc.w	r1, r1, #0
 8000450:	fa03 f20e 	lsl.w	r2, r3, lr
 8000454:	1880      	adds	r0, r0, r2
 8000456:	fa43 f305 	asr.w	r3, r3, r5
 800045a:	4159      	adcs	r1, r3
 800045c:	e00e      	b.n	800047c <__adddf3+0xd0>
 800045e:	f1a5 0520 	sub.w	r5, r5, #32
 8000462:	f10e 0e20 	add.w	lr, lr, #32
 8000466:	2a01      	cmp	r2, #1
 8000468:	fa03 fc0e 	lsl.w	ip, r3, lr
 800046c:	bf28      	it	cs
 800046e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000472:	fa43 f305 	asr.w	r3, r3, r5
 8000476:	18c0      	adds	r0, r0, r3
 8000478:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000480:	d507      	bpl.n	8000492 <__adddf3+0xe6>
 8000482:	f04f 0e00 	mov.w	lr, #0
 8000486:	f1dc 0c00 	rsbs	ip, ip, #0
 800048a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800048e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000492:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000496:	d31b      	bcc.n	80004d0 <__adddf3+0x124>
 8000498:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800049c:	d30c      	bcc.n	80004b8 <__adddf3+0x10c>
 800049e:	0849      	lsrs	r1, r1, #1
 80004a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004a8:	f104 0401 	add.w	r4, r4, #1
 80004ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b4:	f080 809a 	bcs.w	80005ec <__adddf3+0x240>
 80004b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004bc:	bf08      	it	eq
 80004be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c2:	f150 0000 	adcs.w	r0, r0, #0
 80004c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ca:	ea41 0105 	orr.w	r1, r1, r5
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d4:	4140      	adcs	r0, r0
 80004d6:	eb41 0101 	adc.w	r1, r1, r1
 80004da:	3c01      	subs	r4, #1
 80004dc:	bf28      	it	cs
 80004de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e2:	d2e9      	bcs.n	80004b8 <__adddf3+0x10c>
 80004e4:	f091 0f00 	teq	r1, #0
 80004e8:	bf04      	itt	eq
 80004ea:	4601      	moveq	r1, r0
 80004ec:	2000      	moveq	r0, #0
 80004ee:	fab1 f381 	clz	r3, r1
 80004f2:	bf08      	it	eq
 80004f4:	3320      	addeq	r3, #32
 80004f6:	f1a3 030b 	sub.w	r3, r3, #11
 80004fa:	f1b3 0220 	subs.w	r2, r3, #32
 80004fe:	da0c      	bge.n	800051a <__adddf3+0x16e>
 8000500:	320c      	adds	r2, #12
 8000502:	dd08      	ble.n	8000516 <__adddf3+0x16a>
 8000504:	f102 0c14 	add.w	ip, r2, #20
 8000508:	f1c2 020c 	rsb	r2, r2, #12
 800050c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000510:	fa21 f102 	lsr.w	r1, r1, r2
 8000514:	e00c      	b.n	8000530 <__adddf3+0x184>
 8000516:	f102 0214 	add.w	r2, r2, #20
 800051a:	bfd8      	it	le
 800051c:	f1c2 0c20 	rsble	ip, r2, #32
 8000520:	fa01 f102 	lsl.w	r1, r1, r2
 8000524:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000528:	bfdc      	itt	le
 800052a:	ea41 010c 	orrle.w	r1, r1, ip
 800052e:	4090      	lslle	r0, r2
 8000530:	1ae4      	subs	r4, r4, r3
 8000532:	bfa2      	ittt	ge
 8000534:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000538:	4329      	orrge	r1, r5
 800053a:	bd30      	popge	{r4, r5, pc}
 800053c:	ea6f 0404 	mvn.w	r4, r4
 8000540:	3c1f      	subs	r4, #31
 8000542:	da1c      	bge.n	800057e <__adddf3+0x1d2>
 8000544:	340c      	adds	r4, #12
 8000546:	dc0e      	bgt.n	8000566 <__adddf3+0x1ba>
 8000548:	f104 0414 	add.w	r4, r4, #20
 800054c:	f1c4 0220 	rsb	r2, r4, #32
 8000550:	fa20 f004 	lsr.w	r0, r0, r4
 8000554:	fa01 f302 	lsl.w	r3, r1, r2
 8000558:	ea40 0003 	orr.w	r0, r0, r3
 800055c:	fa21 f304 	lsr.w	r3, r1, r4
 8000560:	ea45 0103 	orr.w	r1, r5, r3
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f1c4 040c 	rsb	r4, r4, #12
 800056a:	f1c4 0220 	rsb	r2, r4, #32
 800056e:	fa20 f002 	lsr.w	r0, r0, r2
 8000572:	fa01 f304 	lsl.w	r3, r1, r4
 8000576:	ea40 0003 	orr.w	r0, r0, r3
 800057a:	4629      	mov	r1, r5
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	fa21 f004 	lsr.w	r0, r1, r4
 8000582:	4629      	mov	r1, r5
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f094 0f00 	teq	r4, #0
 800058a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800058e:	bf06      	itte	eq
 8000590:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000594:	3401      	addeq	r4, #1
 8000596:	3d01      	subne	r5, #1
 8000598:	e74e      	b.n	8000438 <__adddf3+0x8c>
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf18      	it	ne
 80005a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a4:	d029      	beq.n	80005fa <__adddf3+0x24e>
 80005a6:	ea94 0f05 	teq	r4, r5
 80005aa:	bf08      	it	eq
 80005ac:	ea90 0f02 	teqeq	r0, r2
 80005b0:	d005      	beq.n	80005be <__adddf3+0x212>
 80005b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005b6:	bf04      	itt	eq
 80005b8:	4619      	moveq	r1, r3
 80005ba:	4610      	moveq	r0, r2
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	ea91 0f03 	teq	r1, r3
 80005c2:	bf1e      	ittt	ne
 80005c4:	2100      	movne	r1, #0
 80005c6:	2000      	movne	r0, #0
 80005c8:	bd30      	popne	{r4, r5, pc}
 80005ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ce:	d105      	bne.n	80005dc <__adddf3+0x230>
 80005d0:	0040      	lsls	r0, r0, #1
 80005d2:	4149      	adcs	r1, r1
 80005d4:	bf28      	it	cs
 80005d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd30      	pop	{r4, r5, pc}
 80005dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e0:	bf3c      	itt	cc
 80005e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005e6:	bd30      	popcc	{r4, r5, pc}
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f4:	f04f 0000 	mov.w	r0, #0
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005fe:	bf1a      	itte	ne
 8000600:	4619      	movne	r1, r3
 8000602:	4610      	movne	r0, r2
 8000604:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000608:	bf1c      	itt	ne
 800060a:	460b      	movne	r3, r1
 800060c:	4602      	movne	r2, r0
 800060e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000612:	bf06      	itte	eq
 8000614:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000618:	ea91 0f03 	teqeq	r1, r3
 800061c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	bf00      	nop

08000624 <__aeabi_ui2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000638:	f04f 0500 	mov.w	r5, #0
 800063c:	f04f 0100 	mov.w	r1, #0
 8000640:	e750      	b.n	80004e4 <__adddf3+0x138>
 8000642:	bf00      	nop

08000644 <__aeabi_i2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000658:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800065c:	bf48      	it	mi
 800065e:	4240      	negmi	r0, r0
 8000660:	f04f 0100 	mov.w	r1, #0
 8000664:	e73e      	b.n	80004e4 <__adddf3+0x138>
 8000666:	bf00      	nop

08000668 <__aeabi_f2d>:
 8000668:	0042      	lsls	r2, r0, #1
 800066a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800066e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000672:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000676:	bf1f      	itttt	ne
 8000678:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800067c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000680:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000684:	4770      	bxne	lr
 8000686:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068a:	bf08      	it	eq
 800068c:	4770      	bxeq	lr
 800068e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000692:	bf04      	itt	eq
 8000694:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000698:	4770      	bxeq	lr
 800069a:	b530      	push	{r4, r5, lr}
 800069c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	e71c      	b.n	80004e4 <__adddf3+0x138>
 80006aa:	bf00      	nop

080006ac <__aeabi_ul2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f04f 0500 	mov.w	r5, #0
 80006ba:	e00a      	b.n	80006d2 <__aeabi_l2d+0x16>

080006bc <__aeabi_l2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ca:	d502      	bpl.n	80006d2 <__aeabi_l2d+0x16>
 80006cc:	4240      	negs	r0, r0
 80006ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006de:	f43f aed8 	beq.w	8000492 <__adddf3+0xe6>
 80006e2:	f04f 0203 	mov.w	r2, #3
 80006e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ea:	bf18      	it	ne
 80006ec:	3203      	addne	r2, #3
 80006ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f2:	bf18      	it	ne
 80006f4:	3203      	addne	r2, #3
 80006f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fa:	f1c2 0320 	rsb	r3, r2, #32
 80006fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000702:	fa20 f002 	lsr.w	r0, r0, r2
 8000706:	fa01 fe03 	lsl.w	lr, r1, r3
 800070a:	ea40 000e 	orr.w	r0, r0, lr
 800070e:	fa21 f102 	lsr.w	r1, r1, r2
 8000712:	4414      	add	r4, r2
 8000714:	e6bd      	b.n	8000492 <__adddf3+0xe6>
 8000716:	bf00      	nop

08000718 <__aeabi_d2iz>:
 8000718:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800071c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000720:	d215      	bcs.n	800074e <__aeabi_d2iz+0x36>
 8000722:	d511      	bpl.n	8000748 <__aeabi_d2iz+0x30>
 8000724:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000728:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800072c:	d912      	bls.n	8000754 <__aeabi_d2iz+0x3c>
 800072e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000732:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000736:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800073a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800073e:	fa23 f002 	lsr.w	r0, r3, r2
 8000742:	bf18      	it	ne
 8000744:	4240      	negne	r0, r0
 8000746:	4770      	bx	lr
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	4770      	bx	lr
 800074e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000752:	d105      	bne.n	8000760 <__aeabi_d2iz+0x48>
 8000754:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000758:	bf08      	it	eq
 800075a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800075e:	4770      	bx	lr
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop

08000768 <__aeabi_frsub>:
 8000768:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800076c:	e002      	b.n	8000774 <__addsf3>
 800076e:	bf00      	nop

08000770 <__aeabi_fsub>:
 8000770:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000774 <__addsf3>:
 8000774:	0042      	lsls	r2, r0, #1
 8000776:	bf1f      	itttt	ne
 8000778:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800077c:	ea92 0f03 	teqne	r2, r3
 8000780:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000784:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000788:	d06a      	beq.n	8000860 <__addsf3+0xec>
 800078a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800078e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000792:	bfc1      	itttt	gt
 8000794:	18d2      	addgt	r2, r2, r3
 8000796:	4041      	eorgt	r1, r0
 8000798:	4048      	eorgt	r0, r1
 800079a:	4041      	eorgt	r1, r0
 800079c:	bfb8      	it	lt
 800079e:	425b      	neglt	r3, r3
 80007a0:	2b19      	cmp	r3, #25
 80007a2:	bf88      	it	hi
 80007a4:	4770      	bxhi	lr
 80007a6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80007aa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007ae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80007b2:	bf18      	it	ne
 80007b4:	4240      	negne	r0, r0
 80007b6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80007ba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80007be:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80007c2:	bf18      	it	ne
 80007c4:	4249      	negne	r1, r1
 80007c6:	ea92 0f03 	teq	r2, r3
 80007ca:	d03f      	beq.n	800084c <__addsf3+0xd8>
 80007cc:	f1a2 0201 	sub.w	r2, r2, #1
 80007d0:	fa41 fc03 	asr.w	ip, r1, r3
 80007d4:	eb10 000c 	adds.w	r0, r0, ip
 80007d8:	f1c3 0320 	rsb	r3, r3, #32
 80007dc:	fa01 f103 	lsl.w	r1, r1, r3
 80007e0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007e4:	d502      	bpl.n	80007ec <__addsf3+0x78>
 80007e6:	4249      	negs	r1, r1
 80007e8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80007ec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80007f0:	d313      	bcc.n	800081a <__addsf3+0xa6>
 80007f2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80007f6:	d306      	bcc.n	8000806 <__addsf3+0x92>
 80007f8:	0840      	lsrs	r0, r0, #1
 80007fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80007fe:	f102 0201 	add.w	r2, r2, #1
 8000802:	2afe      	cmp	r2, #254	; 0xfe
 8000804:	d251      	bcs.n	80008aa <__addsf3+0x136>
 8000806:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800080a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800080e:	bf08      	it	eq
 8000810:	f020 0001 	biceq.w	r0, r0, #1
 8000814:	ea40 0003 	orr.w	r0, r0, r3
 8000818:	4770      	bx	lr
 800081a:	0049      	lsls	r1, r1, #1
 800081c:	eb40 0000 	adc.w	r0, r0, r0
 8000820:	3a01      	subs	r2, #1
 8000822:	bf28      	it	cs
 8000824:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000828:	d2ed      	bcs.n	8000806 <__addsf3+0x92>
 800082a:	fab0 fc80 	clz	ip, r0
 800082e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000832:	ebb2 020c 	subs.w	r2, r2, ip
 8000836:	fa00 f00c 	lsl.w	r0, r0, ip
 800083a:	bfaa      	itet	ge
 800083c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000840:	4252      	neglt	r2, r2
 8000842:	4318      	orrge	r0, r3
 8000844:	bfbc      	itt	lt
 8000846:	40d0      	lsrlt	r0, r2
 8000848:	4318      	orrlt	r0, r3
 800084a:	4770      	bx	lr
 800084c:	f092 0f00 	teq	r2, #0
 8000850:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000854:	bf06      	itte	eq
 8000856:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800085a:	3201      	addeq	r2, #1
 800085c:	3b01      	subne	r3, #1
 800085e:	e7b5      	b.n	80007cc <__addsf3+0x58>
 8000860:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000864:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000868:	bf18      	it	ne
 800086a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800086e:	d021      	beq.n	80008b4 <__addsf3+0x140>
 8000870:	ea92 0f03 	teq	r2, r3
 8000874:	d004      	beq.n	8000880 <__addsf3+0x10c>
 8000876:	f092 0f00 	teq	r2, #0
 800087a:	bf08      	it	eq
 800087c:	4608      	moveq	r0, r1
 800087e:	4770      	bx	lr
 8000880:	ea90 0f01 	teq	r0, r1
 8000884:	bf1c      	itt	ne
 8000886:	2000      	movne	r0, #0
 8000888:	4770      	bxne	lr
 800088a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800088e:	d104      	bne.n	800089a <__addsf3+0x126>
 8000890:	0040      	lsls	r0, r0, #1
 8000892:	bf28      	it	cs
 8000894:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000898:	4770      	bx	lr
 800089a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800089e:	bf3c      	itt	cc
 80008a0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80008a4:	4770      	bxcc	lr
 80008a6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80008aa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80008ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008b2:	4770      	bx	lr
 80008b4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80008b8:	bf16      	itet	ne
 80008ba:	4608      	movne	r0, r1
 80008bc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80008c0:	4601      	movne	r1, r0
 80008c2:	0242      	lsls	r2, r0, #9
 80008c4:	bf06      	itte	eq
 80008c6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80008ca:	ea90 0f01 	teqeq	r0, r1
 80008ce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80008d2:	4770      	bx	lr

080008d4 <__aeabi_ui2f>:
 80008d4:	f04f 0300 	mov.w	r3, #0
 80008d8:	e004      	b.n	80008e4 <__aeabi_i2f+0x8>
 80008da:	bf00      	nop

080008dc <__aeabi_i2f>:
 80008dc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80008e0:	bf48      	it	mi
 80008e2:	4240      	negmi	r0, r0
 80008e4:	ea5f 0c00 	movs.w	ip, r0
 80008e8:	bf08      	it	eq
 80008ea:	4770      	bxeq	lr
 80008ec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80008f0:	4601      	mov	r1, r0
 80008f2:	f04f 0000 	mov.w	r0, #0
 80008f6:	e01c      	b.n	8000932 <__aeabi_l2f+0x2a>

080008f8 <__aeabi_ul2f>:
 80008f8:	ea50 0201 	orrs.w	r2, r0, r1
 80008fc:	bf08      	it	eq
 80008fe:	4770      	bxeq	lr
 8000900:	f04f 0300 	mov.w	r3, #0
 8000904:	e00a      	b.n	800091c <__aeabi_l2f+0x14>
 8000906:	bf00      	nop

08000908 <__aeabi_l2f>:
 8000908:	ea50 0201 	orrs.w	r2, r0, r1
 800090c:	bf08      	it	eq
 800090e:	4770      	bxeq	lr
 8000910:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000914:	d502      	bpl.n	800091c <__aeabi_l2f+0x14>
 8000916:	4240      	negs	r0, r0
 8000918:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800091c:	ea5f 0c01 	movs.w	ip, r1
 8000920:	bf02      	ittt	eq
 8000922:	4684      	moveq	ip, r0
 8000924:	4601      	moveq	r1, r0
 8000926:	2000      	moveq	r0, #0
 8000928:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800092c:	bf08      	it	eq
 800092e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000932:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000936:	fabc f28c 	clz	r2, ip
 800093a:	3a08      	subs	r2, #8
 800093c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000940:	db10      	blt.n	8000964 <__aeabi_l2f+0x5c>
 8000942:	fa01 fc02 	lsl.w	ip, r1, r2
 8000946:	4463      	add	r3, ip
 8000948:	fa00 fc02 	lsl.w	ip, r0, r2
 800094c:	f1c2 0220 	rsb	r2, r2, #32
 8000950:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000954:	fa20 f202 	lsr.w	r2, r0, r2
 8000958:	eb43 0002 	adc.w	r0, r3, r2
 800095c:	bf08      	it	eq
 800095e:	f020 0001 	biceq.w	r0, r0, #1
 8000962:	4770      	bx	lr
 8000964:	f102 0220 	add.w	r2, r2, #32
 8000968:	fa01 fc02 	lsl.w	ip, r1, r2
 800096c:	f1c2 0220 	rsb	r2, r2, #32
 8000970:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000974:	fa21 f202 	lsr.w	r2, r1, r2
 8000978:	eb43 0002 	adc.w	r0, r3, r2
 800097c:	bf08      	it	eq
 800097e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000982:	4770      	bx	lr

08000984 <__aeabi_fmul>:
 8000984:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000988:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800098c:	bf1e      	ittt	ne
 800098e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000992:	ea92 0f0c 	teqne	r2, ip
 8000996:	ea93 0f0c 	teqne	r3, ip
 800099a:	d06f      	beq.n	8000a7c <__aeabi_fmul+0xf8>
 800099c:	441a      	add	r2, r3
 800099e:	ea80 0c01 	eor.w	ip, r0, r1
 80009a2:	0240      	lsls	r0, r0, #9
 80009a4:	bf18      	it	ne
 80009a6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80009aa:	d01e      	beq.n	80009ea <__aeabi_fmul+0x66>
 80009ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80009b0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80009b4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80009b8:	fba0 3101 	umull	r3, r1, r0, r1
 80009bc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80009c0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80009c4:	bf3e      	ittt	cc
 80009c6:	0049      	lslcc	r1, r1, #1
 80009c8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80009cc:	005b      	lslcc	r3, r3, #1
 80009ce:	ea40 0001 	orr.w	r0, r0, r1
 80009d2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80009d6:	2afd      	cmp	r2, #253	; 0xfd
 80009d8:	d81d      	bhi.n	8000a16 <__aeabi_fmul+0x92>
 80009da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80009de:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009e2:	bf08      	it	eq
 80009e4:	f020 0001 	biceq.w	r0, r0, #1
 80009e8:	4770      	bx	lr
 80009ea:	f090 0f00 	teq	r0, #0
 80009ee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80009f2:	bf08      	it	eq
 80009f4:	0249      	lsleq	r1, r1, #9
 80009f6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80009fa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80009fe:	3a7f      	subs	r2, #127	; 0x7f
 8000a00:	bfc2      	ittt	gt
 8000a02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a0a:	4770      	bxgt	lr
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a10:	f04f 0300 	mov.w	r3, #0
 8000a14:	3a01      	subs	r2, #1
 8000a16:	dc5d      	bgt.n	8000ad4 <__aeabi_fmul+0x150>
 8000a18:	f112 0f19 	cmn.w	r2, #25
 8000a1c:	bfdc      	itt	le
 8000a1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000a22:	4770      	bxle	lr
 8000a24:	f1c2 0200 	rsb	r2, r2, #0
 8000a28:	0041      	lsls	r1, r0, #1
 8000a2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000a2e:	f1c2 0220 	rsb	r2, r2, #32
 8000a32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000a3a:	f140 0000 	adc.w	r0, r0, #0
 8000a3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000a42:	bf08      	it	eq
 8000a44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a48:	4770      	bx	lr
 8000a4a:	f092 0f00 	teq	r2, #0
 8000a4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000a52:	bf02      	ittt	eq
 8000a54:	0040      	lsleq	r0, r0, #1
 8000a56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000a5a:	3a01      	subeq	r2, #1
 8000a5c:	d0f9      	beq.n	8000a52 <__aeabi_fmul+0xce>
 8000a5e:	ea40 000c 	orr.w	r0, r0, ip
 8000a62:	f093 0f00 	teq	r3, #0
 8000a66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a6a:	bf02      	ittt	eq
 8000a6c:	0049      	lsleq	r1, r1, #1
 8000a6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000a72:	3b01      	subeq	r3, #1
 8000a74:	d0f9      	beq.n	8000a6a <__aeabi_fmul+0xe6>
 8000a76:	ea41 010c 	orr.w	r1, r1, ip
 8000a7a:	e78f      	b.n	800099c <__aeabi_fmul+0x18>
 8000a7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a80:	ea92 0f0c 	teq	r2, ip
 8000a84:	bf18      	it	ne
 8000a86:	ea93 0f0c 	teqne	r3, ip
 8000a8a:	d00a      	beq.n	8000aa2 <__aeabi_fmul+0x11e>
 8000a8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000a90:	bf18      	it	ne
 8000a92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000a96:	d1d8      	bne.n	8000a4a <__aeabi_fmul+0xc6>
 8000a98:	ea80 0001 	eor.w	r0, r0, r1
 8000a9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000aa0:	4770      	bx	lr
 8000aa2:	f090 0f00 	teq	r0, #0
 8000aa6:	bf17      	itett	ne
 8000aa8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000aac:	4608      	moveq	r0, r1
 8000aae:	f091 0f00 	teqne	r1, #0
 8000ab2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ab6:	d014      	beq.n	8000ae2 <__aeabi_fmul+0x15e>
 8000ab8:	ea92 0f0c 	teq	r2, ip
 8000abc:	d101      	bne.n	8000ac2 <__aeabi_fmul+0x13e>
 8000abe:	0242      	lsls	r2, r0, #9
 8000ac0:	d10f      	bne.n	8000ae2 <__aeabi_fmul+0x15e>
 8000ac2:	ea93 0f0c 	teq	r3, ip
 8000ac6:	d103      	bne.n	8000ad0 <__aeabi_fmul+0x14c>
 8000ac8:	024b      	lsls	r3, r1, #9
 8000aca:	bf18      	it	ne
 8000acc:	4608      	movne	r0, r1
 8000ace:	d108      	bne.n	8000ae2 <__aeabi_fmul+0x15e>
 8000ad0:	ea80 0001 	eor.w	r0, r0, r1
 8000ad4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ad8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000adc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae0:	4770      	bx	lr
 8000ae2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000aea:	4770      	bx	lr

08000aec <__aeabi_fdiv>:
 8000aec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000af0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000af4:	bf1e      	ittt	ne
 8000af6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000afa:	ea92 0f0c 	teqne	r2, ip
 8000afe:	ea93 0f0c 	teqne	r3, ip
 8000b02:	d069      	beq.n	8000bd8 <__aeabi_fdiv+0xec>
 8000b04:	eba2 0203 	sub.w	r2, r2, r3
 8000b08:	ea80 0c01 	eor.w	ip, r0, r1
 8000b0c:	0249      	lsls	r1, r1, #9
 8000b0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000b12:	d037      	beq.n	8000b84 <__aeabi_fdiv+0x98>
 8000b14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000b1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000b20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b24:	428b      	cmp	r3, r1
 8000b26:	bf38      	it	cc
 8000b28:	005b      	lslcc	r3, r3, #1
 8000b2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000b2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000b32:	428b      	cmp	r3, r1
 8000b34:	bf24      	itt	cs
 8000b36:	1a5b      	subcs	r3, r3, r1
 8000b38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000b40:	bf24      	itt	cs
 8000b42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000b46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000b4e:	bf24      	itt	cs
 8000b50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000b54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000b58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000b5c:	bf24      	itt	cs
 8000b5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000b62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000b66:	011b      	lsls	r3, r3, #4
 8000b68:	bf18      	it	ne
 8000b6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000b6e:	d1e0      	bne.n	8000b32 <__aeabi_fdiv+0x46>
 8000b70:	2afd      	cmp	r2, #253	; 0xfd
 8000b72:	f63f af50 	bhi.w	8000a16 <__aeabi_fmul+0x92>
 8000b76:	428b      	cmp	r3, r1
 8000b78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000b88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b8c:	327f      	adds	r2, #127	; 0x7f
 8000b8e:	bfc2      	ittt	gt
 8000b90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000b94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000b98:	4770      	bxgt	lr
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9e:	f04f 0300 	mov.w	r3, #0
 8000ba2:	3a01      	subs	r2, #1
 8000ba4:	e737      	b.n	8000a16 <__aeabi_fmul+0x92>
 8000ba6:	f092 0f00 	teq	r2, #0
 8000baa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000bae:	bf02      	ittt	eq
 8000bb0:	0040      	lsleq	r0, r0, #1
 8000bb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000bb6:	3a01      	subeq	r2, #1
 8000bb8:	d0f9      	beq.n	8000bae <__aeabi_fdiv+0xc2>
 8000bba:	ea40 000c 	orr.w	r0, r0, ip
 8000bbe:	f093 0f00 	teq	r3, #0
 8000bc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc6:	bf02      	ittt	eq
 8000bc8:	0049      	lsleq	r1, r1, #1
 8000bca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000bce:	3b01      	subeq	r3, #1
 8000bd0:	d0f9      	beq.n	8000bc6 <__aeabi_fdiv+0xda>
 8000bd2:	ea41 010c 	orr.w	r1, r1, ip
 8000bd6:	e795      	b.n	8000b04 <__aeabi_fdiv+0x18>
 8000bd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000bdc:	ea92 0f0c 	teq	r2, ip
 8000be0:	d108      	bne.n	8000bf4 <__aeabi_fdiv+0x108>
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	f47f af7d 	bne.w	8000ae2 <__aeabi_fmul+0x15e>
 8000be8:	ea93 0f0c 	teq	r3, ip
 8000bec:	f47f af70 	bne.w	8000ad0 <__aeabi_fmul+0x14c>
 8000bf0:	4608      	mov	r0, r1
 8000bf2:	e776      	b.n	8000ae2 <__aeabi_fmul+0x15e>
 8000bf4:	ea93 0f0c 	teq	r3, ip
 8000bf8:	d104      	bne.n	8000c04 <__aeabi_fdiv+0x118>
 8000bfa:	024b      	lsls	r3, r1, #9
 8000bfc:	f43f af4c 	beq.w	8000a98 <__aeabi_fmul+0x114>
 8000c00:	4608      	mov	r0, r1
 8000c02:	e76e      	b.n	8000ae2 <__aeabi_fmul+0x15e>
 8000c04:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c08:	bf18      	it	ne
 8000c0a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c0e:	d1ca      	bne.n	8000ba6 <__aeabi_fdiv+0xba>
 8000c10:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000c14:	f47f af5c 	bne.w	8000ad0 <__aeabi_fmul+0x14c>
 8000c18:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000c1c:	f47f af3c 	bne.w	8000a98 <__aeabi_fmul+0x114>
 8000c20:	e75f      	b.n	8000ae2 <__aeabi_fmul+0x15e>
 8000c22:	bf00      	nop

08000c24 <Button_Reading>:
// Defining  counter for automatically increasing the value
// After the button is pressed more than 1 second.

int buttonFlag[N0_OF_BUTTONS] = {0};
void Button_Reading(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
	for(int i = 0; i < N0_OF_BUTTONS; i ++)
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	607b      	str	r3, [r7, #4]
 8000c2e:	e076      	b.n	8000d1e <Button_Reading+0xfa>
	{
		debounceButtonBuffer3[i] =debounceButtonBuffer2[i];
 8000c30:	4a3f      	ldr	r2, [pc, #252]	; (8000d30 <Button_Reading+0x10c>)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4413      	add	r3, r2
 8000c36:	7819      	ldrb	r1, [r3, #0]
 8000c38:	4a3e      	ldr	r2, [pc, #248]	; (8000d34 <Button_Reading+0x110>)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	460a      	mov	r2, r1
 8000c40:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer2[i] =debounceButtonBuffer1[i];
 8000c42:	4a3d      	ldr	r2, [pc, #244]	; (8000d38 <Button_Reading+0x114>)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	4413      	add	r3, r2
 8000c48:	7819      	ldrb	r1, [r3, #0]
 8000c4a:	4a39      	ldr	r2, [pc, #228]	; (8000d30 <Button_Reading+0x10c>)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	4413      	add	r3, r2
 8000c50:	460a      	mov	r2, r1
 8000c52:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(buttonGPIO[i], buttonPin[i]);
 8000c54:	4a39      	ldr	r2, [pc, #228]	; (8000d3c <Button_Reading+0x118>)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c5c:	4938      	ldr	r1, [pc, #224]	; (8000d40 <Button_Reading+0x11c>)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	4619      	mov	r1, r3
 8000c68:	4610      	mov	r0, r2
 8000c6a:	f002 fa35 	bl	80030d8 <HAL_GPIO_ReadPin>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	4619      	mov	r1, r3
 8000c72:	4a31      	ldr	r2, [pc, #196]	; (8000d38 <Button_Reading+0x114>)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	4413      	add	r3, r2
 8000c78:	460a      	mov	r2, r1
 8000c7a:	701a      	strb	r2, [r3, #0]
		if(debounceButtonBuffer1[i] == debounceButtonBuffer2[i] && debounceButtonBuffer2[i] == debounceButtonBuffer3[i])
 8000c7c:	4a2e      	ldr	r2, [pc, #184]	; (8000d38 <Button_Reading+0x114>)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4413      	add	r3, r2
 8000c82:	781a      	ldrb	r2, [r3, #0]
 8000c84:	492a      	ldr	r1, [pc, #168]	; (8000d30 <Button_Reading+0x10c>)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	440b      	add	r3, r1
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d12d      	bne.n	8000cec <Button_Reading+0xc8>
 8000c90:	4a27      	ldr	r2, [pc, #156]	; (8000d30 <Button_Reading+0x10c>)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4413      	add	r3, r2
 8000c96:	781a      	ldrb	r2, [r3, #0]
 8000c98:	4926      	ldr	r1, [pc, #152]	; (8000d34 <Button_Reading+0x110>)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	440b      	add	r3, r1
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d123      	bne.n	8000cec <Button_Reading+0xc8>
		{
			if(debounceButtonBuffer1[i] != buttonBuffer[i])
 8000ca4:	4a24      	ldr	r2, [pc, #144]	; (8000d38 <Button_Reading+0x114>)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4413      	add	r3, r2
 8000caa:	781a      	ldrb	r2, [r3, #0]
 8000cac:	4925      	ldr	r1, [pc, #148]	; (8000d44 <Button_Reading+0x120>)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	440b      	add	r3, r1
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d02e      	beq.n	8000d16 <Button_Reading+0xf2>
			{
				buttonBuffer[i] = debounceButtonBuffer1[i];
 8000cb8:	4a1f      	ldr	r2, [pc, #124]	; (8000d38 <Button_Reading+0x114>)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	7819      	ldrb	r1, [r3, #0]
 8000cc0:	4a20      	ldr	r2, [pc, #128]	; (8000d44 <Button_Reading+0x120>)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	460a      	mov	r2, r1
 8000cc8:	701a      	strb	r2, [r3, #0]
						if(buttonBuffer[i] == BUTTON_IS_PRESSED)
 8000cca:	4a1e      	ldr	r2, [pc, #120]	; (8000d44 <Button_Reading+0x120>)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	4413      	add	r3, r2
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d11f      	bne.n	8000d16 <Button_Reading+0xf2>
						{
							buttonFlag[i] = 1;
 8000cd6:	4a1c      	ldr	r2, [pc, #112]	; (8000d48 <Button_Reading+0x124>)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2101      	movs	r1, #1
 8000cdc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							buttonTimeOut[i] = DURATION_FOR_AUTO_INCREASING;
 8000ce0:	4a1a      	ldr	r2, [pc, #104]	; (8000d4c <Button_Reading+0x128>)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2164      	movs	r1, #100	; 0x64
 8000ce6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if(debounceButtonBuffer1[i] != buttonBuffer[i])
 8000cea:	e014      	b.n	8000d16 <Button_Reading+0xf2>
						}
			}
		}
		else
		{
			buttonTimeOut[i]--;
 8000cec:	4a17      	ldr	r2, [pc, #92]	; (8000d4c <Button_Reading+0x128>)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cf4:	1e5a      	subs	r2, r3, #1
 8000cf6:	4915      	ldr	r1, [pc, #84]	; (8000d4c <Button_Reading+0x128>)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(buttonTimeOut[i] <= 0)
 8000cfe:	4a13      	ldr	r2, [pc, #76]	; (8000d4c <Button_Reading+0x128>)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	dc06      	bgt.n	8000d18 <Button_Reading+0xf4>
					buttonBuffer[i] = BUTTON_IS_RELEASED;
 8000d0a:	4a0e      	ldr	r2, [pc, #56]	; (8000d44 <Button_Reading+0x120>)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4413      	add	r3, r2
 8000d10:	2201      	movs	r2, #1
 8000d12:	701a      	strb	r2, [r3, #0]
 8000d14:	e000      	b.n	8000d18 <Button_Reading+0xf4>
			if(debounceButtonBuffer1[i] != buttonBuffer[i])
 8000d16:	bf00      	nop
	for(int i = 0; i < N0_OF_BUTTONS; i ++)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	607b      	str	r3, [r7, #4]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2b03      	cmp	r3, #3
 8000d22:	dd85      	ble.n	8000c30 <Button_Reading+0xc>
		}
	}
}
 8000d24:	bf00      	nop
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000100 	.word	0x20000100
 8000d34:	20000104 	.word	0x20000104
 8000d38:	200000fc 	.word	0x200000fc
 8000d3c:	20000004 	.word	0x20000004
 8000d40:	20000014 	.word	0x20000014
 8000d44:	20000000 	.word	0x20000000
 8000d48:	20000108 	.word	0x20000108
 8000d4c:	200000ec 	.word	0x200000ec

08000d50 <Is_Button_Pressed>:

int Is_Button_Pressed(int index)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
	if(index >= N0_OF_BUTTONS || index < 0)	return 0;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2b03      	cmp	r3, #3
 8000d5c:	dc02      	bgt.n	8000d64 <Is_Button_Pressed+0x14>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	da01      	bge.n	8000d68 <Is_Button_Pressed+0x18>
 8000d64:	2300      	movs	r3, #0
 8000d66:	e00d      	b.n	8000d84 <Is_Button_Pressed+0x34>

		if(buttonFlag[index] == 1)
 8000d68:	4a09      	ldr	r2, [pc, #36]	; (8000d90 <Is_Button_Pressed+0x40>)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d106      	bne.n	8000d82 <Is_Button_Pressed+0x32>
		{
			buttonFlag[index] = 0;
 8000d74:	4a06      	ldr	r2, [pc, #24]	; (8000d90 <Is_Button_Pressed+0x40>)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2100      	movs	r1, #0
 8000d7a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			return 1;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e000      	b.n	8000d84 <Is_Button_Pressed+0x34>
		}
		return 0;
 8000d82:	2300      	movs	r3, #0
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bc80      	pop	{r7}
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	20000108 	.word	0x20000108

08000d94 <buzzer>:
 */

#include "buzzer.h"

void buzzer(int duty_cycle)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
	 htim3.Instance->CCR1 = duty_cycle;
 8000d9c:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <buzzer+0x1c>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	635a      	str	r2, [r3, #52]	; 0x34
//     __HAL_TIM_SET_AUTORELOAD(&htim3, buzzerValue*2); // Increasing frequency : Auto-Reload Register - ARR
//     __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, buzzerValue); // Increasing duty cycle: Capture/Compare Register - CCR
}
 8000da4:	bf00      	nop
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bc80      	pop	{r7}
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	20000174 	.word	0x20000174

08000db4 <clearAllLed1>:
 */
#include "main.h"
#include "displayLed.h"

void clearAllLed1()
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8000db8:	2200      	movs	r2, #0
 8000dba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dbe:	4805      	ldr	r0, [pc, #20]	; (8000dd4 <clearAllLed1+0x20>)
 8000dc0:	f002 f9a1 	bl	8003106 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	2108      	movs	r1, #8
 8000dc8:	4803      	ldr	r0, [pc, #12]	; (8000dd8 <clearAllLed1+0x24>)
 8000dca:	f002 f99c 	bl	8003106 <HAL_GPIO_WritePin>
}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40010800 	.word	0x40010800
 8000dd8:	40010c00 	.word	0x40010c00

08000ddc <clearAllLed2>:

void clearAllLed2()
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 8000de0:	2200      	movs	r2, #0
 8000de2:	2120      	movs	r1, #32
 8000de4:	4804      	ldr	r0, [pc, #16]	; (8000df8 <clearAllLed2+0x1c>)
 8000de6:	f002 f98e 	bl	8003106 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8000dea:	2200      	movs	r2, #0
 8000dec:	2110      	movs	r1, #16
 8000dee:	4802      	ldr	r0, [pc, #8]	; (8000df8 <clearAllLed2+0x1c>)
 8000df0:	f002 f989 	bl	8003106 <HAL_GPIO_WritePin>
}
 8000df4:	bf00      	nop
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40010c00 	.word	0x40010c00

08000dfc <displayRed1>:
void displayRed1()
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000e00:	2201      	movs	r2, #1
 8000e02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e06:	4805      	ldr	r0, [pc, #20]	; (8000e1c <displayRed1+0x20>)
 8000e08:	f002 f97d 	bl	8003106 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	2108      	movs	r1, #8
 8000e10:	4803      	ldr	r0, [pc, #12]	; (8000e20 <displayRed1+0x24>)
 8000e12:	f002 f978 	bl	8003106 <HAL_GPIO_WritePin>

}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40010800 	.word	0x40010800
 8000e20:	40010c00 	.word	0x40010c00

08000e24 <displayYellow1>:

void displayYellow1()
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000e28:	2201      	movs	r2, #1
 8000e2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e2e:	4805      	ldr	r0, [pc, #20]	; (8000e44 <displayYellow1+0x20>)
 8000e30:	f002 f969 	bl	8003106 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000e34:	2201      	movs	r2, #1
 8000e36:	2108      	movs	r1, #8
 8000e38:	4803      	ldr	r0, [pc, #12]	; (8000e48 <displayYellow1+0x24>)
 8000e3a:	f002 f964 	bl	8003106 <HAL_GPIO_WritePin>
}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40010800 	.word	0x40010800
 8000e48:	40010c00 	.word	0x40010c00

08000e4c <displayGreen1>:

void displayGreen1()
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8000e50:	2200      	movs	r2, #0
 8000e52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e56:	4805      	ldr	r0, [pc, #20]	; (8000e6c <displayGreen1+0x20>)
 8000e58:	f002 f955 	bl	8003106 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	2108      	movs	r1, #8
 8000e60:	4803      	ldr	r0, [pc, #12]	; (8000e70 <displayGreen1+0x24>)
 8000e62:	f002 f950 	bl	8003106 <HAL_GPIO_WritePin>
}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40010800 	.word	0x40010800
 8000e70:	40010c00 	.word	0x40010c00

08000e74 <displayRed2>:

void displayRed2()
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000e78:	2201      	movs	r2, #1
 8000e7a:	2120      	movs	r1, #32
 8000e7c:	4804      	ldr	r0, [pc, #16]	; (8000e90 <displayRed2+0x1c>)
 8000e7e:	f002 f942 	bl	8003106 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2110      	movs	r1, #16
 8000e86:	4802      	ldr	r0, [pc, #8]	; (8000e90 <displayRed2+0x1c>)
 8000e88:	f002 f93d 	bl	8003106 <HAL_GPIO_WritePin>
}
 8000e8c:	bf00      	nop
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40010c00 	.word	0x40010c00

08000e94 <displayYellow2>:


void displayYellow2()
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000e98:	2201      	movs	r2, #1
 8000e9a:	2120      	movs	r1, #32
 8000e9c:	4804      	ldr	r0, [pc, #16]	; (8000eb0 <displayYellow2+0x1c>)
 8000e9e:	f002 f932 	bl	8003106 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	2110      	movs	r1, #16
 8000ea6:	4802      	ldr	r0, [pc, #8]	; (8000eb0 <displayYellow2+0x1c>)
 8000ea8:	f002 f92d 	bl	8003106 <HAL_GPIO_WritePin>
}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40010c00 	.word	0x40010c00

08000eb4 <displayGreen2>:

void displayGreen2()
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	2120      	movs	r1, #32
 8000ebc:	4804      	ldr	r0, [pc, #16]	; (8000ed0 <displayGreen2+0x1c>)
 8000ebe:	f002 f922 	bl	8003106 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	2110      	movs	r1, #16
 8000ec6:	4802      	ldr	r0, [pc, #8]	; (8000ed0 <displayGreen2+0x1c>)
 8000ec8:	f002 f91d 	bl	8003106 <HAL_GPIO_WritePin>
}
 8000ecc:	bf00      	nop
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40010c00 	.word	0x40010c00

08000ed4 <toggleRed>:

void toggleRed()
{	// Remember to clear all led before toggle
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(D2_GPIO_Port, D2_Pin);
 8000ed8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000edc:	4804      	ldr	r0, [pc, #16]	; (8000ef0 <toggleRed+0x1c>)
 8000ede:	f002 f92a 	bl	8003136 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);
 8000ee2:	2120      	movs	r1, #32
 8000ee4:	4803      	ldr	r0, [pc, #12]	; (8000ef4 <toggleRed+0x20>)
 8000ee6:	f002 f926 	bl	8003136 <HAL_GPIO_TogglePin>
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40010800 	.word	0x40010800
 8000ef4:	40010c00 	.word	0x40010c00

08000ef8 <toggleYellow>:

void toggleYellow()
{	// Remember to clear all led before toggle
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(D2_GPIO_Port, D2_Pin);
 8000efc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f00:	4808      	ldr	r0, [pc, #32]	; (8000f24 <toggleYellow+0x2c>)
 8000f02:	f002 f918 	bl	8003136 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
 8000f06:	2108      	movs	r1, #8
 8000f08:	4807      	ldr	r0, [pc, #28]	; (8000f28 <toggleYellow+0x30>)
 8000f0a:	f002 f914 	bl	8003136 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);
 8000f0e:	2120      	movs	r1, #32
 8000f10:	4805      	ldr	r0, [pc, #20]	; (8000f28 <toggleYellow+0x30>)
 8000f12:	f002 f910 	bl	8003136 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D5_GPIO_Port, D5_Pin);
 8000f16:	2110      	movs	r1, #16
 8000f18:	4803      	ldr	r0, [pc, #12]	; (8000f28 <toggleYellow+0x30>)
 8000f1a:	f002 f90c 	bl	8003136 <HAL_GPIO_TogglePin>
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40010800 	.word	0x40010800
 8000f28:	40010c00 	.word	0x40010c00

08000f2c <toggleGreen>:

void toggleGreen()
{	// Remember to clear all led before toggle
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
 8000f30:	2108      	movs	r1, #8
 8000f32:	4804      	ldr	r0, [pc, #16]	; (8000f44 <toggleGreen+0x18>)
 8000f34:	f002 f8ff 	bl	8003136 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D5_GPIO_Port, D5_Pin);
 8000f38:	2110      	movs	r1, #16
 8000f3a:	4802      	ldr	r0, [pc, #8]	; (8000f44 <toggleGreen+0x18>)
 8000f3c:	f002 f8fb 	bl	8003136 <HAL_GPIO_TogglePin>
}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40010c00 	.word	0x40010c00

08000f48 <clearPedestrian>:

void clearPedestrian()
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f52:	4805      	ldr	r0, [pc, #20]	; (8000f68 <clearPedestrian+0x20>)
 8000f54:	f002 f8d7 	bl	8003106 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f5e:	4803      	ldr	r0, [pc, #12]	; (8000f6c <clearPedestrian+0x24>)
 8000f60:	f002 f8d1 	bl	8003106 <HAL_GPIO_WritePin>
}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40010c00 	.word	0x40010c00
 8000f6c:	40010800 	.word	0x40010800

08000f70 <displayPedestrianRed>:

void displayPedestrianRed()
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
 8000f74:	2201      	movs	r2, #1
 8000f76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f7a:	4805      	ldr	r0, [pc, #20]	; (8000f90 <displayPedestrianRed+0x20>)
 8000f7c:	f002 f8c3 	bl	8003106 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 8000f80:	2200      	movs	r2, #0
 8000f82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f86:	4803      	ldr	r0, [pc, #12]	; (8000f94 <displayPedestrianRed+0x24>)
 8000f88:	f002 f8bd 	bl	8003106 <HAL_GPIO_WritePin>
}
 8000f8c:	bf00      	nop
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40010c00 	.word	0x40010c00
 8000f94:	40010800 	.word	0x40010800

08000f98 <displayPedestrianGreen>:
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
}

void displayPedestrianGreen()
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fa2:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <displayPedestrianGreen+0x20>)
 8000fa4:	f002 f8af 	bl	8003106 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 8000fa8:	2201      	movs	r2, #1
 8000faa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fae:	4803      	ldr	r0, [pc, #12]	; (8000fbc <displayPedestrianGreen+0x24>)
 8000fb0:	f002 f8a9 	bl	8003106 <HAL_GPIO_WritePin>
}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40010c00 	.word	0x40010c00
 8000fbc:	40010800 	.word	0x40010800

08000fc0 <increase>:
 */

#include "global.h"

void increase()
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
	time1++;
 8000fc4:	4b07      	ldr	r3, [pc, #28]	; (8000fe4 <increase+0x24>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	4a06      	ldr	r2, [pc, #24]	; (8000fe4 <increase+0x24>)
 8000fcc:	6013      	str	r3, [r2, #0]
	if(time1 > 99)
 8000fce:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <increase+0x24>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2b63      	cmp	r3, #99	; 0x63
 8000fd4:	dd02      	ble.n	8000fdc <increase+0x1c>
		time1 = 1;
 8000fd6:	4b03      	ldr	r3, [pc, #12]	; (8000fe4 <increase+0x24>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	601a      	str	r2, [r3, #0]
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bc80      	pop	{r7}
 8000fe2:	4770      	bx	lr
 8000fe4:	20000170 	.word	0x20000170

08000fe8 <balance>:

void balance(int RED, int AMBER, int GREEN)
{
 8000fe8:	b5b0      	push	{r4, r5, r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
	if(RED > timeRed)
 8000ff4:	4b91      	ldr	r3, [pc, #580]	; (800123c <balance+0x254>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	68fa      	ldr	r2, [r7, #12]
 8000ffa:	429a      	cmp	r2, r3
 8000ffc:	dd5b      	ble.n	80010b6 <balance+0xce>
	{
		timeYellow = round(((float)(timeYellow * 1.0f) * (float)( (RED * 1.0f) / (timeRed * 1.0f) )));
 8000ffe:	4b90      	ldr	r3, [pc, #576]	; (8001240 <balance+0x258>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff fc6a 	bl	80008dc <__aeabi_i2f>
 8001008:	4604      	mov	r4, r0
 800100a:	68f8      	ldr	r0, [r7, #12]
 800100c:	f7ff fc66 	bl	80008dc <__aeabi_i2f>
 8001010:	4605      	mov	r5, r0
 8001012:	4b8a      	ldr	r3, [pc, #552]	; (800123c <balance+0x254>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff fc60 	bl	80008dc <__aeabi_i2f>
 800101c:	4603      	mov	r3, r0
 800101e:	4619      	mov	r1, r3
 8001020:	4628      	mov	r0, r5
 8001022:	f7ff fd63 	bl	8000aec <__aeabi_fdiv>
 8001026:	4603      	mov	r3, r0
 8001028:	4619      	mov	r1, r3
 800102a:	4620      	mov	r0, r4
 800102c:	f7ff fcaa 	bl	8000984 <__aeabi_fmul>
 8001030:	4603      	mov	r3, r0
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff fb18 	bl	8000668 <__aeabi_f2d>
 8001038:	4602      	mov	r2, r0
 800103a:	460b      	mov	r3, r1
 800103c:	4610      	mov	r0, r2
 800103e:	4619      	mov	r1, r3
 8001040:	f004 fec2 	bl	8005dc8 <round>
 8001044:	4602      	mov	r2, r0
 8001046:	460b      	mov	r3, r1
 8001048:	4610      	mov	r0, r2
 800104a:	4619      	mov	r1, r3
 800104c:	f7ff fb64 	bl	8000718 <__aeabi_d2iz>
 8001050:	4603      	mov	r3, r0
 8001052:	4a7b      	ldr	r2, [pc, #492]	; (8001240 <balance+0x258>)
 8001054:	6013      	str	r3, [r2, #0]
		timeGreen = round(((float)(timeGreen * 1.0f) * (float)( (RED * 1.0f) / (timeRed * 1.0f) )));
 8001056:	4b7b      	ldr	r3, [pc, #492]	; (8001244 <balance+0x25c>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff fc3e 	bl	80008dc <__aeabi_i2f>
 8001060:	4604      	mov	r4, r0
 8001062:	68f8      	ldr	r0, [r7, #12]
 8001064:	f7ff fc3a 	bl	80008dc <__aeabi_i2f>
 8001068:	4605      	mov	r5, r0
 800106a:	4b74      	ldr	r3, [pc, #464]	; (800123c <balance+0x254>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff fc34 	bl	80008dc <__aeabi_i2f>
 8001074:	4603      	mov	r3, r0
 8001076:	4619      	mov	r1, r3
 8001078:	4628      	mov	r0, r5
 800107a:	f7ff fd37 	bl	8000aec <__aeabi_fdiv>
 800107e:	4603      	mov	r3, r0
 8001080:	4619      	mov	r1, r3
 8001082:	4620      	mov	r0, r4
 8001084:	f7ff fc7e 	bl	8000984 <__aeabi_fmul>
 8001088:	4603      	mov	r3, r0
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff faec 	bl	8000668 <__aeabi_f2d>
 8001090:	4602      	mov	r2, r0
 8001092:	460b      	mov	r3, r1
 8001094:	4610      	mov	r0, r2
 8001096:	4619      	mov	r1, r3
 8001098:	f004 fe96 	bl	8005dc8 <round>
 800109c:	4602      	mov	r2, r0
 800109e:	460b      	mov	r3, r1
 80010a0:	4610      	mov	r0, r2
 80010a2:	4619      	mov	r1, r3
 80010a4:	f7ff fb38 	bl	8000718 <__aeabi_d2iz>
 80010a8:	4603      	mov	r3, r0
 80010aa:	4a66      	ldr	r2, [pc, #408]	; (8001244 <balance+0x25c>)
 80010ac:	6013      	str	r3, [r2, #0]
		timeRed = RED;
 80010ae:	4a63      	ldr	r2, [pc, #396]	; (800123c <balance+0x254>)
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	6013      	str	r3, [r2, #0]
	{
		timeRed = round((float)(GREEN * 1.0f) / (3 * 1.0f)) * (float)(5 * 1.0f);
		timeYellow = round((float)(GREEN * 1.0f) / (3 * 1.0f)) * (float)(2 * 1.0f);
		timeGreen = GREEN;
	}
}
 80010b4:	e1a2      	b.n	80013fc <balance+0x414>
	else if(AMBER > timeYellow)
 80010b6:	4b62      	ldr	r3, [pc, #392]	; (8001240 <balance+0x258>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	68ba      	ldr	r2, [r7, #8]
 80010bc:	429a      	cmp	r2, r3
 80010be:	dd5b      	ble.n	8001178 <balance+0x190>
		timeRed = round(((float)(timeRed * 1.0f) * (float)( (AMBER * 1.0f) / (timeYellow * 1.0f) )));
 80010c0:	4b5e      	ldr	r3, [pc, #376]	; (800123c <balance+0x254>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff fc09 	bl	80008dc <__aeabi_i2f>
 80010ca:	4604      	mov	r4, r0
 80010cc:	68b8      	ldr	r0, [r7, #8]
 80010ce:	f7ff fc05 	bl	80008dc <__aeabi_i2f>
 80010d2:	4605      	mov	r5, r0
 80010d4:	4b5a      	ldr	r3, [pc, #360]	; (8001240 <balance+0x258>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff fbff 	bl	80008dc <__aeabi_i2f>
 80010de:	4603      	mov	r3, r0
 80010e0:	4619      	mov	r1, r3
 80010e2:	4628      	mov	r0, r5
 80010e4:	f7ff fd02 	bl	8000aec <__aeabi_fdiv>
 80010e8:	4603      	mov	r3, r0
 80010ea:	4619      	mov	r1, r3
 80010ec:	4620      	mov	r0, r4
 80010ee:	f7ff fc49 	bl	8000984 <__aeabi_fmul>
 80010f2:	4603      	mov	r3, r0
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff fab7 	bl	8000668 <__aeabi_f2d>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	4610      	mov	r0, r2
 8001100:	4619      	mov	r1, r3
 8001102:	f004 fe61 	bl	8005dc8 <round>
 8001106:	4602      	mov	r2, r0
 8001108:	460b      	mov	r3, r1
 800110a:	4610      	mov	r0, r2
 800110c:	4619      	mov	r1, r3
 800110e:	f7ff fb03 	bl	8000718 <__aeabi_d2iz>
 8001112:	4603      	mov	r3, r0
 8001114:	4a49      	ldr	r2, [pc, #292]	; (800123c <balance+0x254>)
 8001116:	6013      	str	r3, [r2, #0]
		timeGreen = round(((float)(timeGreen * 1.0f) * (float)( (AMBER * 1.0f) / (timeYellow * 1.0f) )));
 8001118:	4b4a      	ldr	r3, [pc, #296]	; (8001244 <balance+0x25c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff fbdd 	bl	80008dc <__aeabi_i2f>
 8001122:	4604      	mov	r4, r0
 8001124:	68b8      	ldr	r0, [r7, #8]
 8001126:	f7ff fbd9 	bl	80008dc <__aeabi_i2f>
 800112a:	4605      	mov	r5, r0
 800112c:	4b44      	ldr	r3, [pc, #272]	; (8001240 <balance+0x258>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff fbd3 	bl	80008dc <__aeabi_i2f>
 8001136:	4603      	mov	r3, r0
 8001138:	4619      	mov	r1, r3
 800113a:	4628      	mov	r0, r5
 800113c:	f7ff fcd6 	bl	8000aec <__aeabi_fdiv>
 8001140:	4603      	mov	r3, r0
 8001142:	4619      	mov	r1, r3
 8001144:	4620      	mov	r0, r4
 8001146:	f7ff fc1d 	bl	8000984 <__aeabi_fmul>
 800114a:	4603      	mov	r3, r0
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff fa8b 	bl	8000668 <__aeabi_f2d>
 8001152:	4602      	mov	r2, r0
 8001154:	460b      	mov	r3, r1
 8001156:	4610      	mov	r0, r2
 8001158:	4619      	mov	r1, r3
 800115a:	f004 fe35 	bl	8005dc8 <round>
 800115e:	4602      	mov	r2, r0
 8001160:	460b      	mov	r3, r1
 8001162:	4610      	mov	r0, r2
 8001164:	4619      	mov	r1, r3
 8001166:	f7ff fad7 	bl	8000718 <__aeabi_d2iz>
 800116a:	4603      	mov	r3, r0
 800116c:	4a35      	ldr	r2, [pc, #212]	; (8001244 <balance+0x25c>)
 800116e:	6013      	str	r3, [r2, #0]
		timeYellow = AMBER;
 8001170:	4a33      	ldr	r2, [pc, #204]	; (8001240 <balance+0x258>)
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	6013      	str	r3, [r2, #0]
}
 8001176:	e141      	b.n	80013fc <balance+0x414>
	else if(GREEN > timeGreen)
 8001178:	4b32      	ldr	r3, [pc, #200]	; (8001244 <balance+0x25c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	687a      	ldr	r2, [r7, #4]
 800117e:	429a      	cmp	r2, r3
 8001180:	dd62      	ble.n	8001248 <balance+0x260>
		timeRed = round(((float)(timeRed * 1.0f) * (float)( (GREEN * 1.0f) / (timeGreen * 1.0f) )));
 8001182:	4b2e      	ldr	r3, [pc, #184]	; (800123c <balance+0x254>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff fba8 	bl	80008dc <__aeabi_i2f>
 800118c:	4604      	mov	r4, r0
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f7ff fba4 	bl	80008dc <__aeabi_i2f>
 8001194:	4605      	mov	r5, r0
 8001196:	4b2b      	ldr	r3, [pc, #172]	; (8001244 <balance+0x25c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff fb9e 	bl	80008dc <__aeabi_i2f>
 80011a0:	4603      	mov	r3, r0
 80011a2:	4619      	mov	r1, r3
 80011a4:	4628      	mov	r0, r5
 80011a6:	f7ff fca1 	bl	8000aec <__aeabi_fdiv>
 80011aa:	4603      	mov	r3, r0
 80011ac:	4619      	mov	r1, r3
 80011ae:	4620      	mov	r0, r4
 80011b0:	f7ff fbe8 	bl	8000984 <__aeabi_fmul>
 80011b4:	4603      	mov	r3, r0
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff fa56 	bl	8000668 <__aeabi_f2d>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	4610      	mov	r0, r2
 80011c2:	4619      	mov	r1, r3
 80011c4:	f004 fe00 	bl	8005dc8 <round>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	4610      	mov	r0, r2
 80011ce:	4619      	mov	r1, r3
 80011d0:	f7ff faa2 	bl	8000718 <__aeabi_d2iz>
 80011d4:	4603      	mov	r3, r0
 80011d6:	4a19      	ldr	r2, [pc, #100]	; (800123c <balance+0x254>)
 80011d8:	6013      	str	r3, [r2, #0]
		timeYellow = round(((float)(timeYellow * 1.0f) * (float)( (GREEN * 1.0f) / (timeGreen * 1.0f) )));
 80011da:	4b19      	ldr	r3, [pc, #100]	; (8001240 <balance+0x258>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff fb7c 	bl	80008dc <__aeabi_i2f>
 80011e4:	4604      	mov	r4, r0
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff fb78 	bl	80008dc <__aeabi_i2f>
 80011ec:	4605      	mov	r5, r0
 80011ee:	4b15      	ldr	r3, [pc, #84]	; (8001244 <balance+0x25c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff fb72 	bl	80008dc <__aeabi_i2f>
 80011f8:	4603      	mov	r3, r0
 80011fa:	4619      	mov	r1, r3
 80011fc:	4628      	mov	r0, r5
 80011fe:	f7ff fc75 	bl	8000aec <__aeabi_fdiv>
 8001202:	4603      	mov	r3, r0
 8001204:	4619      	mov	r1, r3
 8001206:	4620      	mov	r0, r4
 8001208:	f7ff fbbc 	bl	8000984 <__aeabi_fmul>
 800120c:	4603      	mov	r3, r0
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff fa2a 	bl	8000668 <__aeabi_f2d>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	4610      	mov	r0, r2
 800121a:	4619      	mov	r1, r3
 800121c:	f004 fdd4 	bl	8005dc8 <round>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	4610      	mov	r0, r2
 8001226:	4619      	mov	r1, r3
 8001228:	f7ff fa76 	bl	8000718 <__aeabi_d2iz>
 800122c:	4603      	mov	r3, r0
 800122e:	4a04      	ldr	r2, [pc, #16]	; (8001240 <balance+0x258>)
 8001230:	6013      	str	r3, [r2, #0]
		timeGreen = GREEN;
 8001232:	4a04      	ldr	r2, [pc, #16]	; (8001244 <balance+0x25c>)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6013      	str	r3, [r2, #0]
}
 8001238:	e0e0      	b.n	80013fc <balance+0x414>
 800123a:	bf00      	nop
 800123c:	20000024 	.word	0x20000024
 8001240:	20000028 	.word	0x20000028
 8001244:	2000002c 	.word	0x2000002c
	else if(RED < timeRed)
 8001248:	4b6e      	ldr	r3, [pc, #440]	; (8001404 <balance+0x41c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	68fa      	ldr	r2, [r7, #12]
 800124e:	429a      	cmp	r2, r3
 8001250:	da42      	bge.n	80012d8 <balance+0x2f0>
		timeYellow = round((float)(RED * 1.0f) / (5 * 1.0f)) * (float)(2 * 1.0f);
 8001252:	68f8      	ldr	r0, [r7, #12]
 8001254:	f7ff fb42 	bl	80008dc <__aeabi_i2f>
 8001258:	4603      	mov	r3, r0
 800125a:	496b      	ldr	r1, [pc, #428]	; (8001408 <balance+0x420>)
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff fc45 	bl	8000aec <__aeabi_fdiv>
 8001262:	4603      	mov	r3, r0
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff f9ff 	bl	8000668 <__aeabi_f2d>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	4610      	mov	r0, r2
 8001270:	4619      	mov	r1, r3
 8001272:	f004 fda9 	bl	8005dc8 <round>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	f7ff f897 	bl	80003ac <__adddf3>
 800127e:	4602      	mov	r2, r0
 8001280:	460b      	mov	r3, r1
 8001282:	4610      	mov	r0, r2
 8001284:	4619      	mov	r1, r3
 8001286:	f7ff fa47 	bl	8000718 <__aeabi_d2iz>
 800128a:	4603      	mov	r3, r0
 800128c:	4a5f      	ldr	r2, [pc, #380]	; (800140c <balance+0x424>)
 800128e:	6013      	str	r3, [r2, #0]
		timeGreen = round((float)(RED * 1.0f) / (5 * 1.0f)) * (float)(3 * 1.0f);
 8001290:	68f8      	ldr	r0, [r7, #12]
 8001292:	f7ff fb23 	bl	80008dc <__aeabi_i2f>
 8001296:	4603      	mov	r3, r0
 8001298:	495b      	ldr	r1, [pc, #364]	; (8001408 <balance+0x420>)
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff fc26 	bl	8000aec <__aeabi_fdiv>
 80012a0:	4603      	mov	r3, r0
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff f9e0 	bl	8000668 <__aeabi_f2d>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	4610      	mov	r0, r2
 80012ae:	4619      	mov	r1, r3
 80012b0:	f004 fd8a 	bl	8005dc8 <round>
 80012b4:	f04f 0200 	mov.w	r2, #0
 80012b8:	4b55      	ldr	r3, [pc, #340]	; (8001410 <balance+0x428>)
 80012ba:	f7fe ff47 	bl	800014c <__aeabi_dmul>
 80012be:	4602      	mov	r2, r0
 80012c0:	460b      	mov	r3, r1
 80012c2:	4610      	mov	r0, r2
 80012c4:	4619      	mov	r1, r3
 80012c6:	f7ff fa27 	bl	8000718 <__aeabi_d2iz>
 80012ca:	4603      	mov	r3, r0
 80012cc:	4a51      	ldr	r2, [pc, #324]	; (8001414 <balance+0x42c>)
 80012ce:	6013      	str	r3, [r2, #0]
		timeRed = RED;
 80012d0:	4a4c      	ldr	r2, [pc, #304]	; (8001404 <balance+0x41c>)
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	6013      	str	r3, [r2, #0]
}
 80012d6:	e091      	b.n	80013fc <balance+0x414>
	else if(AMBER < timeYellow)
 80012d8:	4b4c      	ldr	r3, [pc, #304]	; (800140c <balance+0x424>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	68ba      	ldr	r2, [r7, #8]
 80012de:	429a      	cmp	r2, r3
 80012e0:	da45      	bge.n	800136e <balance+0x386>
		timeRed = round((float)(AMBER * 1.0f) / (2 * 1.0f)) * (float)(5 * 1.0f);
 80012e2:	68b8      	ldr	r0, [r7, #8]
 80012e4:	f7ff fafa 	bl	80008dc <__aeabi_i2f>
 80012e8:	4603      	mov	r3, r0
 80012ea:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff fbfc 	bl	8000aec <__aeabi_fdiv>
 80012f4:	4603      	mov	r3, r0
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff f9b6 	bl	8000668 <__aeabi_f2d>
 80012fc:	4602      	mov	r2, r0
 80012fe:	460b      	mov	r3, r1
 8001300:	4610      	mov	r0, r2
 8001302:	4619      	mov	r1, r3
 8001304:	f004 fd60 	bl	8005dc8 <round>
 8001308:	f04f 0200 	mov.w	r2, #0
 800130c:	4b42      	ldr	r3, [pc, #264]	; (8001418 <balance+0x430>)
 800130e:	f7fe ff1d 	bl	800014c <__aeabi_dmul>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	4610      	mov	r0, r2
 8001318:	4619      	mov	r1, r3
 800131a:	f7ff f9fd 	bl	8000718 <__aeabi_d2iz>
 800131e:	4603      	mov	r3, r0
 8001320:	4a38      	ldr	r2, [pc, #224]	; (8001404 <balance+0x41c>)
 8001322:	6013      	str	r3, [r2, #0]
		timeGreen = round((float)(AMBER * 1.0f) / (2 * 1.0f)) * (float)(3 * 1.0f);
 8001324:	68b8      	ldr	r0, [r7, #8]
 8001326:	f7ff fad9 	bl	80008dc <__aeabi_i2f>
 800132a:	4603      	mov	r3, r0
 800132c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff fbdb 	bl	8000aec <__aeabi_fdiv>
 8001336:	4603      	mov	r3, r0
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff f995 	bl	8000668 <__aeabi_f2d>
 800133e:	4602      	mov	r2, r0
 8001340:	460b      	mov	r3, r1
 8001342:	4610      	mov	r0, r2
 8001344:	4619      	mov	r1, r3
 8001346:	f004 fd3f 	bl	8005dc8 <round>
 800134a:	f04f 0200 	mov.w	r2, #0
 800134e:	4b30      	ldr	r3, [pc, #192]	; (8001410 <balance+0x428>)
 8001350:	f7fe fefc 	bl	800014c <__aeabi_dmul>
 8001354:	4602      	mov	r2, r0
 8001356:	460b      	mov	r3, r1
 8001358:	4610      	mov	r0, r2
 800135a:	4619      	mov	r1, r3
 800135c:	f7ff f9dc 	bl	8000718 <__aeabi_d2iz>
 8001360:	4603      	mov	r3, r0
 8001362:	4a2c      	ldr	r2, [pc, #176]	; (8001414 <balance+0x42c>)
 8001364:	6013      	str	r3, [r2, #0]
		timeYellow = AMBER;
 8001366:	4a29      	ldr	r2, [pc, #164]	; (800140c <balance+0x424>)
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	6013      	str	r3, [r2, #0]
}
 800136c:	e046      	b.n	80013fc <balance+0x414>
	else if(GREEN < timeGreen)
 800136e:	4b29      	ldr	r3, [pc, #164]	; (8001414 <balance+0x42c>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	429a      	cmp	r2, r3
 8001376:	da41      	bge.n	80013fc <balance+0x414>
		timeRed = round((float)(GREEN * 1.0f) / (3 * 1.0f)) * (float)(5 * 1.0f);
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f7ff faaf 	bl	80008dc <__aeabi_i2f>
 800137e:	4603      	mov	r3, r0
 8001380:	4926      	ldr	r1, [pc, #152]	; (800141c <balance+0x434>)
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff fbb2 	bl	8000aec <__aeabi_fdiv>
 8001388:	4603      	mov	r3, r0
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff f96c 	bl	8000668 <__aeabi_f2d>
 8001390:	4602      	mov	r2, r0
 8001392:	460b      	mov	r3, r1
 8001394:	4610      	mov	r0, r2
 8001396:	4619      	mov	r1, r3
 8001398:	f004 fd16 	bl	8005dc8 <round>
 800139c:	f04f 0200 	mov.w	r2, #0
 80013a0:	4b1d      	ldr	r3, [pc, #116]	; (8001418 <balance+0x430>)
 80013a2:	f7fe fed3 	bl	800014c <__aeabi_dmul>
 80013a6:	4602      	mov	r2, r0
 80013a8:	460b      	mov	r3, r1
 80013aa:	4610      	mov	r0, r2
 80013ac:	4619      	mov	r1, r3
 80013ae:	f7ff f9b3 	bl	8000718 <__aeabi_d2iz>
 80013b2:	4603      	mov	r3, r0
 80013b4:	4a13      	ldr	r2, [pc, #76]	; (8001404 <balance+0x41c>)
 80013b6:	6013      	str	r3, [r2, #0]
		timeYellow = round((float)(GREEN * 1.0f) / (3 * 1.0f)) * (float)(2 * 1.0f);
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f7ff fa8f 	bl	80008dc <__aeabi_i2f>
 80013be:	4603      	mov	r3, r0
 80013c0:	4916      	ldr	r1, [pc, #88]	; (800141c <balance+0x434>)
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff fb92 	bl	8000aec <__aeabi_fdiv>
 80013c8:	4603      	mov	r3, r0
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff f94c 	bl	8000668 <__aeabi_f2d>
 80013d0:	4602      	mov	r2, r0
 80013d2:	460b      	mov	r3, r1
 80013d4:	4610      	mov	r0, r2
 80013d6:	4619      	mov	r1, r3
 80013d8:	f004 fcf6 	bl	8005dc8 <round>
 80013dc:	4602      	mov	r2, r0
 80013de:	460b      	mov	r3, r1
 80013e0:	f7fe ffe4 	bl	80003ac <__adddf3>
 80013e4:	4602      	mov	r2, r0
 80013e6:	460b      	mov	r3, r1
 80013e8:	4610      	mov	r0, r2
 80013ea:	4619      	mov	r1, r3
 80013ec:	f7ff f994 	bl	8000718 <__aeabi_d2iz>
 80013f0:	4603      	mov	r3, r0
 80013f2:	4a06      	ldr	r2, [pc, #24]	; (800140c <balance+0x424>)
 80013f4:	6013      	str	r3, [r2, #0]
		timeGreen = GREEN;
 80013f6:	4a07      	ldr	r2, [pc, #28]	; (8001414 <balance+0x42c>)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6013      	str	r3, [r2, #0]
}
 80013fc:	bf00      	nop
 80013fe:	3710      	adds	r7, #16
 8001400:	46bd      	mov	sp, r7
 8001402:	bdb0      	pop	{r4, r5, r7, pc}
 8001404:	20000024 	.word	0x20000024
 8001408:	40a00000 	.word	0x40a00000
 800140c:	20000028 	.word	0x20000028
 8001410:	40080000 	.word	0x40080000
 8001414:	2000002c 	.word	0x2000002c
 8001418:	40140000 	.word	0x40140000
 800141c:	40400000 	.word	0x40400000

08001420 <normalState>:

void normalState(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08e      	sub	sp, #56	; 0x38
 8001424:	af00      	add	r7, sp, #0
	char str[50];
	switch(status)
 8001426:	4bae      	ldr	r3, [pc, #696]	; (80016e0 <normalState+0x2c0>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2b0c      	cmp	r3, #12
 800142c:	f200 84e0 	bhi.w	8001df0 <normalState+0x9d0>
 8001430:	a201      	add	r2, pc, #4	; (adr r2, 8001438 <normalState+0x18>)
 8001432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001436:	bf00      	nop
 8001438:	0800146d 	.word	0x0800146d
 800143c:	080014a1 	.word	0x080014a1
 8001440:	080015bb 	.word	0x080015bb
 8001444:	08001709 	.word	0x08001709
 8001448:	080018b5 	.word	0x080018b5
 800144c:	08001df1 	.word	0x08001df1
 8001450:	08001df1 	.word	0x08001df1
 8001454:	08001df1 	.word	0x08001df1
 8001458:	08001df1 	.word	0x08001df1
 800145c:	08001df1 	.word	0x08001df1
 8001460:	08001a53 	.word	0x08001a53
 8001464:	08001ba9 	.word	0x08001ba9
 8001468:	08001ccd 	.word	0x08001ccd
	{
	case INIT:
		status = RedGreen;
 800146c:	4b9c      	ldr	r3, [pc, #624]	; (80016e0 <normalState+0x2c0>)
 800146e:	2201      	movs	r2, #1
 8001470:	601a      	str	r2, [r3, #0]

		setTimer(0, timeGreen * 100);
 8001472:	4b9c      	ldr	r3, [pc, #624]	; (80016e4 <normalState+0x2c4>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	2264      	movs	r2, #100	; 0x64
 8001478:	fb02 f303 	mul.w	r3, r2, r3
 800147c:	4619      	mov	r1, r3
 800147e:	2000      	movs	r0, #0
 8001480:	f001 f89e 	bl	80025c0 <setTimer>
		setTimer(1, 1);
 8001484:	2101      	movs	r1, #1
 8001486:	2001      	movs	r0, #1
 8001488:	f001 f89a 	bl	80025c0 <setTimer>

		time1 = timeRed;
 800148c:	4b96      	ldr	r3, [pc, #600]	; (80016e8 <normalState+0x2c8>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a96      	ldr	r2, [pc, #600]	; (80016ec <normalState+0x2cc>)
 8001492:	6013      	str	r3, [r2, #0]
		time2 = timeGreen;
 8001494:	4b93      	ldr	r3, [pc, #588]	; (80016e4 <normalState+0x2c4>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a95      	ldr	r2, [pc, #596]	; (80016f0 <normalState+0x2d0>)
 800149a:	6013      	str	r3, [r2, #0]
		break;
 800149c:	f000 bcb7 	b.w	8001e0e <normalState+0x9ee>

	case RedGreen:
		displayRed1();
 80014a0:	f7ff fcac 	bl	8000dfc <displayRed1>
		displayGreen2();
 80014a4:	f7ff fd06 	bl	8000eb4 <displayGreen2>

		if(isTimerUp(1) == 1)
 80014a8:	2001      	movs	r0, #1
 80014aa:	f001 f85d 	bl	8002568 <isTimerUp>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d12b      	bne.n	800150c <normalState+0xec>
		{	// Update Time
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "\r\n!7SEG1: %d#\r\n",time1), 500);
 80014b4:	4b8d      	ldr	r3, [pc, #564]	; (80016ec <normalState+0x2cc>)
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	1d3b      	adds	r3, r7, #4
 80014ba:	498e      	ldr	r1, [pc, #568]	; (80016f4 <normalState+0x2d4>)
 80014bc:	4618      	mov	r0, r3
 80014be:	f004 f8ff 	bl	80056c0 <siprintf>
 80014c2:	4603      	mov	r3, r0
 80014c4:	b29a      	uxth	r2, r3
 80014c6:	1d39      	adds	r1, r7, #4
 80014c8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80014cc:	488a      	ldr	r0, [pc, #552]	; (80016f8 <normalState+0x2d8>)
 80014ce:	f003 fa2b 	bl	8004928 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "\r\n!7SEG2: %d#\r\n\n\n",time2), 500);
 80014d2:	4b87      	ldr	r3, [pc, #540]	; (80016f0 <normalState+0x2d0>)
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	1d3b      	adds	r3, r7, #4
 80014d8:	4988      	ldr	r1, [pc, #544]	; (80016fc <normalState+0x2dc>)
 80014da:	4618      	mov	r0, r3
 80014dc:	f004 f8f0 	bl	80056c0 <siprintf>
 80014e0:	4603      	mov	r3, r0
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	1d39      	adds	r1, r7, #4
 80014e6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80014ea:	4883      	ldr	r0, [pc, #524]	; (80016f8 <normalState+0x2d8>)
 80014ec:	f003 fa1c 	bl	8004928 <HAL_UART_Transmit>

			time1--;
 80014f0:	4b7e      	ldr	r3, [pc, #504]	; (80016ec <normalState+0x2cc>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	3b01      	subs	r3, #1
 80014f6:	4a7d      	ldr	r2, [pc, #500]	; (80016ec <normalState+0x2cc>)
 80014f8:	6013      	str	r3, [r2, #0]
			time2--;
 80014fa:	4b7d      	ldr	r3, [pc, #500]	; (80016f0 <normalState+0x2d0>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	3b01      	subs	r3, #1
 8001500:	4a7b      	ldr	r2, [pc, #492]	; (80016f0 <normalState+0x2d0>)
 8001502:	6013      	str	r3, [r2, #0]

			setTimer(1, 100);
 8001504:	2164      	movs	r1, #100	; 0x64
 8001506:	2001      	movs	r0, #1
 8001508:	f001 f85a 	bl	80025c0 <setTimer>
		}

		if(isTimerUp(0) == 1)
 800150c:	2000      	movs	r0, #0
 800150e:	f001 f82b 	bl	8002568 <isTimerUp>
 8001512:	4603      	mov	r3, r0
 8001514:	2b01      	cmp	r3, #1
 8001516:	d117      	bne.n	8001548 <normalState+0x128>
		{	// Transit State
			status = RedAmber;
 8001518:	4b71      	ldr	r3, [pc, #452]	; (80016e0 <normalState+0x2c0>)
 800151a:	2202      	movs	r2, #2
 800151c:	601a      	str	r2, [r3, #0]

			setTimer(0, timeYellow * 100);
 800151e:	4b78      	ldr	r3, [pc, #480]	; (8001700 <normalState+0x2e0>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2264      	movs	r2, #100	; 0x64
 8001524:	fb02 f303 	mul.w	r3, r2, r3
 8001528:	4619      	mov	r1, r3
 800152a:	2000      	movs	r0, #0
 800152c:	f001 f848 	bl	80025c0 <setTimer>
			setTimer(1, 1);
 8001530:	2101      	movs	r1, #1
 8001532:	2001      	movs	r0, #1
 8001534:	f001 f844 	bl	80025c0 <setTimer>

			time1 = timeYellow;
 8001538:	4b71      	ldr	r3, [pc, #452]	; (8001700 <normalState+0x2e0>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a6b      	ldr	r2, [pc, #428]	; (80016ec <normalState+0x2cc>)
 800153e:	6013      	str	r3, [r2, #0]
			time2 = timeYellow;
 8001540:	4b6f      	ldr	r3, [pc, #444]	; (8001700 <normalState+0x2e0>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a6a      	ldr	r2, [pc, #424]	; (80016f0 <normalState+0x2d0>)
 8001546:	6013      	str	r3, [r2, #0]
		}


		if(Is_Button_Pressed(1))
 8001548:	2001      	movs	r0, #1
 800154a:	f7ff fc01 	bl	8000d50 <Is_Button_Pressed>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d01a      	beq.n	800158a <normalState+0x16a>
		{
			status = ManRed;
 8001554:	4b62      	ldr	r3, [pc, #392]	; (80016e0 <normalState+0x2c0>)
 8001556:	220a      	movs	r2, #10
 8001558:	601a      	str	r2, [r3, #0]

			time1 = timeRed;
 800155a:	4b63      	ldr	r3, [pc, #396]	; (80016e8 <normalState+0x2c8>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a63      	ldr	r2, [pc, #396]	; (80016ec <normalState+0x2cc>)
 8001560:	6013      	str	r3, [r2, #0]
			time2 = 2;
 8001562:	4b63      	ldr	r3, [pc, #396]	; (80016f0 <normalState+0x2d0>)
 8001564:	2202      	movs	r2, #2
 8001566:	601a      	str	r2, [r3, #0]

			clearAllLed1();
 8001568:	f7ff fc24 	bl	8000db4 <clearAllLed1>
			clearAllLed2();
 800156c:	f7ff fc36 	bl	8000ddc <clearAllLed2>

			setTimer(1, 100);
 8001570:	2164      	movs	r1, #100	; 0x64
 8001572:	2001      	movs	r0, #1
 8001574:	f001 f824 	bl	80025c0 <setTimer>
			setTimer(2, 25);
 8001578:	2119      	movs	r1, #25
 800157a:	2002      	movs	r0, #2
 800157c:	f001 f820 	bl	80025c0 <setTimer>
			setTimer(7,500);
 8001580:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001584:	2007      	movs	r0, #7
 8001586:	f001 f81b 	bl	80025c0 <setTimer>
		}
		if(Is_Button_Pressed(0))
 800158a:	2000      	movs	r0, #0
 800158c:	f7ff fbe0 	bl	8000d50 <Is_Button_Pressed>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	f000 842e 	beq.w	8001df4 <normalState+0x9d4>
		{
			pedestrian_flag = Pedestrian_RED;
 8001598:	4b5a      	ldr	r3, [pc, #360]	; (8001704 <normalState+0x2e4>)
 800159a:	220f      	movs	r2, #15
 800159c:	601a      	str	r2, [r3, #0]
			setTimer(3, (timeRed + timeGreen) * 100);
 800159e:	4b52      	ldr	r3, [pc, #328]	; (80016e8 <normalState+0x2c8>)
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	4b50      	ldr	r3, [pc, #320]	; (80016e4 <normalState+0x2c4>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4413      	add	r3, r2
 80015a8:	2264      	movs	r2, #100	; 0x64
 80015aa:	fb02 f303 	mul.w	r3, r2, r3
 80015ae:	4619      	mov	r1, r3
 80015b0:	2003      	movs	r0, #3
 80015b2:	f001 f805 	bl	80025c0 <setTimer>
		}
		break;
 80015b6:	f000 bc1d 	b.w	8001df4 <normalState+0x9d4>

	case RedAmber:
		displayRed1();
 80015ba:	f7ff fc1f 	bl	8000dfc <displayRed1>
		displayYellow2();
 80015be:	f7ff fc69 	bl	8000e94 <displayYellow2>

		if(isTimerUp(1) == 1)
 80015c2:	2001      	movs	r0, #1
 80015c4:	f000 ffd0 	bl	8002568 <isTimerUp>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d12b      	bne.n	8001626 <normalState+0x206>
		{	// Update Time
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "\r\n!7SEG1: %d#\r\n",time1), 500);
 80015ce:	4b47      	ldr	r3, [pc, #284]	; (80016ec <normalState+0x2cc>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	1d3b      	adds	r3, r7, #4
 80015d4:	4947      	ldr	r1, [pc, #284]	; (80016f4 <normalState+0x2d4>)
 80015d6:	4618      	mov	r0, r3
 80015d8:	f004 f872 	bl	80056c0 <siprintf>
 80015dc:	4603      	mov	r3, r0
 80015de:	b29a      	uxth	r2, r3
 80015e0:	1d39      	adds	r1, r7, #4
 80015e2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80015e6:	4844      	ldr	r0, [pc, #272]	; (80016f8 <normalState+0x2d8>)
 80015e8:	f003 f99e 	bl	8004928 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "\r\n!7SEG2: %d#\r\n\n\n",time2), 500);
 80015ec:	4b40      	ldr	r3, [pc, #256]	; (80016f0 <normalState+0x2d0>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	1d3b      	adds	r3, r7, #4
 80015f2:	4942      	ldr	r1, [pc, #264]	; (80016fc <normalState+0x2dc>)
 80015f4:	4618      	mov	r0, r3
 80015f6:	f004 f863 	bl	80056c0 <siprintf>
 80015fa:	4603      	mov	r3, r0
 80015fc:	b29a      	uxth	r2, r3
 80015fe:	1d39      	adds	r1, r7, #4
 8001600:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001604:	483c      	ldr	r0, [pc, #240]	; (80016f8 <normalState+0x2d8>)
 8001606:	f003 f98f 	bl	8004928 <HAL_UART_Transmit>

			time1--;
 800160a:	4b38      	ldr	r3, [pc, #224]	; (80016ec <normalState+0x2cc>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	3b01      	subs	r3, #1
 8001610:	4a36      	ldr	r2, [pc, #216]	; (80016ec <normalState+0x2cc>)
 8001612:	6013      	str	r3, [r2, #0]
			time2--;
 8001614:	4b36      	ldr	r3, [pc, #216]	; (80016f0 <normalState+0x2d0>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	3b01      	subs	r3, #1
 800161a:	4a35      	ldr	r2, [pc, #212]	; (80016f0 <normalState+0x2d0>)
 800161c:	6013      	str	r3, [r2, #0]

			setTimer(1, 100);
 800161e:	2164      	movs	r1, #100	; 0x64
 8001620:	2001      	movs	r0, #1
 8001622:	f000 ffcd 	bl	80025c0 <setTimer>
		}

		if(isTimerUp(0)==1)
 8001626:	2000      	movs	r0, #0
 8001628:	f000 ff9e 	bl	8002568 <isTimerUp>
 800162c:	4603      	mov	r3, r0
 800162e:	2b01      	cmp	r3, #1
 8001630:	d11e      	bne.n	8001670 <normalState+0x250>
		{	// Transit State
			status = GreenRed;
 8001632:	4b2b      	ldr	r3, [pc, #172]	; (80016e0 <normalState+0x2c0>)
 8001634:	2203      	movs	r2, #3
 8001636:	601a      	str	r2, [r3, #0]

			setTimer(0, timeGreen * 100);
 8001638:	4b2a      	ldr	r3, [pc, #168]	; (80016e4 <normalState+0x2c4>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2264      	movs	r2, #100	; 0x64
 800163e:	fb02 f303 	mul.w	r3, r2, r3
 8001642:	4619      	mov	r1, r3
 8001644:	2000      	movs	r0, #0
 8001646:	f000 ffbb 	bl	80025c0 <setTimer>
			setTimer(1, 1);
 800164a:	2101      	movs	r1, #1
 800164c:	2001      	movs	r0, #1
 800164e:	f000 ffb7 	bl	80025c0 <setTimer>

			time1 = timeGreen;
 8001652:	4b24      	ldr	r3, [pc, #144]	; (80016e4 <normalState+0x2c4>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a25      	ldr	r2, [pc, #148]	; (80016ec <normalState+0x2cc>)
 8001658:	6013      	str	r3, [r2, #0]
			time2 = timeRed;
 800165a:	4b23      	ldr	r3, [pc, #140]	; (80016e8 <normalState+0x2c8>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a24      	ldr	r2, [pc, #144]	; (80016f0 <normalState+0x2d0>)
 8001660:	6013      	str	r3, [r2, #0]

			if(pedestrian_flag == Pedestrian_RED)
 8001662:	4b28      	ldr	r3, [pc, #160]	; (8001704 <normalState+0x2e4>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2b0f      	cmp	r3, #15
 8001668:	d102      	bne.n	8001670 <normalState+0x250>
				pedestrian_flag = Pedestrian_GREEN;
 800166a:	4b26      	ldr	r3, [pc, #152]	; (8001704 <normalState+0x2e4>)
 800166c:	2210      	movs	r2, #16
 800166e:	601a      	str	r2, [r3, #0]
		}


		if(Is_Button_Pressed(1))
 8001670:	2001      	movs	r0, #1
 8001672:	f7ff fb6d 	bl	8000d50 <Is_Button_Pressed>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d01a      	beq.n	80016b2 <normalState+0x292>
		{
			status = ManRed;
 800167c:	4b18      	ldr	r3, [pc, #96]	; (80016e0 <normalState+0x2c0>)
 800167e:	220a      	movs	r2, #10
 8001680:	601a      	str	r2, [r3, #0]

			time1 = timeRed;
 8001682:	4b19      	ldr	r3, [pc, #100]	; (80016e8 <normalState+0x2c8>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a19      	ldr	r2, [pc, #100]	; (80016ec <normalState+0x2cc>)
 8001688:	6013      	str	r3, [r2, #0]
			time2 = 2;
 800168a:	4b19      	ldr	r3, [pc, #100]	; (80016f0 <normalState+0x2d0>)
 800168c:	2202      	movs	r2, #2
 800168e:	601a      	str	r2, [r3, #0]

			clearAllLed1();
 8001690:	f7ff fb90 	bl	8000db4 <clearAllLed1>
			clearAllLed2();
 8001694:	f7ff fba2 	bl	8000ddc <clearAllLed2>

			setTimer(1, 100);
 8001698:	2164      	movs	r1, #100	; 0x64
 800169a:	2001      	movs	r0, #1
 800169c:	f000 ff90 	bl	80025c0 <setTimer>
			setTimer(2, 25);
 80016a0:	2119      	movs	r1, #25
 80016a2:	2002      	movs	r0, #2
 80016a4:	f000 ff8c 	bl	80025c0 <setTimer>
			setTimer(7,500);
 80016a8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80016ac:	2007      	movs	r0, #7
 80016ae:	f000 ff87 	bl	80025c0 <setTimer>
		}

		if(Is_Button_Pressed(0))
 80016b2:	2000      	movs	r0, #0
 80016b4:	f7ff fb4c 	bl	8000d50 <Is_Button_Pressed>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	f000 839c 	beq.w	8001df8 <normalState+0x9d8>
		{
			pedestrian_flag = Pedestrian_RED;
 80016c0:	4b10      	ldr	r3, [pc, #64]	; (8001704 <normalState+0x2e4>)
 80016c2:	220f      	movs	r2, #15
 80016c4:	601a      	str	r2, [r3, #0]
			setTimer(3, (timeRed + timeGreen) * 100);
 80016c6:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <normalState+0x2c8>)
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <normalState+0x2c4>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4413      	add	r3, r2
 80016d0:	2264      	movs	r2, #100	; 0x64
 80016d2:	fb02 f303 	mul.w	r3, r2, r3
 80016d6:	4619      	mov	r1, r3
 80016d8:	2003      	movs	r0, #3
 80016da:	f000 ff71 	bl	80025c0 <setTimer>
		}
		break;
 80016de:	e38b      	b.n	8001df8 <normalState+0x9d8>
 80016e0:	20000118 	.word	0x20000118
 80016e4:	2000002c 	.word	0x2000002c
 80016e8:	20000024 	.word	0x20000024
 80016ec:	20000170 	.word	0x20000170
 80016f0:	2000011c 	.word	0x2000011c
 80016f4:	08005e70 	.word	0x08005e70
 80016f8:	20000204 	.word	0x20000204
 80016fc:	08005e80 	.word	0x08005e80
 8001700:	20000028 	.word	0x20000028
 8001704:	20000030 	.word	0x20000030

	case GreenRed:
		displayGreen1();
 8001708:	f7ff fba0 	bl	8000e4c <displayGreen1>
		displayRed2();
 800170c:	f7ff fbb2 	bl	8000e74 <displayRed2>

		if(timeYellow < 5 && time1 <= 5 - timeYellow && pedestrian_flag==Pedestrian_GREEN  && flag == 0) {
 8001710:	4b5c      	ldr	r3, [pc, #368]	; (8001884 <normalState+0x464>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2b04      	cmp	r3, #4
 8001716:	dc16      	bgt.n	8001746 <normalState+0x326>
 8001718:	4b5a      	ldr	r3, [pc, #360]	; (8001884 <normalState+0x464>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f1c3 0205 	rsb	r2, r3, #5
 8001720:	4b59      	ldr	r3, [pc, #356]	; (8001888 <normalState+0x468>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	429a      	cmp	r2, r3
 8001726:	db0e      	blt.n	8001746 <normalState+0x326>
 8001728:	4b58      	ldr	r3, [pc, #352]	; (800188c <normalState+0x46c>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2b10      	cmp	r3, #16
 800172e:	d10a      	bne.n	8001746 <normalState+0x326>
 8001730:	4b57      	ldr	r3, [pc, #348]	; (8001890 <normalState+0x470>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d106      	bne.n	8001746 <normalState+0x326>
			flag = 1;
 8001738:	4b55      	ldr	r3, [pc, #340]	; (8001890 <normalState+0x470>)
 800173a:	2201      	movs	r2, #1
 800173c:	601a      	str	r2, [r3, #0]
			setTimer(4, 1);
 800173e:	2101      	movs	r1, #1
 8001740:	2004      	movs	r0, #4
 8001742:	f000 ff3d 	bl	80025c0 <setTimer>
		}

		if(isTimerUp(1)==1)
 8001746:	2001      	movs	r0, #1
 8001748:	f000 ff0e 	bl	8002568 <isTimerUp>
 800174c:	4603      	mov	r3, r0
 800174e:	2b01      	cmp	r3, #1
 8001750:	d12b      	bne.n	80017aa <normalState+0x38a>
		{	// Update Time
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "\r\n!7SEG1: %d#\r\n",time1), 500);
 8001752:	4b4d      	ldr	r3, [pc, #308]	; (8001888 <normalState+0x468>)
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	1d3b      	adds	r3, r7, #4
 8001758:	494e      	ldr	r1, [pc, #312]	; (8001894 <normalState+0x474>)
 800175a:	4618      	mov	r0, r3
 800175c:	f003 ffb0 	bl	80056c0 <siprintf>
 8001760:	4603      	mov	r3, r0
 8001762:	b29a      	uxth	r2, r3
 8001764:	1d39      	adds	r1, r7, #4
 8001766:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800176a:	484b      	ldr	r0, [pc, #300]	; (8001898 <normalState+0x478>)
 800176c:	f003 f8dc 	bl	8004928 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "\r\n!7SEG2: %d#\r\n\n\n",time2), 500);
 8001770:	4b4a      	ldr	r3, [pc, #296]	; (800189c <normalState+0x47c>)
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	1d3b      	adds	r3, r7, #4
 8001776:	494a      	ldr	r1, [pc, #296]	; (80018a0 <normalState+0x480>)
 8001778:	4618      	mov	r0, r3
 800177a:	f003 ffa1 	bl	80056c0 <siprintf>
 800177e:	4603      	mov	r3, r0
 8001780:	b29a      	uxth	r2, r3
 8001782:	1d39      	adds	r1, r7, #4
 8001784:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001788:	4843      	ldr	r0, [pc, #268]	; (8001898 <normalState+0x478>)
 800178a:	f003 f8cd 	bl	8004928 <HAL_UART_Transmit>

			time1--;
 800178e:	4b3e      	ldr	r3, [pc, #248]	; (8001888 <normalState+0x468>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	3b01      	subs	r3, #1
 8001794:	4a3c      	ldr	r2, [pc, #240]	; (8001888 <normalState+0x468>)
 8001796:	6013      	str	r3, [r2, #0]
			time2--;
 8001798:	4b40      	ldr	r3, [pc, #256]	; (800189c <normalState+0x47c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	3b01      	subs	r3, #1
 800179e:	4a3f      	ldr	r2, [pc, #252]	; (800189c <normalState+0x47c>)
 80017a0:	6013      	str	r3, [r2, #0]

			setTimer(1, 100);
 80017a2:	2164      	movs	r1, #100	; 0x64
 80017a4:	2001      	movs	r0, #1
 80017a6:	f000 ff0b 	bl	80025c0 <setTimer>
		}

		if(isTimerUp(0) == 1)
 80017aa:	2000      	movs	r0, #0
 80017ac:	f000 fedc 	bl	8002568 <isTimerUp>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d117      	bne.n	80017e6 <normalState+0x3c6>
		{	// Transit State
			status = AmberRed;
 80017b6:	4b3b      	ldr	r3, [pc, #236]	; (80018a4 <normalState+0x484>)
 80017b8:	2204      	movs	r2, #4
 80017ba:	601a      	str	r2, [r3, #0]

			setTimer(0, timeYellow * 100);
 80017bc:	4b31      	ldr	r3, [pc, #196]	; (8001884 <normalState+0x464>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2264      	movs	r2, #100	; 0x64
 80017c2:	fb02 f303 	mul.w	r3, r2, r3
 80017c6:	4619      	mov	r1, r3
 80017c8:	2000      	movs	r0, #0
 80017ca:	f000 fef9 	bl	80025c0 <setTimer>
			setTimer(1, 1);
 80017ce:	2101      	movs	r1, #1
 80017d0:	2001      	movs	r0, #1
 80017d2:	f000 fef5 	bl	80025c0 <setTimer>

			time1 = timeYellow;
 80017d6:	4b2b      	ldr	r3, [pc, #172]	; (8001884 <normalState+0x464>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a2b      	ldr	r2, [pc, #172]	; (8001888 <normalState+0x468>)
 80017dc:	6013      	str	r3, [r2, #0]
			time2 = timeYellow;
 80017de:	4b29      	ldr	r3, [pc, #164]	; (8001884 <normalState+0x464>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a2e      	ldr	r2, [pc, #184]	; (800189c <normalState+0x47c>)
 80017e4:	6013      	str	r3, [r2, #0]
		}

		if(timeYellow < 5 && time1 <= 5 - timeYellow)
 80017e6:	4b27      	ldr	r3, [pc, #156]	; (8001884 <normalState+0x464>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2b04      	cmp	r3, #4
 80017ec:	dc11      	bgt.n	8001812 <normalState+0x3f2>
 80017ee:	4b25      	ldr	r3, [pc, #148]	; (8001884 <normalState+0x464>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f1c3 0205 	rsb	r2, r3, #5
 80017f6:	4b24      	ldr	r3, [pc, #144]	; (8001888 <normalState+0x468>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	db09      	blt.n	8001812 <normalState+0x3f2>
				buzzerValue = 512 * (5- timeYellow - time1);
 80017fe:	4b21      	ldr	r3, [pc, #132]	; (8001884 <normalState+0x464>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f1c3 0205 	rsb	r2, r3, #5
 8001806:	4b20      	ldr	r3, [pc, #128]	; (8001888 <normalState+0x468>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	025b      	lsls	r3, r3, #9
 800180e:	4a26      	ldr	r2, [pc, #152]	; (80018a8 <normalState+0x488>)
 8001810:	6013      	str	r3, [r2, #0]

		if(Is_Button_Pressed(1))
 8001812:	2001      	movs	r0, #1
 8001814:	f7ff fa9c 	bl	8000d50 <Is_Button_Pressed>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d01a      	beq.n	8001854 <normalState+0x434>
		{
			status = ManRed;
 800181e:	4b21      	ldr	r3, [pc, #132]	; (80018a4 <normalState+0x484>)
 8001820:	220a      	movs	r2, #10
 8001822:	601a      	str	r2, [r3, #0]

			time1 = timeRed;
 8001824:	4b21      	ldr	r3, [pc, #132]	; (80018ac <normalState+0x48c>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a17      	ldr	r2, [pc, #92]	; (8001888 <normalState+0x468>)
 800182a:	6013      	str	r3, [r2, #0]
			time2 = 2;
 800182c:	4b1b      	ldr	r3, [pc, #108]	; (800189c <normalState+0x47c>)
 800182e:	2202      	movs	r2, #2
 8001830:	601a      	str	r2, [r3, #0]

			clearAllLed1();
 8001832:	f7ff fabf 	bl	8000db4 <clearAllLed1>
			clearAllLed2();
 8001836:	f7ff fad1 	bl	8000ddc <clearAllLed2>

			setTimer(1, 100);
 800183a:	2164      	movs	r1, #100	; 0x64
 800183c:	2001      	movs	r0, #1
 800183e:	f000 febf 	bl	80025c0 <setTimer>
			setTimer(2, 25);
 8001842:	2119      	movs	r1, #25
 8001844:	2002      	movs	r0, #2
 8001846:	f000 febb 	bl	80025c0 <setTimer>
			setTimer(7,500);
 800184a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800184e:	2007      	movs	r0, #7
 8001850:	f000 feb6 	bl	80025c0 <setTimer>
		}

		if(Is_Button_Pressed(0))
 8001854:	2000      	movs	r0, #0
 8001856:	f7ff fa7b 	bl	8000d50 <Is_Button_Pressed>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	f000 82cd 	beq.w	8001dfc <normalState+0x9dc>
		{
			pedestrian_flag = Pedestrian_GREEN;
 8001862:	4b0a      	ldr	r3, [pc, #40]	; (800188c <normalState+0x46c>)
 8001864:	2210      	movs	r2, #16
 8001866:	601a      	str	r2, [r3, #0]
			setTimer(3, (timeRed + timeGreen) * 100);
 8001868:	4b10      	ldr	r3, [pc, #64]	; (80018ac <normalState+0x48c>)
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	4b10      	ldr	r3, [pc, #64]	; (80018b0 <normalState+0x490>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4413      	add	r3, r2
 8001872:	2264      	movs	r2, #100	; 0x64
 8001874:	fb02 f303 	mul.w	r3, r2, r3
 8001878:	4619      	mov	r1, r3
 800187a:	2003      	movs	r0, #3
 800187c:	f000 fea0 	bl	80025c0 <setTimer>
		}
		break;
 8001880:	e2bc      	b.n	8001dfc <normalState+0x9dc>
 8001882:	bf00      	nop
 8001884:	20000028 	.word	0x20000028
 8001888:	20000170 	.word	0x20000170
 800188c:	20000030 	.word	0x20000030
 8001890:	20000128 	.word	0x20000128
 8001894:	08005e70 	.word	0x08005e70
 8001898:	20000204 	.word	0x20000204
 800189c:	2000011c 	.word	0x2000011c
 80018a0:	08005e80 	.word	0x08005e80
 80018a4:	20000118 	.word	0x20000118
 80018a8:	20000120 	.word	0x20000120
 80018ac:	20000024 	.word	0x20000024
 80018b0:	2000002c 	.word	0x2000002c

	case AmberRed:
		displayYellow1();
 80018b4:	f7ff fab6 	bl	8000e24 <displayYellow1>
		displayRed2();
 80018b8:	f7ff fadc 	bl	8000e74 <displayRed2>

		if (timeYellow >= 5 && time1 == 5 && pedestrian_flag==Pedestrian_GREEN && flag == 0) {
 80018bc:	4bae      	ldr	r3, [pc, #696]	; (8001b78 <normalState+0x758>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2b04      	cmp	r3, #4
 80018c2:	dd12      	ble.n	80018ea <normalState+0x4ca>
 80018c4:	4bad      	ldr	r3, [pc, #692]	; (8001b7c <normalState+0x75c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2b05      	cmp	r3, #5
 80018ca:	d10e      	bne.n	80018ea <normalState+0x4ca>
 80018cc:	4bac      	ldr	r3, [pc, #688]	; (8001b80 <normalState+0x760>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2b10      	cmp	r3, #16
 80018d2:	d10a      	bne.n	80018ea <normalState+0x4ca>
 80018d4:	4bab      	ldr	r3, [pc, #684]	; (8001b84 <normalState+0x764>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d106      	bne.n	80018ea <normalState+0x4ca>
			flag = 1;
 80018dc:	4ba9      	ldr	r3, [pc, #676]	; (8001b84 <normalState+0x764>)
 80018de:	2201      	movs	r2, #1
 80018e0:	601a      	str	r2, [r3, #0]
			setTimer(4, 1);
 80018e2:	2101      	movs	r1, #1
 80018e4:	2004      	movs	r0, #4
 80018e6:	f000 fe6b 	bl	80025c0 <setTimer>
		}

		if(isTimerUp(1) == 1)
 80018ea:	2001      	movs	r0, #1
 80018ec:	f000 fe3c 	bl	8002568 <isTimerUp>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d12b      	bne.n	800194e <normalState+0x52e>
		{	// Update Time
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "\r\n!7SEG1: %d#\r\n",time1), 500);
 80018f6:	4ba1      	ldr	r3, [pc, #644]	; (8001b7c <normalState+0x75c>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	1d3b      	adds	r3, r7, #4
 80018fc:	49a2      	ldr	r1, [pc, #648]	; (8001b88 <normalState+0x768>)
 80018fe:	4618      	mov	r0, r3
 8001900:	f003 fede 	bl	80056c0 <siprintf>
 8001904:	4603      	mov	r3, r0
 8001906:	b29a      	uxth	r2, r3
 8001908:	1d39      	adds	r1, r7, #4
 800190a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800190e:	489f      	ldr	r0, [pc, #636]	; (8001b8c <normalState+0x76c>)
 8001910:	f003 f80a 	bl	8004928 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "\r\n!7SEG2: %d#\r\n\n\n",time2), 500);
 8001914:	4b9e      	ldr	r3, [pc, #632]	; (8001b90 <normalState+0x770>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	1d3b      	adds	r3, r7, #4
 800191a:	499e      	ldr	r1, [pc, #632]	; (8001b94 <normalState+0x774>)
 800191c:	4618      	mov	r0, r3
 800191e:	f003 fecf 	bl	80056c0 <siprintf>
 8001922:	4603      	mov	r3, r0
 8001924:	b29a      	uxth	r2, r3
 8001926:	1d39      	adds	r1, r7, #4
 8001928:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800192c:	4897      	ldr	r0, [pc, #604]	; (8001b8c <normalState+0x76c>)
 800192e:	f002 fffb 	bl	8004928 <HAL_UART_Transmit>

			time1--;
 8001932:	4b92      	ldr	r3, [pc, #584]	; (8001b7c <normalState+0x75c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	3b01      	subs	r3, #1
 8001938:	4a90      	ldr	r2, [pc, #576]	; (8001b7c <normalState+0x75c>)
 800193a:	6013      	str	r3, [r2, #0]
			time2--;
 800193c:	4b94      	ldr	r3, [pc, #592]	; (8001b90 <normalState+0x770>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	3b01      	subs	r3, #1
 8001942:	4a93      	ldr	r2, [pc, #588]	; (8001b90 <normalState+0x770>)
 8001944:	6013      	str	r3, [r2, #0]

			setTimer(1, 100);
 8001946:	2164      	movs	r1, #100	; 0x64
 8001948:	2001      	movs	r0, #1
 800194a:	f000 fe39 	bl	80025c0 <setTimer>
		}

		if(isTimerUp(0) == 1)
 800194e:	2000      	movs	r0, #0
 8001950:	f000 fe0a 	bl	8002568 <isTimerUp>
 8001954:	4603      	mov	r3, r0
 8001956:	2b01      	cmp	r3, #1
 8001958:	d11e      	bne.n	8001998 <normalState+0x578>
		{	// Transit State
			status = RedGreen;
 800195a:	4b8f      	ldr	r3, [pc, #572]	; (8001b98 <normalState+0x778>)
 800195c:	2201      	movs	r2, #1
 800195e:	601a      	str	r2, [r3, #0]

			setTimer(0, timeGreen * 100);
 8001960:	4b8e      	ldr	r3, [pc, #568]	; (8001b9c <normalState+0x77c>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2264      	movs	r2, #100	; 0x64
 8001966:	fb02 f303 	mul.w	r3, r2, r3
 800196a:	4619      	mov	r1, r3
 800196c:	2000      	movs	r0, #0
 800196e:	f000 fe27 	bl	80025c0 <setTimer>
			setTimer(1, 1);
 8001972:	2101      	movs	r1, #1
 8001974:	2001      	movs	r0, #1
 8001976:	f000 fe23 	bl	80025c0 <setTimer>

			time1 = timeRed;
 800197a:	4b89      	ldr	r3, [pc, #548]	; (8001ba0 <normalState+0x780>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a7f      	ldr	r2, [pc, #508]	; (8001b7c <normalState+0x75c>)
 8001980:	6013      	str	r3, [r2, #0]
			time2 = timeGreen;
 8001982:	4b86      	ldr	r3, [pc, #536]	; (8001b9c <normalState+0x77c>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a82      	ldr	r2, [pc, #520]	; (8001b90 <normalState+0x770>)
 8001988:	6013      	str	r3, [r2, #0]

			if(pedestrian_flag == Pedestrian_GREEN)
 800198a:	4b7d      	ldr	r3, [pc, #500]	; (8001b80 <normalState+0x760>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2b10      	cmp	r3, #16
 8001990:	d102      	bne.n	8001998 <normalState+0x578>
				pedestrian_flag = Pedestrian_RED;
 8001992:	4b7b      	ldr	r3, [pc, #492]	; (8001b80 <normalState+0x760>)
 8001994:	220f      	movs	r2, #15
 8001996:	601a      	str	r2, [r3, #0]
		}


		if (timeYellow >= 5 && time1 <= 5)
 8001998:	4b77      	ldr	r3, [pc, #476]	; (8001b78 <normalState+0x758>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2b04      	cmp	r3, #4
 800199e:	dd0a      	ble.n	80019b6 <normalState+0x596>
 80019a0:	4b76      	ldr	r3, [pc, #472]	; (8001b7c <normalState+0x75c>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2b05      	cmp	r3, #5
 80019a6:	dc06      	bgt.n	80019b6 <normalState+0x596>
			buzzerValue = 512 * (5 - time1);
 80019a8:	4b74      	ldr	r3, [pc, #464]	; (8001b7c <normalState+0x75c>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f1c3 0305 	rsb	r3, r3, #5
 80019b0:	025b      	lsls	r3, r3, #9
 80019b2:	4a7c      	ldr	r2, [pc, #496]	; (8001ba4 <normalState+0x784>)
 80019b4:	6013      	str	r3, [r2, #0]

		if(timeYellow < 5)
 80019b6:	4b70      	ldr	r3, [pc, #448]	; (8001b78 <normalState+0x758>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2b04      	cmp	r3, #4
 80019bc:	dc09      	bgt.n	80019d2 <normalState+0x5b2>
			buzzerValue += 256 * (5 - time1);
 80019be:	4b6f      	ldr	r3, [pc, #444]	; (8001b7c <normalState+0x75c>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f1c3 0305 	rsb	r3, r3, #5
 80019c6:	021a      	lsls	r2, r3, #8
 80019c8:	4b76      	ldr	r3, [pc, #472]	; (8001ba4 <normalState+0x784>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4413      	add	r3, r2
 80019ce:	4a75      	ldr	r2, [pc, #468]	; (8001ba4 <normalState+0x784>)
 80019d0:	6013      	str	r3, [r2, #0]


		if(Is_Button_Pressed(1))
 80019d2:	2001      	movs	r0, #1
 80019d4:	f7ff f9bc 	bl	8000d50 <Is_Button_Pressed>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d01a      	beq.n	8001a14 <normalState+0x5f4>
		{
			status = ManRed;
 80019de:	4b6e      	ldr	r3, [pc, #440]	; (8001b98 <normalState+0x778>)
 80019e0:	220a      	movs	r2, #10
 80019e2:	601a      	str	r2, [r3, #0]

			time1 = timeRed;
 80019e4:	4b6e      	ldr	r3, [pc, #440]	; (8001ba0 <normalState+0x780>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a64      	ldr	r2, [pc, #400]	; (8001b7c <normalState+0x75c>)
 80019ea:	6013      	str	r3, [r2, #0]
			time2 = 2;
 80019ec:	4b68      	ldr	r3, [pc, #416]	; (8001b90 <normalState+0x770>)
 80019ee:	2202      	movs	r2, #2
 80019f0:	601a      	str	r2, [r3, #0]

			clearAllLed1();
 80019f2:	f7ff f9df 	bl	8000db4 <clearAllLed1>
			clearAllLed2();
 80019f6:	f7ff f9f1 	bl	8000ddc <clearAllLed2>

			setTimer(1, 100);
 80019fa:	2164      	movs	r1, #100	; 0x64
 80019fc:	2001      	movs	r0, #1
 80019fe:	f000 fddf 	bl	80025c0 <setTimer>
			setTimer(2, 25);
 8001a02:	2119      	movs	r1, #25
 8001a04:	2002      	movs	r0, #2
 8001a06:	f000 fddb 	bl	80025c0 <setTimer>
			setTimer(7,500);
 8001a0a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001a0e:	2007      	movs	r0, #7
 8001a10:	f000 fdd6 	bl	80025c0 <setTimer>
		}

		if(Is_Button_Pressed(0))
 8001a14:	2000      	movs	r0, #0
 8001a16:	f7ff f99b 	bl	8000d50 <Is_Button_Pressed>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	f000 81ef 	beq.w	8001e00 <normalState+0x9e0>
		{
			pedestrian_flag = Pedestrian_GREEN;
 8001a22:	4b57      	ldr	r3, [pc, #348]	; (8001b80 <normalState+0x760>)
 8001a24:	2210      	movs	r2, #16
 8001a26:	601a      	str	r2, [r3, #0]
			if(time1<5) {
 8001a28:	4b54      	ldr	r3, [pc, #336]	; (8001b7c <normalState+0x75c>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2b04      	cmp	r3, #4
 8001a2e:	dc03      	bgt.n	8001a38 <normalState+0x618>
				setTimer(4,1);
 8001a30:	2101      	movs	r1, #1
 8001a32:	2004      	movs	r0, #4
 8001a34:	f000 fdc4 	bl	80025c0 <setTimer>
			}
			setTimer(3, (timeRed + timeGreen) * 100);
 8001a38:	4b59      	ldr	r3, [pc, #356]	; (8001ba0 <normalState+0x780>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	4b57      	ldr	r3, [pc, #348]	; (8001b9c <normalState+0x77c>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4413      	add	r3, r2
 8001a42:	2264      	movs	r2, #100	; 0x64
 8001a44:	fb02 f303 	mul.w	r3, r2, r3
 8001a48:	4619      	mov	r1, r3
 8001a4a:	2003      	movs	r0, #3
 8001a4c:	f000 fdb8 	bl	80025c0 <setTimer>
		}
		break;
 8001a50:	e1d6      	b.n	8001e00 <normalState+0x9e0>

	case ManRed:
		if(isTimerUp(7) == 1)
 8001a52:	2007      	movs	r0, #7
 8001a54:	f000 fd88 	bl	8002568 <isTimerUp>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d117      	bne.n	8001a8e <normalState+0x66e>
		{
			status = RedGreen;
 8001a5e:	4b4e      	ldr	r3, [pc, #312]	; (8001b98 <normalState+0x778>)
 8001a60:	2201      	movs	r2, #1
 8001a62:	601a      	str	r2, [r3, #0]

			setTimer(0, timeGreen * 100);
 8001a64:	4b4d      	ldr	r3, [pc, #308]	; (8001b9c <normalState+0x77c>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2264      	movs	r2, #100	; 0x64
 8001a6a:	fb02 f303 	mul.w	r3, r2, r3
 8001a6e:	4619      	mov	r1, r3
 8001a70:	2000      	movs	r0, #0
 8001a72:	f000 fda5 	bl	80025c0 <setTimer>
			setTimer(1, 1);
 8001a76:	2101      	movs	r1, #1
 8001a78:	2001      	movs	r0, #1
 8001a7a:	f000 fda1 	bl	80025c0 <setTimer>

			time1 = timeRed;
 8001a7e:	4b48      	ldr	r3, [pc, #288]	; (8001ba0 <normalState+0x780>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a3e      	ldr	r2, [pc, #248]	; (8001b7c <normalState+0x75c>)
 8001a84:	6013      	str	r3, [r2, #0]
			time2 = timeGreen;
 8001a86:	4b45      	ldr	r3, [pc, #276]	; (8001b9c <normalState+0x77c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a41      	ldr	r2, [pc, #260]	; (8001b90 <normalState+0x770>)
 8001a8c:	6013      	str	r3, [r2, #0]
		}

		if(isTimerUp(2) == 1)
 8001a8e:	2002      	movs	r0, #2
 8001a90:	f000 fd6a 	bl	8002568 <isTimerUp>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d105      	bne.n	8001aa6 <normalState+0x686>
		{
			setTimer(2, 25);
 8001a9a:	2119      	movs	r1, #25
 8001a9c:	2002      	movs	r0, #2
 8001a9e:	f000 fd8f 	bl	80025c0 <setTimer>
			toggleRed();
 8001aa2:	f7ff fa17 	bl	8000ed4 <toggleRed>
		}
		if(Is_Button_Pressed(2))
 8001aa6:	2002      	movs	r0, #2
 8001aa8:	f7ff f952 	bl	8000d50 <Is_Button_Pressed>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d006      	beq.n	8001ac0 <normalState+0x6a0>
		{
			increase();
 8001ab2:	f7ff fa85 	bl	8000fc0 <increase>
			setTimer(7,500);
 8001ab6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001aba:	2007      	movs	r0, #7
 8001abc:	f000 fd80 	bl	80025c0 <setTimer>
		}

		if(Is_Button_Pressed(3))
 8001ac0:	2003      	movs	r0, #3
 8001ac2:	f7ff f945 	bl	8000d50 <Is_Button_Pressed>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d00d      	beq.n	8001ae8 <normalState+0x6c8>
		{
			balance(time1, timeYellow, timeGreen);
 8001acc:	4b2b      	ldr	r3, [pc, #172]	; (8001b7c <normalState+0x75c>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a29      	ldr	r2, [pc, #164]	; (8001b78 <normalState+0x758>)
 8001ad2:	6811      	ldr	r1, [r2, #0]
 8001ad4:	4a31      	ldr	r2, [pc, #196]	; (8001b9c <normalState+0x77c>)
 8001ad6:	6812      	ldr	r2, [r2, #0]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff fa85 	bl	8000fe8 <balance>
			setTimer(7,500);
 8001ade:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001ae2:	2007      	movs	r0, #7
 8001ae4:	f000 fd6c 	bl	80025c0 <setTimer>
		}

		if(Is_Button_Pressed(1))
 8001ae8:	2001      	movs	r0, #1
 8001aea:	f7ff f931 	bl	8000d50 <Is_Button_Pressed>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d016      	beq.n	8001b22 <normalState+0x702>
		{
			status = ManAmber;
 8001af4:	4b28      	ldr	r3, [pc, #160]	; (8001b98 <normalState+0x778>)
 8001af6:	220b      	movs	r2, #11
 8001af8:	601a      	str	r2, [r3, #0]

			time1 = timeYellow;
 8001afa:	4b1f      	ldr	r3, [pc, #124]	; (8001b78 <normalState+0x758>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a1f      	ldr	r2, [pc, #124]	; (8001b7c <normalState+0x75c>)
 8001b00:	6013      	str	r3, [r2, #0]
			time2 = 3;
 8001b02:	4b23      	ldr	r3, [pc, #140]	; (8001b90 <normalState+0x770>)
 8001b04:	2203      	movs	r2, #3
 8001b06:	601a      	str	r2, [r3, #0]

			clearAllLed1();
 8001b08:	f7ff f954 	bl	8000db4 <clearAllLed1>
			clearAllLed2();
 8001b0c:	f7ff f966 	bl	8000ddc <clearAllLed2>

			setTimer(2, 25);
 8001b10:	2119      	movs	r1, #25
 8001b12:	2002      	movs	r0, #2
 8001b14:	f000 fd54 	bl	80025c0 <setTimer>
			setTimer(7,500);
 8001b18:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001b1c:	2007      	movs	r0, #7
 8001b1e:	f000 fd4f 	bl	80025c0 <setTimer>
		}

		if(isTimerUp(1) == 1)
 8001b22:	2001      	movs	r0, #1
 8001b24:	f000 fd20 	bl	8002568 <isTimerUp>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	f040 816a 	bne.w	8001e04 <normalState+0x9e4>
		{
			setTimer(1, 100);
 8001b30:	2164      	movs	r1, #100	; 0x64
 8001b32:	2001      	movs	r0, #1
 8001b34:	f000 fd44 	bl	80025c0 <setTimer>
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "\r\n!7SEG1: %d#\r\n",time1), 500);
 8001b38:	4b10      	ldr	r3, [pc, #64]	; (8001b7c <normalState+0x75c>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	1d3b      	adds	r3, r7, #4
 8001b3e:	4912      	ldr	r1, [pc, #72]	; (8001b88 <normalState+0x768>)
 8001b40:	4618      	mov	r0, r3
 8001b42:	f003 fdbd 	bl	80056c0 <siprintf>
 8001b46:	4603      	mov	r3, r0
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	1d39      	adds	r1, r7, #4
 8001b4c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001b50:	480e      	ldr	r0, [pc, #56]	; (8001b8c <normalState+0x76c>)
 8001b52:	f002 fee9 	bl	8004928 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "\r\n!7SEG2: %d#\r\n\n\n",time2), 500);
 8001b56:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <normalState+0x770>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	1d3b      	adds	r3, r7, #4
 8001b5c:	490d      	ldr	r1, [pc, #52]	; (8001b94 <normalState+0x774>)
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f003 fdae 	bl	80056c0 <siprintf>
 8001b64:	4603      	mov	r3, r0
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	1d39      	adds	r1, r7, #4
 8001b6a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001b6e:	4807      	ldr	r0, [pc, #28]	; (8001b8c <normalState+0x76c>)
 8001b70:	f002 feda 	bl	8004928 <HAL_UART_Transmit>
		}
		break;
 8001b74:	e146      	b.n	8001e04 <normalState+0x9e4>
 8001b76:	bf00      	nop
 8001b78:	20000028 	.word	0x20000028
 8001b7c:	20000170 	.word	0x20000170
 8001b80:	20000030 	.word	0x20000030
 8001b84:	20000128 	.word	0x20000128
 8001b88:	08005e70 	.word	0x08005e70
 8001b8c:	20000204 	.word	0x20000204
 8001b90:	2000011c 	.word	0x2000011c
 8001b94:	08005e80 	.word	0x08005e80
 8001b98:	20000118 	.word	0x20000118
 8001b9c:	2000002c 	.word	0x2000002c
 8001ba0:	20000024 	.word	0x20000024
 8001ba4:	20000120 	.word	0x20000120

	case ManAmber:
		if(isTimerUp(7) == 1)
 8001ba8:	2007      	movs	r0, #7
 8001baa:	f000 fcdd 	bl	8002568 <isTimerUp>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d117      	bne.n	8001be4 <normalState+0x7c4>
		{
			status = RedGreen;
 8001bb4:	4b98      	ldr	r3, [pc, #608]	; (8001e18 <normalState+0x9f8>)
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	601a      	str	r2, [r3, #0]
			setTimer(0, timeGreen * 100);
 8001bba:	4b98      	ldr	r3, [pc, #608]	; (8001e1c <normalState+0x9fc>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2264      	movs	r2, #100	; 0x64
 8001bc0:	fb02 f303 	mul.w	r3, r2, r3
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	2000      	movs	r0, #0
 8001bc8:	f000 fcfa 	bl	80025c0 <setTimer>
			setTimer(1, 1);
 8001bcc:	2101      	movs	r1, #1
 8001bce:	2001      	movs	r0, #1
 8001bd0:	f000 fcf6 	bl	80025c0 <setTimer>

			time1 = timeRed;
 8001bd4:	4b92      	ldr	r3, [pc, #584]	; (8001e20 <normalState+0xa00>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a92      	ldr	r2, [pc, #584]	; (8001e24 <normalState+0xa04>)
 8001bda:	6013      	str	r3, [r2, #0]
			time2 = timeGreen;
 8001bdc:	4b8f      	ldr	r3, [pc, #572]	; (8001e1c <normalState+0x9fc>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a91      	ldr	r2, [pc, #580]	; (8001e28 <normalState+0xa08>)
 8001be2:	6013      	str	r3, [r2, #0]
		}

		if(isTimerUp(2) == 1)
 8001be4:	2002      	movs	r0, #2
 8001be6:	f000 fcbf 	bl	8002568 <isTimerUp>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d105      	bne.n	8001bfc <normalState+0x7dc>
		{
			setTimer(2, 25);
 8001bf0:	2119      	movs	r1, #25
 8001bf2:	2002      	movs	r0, #2
 8001bf4:	f000 fce4 	bl	80025c0 <setTimer>
			toggleYellow();
 8001bf8:	f7ff f97e 	bl	8000ef8 <toggleYellow>
		}

		if(Is_Button_Pressed(2))
 8001bfc:	2002      	movs	r0, #2
 8001bfe:	f7ff f8a7 	bl	8000d50 <Is_Button_Pressed>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d006      	beq.n	8001c16 <normalState+0x7f6>
		{
			increase();
 8001c08:	f7ff f9da 	bl	8000fc0 <increase>
			setTimer(7,500);
 8001c0c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001c10:	2007      	movs	r0, #7
 8001c12:	f000 fcd5 	bl	80025c0 <setTimer>
		}

		if(Is_Button_Pressed(3))
 8001c16:	2003      	movs	r0, #3
 8001c18:	f7ff f89a 	bl	8000d50 <Is_Button_Pressed>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d00d      	beq.n	8001c3e <normalState+0x81e>
		{
			balance(timeRed, time1, timeGreen);
 8001c22:	4b7f      	ldr	r3, [pc, #508]	; (8001e20 <normalState+0xa00>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a7f      	ldr	r2, [pc, #508]	; (8001e24 <normalState+0xa04>)
 8001c28:	6811      	ldr	r1, [r2, #0]
 8001c2a:	4a7c      	ldr	r2, [pc, #496]	; (8001e1c <normalState+0x9fc>)
 8001c2c:	6812      	ldr	r2, [r2, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff f9da 	bl	8000fe8 <balance>
			setTimer(7,500);
 8001c34:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001c38:	2007      	movs	r0, #7
 8001c3a:	f000 fcc1 	bl	80025c0 <setTimer>
		}

		if(Is_Button_Pressed(1))
 8001c3e:	2001      	movs	r0, #1
 8001c40:	f7ff f886 	bl	8000d50 <Is_Button_Pressed>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d016      	beq.n	8001c78 <normalState+0x858>
		{
			status = ManGreen;
 8001c4a:	4b73      	ldr	r3, [pc, #460]	; (8001e18 <normalState+0x9f8>)
 8001c4c:	220c      	movs	r2, #12
 8001c4e:	601a      	str	r2, [r3, #0]

			time1 = timeGreen;
 8001c50:	4b72      	ldr	r3, [pc, #456]	; (8001e1c <normalState+0x9fc>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a73      	ldr	r2, [pc, #460]	; (8001e24 <normalState+0xa04>)
 8001c56:	6013      	str	r3, [r2, #0]
			time2 = 4;
 8001c58:	4b73      	ldr	r3, [pc, #460]	; (8001e28 <normalState+0xa08>)
 8001c5a:	2204      	movs	r2, #4
 8001c5c:	601a      	str	r2, [r3, #0]

			clearAllLed1();
 8001c5e:	f7ff f8a9 	bl	8000db4 <clearAllLed1>
			clearAllLed2();
 8001c62:	f7ff f8bb 	bl	8000ddc <clearAllLed2>

			setTimer(2, 25);
 8001c66:	2119      	movs	r1, #25
 8001c68:	2002      	movs	r0, #2
 8001c6a:	f000 fca9 	bl	80025c0 <setTimer>
			setTimer(7,500);
 8001c6e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001c72:	2007      	movs	r0, #7
 8001c74:	f000 fca4 	bl	80025c0 <setTimer>
		}

		if(isTimerUp(1) == 1)
 8001c78:	2001      	movs	r0, #1
 8001c7a:	f000 fc75 	bl	8002568 <isTimerUp>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	f040 80c1 	bne.w	8001e08 <normalState+0x9e8>
		{
			setTimer(1, 100);
 8001c86:	2164      	movs	r1, #100	; 0x64
 8001c88:	2001      	movs	r0, #1
 8001c8a:	f000 fc99 	bl	80025c0 <setTimer>
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "\r\n!7SEG1: %d#\r\n",time1), 500);
 8001c8e:	4b65      	ldr	r3, [pc, #404]	; (8001e24 <normalState+0xa04>)
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	1d3b      	adds	r3, r7, #4
 8001c94:	4965      	ldr	r1, [pc, #404]	; (8001e2c <normalState+0xa0c>)
 8001c96:	4618      	mov	r0, r3
 8001c98:	f003 fd12 	bl	80056c0 <siprintf>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	b29a      	uxth	r2, r3
 8001ca0:	1d39      	adds	r1, r7, #4
 8001ca2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001ca6:	4862      	ldr	r0, [pc, #392]	; (8001e30 <normalState+0xa10>)
 8001ca8:	f002 fe3e 	bl	8004928 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "\r\n!7SEG2: %d#\r\n\n\n",time2), 500);
 8001cac:	4b5e      	ldr	r3, [pc, #376]	; (8001e28 <normalState+0xa08>)
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	1d3b      	adds	r3, r7, #4
 8001cb2:	4960      	ldr	r1, [pc, #384]	; (8001e34 <normalState+0xa14>)
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f003 fd03 	bl	80056c0 <siprintf>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	b29a      	uxth	r2, r3
 8001cbe:	1d39      	adds	r1, r7, #4
 8001cc0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001cc4:	485a      	ldr	r0, [pc, #360]	; (8001e30 <normalState+0xa10>)
 8001cc6:	f002 fe2f 	bl	8004928 <HAL_UART_Transmit>
		}
		break;
 8001cca:	e09d      	b.n	8001e08 <normalState+0x9e8>

	case ManGreen:
		if(isTimerUp(7) == 1)
 8001ccc:	2007      	movs	r0, #7
 8001cce:	f000 fc4b 	bl	8002568 <isTimerUp>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d117      	bne.n	8001d08 <normalState+0x8e8>
		{
			status = RedGreen;
 8001cd8:	4b4f      	ldr	r3, [pc, #316]	; (8001e18 <normalState+0x9f8>)
 8001cda:	2201      	movs	r2, #1
 8001cdc:	601a      	str	r2, [r3, #0]

			setTimer(0, timeGreen * 100);
 8001cde:	4b4f      	ldr	r3, [pc, #316]	; (8001e1c <normalState+0x9fc>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2264      	movs	r2, #100	; 0x64
 8001ce4:	fb02 f303 	mul.w	r3, r2, r3
 8001ce8:	4619      	mov	r1, r3
 8001cea:	2000      	movs	r0, #0
 8001cec:	f000 fc68 	bl	80025c0 <setTimer>
			setTimer(1, 1);
 8001cf0:	2101      	movs	r1, #1
 8001cf2:	2001      	movs	r0, #1
 8001cf4:	f000 fc64 	bl	80025c0 <setTimer>

			time1 = timeRed;
 8001cf8:	4b49      	ldr	r3, [pc, #292]	; (8001e20 <normalState+0xa00>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a49      	ldr	r2, [pc, #292]	; (8001e24 <normalState+0xa04>)
 8001cfe:	6013      	str	r3, [r2, #0]
			time2 = timeGreen;
 8001d00:	4b46      	ldr	r3, [pc, #280]	; (8001e1c <normalState+0x9fc>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a48      	ldr	r2, [pc, #288]	; (8001e28 <normalState+0xa08>)
 8001d06:	6013      	str	r3, [r2, #0]
		}

		if(isTimerUp(2) == 1)
 8001d08:	2002      	movs	r0, #2
 8001d0a:	f000 fc2d 	bl	8002568 <isTimerUp>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d105      	bne.n	8001d20 <normalState+0x900>
		{
			setTimer(2, 25);
 8001d14:	2119      	movs	r1, #25
 8001d16:	2002      	movs	r0, #2
 8001d18:	f000 fc52 	bl	80025c0 <setTimer>
			toggleGreen();
 8001d1c:	f7ff f906 	bl	8000f2c <toggleGreen>
		}

		if(Is_Button_Pressed(2))
 8001d20:	2002      	movs	r0, #2
 8001d22:	f7ff f815 	bl	8000d50 <Is_Button_Pressed>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d006      	beq.n	8001d3a <normalState+0x91a>
		{
			increase();
 8001d2c:	f7ff f948 	bl	8000fc0 <increase>
			setTimer(7,500);
 8001d30:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001d34:	2007      	movs	r0, #7
 8001d36:	f000 fc43 	bl	80025c0 <setTimer>
		}

		if(Is_Button_Pressed(3))
 8001d3a:	2003      	movs	r0, #3
 8001d3c:	f7ff f808 	bl	8000d50 <Is_Button_Pressed>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d00d      	beq.n	8001d62 <normalState+0x942>
		{
			balance(timeRed, timeYellow, time1);
 8001d46:	4b36      	ldr	r3, [pc, #216]	; (8001e20 <normalState+0xa00>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a3b      	ldr	r2, [pc, #236]	; (8001e38 <normalState+0xa18>)
 8001d4c:	6811      	ldr	r1, [r2, #0]
 8001d4e:	4a35      	ldr	r2, [pc, #212]	; (8001e24 <normalState+0xa04>)
 8001d50:	6812      	ldr	r2, [r2, #0]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff f948 	bl	8000fe8 <balance>
			setTimer(7,500);
 8001d58:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001d5c:	2007      	movs	r0, #7
 8001d5e:	f000 fc2f 	bl	80025c0 <setTimer>
		}

		if(Is_Button_Pressed(1))
 8001d62:	2001      	movs	r0, #1
 8001d64:	f7fe fff4 	bl	8000d50 <Is_Button_Pressed>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d017      	beq.n	8001d9e <normalState+0x97e>
		{
			status = RedGreen;
 8001d6e:	4b2a      	ldr	r3, [pc, #168]	; (8001e18 <normalState+0x9f8>)
 8001d70:	2201      	movs	r2, #1
 8001d72:	601a      	str	r2, [r3, #0]

			setTimer(0, timeGreen * 100);
 8001d74:	4b29      	ldr	r3, [pc, #164]	; (8001e1c <normalState+0x9fc>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2264      	movs	r2, #100	; 0x64
 8001d7a:	fb02 f303 	mul.w	r3, r2, r3
 8001d7e:	4619      	mov	r1, r3
 8001d80:	2000      	movs	r0, #0
 8001d82:	f000 fc1d 	bl	80025c0 <setTimer>
			setTimer(1, 1);
 8001d86:	2101      	movs	r1, #1
 8001d88:	2001      	movs	r0, #1
 8001d8a:	f000 fc19 	bl	80025c0 <setTimer>

			time1 = timeRed;
 8001d8e:	4b24      	ldr	r3, [pc, #144]	; (8001e20 <normalState+0xa00>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a24      	ldr	r2, [pc, #144]	; (8001e24 <normalState+0xa04>)
 8001d94:	6013      	str	r3, [r2, #0]
			time2 = timeGreen;
 8001d96:	4b21      	ldr	r3, [pc, #132]	; (8001e1c <normalState+0x9fc>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a23      	ldr	r2, [pc, #140]	; (8001e28 <normalState+0xa08>)
 8001d9c:	6013      	str	r3, [r2, #0]
		}

		if(isTimerUp(1) == 1)
 8001d9e:	2001      	movs	r0, #1
 8001da0:	f000 fbe2 	bl	8002568 <isTimerUp>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d130      	bne.n	8001e0c <normalState+0x9ec>
		{
			setTimer(1, 100);
 8001daa:	2164      	movs	r1, #100	; 0x64
 8001dac:	2001      	movs	r0, #1
 8001dae:	f000 fc07 	bl	80025c0 <setTimer>
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "\r\n!7SEG1: %d#\r\n",time1), 500);
 8001db2:	4b1c      	ldr	r3, [pc, #112]	; (8001e24 <normalState+0xa04>)
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	1d3b      	adds	r3, r7, #4
 8001db8:	491c      	ldr	r1, [pc, #112]	; (8001e2c <normalState+0xa0c>)
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f003 fc80 	bl	80056c0 <siprintf>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	1d39      	adds	r1, r7, #4
 8001dc6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001dca:	4819      	ldr	r0, [pc, #100]	; (8001e30 <normalState+0xa10>)
 8001dcc:	f002 fdac 	bl	8004928 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "\r\n!7SEG2: %d#\r\n\n\n",time2), 500);
 8001dd0:	4b15      	ldr	r3, [pc, #84]	; (8001e28 <normalState+0xa08>)
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	1d3b      	adds	r3, r7, #4
 8001dd6:	4917      	ldr	r1, [pc, #92]	; (8001e34 <normalState+0xa14>)
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f003 fc71 	bl	80056c0 <siprintf>
 8001dde:	4603      	mov	r3, r0
 8001de0:	b29a      	uxth	r2, r3
 8001de2:	1d39      	adds	r1, r7, #4
 8001de4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001de8:	4811      	ldr	r0, [pc, #68]	; (8001e30 <normalState+0xa10>)
 8001dea:	f002 fd9d 	bl	8004928 <HAL_UART_Transmit>
		}
		break;
 8001dee:	e00d      	b.n	8001e0c <normalState+0x9ec>

	default:
		break;
 8001df0:	bf00      	nop
 8001df2:	e00c      	b.n	8001e0e <normalState+0x9ee>
		break;
 8001df4:	bf00      	nop
 8001df6:	e00a      	b.n	8001e0e <normalState+0x9ee>
		break;
 8001df8:	bf00      	nop
 8001dfa:	e008      	b.n	8001e0e <normalState+0x9ee>
		break;
 8001dfc:	bf00      	nop
 8001dfe:	e006      	b.n	8001e0e <normalState+0x9ee>
		break;
 8001e00:	bf00      	nop
 8001e02:	e004      	b.n	8001e0e <normalState+0x9ee>
		break;
 8001e04:	bf00      	nop
 8001e06:	e002      	b.n	8001e0e <normalState+0x9ee>
		break;
 8001e08:	bf00      	nop
 8001e0a:	e000      	b.n	8001e0e <normalState+0x9ee>
		break;
 8001e0c:	bf00      	nop
	}
}
 8001e0e:	bf00      	nop
 8001e10:	3738      	adds	r7, #56	; 0x38
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	20000118 	.word	0x20000118
 8001e1c:	2000002c 	.word	0x2000002c
 8001e20:	20000024 	.word	0x20000024
 8001e24:	20000170 	.word	0x20000170
 8001e28:	2000011c 	.word	0x2000011c
 8001e2c:	08005e70 	.word	0x08005e70
 8001e30:	20000204 	.word	0x20000204
 8001e34:	08005e80 	.word	0x08005e80
 8001e38:	20000028 	.word	0x20000028

08001e3c <fsm_pedestrian>:
 */

#include "global.h"
char str[50];
void fsm_pedestrian(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
	switch(pedestrian_flag)
 8001e40:	4b5a      	ldr	r3, [pc, #360]	; (8001fac <fsm_pedestrian+0x170>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2b10      	cmp	r3, #16
 8001e46:	d036      	beq.n	8001eb6 <fsm_pedestrian+0x7a>
 8001e48:	2b10      	cmp	r3, #16
 8001e4a:	f300 80a9 	bgt.w	8001fa0 <fsm_pedestrian+0x164>
 8001e4e:	2b0e      	cmp	r3, #14
 8001e50:	d002      	beq.n	8001e58 <fsm_pedestrian+0x1c>
 8001e52:	2b0f      	cmp	r3, #15
 8001e54:	d013      	beq.n	8001e7e <fsm_pedestrian+0x42>
					buzzer(0);
			}
			break;

		default:
			break;
 8001e56:	e0a3      	b.n	8001fa0 <fsm_pedestrian+0x164>
			buzzer(0);
 8001e58:	2000      	movs	r0, #0
 8001e5a:	f7fe ff9b 	bl	8000d94 <buzzer>
			frequency = -1;
 8001e5e:	4b54      	ldr	r3, [pc, #336]	; (8001fb0 <fsm_pedestrian+0x174>)
 8001e60:	f04f 32ff 	mov.w	r2, #4294967295
 8001e64:	601a      	str	r2, [r3, #0]
			frequency1 = 0;
 8001e66:	4b53      	ldr	r3, [pc, #332]	; (8001fb4 <fsm_pedestrian+0x178>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
			flag = 0;
 8001e6c:	4b52      	ldr	r3, [pc, #328]	; (8001fb8 <fsm_pedestrian+0x17c>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	601a      	str	r2, [r3, #0]
			setFlag(4);
 8001e72:	2004      	movs	r0, #4
 8001e74:	f000 fb8c 	bl	8002590 <setFlag>
			clearPedestrian();
 8001e78:	f7ff f866 	bl	8000f48 <clearPedestrian>
			break;
 8001e7c:	e093      	b.n	8001fa6 <fsm_pedestrian+0x16a>
			buzzer(0);
 8001e7e:	2000      	movs	r0, #0
 8001e80:	f7fe ff88 	bl	8000d94 <buzzer>
			frequency = -1;
 8001e84:	4b4a      	ldr	r3, [pc, #296]	; (8001fb0 <fsm_pedestrian+0x174>)
 8001e86:	f04f 32ff 	mov.w	r2, #4294967295
 8001e8a:	601a      	str	r2, [r3, #0]
			frequency1 = 0;
 8001e8c:	4b49      	ldr	r3, [pc, #292]	; (8001fb4 <fsm_pedestrian+0x178>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	601a      	str	r2, [r3, #0]
			flag = 0;
 8001e92:	4b49      	ldr	r3, [pc, #292]	; (8001fb8 <fsm_pedestrian+0x17c>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
			setFlag(4);
 8001e98:	2004      	movs	r0, #4
 8001e9a:	f000 fb79 	bl	8002590 <setFlag>
			if(isTimerUp(3) == 1)
 8001e9e:	2003      	movs	r0, #3
 8001ea0:	f000 fb62 	bl	8002568 <isTimerUp>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d102      	bne.n	8001eb0 <fsm_pedestrian+0x74>
				pedestrian_flag = Pedestrian_INIT;
 8001eaa:	4b40      	ldr	r3, [pc, #256]	; (8001fac <fsm_pedestrian+0x170>)
 8001eac:	220e      	movs	r2, #14
 8001eae:	601a      	str	r2, [r3, #0]
			displayPedestrianRed();
 8001eb0:	f7ff f85e 	bl	8000f70 <displayPedestrianRed>
			break;
 8001eb4:	e077      	b.n	8001fa6 <fsm_pedestrian+0x16a>
			if(isTimerUp(3) == 1)
 8001eb6:	2003      	movs	r0, #3
 8001eb8:	f000 fb56 	bl	8002568 <isTimerUp>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d102      	bne.n	8001ec8 <fsm_pedestrian+0x8c>
				pedestrian_flag = Pedestrian_INIT;
 8001ec2:	4b3a      	ldr	r3, [pc, #232]	; (8001fac <fsm_pedestrian+0x170>)
 8001ec4:	220e      	movs	r2, #14
 8001ec6:	601a      	str	r2, [r3, #0]
			displayPedestrianGreen();
 8001ec8:	f7ff f866 	bl	8000f98 <displayPedestrianGreen>
			if(isTimerUp(4) == 1)
 8001ecc:	2004      	movs	r0, #4
 8001ece:	f000 fb4b 	bl	8002568 <isTimerUp>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d127      	bne.n	8001f28 <fsm_pedestrian+0xec>
				HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "\r\nfromtimerUp4 %d#\r\n",frequency), 500);
 8001ed8:	4b35      	ldr	r3, [pc, #212]	; (8001fb0 <fsm_pedestrian+0x174>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	461a      	mov	r2, r3
 8001ede:	4937      	ldr	r1, [pc, #220]	; (8001fbc <fsm_pedestrian+0x180>)
 8001ee0:	4837      	ldr	r0, [pc, #220]	; (8001fc0 <fsm_pedestrian+0x184>)
 8001ee2:	f003 fbed 	bl	80056c0 <siprintf>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001eee:	4934      	ldr	r1, [pc, #208]	; (8001fc0 <fsm_pedestrian+0x184>)
 8001ef0:	4834      	ldr	r0, [pc, #208]	; (8001fc4 <fsm_pedestrian+0x188>)
 8001ef2:	f002 fd19 	bl	8004928 <HAL_UART_Transmit>
				frequency1 = 1;
 8001ef6:	4b2f      	ldr	r3, [pc, #188]	; (8001fb4 <fsm_pedestrian+0x178>)
 8001ef8:	2201      	movs	r2, #1
 8001efa:	601a      	str	r2, [r3, #0]
				frequency += 1;
 8001efc:	4b2c      	ldr	r3, [pc, #176]	; (8001fb0 <fsm_pedestrian+0x174>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	3301      	adds	r3, #1
 8001f02:	4a2b      	ldr	r2, [pc, #172]	; (8001fb0 <fsm_pedestrian+0x174>)
 8001f04:	6013      	str	r3, [r2, #0]
				setTimer(4, 50);
 8001f06:	2132      	movs	r1, #50	; 0x32
 8001f08:	2004      	movs	r0, #4
 8001f0a:	f000 fb59 	bl	80025c0 <setTimer>
				setTimer(5, freq[frequency]);
 8001f0e:	4b28      	ldr	r3, [pc, #160]	; (8001fb0 <fsm_pedestrian+0x174>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a2d      	ldr	r2, [pc, #180]	; (8001fc8 <fsm_pedestrian+0x18c>)
 8001f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f18:	4619      	mov	r1, r3
 8001f1a:	2005      	movs	r0, #5
 8001f1c:	f000 fb50 	bl	80025c0 <setTimer>
				setTimer(6, 5);
 8001f20:	2105      	movs	r1, #5
 8001f22:	2006      	movs	r0, #6
 8001f24:	f000 fb4c 	bl	80025c0 <setTimer>
			if(frequency1 == 1)
 8001f28:	4b22      	ldr	r3, [pc, #136]	; (8001fb4 <fsm_pedestrian+0x178>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d11c      	bne.n	8001f6a <fsm_pedestrian+0x12e>
				if(isTimerUp(6) == 1)
 8001f30:	2006      	movs	r0, #6
 8001f32:	f000 fb19 	bl	8002568 <isTimerUp>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d111      	bne.n	8001f60 <fsm_pedestrian+0x124>
					buzzer(0);
 8001f3c:	2000      	movs	r0, #0
 8001f3e:	f7fe ff29 	bl	8000d94 <buzzer>
					setTimer(5, freq[frequency]);
 8001f42:	4b1b      	ldr	r3, [pc, #108]	; (8001fb0 <fsm_pedestrian+0x174>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a20      	ldr	r2, [pc, #128]	; (8001fc8 <fsm_pedestrian+0x18c>)
 8001f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	2005      	movs	r0, #5
 8001f50:	f000 fb36 	bl	80025c0 <setTimer>
					frequency1++;
 8001f54:	4b17      	ldr	r3, [pc, #92]	; (8001fb4 <fsm_pedestrian+0x178>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	4a16      	ldr	r2, [pc, #88]	; (8001fb4 <fsm_pedestrian+0x178>)
 8001f5c:	6013      	str	r3, [r2, #0]
 8001f5e:	e004      	b.n	8001f6a <fsm_pedestrian+0x12e>
					buzzer(buzzerValue);
 8001f60:	4b1a      	ldr	r3, [pc, #104]	; (8001fcc <fsm_pedestrian+0x190>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7fe ff15 	bl	8000d94 <buzzer>
			if(frequency1 == 2)
 8001f6a:	4b12      	ldr	r3, [pc, #72]	; (8001fb4 <fsm_pedestrian+0x178>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d118      	bne.n	8001fa4 <fsm_pedestrian+0x168>
				if(isTimerUp(5) == 1)
 8001f72:	2005      	movs	r0, #5
 8001f74:	f000 faf8 	bl	8002568 <isTimerUp>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d10c      	bne.n	8001f98 <fsm_pedestrian+0x15c>
					buzzer(buzzerValue);
 8001f7e:	4b13      	ldr	r3, [pc, #76]	; (8001fcc <fsm_pedestrian+0x190>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7fe ff06 	bl	8000d94 <buzzer>
					setTimer(6, 5);
 8001f88:	2105      	movs	r1, #5
 8001f8a:	2006      	movs	r0, #6
 8001f8c:	f000 fb18 	bl	80025c0 <setTimer>
					frequency1 = 1;
 8001f90:	4b08      	ldr	r3, [pc, #32]	; (8001fb4 <fsm_pedestrian+0x178>)
 8001f92:	2201      	movs	r2, #1
 8001f94:	601a      	str	r2, [r3, #0]
			break;
 8001f96:	e005      	b.n	8001fa4 <fsm_pedestrian+0x168>
					buzzer(0);
 8001f98:	2000      	movs	r0, #0
 8001f9a:	f7fe fefb 	bl	8000d94 <buzzer>
			break;
 8001f9e:	e001      	b.n	8001fa4 <fsm_pedestrian+0x168>
			break;
 8001fa0:	bf00      	nop
 8001fa2:	e000      	b.n	8001fa6 <fsm_pedestrian+0x16a>
			break;
 8001fa4:	bf00      	nop
	}
}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	20000030 	.word	0x20000030
 8001fb0:	20000034 	.word	0x20000034
 8001fb4:	20000124 	.word	0x20000124
 8001fb8:	20000128 	.word	0x20000128
 8001fbc:	08005e94 	.word	0x08005e94
 8001fc0:	2000013c 	.word	0x2000013c
 8001fc4:	20000204 	.word	0x20000204
 8001fc8:	20000038 	.word	0x20000038
 8001fcc:	20000120 	.word	0x20000120

08001fd0 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
	timerRun();
 8001fd8:	f000 fb0a 	bl	80025f0 <timerRun>
	SCH_Update();
 8001fdc:	f000 fa7c 	bl	80024d8 <SCH_Update>
	Button_Reading();
 8001fe0:	f7fe fe20 	bl	8000c24 <Button_Reading>
}
 8001fe4:	bf00      	nop
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ff0:	f000 fccc 	bl	800298c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ff4:	f000 f824 	bl	8002040 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ff8:	f000 f950 	bl	800229c <MX_GPIO_Init>
  MX_TIM3_Init();
 8001ffc:	f000 f8ae 	bl	800215c <MX_TIM3_Init>
  MX_TIM2_Init();
 8002000:	f000 f860 	bl	80020c4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8002004:	f000 f920 	bl	8002248 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

 HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002008:	2100      	movs	r1, #0
 800200a:	4809      	ldr	r0, [pc, #36]	; (8002030 <main+0x44>)
 800200c:	f001 fdd0 	bl	8003bb0 <HAL_TIM_PWM_Start>
 HAL_TIM_Base_Start_IT(&htim2);
 8002010:	4808      	ldr	r0, [pc, #32]	; (8002034 <main+0x48>)
 8002012:	f001 fd23 	bl	8003a5c <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

// SCH_Add_Task(timerRun, 0, 1);
 SCH_Add_Task(normalState, 1, 1);
 8002016:	2201      	movs	r2, #1
 8002018:	2101      	movs	r1, #1
 800201a:	4807      	ldr	r0, [pc, #28]	; (8002038 <main+0x4c>)
 800201c:	f000 fa3e 	bl	800249c <SCH_Add_Task>
 SCH_Add_Task(fsm_pedestrian, 1, 1);
 8002020:	2201      	movs	r2, #1
 8002022:	2101      	movs	r1, #1
 8002024:	4805      	ldr	r0, [pc, #20]	; (800203c <main+0x50>)
 8002026:	f000 fa39 	bl	800249c <SCH_Add_Task>

  while (1)
  {
    /* USER CODE END WHILE */
	  SCH_Dispatch_Tasks();
 800202a:	f000 fa71 	bl	8002510 <SCH_Dispatch_Tasks>
 800202e:	e7fc      	b.n	800202a <main+0x3e>
 8002030:	20000174 	.word	0x20000174
 8002034:	200001bc 	.word	0x200001bc
 8002038:	08001421 	.word	0x08001421
 800203c:	08001e3d 	.word	0x08001e3d

08002040 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b090      	sub	sp, #64	; 0x40
 8002044:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002046:	f107 0318 	add.w	r3, r7, #24
 800204a:	2228      	movs	r2, #40	; 0x28
 800204c:	2100      	movs	r1, #0
 800204e:	4618      	mov	r0, r3
 8002050:	f003 fa78 	bl	8005544 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002054:	1d3b      	adds	r3, r7, #4
 8002056:	2200      	movs	r2, #0
 8002058:	601a      	str	r2, [r3, #0]
 800205a:	605a      	str	r2, [r3, #4]
 800205c:	609a      	str	r2, [r3, #8]
 800205e:	60da      	str	r2, [r3, #12]
 8002060:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002062:	2302      	movs	r3, #2
 8002064:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002066:	2301      	movs	r3, #1
 8002068:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800206a:	2310      	movs	r3, #16
 800206c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800206e:	2302      	movs	r3, #2
 8002070:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002072:	2300      	movs	r3, #0
 8002074:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002076:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800207a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800207c:	f107 0318 	add.w	r3, r7, #24
 8002080:	4618      	mov	r0, r3
 8002082:	f001 f88d 	bl	80031a0 <HAL_RCC_OscConfig>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800208c:	f000 f974 	bl	8002378 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002090:	230f      	movs	r3, #15
 8002092:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002094:	2302      	movs	r3, #2
 8002096:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002098:	2300      	movs	r3, #0
 800209a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800209c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020a2:	2300      	movs	r3, #0
 80020a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80020a6:	1d3b      	adds	r3, r7, #4
 80020a8:	2102      	movs	r1, #2
 80020aa:	4618      	mov	r0, r3
 80020ac:	f001 faf8 	bl	80036a0 <HAL_RCC_ClockConfig>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80020b6:	f000 f95f 	bl	8002378 <Error_Handler>
  }
}
 80020ba:	bf00      	nop
 80020bc:	3740      	adds	r7, #64	; 0x40
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
	...

080020c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020ca:	f107 0308 	add.w	r3, r7, #8
 80020ce:	2200      	movs	r2, #0
 80020d0:	601a      	str	r2, [r3, #0]
 80020d2:	605a      	str	r2, [r3, #4]
 80020d4:	609a      	str	r2, [r3, #8]
 80020d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020d8:	463b      	mov	r3, r7
 80020da:	2200      	movs	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80020e0:	4b1d      	ldr	r3, [pc, #116]	; (8002158 <MX_TIM2_Init+0x94>)
 80020e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6399;
 80020e8:	4b1b      	ldr	r3, [pc, #108]	; (8002158 <MX_TIM2_Init+0x94>)
 80020ea:	f641 02ff 	movw	r2, #6399	; 0x18ff
 80020ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020f0:	4b19      	ldr	r3, [pc, #100]	; (8002158 <MX_TIM2_Init+0x94>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 80020f6:	4b18      	ldr	r3, [pc, #96]	; (8002158 <MX_TIM2_Init+0x94>)
 80020f8:	2263      	movs	r2, #99	; 0x63
 80020fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020fc:	4b16      	ldr	r3, [pc, #88]	; (8002158 <MX_TIM2_Init+0x94>)
 80020fe:	2200      	movs	r2, #0
 8002100:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002102:	4b15      	ldr	r3, [pc, #84]	; (8002158 <MX_TIM2_Init+0x94>)
 8002104:	2200      	movs	r2, #0
 8002106:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002108:	4813      	ldr	r0, [pc, #76]	; (8002158 <MX_TIM2_Init+0x94>)
 800210a:	f001 fc57 	bl	80039bc <HAL_TIM_Base_Init>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002114:	f000 f930 	bl	8002378 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002118:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800211c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800211e:	f107 0308 	add.w	r3, r7, #8
 8002122:	4619      	mov	r1, r3
 8002124:	480c      	ldr	r0, [pc, #48]	; (8002158 <MX_TIM2_Init+0x94>)
 8002126:	f001 ffaf 	bl	8004088 <HAL_TIM_ConfigClockSource>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002130:	f000 f922 	bl	8002378 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002134:	2300      	movs	r3, #0
 8002136:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002138:	2300      	movs	r3, #0
 800213a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800213c:	463b      	mov	r3, r7
 800213e:	4619      	mov	r1, r3
 8002140:	4805      	ldr	r0, [pc, #20]	; (8002158 <MX_TIM2_Init+0x94>)
 8002142:	f002 fb31 	bl	80047a8 <HAL_TIMEx_MasterConfigSynchronization>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800214c:	f000 f914 	bl	8002378 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002150:	bf00      	nop
 8002152:	3718      	adds	r7, #24
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	200001bc 	.word	0x200001bc

0800215c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b08e      	sub	sp, #56	; 0x38
 8002160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002162:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002166:	2200      	movs	r2, #0
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	605a      	str	r2, [r3, #4]
 800216c:	609a      	str	r2, [r3, #8]
 800216e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002170:	f107 0320 	add.w	r3, r7, #32
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800217a:	1d3b      	adds	r3, r7, #4
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	605a      	str	r2, [r3, #4]
 8002182:	609a      	str	r2, [r3, #8]
 8002184:	60da      	str	r2, [r3, #12]
 8002186:	611a      	str	r2, [r3, #16]
 8002188:	615a      	str	r2, [r3, #20]
 800218a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800218c:	4b2c      	ldr	r3, [pc, #176]	; (8002240 <MX_TIM3_Init+0xe4>)
 800218e:	4a2d      	ldr	r2, [pc, #180]	; (8002244 <MX_TIM3_Init+0xe8>)
 8002190:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8002192:	4b2b      	ldr	r3, [pc, #172]	; (8002240 <MX_TIM3_Init+0xe4>)
 8002194:	223f      	movs	r2, #63	; 0x3f
 8002196:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002198:	4b29      	ldr	r3, [pc, #164]	; (8002240 <MX_TIM3_Init+0xe4>)
 800219a:	2200      	movs	r2, #0
 800219c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800219e:	4b28      	ldr	r3, [pc, #160]	; (8002240 <MX_TIM3_Init+0xe4>)
 80021a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80021a4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021a6:	4b26      	ldr	r3, [pc, #152]	; (8002240 <MX_TIM3_Init+0xe4>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021ac:	4b24      	ldr	r3, [pc, #144]	; (8002240 <MX_TIM3_Init+0xe4>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80021b2:	4823      	ldr	r0, [pc, #140]	; (8002240 <MX_TIM3_Init+0xe4>)
 80021b4:	f001 fc02 	bl	80039bc <HAL_TIM_Base_Init>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80021be:	f000 f8db 	bl	8002378 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021c6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80021c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021cc:	4619      	mov	r1, r3
 80021ce:	481c      	ldr	r0, [pc, #112]	; (8002240 <MX_TIM3_Init+0xe4>)
 80021d0:	f001 ff5a 	bl	8004088 <HAL_TIM_ConfigClockSource>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80021da:	f000 f8cd 	bl	8002378 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80021de:	4818      	ldr	r0, [pc, #96]	; (8002240 <MX_TIM3_Init+0xe4>)
 80021e0:	f001 fc8e 	bl	8003b00 <HAL_TIM_PWM_Init>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80021ea:	f000 f8c5 	bl	8002378 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021ee:	2300      	movs	r3, #0
 80021f0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021f2:	2300      	movs	r3, #0
 80021f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021f6:	f107 0320 	add.w	r3, r7, #32
 80021fa:	4619      	mov	r1, r3
 80021fc:	4810      	ldr	r0, [pc, #64]	; (8002240 <MX_TIM3_Init+0xe4>)
 80021fe:	f002 fad3 	bl	80047a8 <HAL_TIMEx_MasterConfigSynchronization>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002208:	f000 f8b6 	bl	8002378 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800220c:	2360      	movs	r3, #96	; 0x60
 800220e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002210:	2300      	movs	r3, #0
 8002212:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002214:	2300      	movs	r3, #0
 8002216:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002218:	2300      	movs	r3, #0
 800221a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800221c:	1d3b      	adds	r3, r7, #4
 800221e:	2200      	movs	r2, #0
 8002220:	4619      	mov	r1, r3
 8002222:	4807      	ldr	r0, [pc, #28]	; (8002240 <MX_TIM3_Init+0xe4>)
 8002224:	f001 fe6e 	bl	8003f04 <HAL_TIM_PWM_ConfigChannel>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800222e:	f000 f8a3 	bl	8002378 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002232:	4803      	ldr	r0, [pc, #12]	; (8002240 <MX_TIM3_Init+0xe4>)
 8002234:	f000 fa7e 	bl	8002734 <HAL_TIM_MspPostInit>

}
 8002238:	bf00      	nop
 800223a:	3738      	adds	r7, #56	; 0x38
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	20000174 	.word	0x20000174
 8002244:	40000400 	.word	0x40000400

08002248 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800224c:	4b11      	ldr	r3, [pc, #68]	; (8002294 <MX_USART2_UART_Init+0x4c>)
 800224e:	4a12      	ldr	r2, [pc, #72]	; (8002298 <MX_USART2_UART_Init+0x50>)
 8002250:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002252:	4b10      	ldr	r3, [pc, #64]	; (8002294 <MX_USART2_UART_Init+0x4c>)
 8002254:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002258:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800225a:	4b0e      	ldr	r3, [pc, #56]	; (8002294 <MX_USART2_UART_Init+0x4c>)
 800225c:	2200      	movs	r2, #0
 800225e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002260:	4b0c      	ldr	r3, [pc, #48]	; (8002294 <MX_USART2_UART_Init+0x4c>)
 8002262:	2200      	movs	r2, #0
 8002264:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002266:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <MX_USART2_UART_Init+0x4c>)
 8002268:	2200      	movs	r2, #0
 800226a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800226c:	4b09      	ldr	r3, [pc, #36]	; (8002294 <MX_USART2_UART_Init+0x4c>)
 800226e:	220c      	movs	r2, #12
 8002270:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002272:	4b08      	ldr	r3, [pc, #32]	; (8002294 <MX_USART2_UART_Init+0x4c>)
 8002274:	2200      	movs	r2, #0
 8002276:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002278:	4b06      	ldr	r3, [pc, #24]	; (8002294 <MX_USART2_UART_Init+0x4c>)
 800227a:	2200      	movs	r2, #0
 800227c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800227e:	4805      	ldr	r0, [pc, #20]	; (8002294 <MX_USART2_UART_Init+0x4c>)
 8002280:	f002 fb02 	bl	8004888 <HAL_UART_Init>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800228a:	f000 f875 	bl	8002378 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800228e:	bf00      	nop
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	20000204 	.word	0x20000204
 8002298:	40004400 	.word	0x40004400

0800229c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a2:	f107 0308 	add.w	r3, r7, #8
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	605a      	str	r2, [r3, #4]
 80022ac:	609a      	str	r2, [r3, #8]
 80022ae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b0:	4b2e      	ldr	r3, [pc, #184]	; (800236c <MX_GPIO_Init+0xd0>)
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	4a2d      	ldr	r2, [pc, #180]	; (800236c <MX_GPIO_Init+0xd0>)
 80022b6:	f043 0304 	orr.w	r3, r3, #4
 80022ba:	6193      	str	r3, [r2, #24]
 80022bc:	4b2b      	ldr	r3, [pc, #172]	; (800236c <MX_GPIO_Init+0xd0>)
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	607b      	str	r3, [r7, #4]
 80022c6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022c8:	4b28      	ldr	r3, [pc, #160]	; (800236c <MX_GPIO_Init+0xd0>)
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	4a27      	ldr	r2, [pc, #156]	; (800236c <MX_GPIO_Init+0xd0>)
 80022ce:	f043 0308 	orr.w	r3, r3, #8
 80022d2:	6193      	str	r3, [r2, #24]
 80022d4:	4b25      	ldr	r3, [pc, #148]	; (800236c <MX_GPIO_Init+0xd0>)
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	f003 0308 	and.w	r3, r3, #8
 80022dc:	603b      	str	r3, [r7, #0]
 80022de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 80022e0:	2200      	movs	r2, #0
 80022e2:	f44f 6187 	mov.w	r1, #1080	; 0x438
 80022e6:	4822      	ldr	r0, [pc, #136]	; (8002370 <MX_GPIO_Init+0xd4>)
 80022e8:	f000 ff0d 	bl	8003106 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_Pin|D2_Pin, GPIO_PIN_RESET);
 80022ec:	2200      	movs	r2, #0
 80022ee:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80022f2:	4820      	ldr	r0, [pc, #128]	; (8002374 <MX_GPIO_Init+0xd8>)
 80022f4:	f000 ff07 	bl	8003106 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin;
 80022f8:	2313      	movs	r3, #19
 80022fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022fc:	2300      	movs	r3, #0
 80022fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002300:	2300      	movs	r3, #0
 8002302:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002304:	f107 0308 	add.w	r3, r7, #8
 8002308:	4619      	mov	r1, r3
 800230a:	481a      	ldr	r0, [pc, #104]	; (8002374 <MX_GPIO_Init+0xd8>)
 800230c:	f000 fd60 	bl	8002dd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : A3_Pin */
  GPIO_InitStruct.Pin = A3_Pin;
 8002310:	2301      	movs	r3, #1
 8002312:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002314:	2300      	movs	r3, #0
 8002316:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002318:	2300      	movs	r3, #0
 800231a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(A3_GPIO_Port, &GPIO_InitStruct);
 800231c:	f107 0308 	add.w	r3, r7, #8
 8002320:	4619      	mov	r1, r3
 8002322:	4813      	ldr	r0, [pc, #76]	; (8002370 <MX_GPIO_Init+0xd4>)
 8002324:	f000 fd54 	bl	8002dd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin;
 8002328:	f44f 6387 	mov.w	r3, #1080	; 0x438
 800232c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800232e:	2301      	movs	r3, #1
 8002330:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002332:	2300      	movs	r3, #0
 8002334:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002336:	2302      	movs	r3, #2
 8002338:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800233a:	f107 0308 	add.w	r3, r7, #8
 800233e:	4619      	mov	r1, r3
 8002340:	480b      	ldr	r0, [pc, #44]	; (8002370 <MX_GPIO_Init+0xd4>)
 8002342:	f000 fd45 	bl	8002dd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D2_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D2_Pin;
 8002346:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800234a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800234c:	2301      	movs	r3, #1
 800234e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002350:	2300      	movs	r3, #0
 8002352:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002354:	2302      	movs	r3, #2
 8002356:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002358:	f107 0308 	add.w	r3, r7, #8
 800235c:	4619      	mov	r1, r3
 800235e:	4805      	ldr	r0, [pc, #20]	; (8002374 <MX_GPIO_Init+0xd8>)
 8002360:	f000 fd36 	bl	8002dd0 <HAL_GPIO_Init>

}
 8002364:	bf00      	nop
 8002366:	3718      	adds	r7, #24
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40021000 	.word	0x40021000
 8002370:	40010c00 	.word	0x40010c00
 8002374:	40010800 	.word	0x40010800

08002378 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800237c:	b672      	cpsid	i
}
 800237e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002380:	e7fe      	b.n	8002380 <Error_Handler+0x8>
	...

08002384 <AddNode>:
{
	head = NULL;
}

void AddNode(sTask NewTask)
{
 8002384:	b590      	push	{r4, r7, lr}
 8002386:	b087      	sub	sp, #28
 8002388:	af00      	add	r7, sp, #0
 800238a:	463c      	mov	r4, r7
 800238c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	struct Node* NewNode = (struct Node*)malloc(sizeof(struct Node));
 8002390:	2014      	movs	r0, #20
 8002392:	f003 f8c7 	bl	8005524 <malloc>
 8002396:	4603      	mov	r3, r0
 8002398:	613b      	str	r3, [r7, #16]
	NewNode -> data.pTask = NewTask.pTask;
 800239a:	683a      	ldr	r2, [r7, #0]
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	601a      	str	r2, [r3, #0]
	NewNode -> data.Delay = NewTask.Delay;
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	605a      	str	r2, [r3, #4]
	NewNode -> data.Period = NewTask.Period;
 80023a6:	68ba      	ldr	r2, [r7, #8]
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	609a      	str	r2, [r3, #8]
	NewNode -> data.RunMe = NewTask.RunMe;
 80023ac:	7b3a      	ldrb	r2, [r7, #12]
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	731a      	strb	r2, [r3, #12]
	NewNode -> next = NULL;
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	2200      	movs	r2, #0
 80023b6:	611a      	str	r2, [r3, #16]

	// List is empty, just addNode
	if(head == NULL)
 80023b8:	4b2b      	ldr	r3, [pc, #172]	; (8002468 <AddNode+0xe4>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d103      	bne.n	80023c8 <AddNode+0x44>
	{
		head = NewNode;
 80023c0:	4a29      	ldr	r2, [pc, #164]	; (8002468 <AddNode+0xe4>)
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	6013      	str	r3, [r2, #0]
		return;
 80023c6:	e04c      	b.n	8002462 <AddNode+0xde>
	}
	struct Node* temp = head;
 80023c8:	4b27      	ldr	r3, [pc, #156]	; (8002468 <AddNode+0xe4>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	617b      	str	r3, [r7, #20]

	// If the list has A5 B3 C2 Adding D3  ->  D3 A2 B3 C2
	if(NewNode -> data.Delay < temp -> data.Delay )
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d21e      	bcs.n	8002418 <AddNode+0x94>
	{
		temp -> data.Delay -= NewNode -> data.Delay;
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	685a      	ldr	r2, [r3, #4]
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	1ad2      	subs	r2, r2, r3
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	605a      	str	r2, [r3, #4]
		NewNode -> next = temp;
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	611a      	str	r2, [r3, #16]
		head = NewNode;
 80023ee:	4a1e      	ldr	r2, [pc, #120]	; (8002468 <AddNode+0xe4>)
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	6013      	str	r3, [r2, #0]
		return;
 80023f4:	e035      	b.n	8002462 <AddNode+0xde>
	}

	// If the list has A5 B3 C2 Adding D9  ->  A5 B3 D1 C1
	while(temp -> next != NULL)
	{
		NewNode -> data.Delay -= temp -> data.Delay;
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	685a      	ldr	r2, [r3, #4]
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	1ad2      	subs	r2, r2, r3
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	605a      	str	r2, [r3, #4]
		if(NewNode -> data.Delay <= temp -> next -> data.Delay)
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	685a      	ldr	r2, [r3, #4]
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	429a      	cmp	r2, r3
 8002410:	d907      	bls.n	8002422 <AddNode+0x9e>
			break;

		temp = temp -> next;
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	617b      	str	r3, [r7, #20]
	while(temp -> next != NULL)
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d1ea      	bne.n	80023f6 <AddNode+0x72>
 8002420:	e000      	b.n	8002424 <AddNode+0xa0>
			break;
 8002422:	bf00      	nop
	}

	// temp current in B3 and D become D1
	if(temp -> next == NULL)
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	691b      	ldr	r3, [r3, #16]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d10a      	bne.n	8002442 <AddNode+0xbe>
	{
		NewNode -> data.Delay -= temp -> data.Delay;
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	685a      	ldr	r2, [r3, #4]
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	1ad2      	subs	r2, r2, r3
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	605a      	str	r2, [r3, #4]
		temp -> next = NewNode;
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	611a      	str	r2, [r3, #16]
 8002440:	e00f      	b.n	8002462 <AddNode+0xde>
	}
	else
	{
		temp -> next -> data.Delay -= NewNode -> data.Delay; // convert C2 to C1
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	6859      	ldr	r1, [r3, #4]
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	685a      	ldr	r2, [r3, #4]
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	1a8a      	subs	r2, r1, r2
 8002452:	605a      	str	r2, [r3, #4]
		NewNode -> next = temp -> next;
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	691a      	ldr	r2, [r3, #16]
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	611a      	str	r2, [r3, #16]
		temp -> next = NewNode;
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	611a      	str	r2, [r3, #16]
	}
}
 8002462:	371c      	adds	r7, #28
 8002464:	46bd      	mov	sp, r7
 8002466:	bd90      	pop	{r4, r7, pc}
 8002468:	2000012c 	.word	0x2000012c

0800246c <DeleteBegin>:

void DeleteBegin()
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
	struct Node* temp = head;
 8002472:	4b09      	ldr	r3, [pc, #36]	; (8002498 <DeleteBegin+0x2c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	607b      	str	r3, [r7, #4]
	if(temp == NULL) return;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d008      	beq.n	8002490 <DeleteBegin+0x24>
	head = head -> next;
 800247e:	4b06      	ldr	r3, [pc, #24]	; (8002498 <DeleteBegin+0x2c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	4a04      	ldr	r2, [pc, #16]	; (8002498 <DeleteBegin+0x2c>)
 8002486:	6013      	str	r3, [r2, #0]
	free(temp);
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f003 f853 	bl	8005534 <free>
 800248e:	e000      	b.n	8002492 <DeleteBegin+0x26>
	if(temp == NULL) return;
 8002490:	bf00      	nop
}
 8002492:	3708      	adds	r7, #8
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	2000012c 	.word	0x2000012c

0800249c <SCH_Add_Task>:

void SCH_Add_Task(void (*p_function)(), uint32_t DELAY, uint32_t PERIOD)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b088      	sub	sp, #32
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
	sTask NewTask;
	NewTask.pTask = p_function;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	613b      	str	r3, [r7, #16]
	NewTask.Delay = DELAY;
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	617b      	str	r3, [r7, #20]
	NewTask.Period = PERIOD;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	61bb      	str	r3, [r7, #24]

	if(NewTask.Delay == 0)
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d102      	bne.n	80024c0 <SCH_Add_Task+0x24>
		NewTask.RunMe = 1;
 80024ba:	2301      	movs	r3, #1
 80024bc:	773b      	strb	r3, [r7, #28]
 80024be:	e001      	b.n	80024c4 <SCH_Add_Task+0x28>
	else
		NewTask.RunMe = 0;
 80024c0:	2300      	movs	r3, #0
 80024c2:	773b      	strb	r3, [r7, #28]

	AddNode(NewTask);
 80024c4:	f107 0310 	add.w	r3, r7, #16
 80024c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024ca:	f7ff ff5b 	bl	8002384 <AddNode>
}
 80024ce:	bf00      	nop
 80024d0:	3720      	adds	r7, #32
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
	...

080024d8 <SCH_Update>:

void SCH_Update(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
	if(head == NULL) return;
 80024dc:	4b0b      	ldr	r3, [pc, #44]	; (800250c <SCH_Update+0x34>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d00f      	beq.n	8002504 <SCH_Update+0x2c>

	if(head -> data.Delay <= 0)
 80024e4:	4b09      	ldr	r3, [pc, #36]	; (800250c <SCH_Update+0x34>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d104      	bne.n	80024f8 <SCH_Update+0x20>
		head -> data.RunMe = 1;
 80024ee:	4b07      	ldr	r3, [pc, #28]	; (800250c <SCH_Update+0x34>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2201      	movs	r2, #1
 80024f4:	731a      	strb	r2, [r3, #12]
 80024f6:	e006      	b.n	8002506 <SCH_Update+0x2e>
	else
		head -> data.Delay--;
 80024f8:	4b04      	ldr	r3, [pc, #16]	; (800250c <SCH_Update+0x34>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	685a      	ldr	r2, [r3, #4]
 80024fe:	3a01      	subs	r2, #1
 8002500:	605a      	str	r2, [r3, #4]
 8002502:	e000      	b.n	8002506 <SCH_Update+0x2e>
	if(head == NULL) return;
 8002504:	bf00      	nop
}
 8002506:	46bd      	mov	sp, r7
 8002508:	bc80      	pop	{r7}
 800250a:	4770      	bx	lr
 800250c:	2000012c 	.word	0x2000012c

08002510 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void)
{
 8002510:	b590      	push	{r4, r7, lr}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
	if(head == NULL) return;
 8002516:	4b13      	ldr	r3, [pc, #76]	; (8002564 <SCH_Dispatch_Tasks+0x54>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d01e      	beq.n	800255c <SCH_Dispatch_Tasks+0x4c>

	if(head -> data.RunMe > 0)
 800251e:	4b11      	ldr	r3, [pc, #68]	; (8002564 <SCH_Dispatch_Tasks+0x54>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	7b1b      	ldrb	r3, [r3, #12]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d014      	beq.n	8002552 <SCH_Dispatch_Tasks+0x42>
	{
		(*head -> data.pTask)();
 8002528:	4b0e      	ldr	r3, [pc, #56]	; (8002564 <SCH_Dispatch_Tasks+0x54>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4798      	blx	r3
		sTask NewTask = head -> data;
 8002530:	4b0c      	ldr	r3, [pc, #48]	; (8002564 <SCH_Dispatch_Tasks+0x54>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	463c      	mov	r4, r7
 8002536:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002538:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		DeleteBegin();
 800253c:	f7ff ff96 	bl	800246c <DeleteBegin>

		if(NewTask.Period != 0)
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d005      	beq.n	8002552 <SCH_Dispatch_Tasks+0x42>
			SCH_Add_Task(NewTask.pTask, NewTask.Period, NewTask.Period);
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	68b9      	ldr	r1, [r7, #8]
 800254a:	68ba      	ldr	r2, [r7, #8]
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff ffa5 	bl	800249c <SCH_Add_Task>
	}

	// Enter low-power mode (Sleep mode). The MCU will wake up on the next interrupt
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8002552:	2101      	movs	r1, #1
 8002554:	2000      	movs	r0, #0
 8002556:	f000 fe07 	bl	8003168 <HAL_PWR_EnterSLEEPMode>
 800255a:	e000      	b.n	800255e <SCH_Dispatch_Tasks+0x4e>
	if(head == NULL) return;
 800255c:	bf00      	nop
}
 800255e:	3714      	adds	r7, #20
 8002560:	46bd      	mov	sp, r7
 8002562:	bd90      	pop	{r4, r7, pc}
 8002564:	2000012c 	.word	0x2000012c

08002568 <isTimerUp>:

int timer_counter[TIMER];
int timer_flag[TIMER];

int isTimerUp(int timer)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
	return (timer_flag[timer] == 1);
 8002570:	4a06      	ldr	r2, [pc, #24]	; (800258c <isTimerUp+0x24>)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002578:	2b01      	cmp	r3, #1
 800257a:	bf0c      	ite	eq
 800257c:	2301      	moveq	r3, #1
 800257e:	2300      	movne	r3, #0
 8002580:	b2db      	uxtb	r3, r3
}
 8002582:	4618      	mov	r0, r3
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	bc80      	pop	{r7}
 800258a:	4770      	bx	lr
 800258c:	2000026c 	.word	0x2000026c

08002590 <setFlag>:

void setFlag(int timer)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
	timer_counter[timer] = 0;
 8002598:	4a07      	ldr	r2, [pc, #28]	; (80025b8 <setFlag+0x28>)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2100      	movs	r1, #0
 800259e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	timer_flag[timer] = 0;
 80025a2:	4a06      	ldr	r2, [pc, #24]	; (80025bc <setFlag+0x2c>)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2100      	movs	r1, #0
 80025a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80025ac:	bf00      	nop
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bc80      	pop	{r7}
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	2000024c 	.word	0x2000024c
 80025bc:	2000026c 	.word	0x2000026c

080025c0 <setTimer>:

void setTimer(int timer, int duration)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
	timer_counter[timer] = duration;
 80025ca:	4907      	ldr	r1, [pc, #28]	; (80025e8 <setTimer+0x28>)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	683a      	ldr	r2, [r7, #0]
 80025d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[timer] = 0;
 80025d4:	4a05      	ldr	r2, [pc, #20]	; (80025ec <setTimer+0x2c>)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2100      	movs	r1, #0
 80025da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80025de:	bf00      	nop
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bc80      	pop	{r7}
 80025e6:	4770      	bx	lr
 80025e8:	2000024c 	.word	0x2000024c
 80025ec:	2000026c 	.word	0x2000026c

080025f0 <timerRun>:

void timerRun(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
	for (int timer = 0; timer < TIMER; timer++)
 80025f6:	2300      	movs	r3, #0
 80025f8:	607b      	str	r3, [r7, #4]
 80025fa:	e01c      	b.n	8002636 <timerRun+0x46>
	{
		if(timer_counter[timer] > 0)
 80025fc:	4a12      	ldr	r2, [pc, #72]	; (8002648 <timerRun+0x58>)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002604:	2b00      	cmp	r3, #0
 8002606:	dd13      	ble.n	8002630 <timerRun+0x40>
		{
			timer_counter[timer]--;
 8002608:	4a0f      	ldr	r2, [pc, #60]	; (8002648 <timerRun+0x58>)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002610:	1e5a      	subs	r2, r3, #1
 8002612:	490d      	ldr	r1, [pc, #52]	; (8002648 <timerRun+0x58>)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[timer] == 0)
 800261a:	4a0b      	ldr	r2, [pc, #44]	; (8002648 <timerRun+0x58>)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d104      	bne.n	8002630 <timerRun+0x40>
				timer_flag[timer] = 1;
 8002626:	4a09      	ldr	r2, [pc, #36]	; (800264c <timerRun+0x5c>)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2101      	movs	r1, #1
 800262c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int timer = 0; timer < TIMER; timer++)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	3301      	adds	r3, #1
 8002634:	607b      	str	r3, [r7, #4]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2b07      	cmp	r3, #7
 800263a:	dddf      	ble.n	80025fc <timerRun+0xc>
		}
	}
}
 800263c:	bf00      	nop
 800263e:	bf00      	nop
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	bc80      	pop	{r7}
 8002646:	4770      	bx	lr
 8002648:	2000024c 	.word	0x2000024c
 800264c:	2000026c 	.word	0x2000026c

08002650 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002656:	4b15      	ldr	r3, [pc, #84]	; (80026ac <HAL_MspInit+0x5c>)
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	4a14      	ldr	r2, [pc, #80]	; (80026ac <HAL_MspInit+0x5c>)
 800265c:	f043 0301 	orr.w	r3, r3, #1
 8002660:	6193      	str	r3, [r2, #24]
 8002662:	4b12      	ldr	r3, [pc, #72]	; (80026ac <HAL_MspInit+0x5c>)
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	60bb      	str	r3, [r7, #8]
 800266c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800266e:	4b0f      	ldr	r3, [pc, #60]	; (80026ac <HAL_MspInit+0x5c>)
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	4a0e      	ldr	r2, [pc, #56]	; (80026ac <HAL_MspInit+0x5c>)
 8002674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002678:	61d3      	str	r3, [r2, #28]
 800267a:	4b0c      	ldr	r3, [pc, #48]	; (80026ac <HAL_MspInit+0x5c>)
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002682:	607b      	str	r3, [r7, #4]
 8002684:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002686:	4b0a      	ldr	r3, [pc, #40]	; (80026b0 <HAL_MspInit+0x60>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002692:	60fb      	str	r3, [r7, #12]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800269a:	60fb      	str	r3, [r7, #12]
 800269c:	4a04      	ldr	r2, [pc, #16]	; (80026b0 <HAL_MspInit+0x60>)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026a2:	bf00      	nop
 80026a4:	3714      	adds	r7, #20
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bc80      	pop	{r7}
 80026aa:	4770      	bx	lr
 80026ac:	40021000 	.word	0x40021000
 80026b0:	40010000 	.word	0x40010000

080026b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026c4:	d114      	bne.n	80026f0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026c6:	4b19      	ldr	r3, [pc, #100]	; (800272c <HAL_TIM_Base_MspInit+0x78>)
 80026c8:	69db      	ldr	r3, [r3, #28]
 80026ca:	4a18      	ldr	r2, [pc, #96]	; (800272c <HAL_TIM_Base_MspInit+0x78>)
 80026cc:	f043 0301 	orr.w	r3, r3, #1
 80026d0:	61d3      	str	r3, [r2, #28]
 80026d2:	4b16      	ldr	r3, [pc, #88]	; (800272c <HAL_TIM_Base_MspInit+0x78>)
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	60fb      	str	r3, [r7, #12]
 80026dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80026de:	2200      	movs	r2, #0
 80026e0:	2100      	movs	r1, #0
 80026e2:	201c      	movs	r0, #28
 80026e4:	f000 fa8b 	bl	8002bfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80026e8:	201c      	movs	r0, #28
 80026ea:	f000 faa4 	bl	8002c36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80026ee:	e018      	b.n	8002722 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a0e      	ldr	r2, [pc, #56]	; (8002730 <HAL_TIM_Base_MspInit+0x7c>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d113      	bne.n	8002722 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026fa:	4b0c      	ldr	r3, [pc, #48]	; (800272c <HAL_TIM_Base_MspInit+0x78>)
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	4a0b      	ldr	r2, [pc, #44]	; (800272c <HAL_TIM_Base_MspInit+0x78>)
 8002700:	f043 0302 	orr.w	r3, r3, #2
 8002704:	61d3      	str	r3, [r2, #28]
 8002706:	4b09      	ldr	r3, [pc, #36]	; (800272c <HAL_TIM_Base_MspInit+0x78>)
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	60bb      	str	r3, [r7, #8]
 8002710:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002712:	2200      	movs	r2, #0
 8002714:	2100      	movs	r1, #0
 8002716:	201d      	movs	r0, #29
 8002718:	f000 fa71 	bl	8002bfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800271c:	201d      	movs	r0, #29
 800271e:	f000 fa8a 	bl	8002c36 <HAL_NVIC_EnableIRQ>
}
 8002722:	bf00      	nop
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	40021000 	.word	0x40021000
 8002730:	40000400 	.word	0x40000400

08002734 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b088      	sub	sp, #32
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800273c:	f107 0310 	add.w	r3, r7, #16
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	605a      	str	r2, [r3, #4]
 8002746:	609a      	str	r2, [r3, #8]
 8002748:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a0f      	ldr	r2, [pc, #60]	; (800278c <HAL_TIM_MspPostInit+0x58>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d117      	bne.n	8002784 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002754:	4b0e      	ldr	r3, [pc, #56]	; (8002790 <HAL_TIM_MspPostInit+0x5c>)
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	4a0d      	ldr	r2, [pc, #52]	; (8002790 <HAL_TIM_MspPostInit+0x5c>)
 800275a:	f043 0304 	orr.w	r3, r3, #4
 800275e:	6193      	str	r3, [r2, #24]
 8002760:	4b0b      	ldr	r3, [pc, #44]	; (8002790 <HAL_TIM_MspPostInit+0x5c>)
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	f003 0304 	and.w	r3, r3, #4
 8002768:	60fb      	str	r3, [r7, #12]
 800276a:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800276c:	2340      	movs	r3, #64	; 0x40
 800276e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002770:	2302      	movs	r3, #2
 8002772:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002774:	2302      	movs	r3, #2
 8002776:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002778:	f107 0310 	add.w	r3, r7, #16
 800277c:	4619      	mov	r1, r3
 800277e:	4805      	ldr	r0, [pc, #20]	; (8002794 <HAL_TIM_MspPostInit+0x60>)
 8002780:	f000 fb26 	bl	8002dd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002784:	bf00      	nop
 8002786:	3720      	adds	r7, #32
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40000400 	.word	0x40000400
 8002790:	40021000 	.word	0x40021000
 8002794:	40010800 	.word	0x40010800

08002798 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b088      	sub	sp, #32
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a0:	f107 0310 	add.w	r3, r7, #16
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	605a      	str	r2, [r3, #4]
 80027aa:	609a      	str	r2, [r3, #8]
 80027ac:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a1f      	ldr	r2, [pc, #124]	; (8002830 <HAL_UART_MspInit+0x98>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d137      	bne.n	8002828 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80027b8:	4b1e      	ldr	r3, [pc, #120]	; (8002834 <HAL_UART_MspInit+0x9c>)
 80027ba:	69db      	ldr	r3, [r3, #28]
 80027bc:	4a1d      	ldr	r2, [pc, #116]	; (8002834 <HAL_UART_MspInit+0x9c>)
 80027be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027c2:	61d3      	str	r3, [r2, #28]
 80027c4:	4b1b      	ldr	r3, [pc, #108]	; (8002834 <HAL_UART_MspInit+0x9c>)
 80027c6:	69db      	ldr	r3, [r3, #28]
 80027c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027cc:	60fb      	str	r3, [r7, #12]
 80027ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027d0:	4b18      	ldr	r3, [pc, #96]	; (8002834 <HAL_UART_MspInit+0x9c>)
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	4a17      	ldr	r2, [pc, #92]	; (8002834 <HAL_UART_MspInit+0x9c>)
 80027d6:	f043 0304 	orr.w	r3, r3, #4
 80027da:	6193      	str	r3, [r2, #24]
 80027dc:	4b15      	ldr	r3, [pc, #84]	; (8002834 <HAL_UART_MspInit+0x9c>)
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	f003 0304 	and.w	r3, r3, #4
 80027e4:	60bb      	str	r3, [r7, #8]
 80027e6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80027e8:	2304      	movs	r3, #4
 80027ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ec:	2302      	movs	r3, #2
 80027ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027f0:	2303      	movs	r3, #3
 80027f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027f4:	f107 0310 	add.w	r3, r7, #16
 80027f8:	4619      	mov	r1, r3
 80027fa:	480f      	ldr	r0, [pc, #60]	; (8002838 <HAL_UART_MspInit+0xa0>)
 80027fc:	f000 fae8 	bl	8002dd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002800:	2308      	movs	r3, #8
 8002802:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002804:	2300      	movs	r3, #0
 8002806:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002808:	2300      	movs	r3, #0
 800280a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800280c:	f107 0310 	add.w	r3, r7, #16
 8002810:	4619      	mov	r1, r3
 8002812:	4809      	ldr	r0, [pc, #36]	; (8002838 <HAL_UART_MspInit+0xa0>)
 8002814:	f000 fadc 	bl	8002dd0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002818:	2200      	movs	r2, #0
 800281a:	2100      	movs	r1, #0
 800281c:	2026      	movs	r0, #38	; 0x26
 800281e:	f000 f9ee 	bl	8002bfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002822:	2026      	movs	r0, #38	; 0x26
 8002824:	f000 fa07 	bl	8002c36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002828:	bf00      	nop
 800282a:	3720      	adds	r7, #32
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	40004400 	.word	0x40004400
 8002834:	40021000 	.word	0x40021000
 8002838:	40010800 	.word	0x40010800

0800283c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002840:	e7fe      	b.n	8002840 <NMI_Handler+0x4>

08002842 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002842:	b480      	push	{r7}
 8002844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002846:	e7fe      	b.n	8002846 <HardFault_Handler+0x4>

08002848 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800284c:	e7fe      	b.n	800284c <MemManage_Handler+0x4>

0800284e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800284e:	b480      	push	{r7}
 8002850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002852:	e7fe      	b.n	8002852 <BusFault_Handler+0x4>

08002854 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002858:	e7fe      	b.n	8002858 <UsageFault_Handler+0x4>

0800285a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800285a:	b480      	push	{r7}
 800285c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800285e:	bf00      	nop
 8002860:	46bd      	mov	sp, r7
 8002862:	bc80      	pop	{r7}
 8002864:	4770      	bx	lr

08002866 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002866:	b480      	push	{r7}
 8002868:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800286a:	bf00      	nop
 800286c:	46bd      	mov	sp, r7
 800286e:	bc80      	pop	{r7}
 8002870:	4770      	bx	lr

08002872 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002872:	b480      	push	{r7}
 8002874:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002876:	bf00      	nop
 8002878:	46bd      	mov	sp, r7
 800287a:	bc80      	pop	{r7}
 800287c:	4770      	bx	lr

0800287e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002882:	f000 f8c9 	bl	8002a18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002886:	bf00      	nop
 8002888:	bd80      	pop	{r7, pc}
	...

0800288c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002890:	4802      	ldr	r0, [pc, #8]	; (800289c <TIM2_IRQHandler+0x10>)
 8002892:	f001 fa2f 	bl	8003cf4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002896:	bf00      	nop
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	200001bc 	.word	0x200001bc

080028a0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80028a4:	4802      	ldr	r0, [pc, #8]	; (80028b0 <TIM3_IRQHandler+0x10>)
 80028a6:	f001 fa25 	bl	8003cf4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80028aa:	bf00      	nop
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	20000174 	.word	0x20000174

080028b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80028b8:	4802      	ldr	r0, [pc, #8]	; (80028c4 <USART2_IRQHandler+0x10>)
 80028ba:	f002 f8b9 	bl	8004a30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80028be:	bf00      	nop
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	20000204 	.word	0x20000204

080028c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028d0:	4a14      	ldr	r2, [pc, #80]	; (8002924 <_sbrk+0x5c>)
 80028d2:	4b15      	ldr	r3, [pc, #84]	; (8002928 <_sbrk+0x60>)
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028dc:	4b13      	ldr	r3, [pc, #76]	; (800292c <_sbrk+0x64>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d102      	bne.n	80028ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028e4:	4b11      	ldr	r3, [pc, #68]	; (800292c <_sbrk+0x64>)
 80028e6:	4a12      	ldr	r2, [pc, #72]	; (8002930 <_sbrk+0x68>)
 80028e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028ea:	4b10      	ldr	r3, [pc, #64]	; (800292c <_sbrk+0x64>)
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4413      	add	r3, r2
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d207      	bcs.n	8002908 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028f8:	f002 fdea 	bl	80054d0 <__errno>
 80028fc:	4603      	mov	r3, r0
 80028fe:	220c      	movs	r2, #12
 8002900:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002902:	f04f 33ff 	mov.w	r3, #4294967295
 8002906:	e009      	b.n	800291c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002908:	4b08      	ldr	r3, [pc, #32]	; (800292c <_sbrk+0x64>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800290e:	4b07      	ldr	r3, [pc, #28]	; (800292c <_sbrk+0x64>)
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4413      	add	r3, r2
 8002916:	4a05      	ldr	r2, [pc, #20]	; (800292c <_sbrk+0x64>)
 8002918:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800291a:	68fb      	ldr	r3, [r7, #12]
}
 800291c:	4618      	mov	r0, r3
 800291e:	3718      	adds	r7, #24
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	20005000 	.word	0x20005000
 8002928:	00000400 	.word	0x00000400
 800292c:	20000130 	.word	0x20000130
 8002930:	200002a0 	.word	0x200002a0

08002934 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002938:	bf00      	nop
 800293a:	46bd      	mov	sp, r7
 800293c:	bc80      	pop	{r7}
 800293e:	4770      	bx	lr

08002940 <Reset_Handler>:
 8002940:	f7ff fff8 	bl	8002934 <SystemInit>
 8002944:	480b      	ldr	r0, [pc, #44]	; (8002974 <LoopFillZerobss+0xe>)
 8002946:	490c      	ldr	r1, [pc, #48]	; (8002978 <LoopFillZerobss+0x12>)
 8002948:	4a0c      	ldr	r2, [pc, #48]	; (800297c <LoopFillZerobss+0x16>)
 800294a:	2300      	movs	r3, #0
 800294c:	e002      	b.n	8002954 <LoopCopyDataInit>

0800294e <CopyDataInit>:
 800294e:	58d4      	ldr	r4, [r2, r3]
 8002950:	50c4      	str	r4, [r0, r3]
 8002952:	3304      	adds	r3, #4

08002954 <LoopCopyDataInit>:
 8002954:	18c4      	adds	r4, r0, r3
 8002956:	428c      	cmp	r4, r1
 8002958:	d3f9      	bcc.n	800294e <CopyDataInit>
 800295a:	4a09      	ldr	r2, [pc, #36]	; (8002980 <LoopFillZerobss+0x1a>)
 800295c:	4c09      	ldr	r4, [pc, #36]	; (8002984 <LoopFillZerobss+0x1e>)
 800295e:	2300      	movs	r3, #0
 8002960:	e001      	b.n	8002966 <LoopFillZerobss>

08002962 <FillZerobss>:
 8002962:	6013      	str	r3, [r2, #0]
 8002964:	3204      	adds	r2, #4

08002966 <LoopFillZerobss>:
 8002966:	42a2      	cmp	r2, r4
 8002968:	d3fb      	bcc.n	8002962 <FillZerobss>
 800296a:	f002 fdb7 	bl	80054dc <__libc_init_array>
 800296e:	f7ff fb3d 	bl	8001fec <main>
 8002972:	4770      	bx	lr
 8002974:	20000000 	.word	0x20000000
 8002978:	200000d0 	.word	0x200000d0
 800297c:	08005f14 	.word	0x08005f14
 8002980:	200000d0 	.word	0x200000d0
 8002984:	200002a0 	.word	0x200002a0

08002988 <ADC1_2_IRQHandler>:
 8002988:	e7fe      	b.n	8002988 <ADC1_2_IRQHandler>
	...

0800298c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002990:	4b08      	ldr	r3, [pc, #32]	; (80029b4 <HAL_Init+0x28>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a07      	ldr	r2, [pc, #28]	; (80029b4 <HAL_Init+0x28>)
 8002996:	f043 0310 	orr.w	r3, r3, #16
 800299a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800299c:	2003      	movs	r0, #3
 800299e:	f000 f923 	bl	8002be8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029a2:	200f      	movs	r0, #15
 80029a4:	f000 f808 	bl	80029b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029a8:	f7ff fe52 	bl	8002650 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	40022000 	.word	0x40022000

080029b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029c0:	4b12      	ldr	r3, [pc, #72]	; (8002a0c <HAL_InitTick+0x54>)
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	4b12      	ldr	r3, [pc, #72]	; (8002a10 <HAL_InitTick+0x58>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	4619      	mov	r1, r3
 80029ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80029d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d6:	4618      	mov	r0, r3
 80029d8:	f000 f93b 	bl	8002c52 <HAL_SYSTICK_Config>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e00e      	b.n	8002a04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2b0f      	cmp	r3, #15
 80029ea:	d80a      	bhi.n	8002a02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029ec:	2200      	movs	r2, #0
 80029ee:	6879      	ldr	r1, [r7, #4]
 80029f0:	f04f 30ff 	mov.w	r0, #4294967295
 80029f4:	f000 f903 	bl	8002bfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029f8:	4a06      	ldr	r2, [pc, #24]	; (8002a14 <HAL_InitTick+0x5c>)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
 8002a00:	e000      	b.n	8002a04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3708      	adds	r7, #8
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	20000060 	.word	0x20000060
 8002a10:	20000068 	.word	0x20000068
 8002a14:	20000064 	.word	0x20000064

08002a18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a1c:	4b05      	ldr	r3, [pc, #20]	; (8002a34 <HAL_IncTick+0x1c>)
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	461a      	mov	r2, r3
 8002a22:	4b05      	ldr	r3, [pc, #20]	; (8002a38 <HAL_IncTick+0x20>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4413      	add	r3, r2
 8002a28:	4a03      	ldr	r2, [pc, #12]	; (8002a38 <HAL_IncTick+0x20>)
 8002a2a:	6013      	str	r3, [r2, #0]
}
 8002a2c:	bf00      	nop
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bc80      	pop	{r7}
 8002a32:	4770      	bx	lr
 8002a34:	20000068 	.word	0x20000068
 8002a38:	2000028c 	.word	0x2000028c

08002a3c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a40:	4b02      	ldr	r3, [pc, #8]	; (8002a4c <HAL_GetTick+0x10>)
 8002a42:	681b      	ldr	r3, [r3, #0]
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bc80      	pop	{r7}
 8002a4a:	4770      	bx	lr
 8002a4c:	2000028c 	.word	0x2000028c

08002a50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f003 0307 	and.w	r3, r3, #7
 8002a5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a60:	4b0c      	ldr	r3, [pc, #48]	; (8002a94 <__NVIC_SetPriorityGrouping+0x44>)
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a66:	68ba      	ldr	r2, [r7, #8]
 8002a68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a82:	4a04      	ldr	r2, [pc, #16]	; (8002a94 <__NVIC_SetPriorityGrouping+0x44>)
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	60d3      	str	r3, [r2, #12]
}
 8002a88:	bf00      	nop
 8002a8a:	3714      	adds	r7, #20
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bc80      	pop	{r7}
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	e000ed00 	.word	0xe000ed00

08002a98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a9c:	4b04      	ldr	r3, [pc, #16]	; (8002ab0 <__NVIC_GetPriorityGrouping+0x18>)
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	0a1b      	lsrs	r3, r3, #8
 8002aa2:	f003 0307 	and.w	r3, r3, #7
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bc80      	pop	{r7}
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	e000ed00 	.word	0xe000ed00

08002ab4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	4603      	mov	r3, r0
 8002abc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	db0b      	blt.n	8002ade <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ac6:	79fb      	ldrb	r3, [r7, #7]
 8002ac8:	f003 021f 	and.w	r2, r3, #31
 8002acc:	4906      	ldr	r1, [pc, #24]	; (8002ae8 <__NVIC_EnableIRQ+0x34>)
 8002ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad2:	095b      	lsrs	r3, r3, #5
 8002ad4:	2001      	movs	r0, #1
 8002ad6:	fa00 f202 	lsl.w	r2, r0, r2
 8002ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ade:	bf00      	nop
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bc80      	pop	{r7}
 8002ae6:	4770      	bx	lr
 8002ae8:	e000e100 	.word	0xe000e100

08002aec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	4603      	mov	r3, r0
 8002af4:	6039      	str	r1, [r7, #0]
 8002af6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	db0a      	blt.n	8002b16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	b2da      	uxtb	r2, r3
 8002b04:	490c      	ldr	r1, [pc, #48]	; (8002b38 <__NVIC_SetPriority+0x4c>)
 8002b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0a:	0112      	lsls	r2, r2, #4
 8002b0c:	b2d2      	uxtb	r2, r2
 8002b0e:	440b      	add	r3, r1
 8002b10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b14:	e00a      	b.n	8002b2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	b2da      	uxtb	r2, r3
 8002b1a:	4908      	ldr	r1, [pc, #32]	; (8002b3c <__NVIC_SetPriority+0x50>)
 8002b1c:	79fb      	ldrb	r3, [r7, #7]
 8002b1e:	f003 030f 	and.w	r3, r3, #15
 8002b22:	3b04      	subs	r3, #4
 8002b24:	0112      	lsls	r2, r2, #4
 8002b26:	b2d2      	uxtb	r2, r2
 8002b28:	440b      	add	r3, r1
 8002b2a:	761a      	strb	r2, [r3, #24]
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bc80      	pop	{r7}
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	e000e100 	.word	0xe000e100
 8002b3c:	e000ed00 	.word	0xe000ed00

08002b40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b089      	sub	sp, #36	; 0x24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f003 0307 	and.w	r3, r3, #7
 8002b52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	f1c3 0307 	rsb	r3, r3, #7
 8002b5a:	2b04      	cmp	r3, #4
 8002b5c:	bf28      	it	cs
 8002b5e:	2304      	movcs	r3, #4
 8002b60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	3304      	adds	r3, #4
 8002b66:	2b06      	cmp	r3, #6
 8002b68:	d902      	bls.n	8002b70 <NVIC_EncodePriority+0x30>
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	3b03      	subs	r3, #3
 8002b6e:	e000      	b.n	8002b72 <NVIC_EncodePriority+0x32>
 8002b70:	2300      	movs	r3, #0
 8002b72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b74:	f04f 32ff 	mov.w	r2, #4294967295
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7e:	43da      	mvns	r2, r3
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	401a      	ands	r2, r3
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b88:	f04f 31ff 	mov.w	r1, #4294967295
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b92:	43d9      	mvns	r1, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b98:	4313      	orrs	r3, r2
         );
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3724      	adds	r7, #36	; 0x24
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bc80      	pop	{r7}
 8002ba2:	4770      	bx	lr

08002ba4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bb4:	d301      	bcc.n	8002bba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e00f      	b.n	8002bda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bba:	4a0a      	ldr	r2, [pc, #40]	; (8002be4 <SysTick_Config+0x40>)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bc2:	210f      	movs	r1, #15
 8002bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8002bc8:	f7ff ff90 	bl	8002aec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bcc:	4b05      	ldr	r3, [pc, #20]	; (8002be4 <SysTick_Config+0x40>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bd2:	4b04      	ldr	r3, [pc, #16]	; (8002be4 <SysTick_Config+0x40>)
 8002bd4:	2207      	movs	r2, #7
 8002bd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	e000e010 	.word	0xe000e010

08002be8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f7ff ff2d 	bl	8002a50 <__NVIC_SetPriorityGrouping>
}
 8002bf6:	bf00      	nop
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b086      	sub	sp, #24
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	4603      	mov	r3, r0
 8002c06:	60b9      	str	r1, [r7, #8]
 8002c08:	607a      	str	r2, [r7, #4]
 8002c0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c10:	f7ff ff42 	bl	8002a98 <__NVIC_GetPriorityGrouping>
 8002c14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	68b9      	ldr	r1, [r7, #8]
 8002c1a:	6978      	ldr	r0, [r7, #20]
 8002c1c:	f7ff ff90 	bl	8002b40 <NVIC_EncodePriority>
 8002c20:	4602      	mov	r2, r0
 8002c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c26:	4611      	mov	r1, r2
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7ff ff5f 	bl	8002aec <__NVIC_SetPriority>
}
 8002c2e:	bf00      	nop
 8002c30:	3718      	adds	r7, #24
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b082      	sub	sp, #8
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7ff ff35 	bl	8002ab4 <__NVIC_EnableIRQ>
}
 8002c4a:	bf00      	nop
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b082      	sub	sp, #8
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f7ff ffa2 	bl	8002ba4 <SysTick_Config>
 8002c60:	4603      	mov	r3, r0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b085      	sub	sp, #20
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c72:	2300      	movs	r3, #0
 8002c74:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d008      	beq.n	8002c94 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2204      	movs	r2, #4
 8002c86:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e020      	b.n	8002cd6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f022 020e 	bic.w	r2, r2, #14
 8002ca2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f022 0201 	bic.w	r2, r2, #1
 8002cb2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cbc:	2101      	movs	r1, #1
 8002cbe:	fa01 f202 	lsl.w	r2, r1, r2
 8002cc2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3714      	adds	r7, #20
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bc80      	pop	{r7}
 8002cde:	4770      	bx	lr

08002ce0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d005      	beq.n	8002d04 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2204      	movs	r2, #4
 8002cfc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	73fb      	strb	r3, [r7, #15]
 8002d02:	e051      	b.n	8002da8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f022 020e 	bic.w	r2, r2, #14
 8002d12:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f022 0201 	bic.w	r2, r2, #1
 8002d22:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a22      	ldr	r2, [pc, #136]	; (8002db4 <HAL_DMA_Abort_IT+0xd4>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d029      	beq.n	8002d82 <HAL_DMA_Abort_IT+0xa2>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a21      	ldr	r2, [pc, #132]	; (8002db8 <HAL_DMA_Abort_IT+0xd8>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d022      	beq.n	8002d7e <HAL_DMA_Abort_IT+0x9e>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a1f      	ldr	r2, [pc, #124]	; (8002dbc <HAL_DMA_Abort_IT+0xdc>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d01a      	beq.n	8002d78 <HAL_DMA_Abort_IT+0x98>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a1e      	ldr	r2, [pc, #120]	; (8002dc0 <HAL_DMA_Abort_IT+0xe0>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d012      	beq.n	8002d72 <HAL_DMA_Abort_IT+0x92>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a1c      	ldr	r2, [pc, #112]	; (8002dc4 <HAL_DMA_Abort_IT+0xe4>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d00a      	beq.n	8002d6c <HAL_DMA_Abort_IT+0x8c>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a1b      	ldr	r2, [pc, #108]	; (8002dc8 <HAL_DMA_Abort_IT+0xe8>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d102      	bne.n	8002d66 <HAL_DMA_Abort_IT+0x86>
 8002d60:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002d64:	e00e      	b.n	8002d84 <HAL_DMA_Abort_IT+0xa4>
 8002d66:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d6a:	e00b      	b.n	8002d84 <HAL_DMA_Abort_IT+0xa4>
 8002d6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d70:	e008      	b.n	8002d84 <HAL_DMA_Abort_IT+0xa4>
 8002d72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d76:	e005      	b.n	8002d84 <HAL_DMA_Abort_IT+0xa4>
 8002d78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d7c:	e002      	b.n	8002d84 <HAL_DMA_Abort_IT+0xa4>
 8002d7e:	2310      	movs	r3, #16
 8002d80:	e000      	b.n	8002d84 <HAL_DMA_Abort_IT+0xa4>
 8002d82:	2301      	movs	r3, #1
 8002d84:	4a11      	ldr	r2, [pc, #68]	; (8002dcc <HAL_DMA_Abort_IT+0xec>)
 8002d86:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d003      	beq.n	8002da8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	4798      	blx	r3
    } 
  }
  return status;
 8002da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	40020008 	.word	0x40020008
 8002db8:	4002001c 	.word	0x4002001c
 8002dbc:	40020030 	.word	0x40020030
 8002dc0:	40020044 	.word	0x40020044
 8002dc4:	40020058 	.word	0x40020058
 8002dc8:	4002006c 	.word	0x4002006c
 8002dcc:	40020000 	.word	0x40020000

08002dd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b08b      	sub	sp, #44	; 0x2c
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002dde:	2300      	movs	r3, #0
 8002de0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002de2:	e169      	b.n	80030b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002de4:	2201      	movs	r2, #1
 8002de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	69fa      	ldr	r2, [r7, #28]
 8002df4:	4013      	ands	r3, r2
 8002df6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	f040 8158 	bne.w	80030b2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	4a9a      	ldr	r2, [pc, #616]	; (8003070 <HAL_GPIO_Init+0x2a0>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d05e      	beq.n	8002eca <HAL_GPIO_Init+0xfa>
 8002e0c:	4a98      	ldr	r2, [pc, #608]	; (8003070 <HAL_GPIO_Init+0x2a0>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d875      	bhi.n	8002efe <HAL_GPIO_Init+0x12e>
 8002e12:	4a98      	ldr	r2, [pc, #608]	; (8003074 <HAL_GPIO_Init+0x2a4>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d058      	beq.n	8002eca <HAL_GPIO_Init+0xfa>
 8002e18:	4a96      	ldr	r2, [pc, #600]	; (8003074 <HAL_GPIO_Init+0x2a4>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d86f      	bhi.n	8002efe <HAL_GPIO_Init+0x12e>
 8002e1e:	4a96      	ldr	r2, [pc, #600]	; (8003078 <HAL_GPIO_Init+0x2a8>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d052      	beq.n	8002eca <HAL_GPIO_Init+0xfa>
 8002e24:	4a94      	ldr	r2, [pc, #592]	; (8003078 <HAL_GPIO_Init+0x2a8>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d869      	bhi.n	8002efe <HAL_GPIO_Init+0x12e>
 8002e2a:	4a94      	ldr	r2, [pc, #592]	; (800307c <HAL_GPIO_Init+0x2ac>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d04c      	beq.n	8002eca <HAL_GPIO_Init+0xfa>
 8002e30:	4a92      	ldr	r2, [pc, #584]	; (800307c <HAL_GPIO_Init+0x2ac>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d863      	bhi.n	8002efe <HAL_GPIO_Init+0x12e>
 8002e36:	4a92      	ldr	r2, [pc, #584]	; (8003080 <HAL_GPIO_Init+0x2b0>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d046      	beq.n	8002eca <HAL_GPIO_Init+0xfa>
 8002e3c:	4a90      	ldr	r2, [pc, #576]	; (8003080 <HAL_GPIO_Init+0x2b0>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d85d      	bhi.n	8002efe <HAL_GPIO_Init+0x12e>
 8002e42:	2b12      	cmp	r3, #18
 8002e44:	d82a      	bhi.n	8002e9c <HAL_GPIO_Init+0xcc>
 8002e46:	2b12      	cmp	r3, #18
 8002e48:	d859      	bhi.n	8002efe <HAL_GPIO_Init+0x12e>
 8002e4a:	a201      	add	r2, pc, #4	; (adr r2, 8002e50 <HAL_GPIO_Init+0x80>)
 8002e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e50:	08002ecb 	.word	0x08002ecb
 8002e54:	08002ea5 	.word	0x08002ea5
 8002e58:	08002eb7 	.word	0x08002eb7
 8002e5c:	08002ef9 	.word	0x08002ef9
 8002e60:	08002eff 	.word	0x08002eff
 8002e64:	08002eff 	.word	0x08002eff
 8002e68:	08002eff 	.word	0x08002eff
 8002e6c:	08002eff 	.word	0x08002eff
 8002e70:	08002eff 	.word	0x08002eff
 8002e74:	08002eff 	.word	0x08002eff
 8002e78:	08002eff 	.word	0x08002eff
 8002e7c:	08002eff 	.word	0x08002eff
 8002e80:	08002eff 	.word	0x08002eff
 8002e84:	08002eff 	.word	0x08002eff
 8002e88:	08002eff 	.word	0x08002eff
 8002e8c:	08002eff 	.word	0x08002eff
 8002e90:	08002eff 	.word	0x08002eff
 8002e94:	08002ead 	.word	0x08002ead
 8002e98:	08002ec1 	.word	0x08002ec1
 8002e9c:	4a79      	ldr	r2, [pc, #484]	; (8003084 <HAL_GPIO_Init+0x2b4>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d013      	beq.n	8002eca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002ea2:	e02c      	b.n	8002efe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	623b      	str	r3, [r7, #32]
          break;
 8002eaa:	e029      	b.n	8002f00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	3304      	adds	r3, #4
 8002eb2:	623b      	str	r3, [r7, #32]
          break;
 8002eb4:	e024      	b.n	8002f00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	3308      	adds	r3, #8
 8002ebc:	623b      	str	r3, [r7, #32]
          break;
 8002ebe:	e01f      	b.n	8002f00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	330c      	adds	r3, #12
 8002ec6:	623b      	str	r3, [r7, #32]
          break;
 8002ec8:	e01a      	b.n	8002f00 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d102      	bne.n	8002ed8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002ed2:	2304      	movs	r3, #4
 8002ed4:	623b      	str	r3, [r7, #32]
          break;
 8002ed6:	e013      	b.n	8002f00 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d105      	bne.n	8002eec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ee0:	2308      	movs	r3, #8
 8002ee2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	69fa      	ldr	r2, [r7, #28]
 8002ee8:	611a      	str	r2, [r3, #16]
          break;
 8002eea:	e009      	b.n	8002f00 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002eec:	2308      	movs	r3, #8
 8002eee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	69fa      	ldr	r2, [r7, #28]
 8002ef4:	615a      	str	r2, [r3, #20]
          break;
 8002ef6:	e003      	b.n	8002f00 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	623b      	str	r3, [r7, #32]
          break;
 8002efc:	e000      	b.n	8002f00 <HAL_GPIO_Init+0x130>
          break;
 8002efe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	2bff      	cmp	r3, #255	; 0xff
 8002f04:	d801      	bhi.n	8002f0a <HAL_GPIO_Init+0x13a>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	e001      	b.n	8002f0e <HAL_GPIO_Init+0x13e>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	3304      	adds	r3, #4
 8002f0e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	2bff      	cmp	r3, #255	; 0xff
 8002f14:	d802      	bhi.n	8002f1c <HAL_GPIO_Init+0x14c>
 8002f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	e002      	b.n	8002f22 <HAL_GPIO_Init+0x152>
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1e:	3b08      	subs	r3, #8
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	210f      	movs	r1, #15
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f30:	43db      	mvns	r3, r3
 8002f32:	401a      	ands	r2, r3
 8002f34:	6a39      	ldr	r1, [r7, #32]
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	fa01 f303 	lsl.w	r3, r1, r3
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	f000 80b1 	beq.w	80030b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002f50:	4b4d      	ldr	r3, [pc, #308]	; (8003088 <HAL_GPIO_Init+0x2b8>)
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	4a4c      	ldr	r2, [pc, #304]	; (8003088 <HAL_GPIO_Init+0x2b8>)
 8002f56:	f043 0301 	orr.w	r3, r3, #1
 8002f5a:	6193      	str	r3, [r2, #24]
 8002f5c:	4b4a      	ldr	r3, [pc, #296]	; (8003088 <HAL_GPIO_Init+0x2b8>)
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	f003 0301 	and.w	r3, r3, #1
 8002f64:	60bb      	str	r3, [r7, #8]
 8002f66:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002f68:	4a48      	ldr	r2, [pc, #288]	; (800308c <HAL_GPIO_Init+0x2bc>)
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6c:	089b      	lsrs	r3, r3, #2
 8002f6e:	3302      	adds	r3, #2
 8002f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f74:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f78:	f003 0303 	and.w	r3, r3, #3
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	220f      	movs	r2, #15
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	43db      	mvns	r3, r3
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a40      	ldr	r2, [pc, #256]	; (8003090 <HAL_GPIO_Init+0x2c0>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d013      	beq.n	8002fbc <HAL_GPIO_Init+0x1ec>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a3f      	ldr	r2, [pc, #252]	; (8003094 <HAL_GPIO_Init+0x2c4>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d00d      	beq.n	8002fb8 <HAL_GPIO_Init+0x1e8>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4a3e      	ldr	r2, [pc, #248]	; (8003098 <HAL_GPIO_Init+0x2c8>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d007      	beq.n	8002fb4 <HAL_GPIO_Init+0x1e4>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4a3d      	ldr	r2, [pc, #244]	; (800309c <HAL_GPIO_Init+0x2cc>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d101      	bne.n	8002fb0 <HAL_GPIO_Init+0x1e0>
 8002fac:	2303      	movs	r3, #3
 8002fae:	e006      	b.n	8002fbe <HAL_GPIO_Init+0x1ee>
 8002fb0:	2304      	movs	r3, #4
 8002fb2:	e004      	b.n	8002fbe <HAL_GPIO_Init+0x1ee>
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	e002      	b.n	8002fbe <HAL_GPIO_Init+0x1ee>
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e000      	b.n	8002fbe <HAL_GPIO_Init+0x1ee>
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fc0:	f002 0203 	and.w	r2, r2, #3
 8002fc4:	0092      	lsls	r2, r2, #2
 8002fc6:	4093      	lsls	r3, r2
 8002fc8:	68fa      	ldr	r2, [r7, #12]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002fce:	492f      	ldr	r1, [pc, #188]	; (800308c <HAL_GPIO_Init+0x2bc>)
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd2:	089b      	lsrs	r3, r3, #2
 8002fd4:	3302      	adds	r3, #2
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d006      	beq.n	8002ff6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002fe8:	4b2d      	ldr	r3, [pc, #180]	; (80030a0 <HAL_GPIO_Init+0x2d0>)
 8002fea:	689a      	ldr	r2, [r3, #8]
 8002fec:	492c      	ldr	r1, [pc, #176]	; (80030a0 <HAL_GPIO_Init+0x2d0>)
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	608b      	str	r3, [r1, #8]
 8002ff4:	e006      	b.n	8003004 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002ff6:	4b2a      	ldr	r3, [pc, #168]	; (80030a0 <HAL_GPIO_Init+0x2d0>)
 8002ff8:	689a      	ldr	r2, [r3, #8]
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	43db      	mvns	r3, r3
 8002ffe:	4928      	ldr	r1, [pc, #160]	; (80030a0 <HAL_GPIO_Init+0x2d0>)
 8003000:	4013      	ands	r3, r2
 8003002:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d006      	beq.n	800301e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003010:	4b23      	ldr	r3, [pc, #140]	; (80030a0 <HAL_GPIO_Init+0x2d0>)
 8003012:	68da      	ldr	r2, [r3, #12]
 8003014:	4922      	ldr	r1, [pc, #136]	; (80030a0 <HAL_GPIO_Init+0x2d0>)
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	4313      	orrs	r3, r2
 800301a:	60cb      	str	r3, [r1, #12]
 800301c:	e006      	b.n	800302c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800301e:	4b20      	ldr	r3, [pc, #128]	; (80030a0 <HAL_GPIO_Init+0x2d0>)
 8003020:	68da      	ldr	r2, [r3, #12]
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	43db      	mvns	r3, r3
 8003026:	491e      	ldr	r1, [pc, #120]	; (80030a0 <HAL_GPIO_Init+0x2d0>)
 8003028:	4013      	ands	r3, r2
 800302a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d006      	beq.n	8003046 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003038:	4b19      	ldr	r3, [pc, #100]	; (80030a0 <HAL_GPIO_Init+0x2d0>)
 800303a:	685a      	ldr	r2, [r3, #4]
 800303c:	4918      	ldr	r1, [pc, #96]	; (80030a0 <HAL_GPIO_Init+0x2d0>)
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	4313      	orrs	r3, r2
 8003042:	604b      	str	r3, [r1, #4]
 8003044:	e006      	b.n	8003054 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003046:	4b16      	ldr	r3, [pc, #88]	; (80030a0 <HAL_GPIO_Init+0x2d0>)
 8003048:	685a      	ldr	r2, [r3, #4]
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	43db      	mvns	r3, r3
 800304e:	4914      	ldr	r1, [pc, #80]	; (80030a0 <HAL_GPIO_Init+0x2d0>)
 8003050:	4013      	ands	r3, r2
 8003052:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d021      	beq.n	80030a4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003060:	4b0f      	ldr	r3, [pc, #60]	; (80030a0 <HAL_GPIO_Init+0x2d0>)
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	490e      	ldr	r1, [pc, #56]	; (80030a0 <HAL_GPIO_Init+0x2d0>)
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	4313      	orrs	r3, r2
 800306a:	600b      	str	r3, [r1, #0]
 800306c:	e021      	b.n	80030b2 <HAL_GPIO_Init+0x2e2>
 800306e:	bf00      	nop
 8003070:	10320000 	.word	0x10320000
 8003074:	10310000 	.word	0x10310000
 8003078:	10220000 	.word	0x10220000
 800307c:	10210000 	.word	0x10210000
 8003080:	10120000 	.word	0x10120000
 8003084:	10110000 	.word	0x10110000
 8003088:	40021000 	.word	0x40021000
 800308c:	40010000 	.word	0x40010000
 8003090:	40010800 	.word	0x40010800
 8003094:	40010c00 	.word	0x40010c00
 8003098:	40011000 	.word	0x40011000
 800309c:	40011400 	.word	0x40011400
 80030a0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80030a4:	4b0b      	ldr	r3, [pc, #44]	; (80030d4 <HAL_GPIO_Init+0x304>)
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	43db      	mvns	r3, r3
 80030ac:	4909      	ldr	r1, [pc, #36]	; (80030d4 <HAL_GPIO_Init+0x304>)
 80030ae:	4013      	ands	r3, r2
 80030b0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80030b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b4:	3301      	adds	r3, #1
 80030b6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030be:	fa22 f303 	lsr.w	r3, r2, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f47f ae8e 	bne.w	8002de4 <HAL_GPIO_Init+0x14>
  }
}
 80030c8:	bf00      	nop
 80030ca:	bf00      	nop
 80030cc:	372c      	adds	r7, #44	; 0x2c
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bc80      	pop	{r7}
 80030d2:	4770      	bx	lr
 80030d4:	40010400 	.word	0x40010400

080030d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80030d8:	b480      	push	{r7}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	460b      	mov	r3, r1
 80030e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	689a      	ldr	r2, [r3, #8]
 80030e8:	887b      	ldrh	r3, [r7, #2]
 80030ea:	4013      	ands	r3, r2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d002      	beq.n	80030f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80030f0:	2301      	movs	r3, #1
 80030f2:	73fb      	strb	r3, [r7, #15]
 80030f4:	e001      	b.n	80030fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80030f6:	2300      	movs	r3, #0
 80030f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80030fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3714      	adds	r7, #20
 8003100:	46bd      	mov	sp, r7
 8003102:	bc80      	pop	{r7}
 8003104:	4770      	bx	lr

08003106 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003106:	b480      	push	{r7}
 8003108:	b083      	sub	sp, #12
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
 800310e:	460b      	mov	r3, r1
 8003110:	807b      	strh	r3, [r7, #2]
 8003112:	4613      	mov	r3, r2
 8003114:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003116:	787b      	ldrb	r3, [r7, #1]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d003      	beq.n	8003124 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800311c:	887a      	ldrh	r2, [r7, #2]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003122:	e003      	b.n	800312c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003124:	887b      	ldrh	r3, [r7, #2]
 8003126:	041a      	lsls	r2, r3, #16
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	611a      	str	r2, [r3, #16]
}
 800312c:	bf00      	nop
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	bc80      	pop	{r7}
 8003134:	4770      	bx	lr

08003136 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003136:	b480      	push	{r7}
 8003138:	b085      	sub	sp, #20
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
 800313e:	460b      	mov	r3, r1
 8003140:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003148:	887a      	ldrh	r2, [r7, #2]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	4013      	ands	r3, r2
 800314e:	041a      	lsls	r2, r3, #16
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	43d9      	mvns	r1, r3
 8003154:	887b      	ldrh	r3, [r7, #2]
 8003156:	400b      	ands	r3, r1
 8003158:	431a      	orrs	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	611a      	str	r2, [r3, #16]
}
 800315e:	bf00      	nop
 8003160:	3714      	adds	r7, #20
 8003162:	46bd      	mov	sp, r7
 8003164:	bc80      	pop	{r7}
 8003166:	4770      	bx	lr

08003168 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	460b      	mov	r3, r1
 8003172:	70fb      	strb	r3, [r7, #3]
  UNUSED(Regulator);

  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003174:	4b09      	ldr	r3, [pc, #36]	; (800319c <HAL_PWR_EnterSLEEPMode+0x34>)
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	4a08      	ldr	r2, [pc, #32]	; (800319c <HAL_PWR_EnterSLEEPMode+0x34>)
 800317a:	f023 0304 	bic.w	r3, r3, #4
 800317e:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8003180:	78fb      	ldrb	r3, [r7, #3]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d101      	bne.n	800318a <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003186:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8003188:	e002      	b.n	8003190 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 800318a:	bf40      	sev
    __WFE();
 800318c:	bf20      	wfe
    __WFE();
 800318e:	bf20      	wfe
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	bc80      	pop	{r7}
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	e000ed00 	.word	0xe000ed00

080031a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e26c      	b.n	800368c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f000 8087 	beq.w	80032ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031c0:	4b92      	ldr	r3, [pc, #584]	; (800340c <HAL_RCC_OscConfig+0x26c>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f003 030c 	and.w	r3, r3, #12
 80031c8:	2b04      	cmp	r3, #4
 80031ca:	d00c      	beq.n	80031e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031cc:	4b8f      	ldr	r3, [pc, #572]	; (800340c <HAL_RCC_OscConfig+0x26c>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f003 030c 	and.w	r3, r3, #12
 80031d4:	2b08      	cmp	r3, #8
 80031d6:	d112      	bne.n	80031fe <HAL_RCC_OscConfig+0x5e>
 80031d8:	4b8c      	ldr	r3, [pc, #560]	; (800340c <HAL_RCC_OscConfig+0x26c>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031e4:	d10b      	bne.n	80031fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031e6:	4b89      	ldr	r3, [pc, #548]	; (800340c <HAL_RCC_OscConfig+0x26c>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d06c      	beq.n	80032cc <HAL_RCC_OscConfig+0x12c>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d168      	bne.n	80032cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e246      	b.n	800368c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003206:	d106      	bne.n	8003216 <HAL_RCC_OscConfig+0x76>
 8003208:	4b80      	ldr	r3, [pc, #512]	; (800340c <HAL_RCC_OscConfig+0x26c>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a7f      	ldr	r2, [pc, #508]	; (800340c <HAL_RCC_OscConfig+0x26c>)
 800320e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003212:	6013      	str	r3, [r2, #0]
 8003214:	e02e      	b.n	8003274 <HAL_RCC_OscConfig+0xd4>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10c      	bne.n	8003238 <HAL_RCC_OscConfig+0x98>
 800321e:	4b7b      	ldr	r3, [pc, #492]	; (800340c <HAL_RCC_OscConfig+0x26c>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a7a      	ldr	r2, [pc, #488]	; (800340c <HAL_RCC_OscConfig+0x26c>)
 8003224:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003228:	6013      	str	r3, [r2, #0]
 800322a:	4b78      	ldr	r3, [pc, #480]	; (800340c <HAL_RCC_OscConfig+0x26c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a77      	ldr	r2, [pc, #476]	; (800340c <HAL_RCC_OscConfig+0x26c>)
 8003230:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003234:	6013      	str	r3, [r2, #0]
 8003236:	e01d      	b.n	8003274 <HAL_RCC_OscConfig+0xd4>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003240:	d10c      	bne.n	800325c <HAL_RCC_OscConfig+0xbc>
 8003242:	4b72      	ldr	r3, [pc, #456]	; (800340c <HAL_RCC_OscConfig+0x26c>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a71      	ldr	r2, [pc, #452]	; (800340c <HAL_RCC_OscConfig+0x26c>)
 8003248:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800324c:	6013      	str	r3, [r2, #0]
 800324e:	4b6f      	ldr	r3, [pc, #444]	; (800340c <HAL_RCC_OscConfig+0x26c>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a6e      	ldr	r2, [pc, #440]	; (800340c <HAL_RCC_OscConfig+0x26c>)
 8003254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003258:	6013      	str	r3, [r2, #0]
 800325a:	e00b      	b.n	8003274 <HAL_RCC_OscConfig+0xd4>
 800325c:	4b6b      	ldr	r3, [pc, #428]	; (800340c <HAL_RCC_OscConfig+0x26c>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a6a      	ldr	r2, [pc, #424]	; (800340c <HAL_RCC_OscConfig+0x26c>)
 8003262:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003266:	6013      	str	r3, [r2, #0]
 8003268:	4b68      	ldr	r3, [pc, #416]	; (800340c <HAL_RCC_OscConfig+0x26c>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a67      	ldr	r2, [pc, #412]	; (800340c <HAL_RCC_OscConfig+0x26c>)
 800326e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003272:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d013      	beq.n	80032a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800327c:	f7ff fbde 	bl	8002a3c <HAL_GetTick>
 8003280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003282:	e008      	b.n	8003296 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003284:	f7ff fbda 	bl	8002a3c <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b64      	cmp	r3, #100	; 0x64
 8003290:	d901      	bls.n	8003296 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e1fa      	b.n	800368c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003296:	4b5d      	ldr	r3, [pc, #372]	; (800340c <HAL_RCC_OscConfig+0x26c>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d0f0      	beq.n	8003284 <HAL_RCC_OscConfig+0xe4>
 80032a2:	e014      	b.n	80032ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a4:	f7ff fbca 	bl	8002a3c <HAL_GetTick>
 80032a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032aa:	e008      	b.n	80032be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032ac:	f7ff fbc6 	bl	8002a3c <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b64      	cmp	r3, #100	; 0x64
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e1e6      	b.n	800368c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032be:	4b53      	ldr	r3, [pc, #332]	; (800340c <HAL_RCC_OscConfig+0x26c>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1f0      	bne.n	80032ac <HAL_RCC_OscConfig+0x10c>
 80032ca:	e000      	b.n	80032ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d063      	beq.n	80033a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032da:	4b4c      	ldr	r3, [pc, #304]	; (800340c <HAL_RCC_OscConfig+0x26c>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f003 030c 	and.w	r3, r3, #12
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00b      	beq.n	80032fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80032e6:	4b49      	ldr	r3, [pc, #292]	; (800340c <HAL_RCC_OscConfig+0x26c>)
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f003 030c 	and.w	r3, r3, #12
 80032ee:	2b08      	cmp	r3, #8
 80032f0:	d11c      	bne.n	800332c <HAL_RCC_OscConfig+0x18c>
 80032f2:	4b46      	ldr	r3, [pc, #280]	; (800340c <HAL_RCC_OscConfig+0x26c>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d116      	bne.n	800332c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032fe:	4b43      	ldr	r3, [pc, #268]	; (800340c <HAL_RCC_OscConfig+0x26c>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d005      	beq.n	8003316 <HAL_RCC_OscConfig+0x176>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d001      	beq.n	8003316 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e1ba      	b.n	800368c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003316:	4b3d      	ldr	r3, [pc, #244]	; (800340c <HAL_RCC_OscConfig+0x26c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	4939      	ldr	r1, [pc, #228]	; (800340c <HAL_RCC_OscConfig+0x26c>)
 8003326:	4313      	orrs	r3, r2
 8003328:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800332a:	e03a      	b.n	80033a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d020      	beq.n	8003376 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003334:	4b36      	ldr	r3, [pc, #216]	; (8003410 <HAL_RCC_OscConfig+0x270>)
 8003336:	2201      	movs	r2, #1
 8003338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800333a:	f7ff fb7f 	bl	8002a3c <HAL_GetTick>
 800333e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003340:	e008      	b.n	8003354 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003342:	f7ff fb7b 	bl	8002a3c <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	2b02      	cmp	r3, #2
 800334e:	d901      	bls.n	8003354 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e19b      	b.n	800368c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003354:	4b2d      	ldr	r3, [pc, #180]	; (800340c <HAL_RCC_OscConfig+0x26c>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0302 	and.w	r3, r3, #2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d0f0      	beq.n	8003342 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003360:	4b2a      	ldr	r3, [pc, #168]	; (800340c <HAL_RCC_OscConfig+0x26c>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	695b      	ldr	r3, [r3, #20]
 800336c:	00db      	lsls	r3, r3, #3
 800336e:	4927      	ldr	r1, [pc, #156]	; (800340c <HAL_RCC_OscConfig+0x26c>)
 8003370:	4313      	orrs	r3, r2
 8003372:	600b      	str	r3, [r1, #0]
 8003374:	e015      	b.n	80033a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003376:	4b26      	ldr	r3, [pc, #152]	; (8003410 <HAL_RCC_OscConfig+0x270>)
 8003378:	2200      	movs	r2, #0
 800337a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800337c:	f7ff fb5e 	bl	8002a3c <HAL_GetTick>
 8003380:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003382:	e008      	b.n	8003396 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003384:	f7ff fb5a 	bl	8002a3c <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b02      	cmp	r3, #2
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e17a      	b.n	800368c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003396:	4b1d      	ldr	r3, [pc, #116]	; (800340c <HAL_RCC_OscConfig+0x26c>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1f0      	bne.n	8003384 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0308 	and.w	r3, r3, #8
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d03a      	beq.n	8003424 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d019      	beq.n	80033ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033b6:	4b17      	ldr	r3, [pc, #92]	; (8003414 <HAL_RCC_OscConfig+0x274>)
 80033b8:	2201      	movs	r2, #1
 80033ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033bc:	f7ff fb3e 	bl	8002a3c <HAL_GetTick>
 80033c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033c2:	e008      	b.n	80033d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033c4:	f7ff fb3a 	bl	8002a3c <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e15a      	b.n	800368c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033d6:	4b0d      	ldr	r3, [pc, #52]	; (800340c <HAL_RCC_OscConfig+0x26c>)
 80033d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d0f0      	beq.n	80033c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80033e2:	2001      	movs	r0, #1
 80033e4:	f000 facc 	bl	8003980 <RCC_Delay>
 80033e8:	e01c      	b.n	8003424 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033ea:	4b0a      	ldr	r3, [pc, #40]	; (8003414 <HAL_RCC_OscConfig+0x274>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033f0:	f7ff fb24 	bl	8002a3c <HAL_GetTick>
 80033f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033f6:	e00f      	b.n	8003418 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033f8:	f7ff fb20 	bl	8002a3c <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b02      	cmp	r3, #2
 8003404:	d908      	bls.n	8003418 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e140      	b.n	800368c <HAL_RCC_OscConfig+0x4ec>
 800340a:	bf00      	nop
 800340c:	40021000 	.word	0x40021000
 8003410:	42420000 	.word	0x42420000
 8003414:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003418:	4b9e      	ldr	r3, [pc, #632]	; (8003694 <HAL_RCC_OscConfig+0x4f4>)
 800341a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1e9      	bne.n	80033f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0304 	and.w	r3, r3, #4
 800342c:	2b00      	cmp	r3, #0
 800342e:	f000 80a6 	beq.w	800357e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003432:	2300      	movs	r3, #0
 8003434:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003436:	4b97      	ldr	r3, [pc, #604]	; (8003694 <HAL_RCC_OscConfig+0x4f4>)
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d10d      	bne.n	800345e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003442:	4b94      	ldr	r3, [pc, #592]	; (8003694 <HAL_RCC_OscConfig+0x4f4>)
 8003444:	69db      	ldr	r3, [r3, #28]
 8003446:	4a93      	ldr	r2, [pc, #588]	; (8003694 <HAL_RCC_OscConfig+0x4f4>)
 8003448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800344c:	61d3      	str	r3, [r2, #28]
 800344e:	4b91      	ldr	r3, [pc, #580]	; (8003694 <HAL_RCC_OscConfig+0x4f4>)
 8003450:	69db      	ldr	r3, [r3, #28]
 8003452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003456:	60bb      	str	r3, [r7, #8]
 8003458:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800345a:	2301      	movs	r3, #1
 800345c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800345e:	4b8e      	ldr	r3, [pc, #568]	; (8003698 <HAL_RCC_OscConfig+0x4f8>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003466:	2b00      	cmp	r3, #0
 8003468:	d118      	bne.n	800349c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800346a:	4b8b      	ldr	r3, [pc, #556]	; (8003698 <HAL_RCC_OscConfig+0x4f8>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a8a      	ldr	r2, [pc, #552]	; (8003698 <HAL_RCC_OscConfig+0x4f8>)
 8003470:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003474:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003476:	f7ff fae1 	bl	8002a3c <HAL_GetTick>
 800347a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800347c:	e008      	b.n	8003490 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800347e:	f7ff fadd 	bl	8002a3c <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b64      	cmp	r3, #100	; 0x64
 800348a:	d901      	bls.n	8003490 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e0fd      	b.n	800368c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003490:	4b81      	ldr	r3, [pc, #516]	; (8003698 <HAL_RCC_OscConfig+0x4f8>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003498:	2b00      	cmp	r3, #0
 800349a:	d0f0      	beq.n	800347e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d106      	bne.n	80034b2 <HAL_RCC_OscConfig+0x312>
 80034a4:	4b7b      	ldr	r3, [pc, #492]	; (8003694 <HAL_RCC_OscConfig+0x4f4>)
 80034a6:	6a1b      	ldr	r3, [r3, #32]
 80034a8:	4a7a      	ldr	r2, [pc, #488]	; (8003694 <HAL_RCC_OscConfig+0x4f4>)
 80034aa:	f043 0301 	orr.w	r3, r3, #1
 80034ae:	6213      	str	r3, [r2, #32]
 80034b0:	e02d      	b.n	800350e <HAL_RCC_OscConfig+0x36e>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10c      	bne.n	80034d4 <HAL_RCC_OscConfig+0x334>
 80034ba:	4b76      	ldr	r3, [pc, #472]	; (8003694 <HAL_RCC_OscConfig+0x4f4>)
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	4a75      	ldr	r2, [pc, #468]	; (8003694 <HAL_RCC_OscConfig+0x4f4>)
 80034c0:	f023 0301 	bic.w	r3, r3, #1
 80034c4:	6213      	str	r3, [r2, #32]
 80034c6:	4b73      	ldr	r3, [pc, #460]	; (8003694 <HAL_RCC_OscConfig+0x4f4>)
 80034c8:	6a1b      	ldr	r3, [r3, #32]
 80034ca:	4a72      	ldr	r2, [pc, #456]	; (8003694 <HAL_RCC_OscConfig+0x4f4>)
 80034cc:	f023 0304 	bic.w	r3, r3, #4
 80034d0:	6213      	str	r3, [r2, #32]
 80034d2:	e01c      	b.n	800350e <HAL_RCC_OscConfig+0x36e>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	2b05      	cmp	r3, #5
 80034da:	d10c      	bne.n	80034f6 <HAL_RCC_OscConfig+0x356>
 80034dc:	4b6d      	ldr	r3, [pc, #436]	; (8003694 <HAL_RCC_OscConfig+0x4f4>)
 80034de:	6a1b      	ldr	r3, [r3, #32]
 80034e0:	4a6c      	ldr	r2, [pc, #432]	; (8003694 <HAL_RCC_OscConfig+0x4f4>)
 80034e2:	f043 0304 	orr.w	r3, r3, #4
 80034e6:	6213      	str	r3, [r2, #32]
 80034e8:	4b6a      	ldr	r3, [pc, #424]	; (8003694 <HAL_RCC_OscConfig+0x4f4>)
 80034ea:	6a1b      	ldr	r3, [r3, #32]
 80034ec:	4a69      	ldr	r2, [pc, #420]	; (8003694 <HAL_RCC_OscConfig+0x4f4>)
 80034ee:	f043 0301 	orr.w	r3, r3, #1
 80034f2:	6213      	str	r3, [r2, #32]
 80034f4:	e00b      	b.n	800350e <HAL_RCC_OscConfig+0x36e>
 80034f6:	4b67      	ldr	r3, [pc, #412]	; (8003694 <HAL_RCC_OscConfig+0x4f4>)
 80034f8:	6a1b      	ldr	r3, [r3, #32]
 80034fa:	4a66      	ldr	r2, [pc, #408]	; (8003694 <HAL_RCC_OscConfig+0x4f4>)
 80034fc:	f023 0301 	bic.w	r3, r3, #1
 8003500:	6213      	str	r3, [r2, #32]
 8003502:	4b64      	ldr	r3, [pc, #400]	; (8003694 <HAL_RCC_OscConfig+0x4f4>)
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	4a63      	ldr	r2, [pc, #396]	; (8003694 <HAL_RCC_OscConfig+0x4f4>)
 8003508:	f023 0304 	bic.w	r3, r3, #4
 800350c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d015      	beq.n	8003542 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003516:	f7ff fa91 	bl	8002a3c <HAL_GetTick>
 800351a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800351c:	e00a      	b.n	8003534 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800351e:	f7ff fa8d 	bl	8002a3c <HAL_GetTick>
 8003522:	4602      	mov	r2, r0
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	f241 3288 	movw	r2, #5000	; 0x1388
 800352c:	4293      	cmp	r3, r2
 800352e:	d901      	bls.n	8003534 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e0ab      	b.n	800368c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003534:	4b57      	ldr	r3, [pc, #348]	; (8003694 <HAL_RCC_OscConfig+0x4f4>)
 8003536:	6a1b      	ldr	r3, [r3, #32]
 8003538:	f003 0302 	and.w	r3, r3, #2
 800353c:	2b00      	cmp	r3, #0
 800353e:	d0ee      	beq.n	800351e <HAL_RCC_OscConfig+0x37e>
 8003540:	e014      	b.n	800356c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003542:	f7ff fa7b 	bl	8002a3c <HAL_GetTick>
 8003546:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003548:	e00a      	b.n	8003560 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800354a:	f7ff fa77 	bl	8002a3c <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	f241 3288 	movw	r2, #5000	; 0x1388
 8003558:	4293      	cmp	r3, r2
 800355a:	d901      	bls.n	8003560 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e095      	b.n	800368c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003560:	4b4c      	ldr	r3, [pc, #304]	; (8003694 <HAL_RCC_OscConfig+0x4f4>)
 8003562:	6a1b      	ldr	r3, [r3, #32]
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	2b00      	cmp	r3, #0
 800356a:	d1ee      	bne.n	800354a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800356c:	7dfb      	ldrb	r3, [r7, #23]
 800356e:	2b01      	cmp	r3, #1
 8003570:	d105      	bne.n	800357e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003572:	4b48      	ldr	r3, [pc, #288]	; (8003694 <HAL_RCC_OscConfig+0x4f4>)
 8003574:	69db      	ldr	r3, [r3, #28]
 8003576:	4a47      	ldr	r2, [pc, #284]	; (8003694 <HAL_RCC_OscConfig+0x4f4>)
 8003578:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800357c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	2b00      	cmp	r3, #0
 8003584:	f000 8081 	beq.w	800368a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003588:	4b42      	ldr	r3, [pc, #264]	; (8003694 <HAL_RCC_OscConfig+0x4f4>)
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f003 030c 	and.w	r3, r3, #12
 8003590:	2b08      	cmp	r3, #8
 8003592:	d061      	beq.n	8003658 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	69db      	ldr	r3, [r3, #28]
 8003598:	2b02      	cmp	r3, #2
 800359a:	d146      	bne.n	800362a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800359c:	4b3f      	ldr	r3, [pc, #252]	; (800369c <HAL_RCC_OscConfig+0x4fc>)
 800359e:	2200      	movs	r2, #0
 80035a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a2:	f7ff fa4b 	bl	8002a3c <HAL_GetTick>
 80035a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035a8:	e008      	b.n	80035bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035aa:	f7ff fa47 	bl	8002a3c <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d901      	bls.n	80035bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e067      	b.n	800368c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035bc:	4b35      	ldr	r3, [pc, #212]	; (8003694 <HAL_RCC_OscConfig+0x4f4>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1f0      	bne.n	80035aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a1b      	ldr	r3, [r3, #32]
 80035cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035d0:	d108      	bne.n	80035e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80035d2:	4b30      	ldr	r3, [pc, #192]	; (8003694 <HAL_RCC_OscConfig+0x4f4>)
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	492d      	ldr	r1, [pc, #180]	; (8003694 <HAL_RCC_OscConfig+0x4f4>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035e4:	4b2b      	ldr	r3, [pc, #172]	; (8003694 <HAL_RCC_OscConfig+0x4f4>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a19      	ldr	r1, [r3, #32]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f4:	430b      	orrs	r3, r1
 80035f6:	4927      	ldr	r1, [pc, #156]	; (8003694 <HAL_RCC_OscConfig+0x4f4>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035fc:	4b27      	ldr	r3, [pc, #156]	; (800369c <HAL_RCC_OscConfig+0x4fc>)
 80035fe:	2201      	movs	r2, #1
 8003600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003602:	f7ff fa1b 	bl	8002a3c <HAL_GetTick>
 8003606:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003608:	e008      	b.n	800361c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800360a:	f7ff fa17 	bl	8002a3c <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	2b02      	cmp	r3, #2
 8003616:	d901      	bls.n	800361c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e037      	b.n	800368c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800361c:	4b1d      	ldr	r3, [pc, #116]	; (8003694 <HAL_RCC_OscConfig+0x4f4>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d0f0      	beq.n	800360a <HAL_RCC_OscConfig+0x46a>
 8003628:	e02f      	b.n	800368a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800362a:	4b1c      	ldr	r3, [pc, #112]	; (800369c <HAL_RCC_OscConfig+0x4fc>)
 800362c:	2200      	movs	r2, #0
 800362e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003630:	f7ff fa04 	bl	8002a3c <HAL_GetTick>
 8003634:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003636:	e008      	b.n	800364a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003638:	f7ff fa00 	bl	8002a3c <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	2b02      	cmp	r3, #2
 8003644:	d901      	bls.n	800364a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e020      	b.n	800368c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800364a:	4b12      	ldr	r3, [pc, #72]	; (8003694 <HAL_RCC_OscConfig+0x4f4>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1f0      	bne.n	8003638 <HAL_RCC_OscConfig+0x498>
 8003656:	e018      	b.n	800368a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	69db      	ldr	r3, [r3, #28]
 800365c:	2b01      	cmp	r3, #1
 800365e:	d101      	bne.n	8003664 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e013      	b.n	800368c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003664:	4b0b      	ldr	r3, [pc, #44]	; (8003694 <HAL_RCC_OscConfig+0x4f4>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a1b      	ldr	r3, [r3, #32]
 8003674:	429a      	cmp	r2, r3
 8003676:	d106      	bne.n	8003686 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003682:	429a      	cmp	r2, r3
 8003684:	d001      	beq.n	800368a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e000      	b.n	800368c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	3718      	adds	r7, #24
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	40021000 	.word	0x40021000
 8003698:	40007000 	.word	0x40007000
 800369c:	42420060 	.word	0x42420060

080036a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d101      	bne.n	80036b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e0d0      	b.n	8003856 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036b4:	4b6a      	ldr	r3, [pc, #424]	; (8003860 <HAL_RCC_ClockConfig+0x1c0>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0307 	and.w	r3, r3, #7
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d910      	bls.n	80036e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036c2:	4b67      	ldr	r3, [pc, #412]	; (8003860 <HAL_RCC_ClockConfig+0x1c0>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f023 0207 	bic.w	r2, r3, #7
 80036ca:	4965      	ldr	r1, [pc, #404]	; (8003860 <HAL_RCC_ClockConfig+0x1c0>)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036d2:	4b63      	ldr	r3, [pc, #396]	; (8003860 <HAL_RCC_ClockConfig+0x1c0>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0307 	and.w	r3, r3, #7
 80036da:	683a      	ldr	r2, [r7, #0]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d001      	beq.n	80036e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e0b8      	b.n	8003856 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d020      	beq.n	8003732 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0304 	and.w	r3, r3, #4
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d005      	beq.n	8003708 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036fc:	4b59      	ldr	r3, [pc, #356]	; (8003864 <HAL_RCC_ClockConfig+0x1c4>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	4a58      	ldr	r2, [pc, #352]	; (8003864 <HAL_RCC_ClockConfig+0x1c4>)
 8003702:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003706:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0308 	and.w	r3, r3, #8
 8003710:	2b00      	cmp	r3, #0
 8003712:	d005      	beq.n	8003720 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003714:	4b53      	ldr	r3, [pc, #332]	; (8003864 <HAL_RCC_ClockConfig+0x1c4>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	4a52      	ldr	r2, [pc, #328]	; (8003864 <HAL_RCC_ClockConfig+0x1c4>)
 800371a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800371e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003720:	4b50      	ldr	r3, [pc, #320]	; (8003864 <HAL_RCC_ClockConfig+0x1c4>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	494d      	ldr	r1, [pc, #308]	; (8003864 <HAL_RCC_ClockConfig+0x1c4>)
 800372e:	4313      	orrs	r3, r2
 8003730:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b00      	cmp	r3, #0
 800373c:	d040      	beq.n	80037c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d107      	bne.n	8003756 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003746:	4b47      	ldr	r3, [pc, #284]	; (8003864 <HAL_RCC_ClockConfig+0x1c4>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d115      	bne.n	800377e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e07f      	b.n	8003856 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	2b02      	cmp	r3, #2
 800375c:	d107      	bne.n	800376e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800375e:	4b41      	ldr	r3, [pc, #260]	; (8003864 <HAL_RCC_ClockConfig+0x1c4>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d109      	bne.n	800377e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e073      	b.n	8003856 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800376e:	4b3d      	ldr	r3, [pc, #244]	; (8003864 <HAL_RCC_ClockConfig+0x1c4>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e06b      	b.n	8003856 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800377e:	4b39      	ldr	r3, [pc, #228]	; (8003864 <HAL_RCC_ClockConfig+0x1c4>)
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f023 0203 	bic.w	r2, r3, #3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	4936      	ldr	r1, [pc, #216]	; (8003864 <HAL_RCC_ClockConfig+0x1c4>)
 800378c:	4313      	orrs	r3, r2
 800378e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003790:	f7ff f954 	bl	8002a3c <HAL_GetTick>
 8003794:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003796:	e00a      	b.n	80037ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003798:	f7ff f950 	bl	8002a3c <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e053      	b.n	8003856 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ae:	4b2d      	ldr	r3, [pc, #180]	; (8003864 <HAL_RCC_ClockConfig+0x1c4>)
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f003 020c 	and.w	r2, r3, #12
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	429a      	cmp	r2, r3
 80037be:	d1eb      	bne.n	8003798 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037c0:	4b27      	ldr	r3, [pc, #156]	; (8003860 <HAL_RCC_ClockConfig+0x1c0>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0307 	and.w	r3, r3, #7
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d210      	bcs.n	80037f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ce:	4b24      	ldr	r3, [pc, #144]	; (8003860 <HAL_RCC_ClockConfig+0x1c0>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f023 0207 	bic.w	r2, r3, #7
 80037d6:	4922      	ldr	r1, [pc, #136]	; (8003860 <HAL_RCC_ClockConfig+0x1c0>)
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	4313      	orrs	r3, r2
 80037dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037de:	4b20      	ldr	r3, [pc, #128]	; (8003860 <HAL_RCC_ClockConfig+0x1c0>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0307 	and.w	r3, r3, #7
 80037e6:	683a      	ldr	r2, [r7, #0]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d001      	beq.n	80037f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e032      	b.n	8003856 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0304 	and.w	r3, r3, #4
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d008      	beq.n	800380e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037fc:	4b19      	ldr	r3, [pc, #100]	; (8003864 <HAL_RCC_ClockConfig+0x1c4>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	4916      	ldr	r1, [pc, #88]	; (8003864 <HAL_RCC_ClockConfig+0x1c4>)
 800380a:	4313      	orrs	r3, r2
 800380c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0308 	and.w	r3, r3, #8
 8003816:	2b00      	cmp	r3, #0
 8003818:	d009      	beq.n	800382e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800381a:	4b12      	ldr	r3, [pc, #72]	; (8003864 <HAL_RCC_ClockConfig+0x1c4>)
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	00db      	lsls	r3, r3, #3
 8003828:	490e      	ldr	r1, [pc, #56]	; (8003864 <HAL_RCC_ClockConfig+0x1c4>)
 800382a:	4313      	orrs	r3, r2
 800382c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800382e:	f000 f821 	bl	8003874 <HAL_RCC_GetSysClockFreq>
 8003832:	4602      	mov	r2, r0
 8003834:	4b0b      	ldr	r3, [pc, #44]	; (8003864 <HAL_RCC_ClockConfig+0x1c4>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	091b      	lsrs	r3, r3, #4
 800383a:	f003 030f 	and.w	r3, r3, #15
 800383e:	490a      	ldr	r1, [pc, #40]	; (8003868 <HAL_RCC_ClockConfig+0x1c8>)
 8003840:	5ccb      	ldrb	r3, [r1, r3]
 8003842:	fa22 f303 	lsr.w	r3, r2, r3
 8003846:	4a09      	ldr	r2, [pc, #36]	; (800386c <HAL_RCC_ClockConfig+0x1cc>)
 8003848:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800384a:	4b09      	ldr	r3, [pc, #36]	; (8003870 <HAL_RCC_ClockConfig+0x1d0>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4618      	mov	r0, r3
 8003850:	f7ff f8b2 	bl	80029b8 <HAL_InitTick>

  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	40022000 	.word	0x40022000
 8003864:	40021000 	.word	0x40021000
 8003868:	08005eac 	.word	0x08005eac
 800386c:	20000060 	.word	0x20000060
 8003870:	20000064 	.word	0x20000064

08003874 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003874:	b480      	push	{r7}
 8003876:	b087      	sub	sp, #28
 8003878:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800387a:	2300      	movs	r3, #0
 800387c:	60fb      	str	r3, [r7, #12]
 800387e:	2300      	movs	r3, #0
 8003880:	60bb      	str	r3, [r7, #8]
 8003882:	2300      	movs	r3, #0
 8003884:	617b      	str	r3, [r7, #20]
 8003886:	2300      	movs	r3, #0
 8003888:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800388a:	2300      	movs	r3, #0
 800388c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800388e:	4b1e      	ldr	r3, [pc, #120]	; (8003908 <HAL_RCC_GetSysClockFreq+0x94>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f003 030c 	and.w	r3, r3, #12
 800389a:	2b04      	cmp	r3, #4
 800389c:	d002      	beq.n	80038a4 <HAL_RCC_GetSysClockFreq+0x30>
 800389e:	2b08      	cmp	r3, #8
 80038a0:	d003      	beq.n	80038aa <HAL_RCC_GetSysClockFreq+0x36>
 80038a2:	e027      	b.n	80038f4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038a4:	4b19      	ldr	r3, [pc, #100]	; (800390c <HAL_RCC_GetSysClockFreq+0x98>)
 80038a6:	613b      	str	r3, [r7, #16]
      break;
 80038a8:	e027      	b.n	80038fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	0c9b      	lsrs	r3, r3, #18
 80038ae:	f003 030f 	and.w	r3, r3, #15
 80038b2:	4a17      	ldr	r2, [pc, #92]	; (8003910 <HAL_RCC_GetSysClockFreq+0x9c>)
 80038b4:	5cd3      	ldrb	r3, [r2, r3]
 80038b6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d010      	beq.n	80038e4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038c2:	4b11      	ldr	r3, [pc, #68]	; (8003908 <HAL_RCC_GetSysClockFreq+0x94>)
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	0c5b      	lsrs	r3, r3, #17
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	4a11      	ldr	r2, [pc, #68]	; (8003914 <HAL_RCC_GetSysClockFreq+0xa0>)
 80038ce:	5cd3      	ldrb	r3, [r2, r3]
 80038d0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a0d      	ldr	r2, [pc, #52]	; (800390c <HAL_RCC_GetSysClockFreq+0x98>)
 80038d6:	fb02 f203 	mul.w	r2, r2, r3
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e0:	617b      	str	r3, [r7, #20]
 80038e2:	e004      	b.n	80038ee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a0c      	ldr	r2, [pc, #48]	; (8003918 <HAL_RCC_GetSysClockFreq+0xa4>)
 80038e8:	fb02 f303 	mul.w	r3, r2, r3
 80038ec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	613b      	str	r3, [r7, #16]
      break;
 80038f2:	e002      	b.n	80038fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80038f4:	4b05      	ldr	r3, [pc, #20]	; (800390c <HAL_RCC_GetSysClockFreq+0x98>)
 80038f6:	613b      	str	r3, [r7, #16]
      break;
 80038f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038fa:	693b      	ldr	r3, [r7, #16]
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	371c      	adds	r7, #28
 8003900:	46bd      	mov	sp, r7
 8003902:	bc80      	pop	{r7}
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	40021000 	.word	0x40021000
 800390c:	007a1200 	.word	0x007a1200
 8003910:	08005ec4 	.word	0x08005ec4
 8003914:	08005ed4 	.word	0x08005ed4
 8003918:	003d0900 	.word	0x003d0900

0800391c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003920:	4b02      	ldr	r3, [pc, #8]	; (800392c <HAL_RCC_GetHCLKFreq+0x10>)
 8003922:	681b      	ldr	r3, [r3, #0]
}
 8003924:	4618      	mov	r0, r3
 8003926:	46bd      	mov	sp, r7
 8003928:	bc80      	pop	{r7}
 800392a:	4770      	bx	lr
 800392c:	20000060 	.word	0x20000060

08003930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003934:	f7ff fff2 	bl	800391c <HAL_RCC_GetHCLKFreq>
 8003938:	4602      	mov	r2, r0
 800393a:	4b05      	ldr	r3, [pc, #20]	; (8003950 <HAL_RCC_GetPCLK1Freq+0x20>)
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	0a1b      	lsrs	r3, r3, #8
 8003940:	f003 0307 	and.w	r3, r3, #7
 8003944:	4903      	ldr	r1, [pc, #12]	; (8003954 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003946:	5ccb      	ldrb	r3, [r1, r3]
 8003948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800394c:	4618      	mov	r0, r3
 800394e:	bd80      	pop	{r7, pc}
 8003950:	40021000 	.word	0x40021000
 8003954:	08005ebc 	.word	0x08005ebc

08003958 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800395c:	f7ff ffde 	bl	800391c <HAL_RCC_GetHCLKFreq>
 8003960:	4602      	mov	r2, r0
 8003962:	4b05      	ldr	r3, [pc, #20]	; (8003978 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	0adb      	lsrs	r3, r3, #11
 8003968:	f003 0307 	and.w	r3, r3, #7
 800396c:	4903      	ldr	r1, [pc, #12]	; (800397c <HAL_RCC_GetPCLK2Freq+0x24>)
 800396e:	5ccb      	ldrb	r3, [r1, r3]
 8003970:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003974:	4618      	mov	r0, r3
 8003976:	bd80      	pop	{r7, pc}
 8003978:	40021000 	.word	0x40021000
 800397c:	08005ebc 	.word	0x08005ebc

08003980 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003988:	4b0a      	ldr	r3, [pc, #40]	; (80039b4 <RCC_Delay+0x34>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a0a      	ldr	r2, [pc, #40]	; (80039b8 <RCC_Delay+0x38>)
 800398e:	fba2 2303 	umull	r2, r3, r2, r3
 8003992:	0a5b      	lsrs	r3, r3, #9
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	fb02 f303 	mul.w	r3, r2, r3
 800399a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800399c:	bf00      	nop
  }
  while (Delay --);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	1e5a      	subs	r2, r3, #1
 80039a2:	60fa      	str	r2, [r7, #12]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1f9      	bne.n	800399c <RCC_Delay+0x1c>
}
 80039a8:	bf00      	nop
 80039aa:	bf00      	nop
 80039ac:	3714      	adds	r7, #20
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bc80      	pop	{r7}
 80039b2:	4770      	bx	lr
 80039b4:	20000060 	.word	0x20000060
 80039b8:	10624dd3 	.word	0x10624dd3

080039bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e041      	b.n	8003a52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d106      	bne.n	80039e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f7fe fe66 	bl	80026b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2202      	movs	r2, #2
 80039ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	3304      	adds	r3, #4
 80039f8:	4619      	mov	r1, r3
 80039fa:	4610      	mov	r0, r2
 80039fc:	f000 fc30 	bl	8004260 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3708      	adds	r7, #8
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
	...

08003a5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d001      	beq.n	8003a74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e03a      	b.n	8003aea <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2202      	movs	r2, #2
 8003a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68da      	ldr	r2, [r3, #12]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f042 0201 	orr.w	r2, r2, #1
 8003a8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a18      	ldr	r2, [pc, #96]	; (8003af4 <HAL_TIM_Base_Start_IT+0x98>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d00e      	beq.n	8003ab4 <HAL_TIM_Base_Start_IT+0x58>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a9e:	d009      	beq.n	8003ab4 <HAL_TIM_Base_Start_IT+0x58>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a14      	ldr	r2, [pc, #80]	; (8003af8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d004      	beq.n	8003ab4 <HAL_TIM_Base_Start_IT+0x58>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a13      	ldr	r2, [pc, #76]	; (8003afc <HAL_TIM_Base_Start_IT+0xa0>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d111      	bne.n	8003ad8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f003 0307 	and.w	r3, r3, #7
 8003abe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2b06      	cmp	r3, #6
 8003ac4:	d010      	beq.n	8003ae8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f042 0201 	orr.w	r2, r2, #1
 8003ad4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ad6:	e007      	b.n	8003ae8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f042 0201 	orr.w	r2, r2, #1
 8003ae6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3714      	adds	r7, #20
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bc80      	pop	{r7}
 8003af2:	4770      	bx	lr
 8003af4:	40012c00 	.word	0x40012c00
 8003af8:	40000400 	.word	0x40000400
 8003afc:	40000800 	.word	0x40000800

08003b00 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e041      	b.n	8003b96 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d106      	bne.n	8003b2c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 f839 	bl	8003b9e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2202      	movs	r2, #2
 8003b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	3304      	adds	r3, #4
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	4610      	mov	r0, r2
 8003b40:	f000 fb8e 	bl	8004260 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3708      	adds	r7, #8
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	b083      	sub	sp, #12
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003ba6:	bf00      	nop
 8003ba8:	370c      	adds	r7, #12
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bc80      	pop	{r7}
 8003bae:	4770      	bx	lr

08003bb0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d109      	bne.n	8003bd4 <HAL_TIM_PWM_Start+0x24>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	bf14      	ite	ne
 8003bcc:	2301      	movne	r3, #1
 8003bce:	2300      	moveq	r3, #0
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	e022      	b.n	8003c1a <HAL_TIM_PWM_Start+0x6a>
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	2b04      	cmp	r3, #4
 8003bd8:	d109      	bne.n	8003bee <HAL_TIM_PWM_Start+0x3e>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	bf14      	ite	ne
 8003be6:	2301      	movne	r3, #1
 8003be8:	2300      	moveq	r3, #0
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	e015      	b.n	8003c1a <HAL_TIM_PWM_Start+0x6a>
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	2b08      	cmp	r3, #8
 8003bf2:	d109      	bne.n	8003c08 <HAL_TIM_PWM_Start+0x58>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	bf14      	ite	ne
 8003c00:	2301      	movne	r3, #1
 8003c02:	2300      	moveq	r3, #0
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	e008      	b.n	8003c1a <HAL_TIM_PWM_Start+0x6a>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	bf14      	ite	ne
 8003c14:	2301      	movne	r3, #1
 8003c16:	2300      	moveq	r3, #0
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e05e      	b.n	8003ce0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d104      	bne.n	8003c32 <HAL_TIM_PWM_Start+0x82>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c30:	e013      	b.n	8003c5a <HAL_TIM_PWM_Start+0xaa>
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	2b04      	cmp	r3, #4
 8003c36:	d104      	bne.n	8003c42 <HAL_TIM_PWM_Start+0x92>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2202      	movs	r2, #2
 8003c3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c40:	e00b      	b.n	8003c5a <HAL_TIM_PWM_Start+0xaa>
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	2b08      	cmp	r3, #8
 8003c46:	d104      	bne.n	8003c52 <HAL_TIM_PWM_Start+0xa2>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2202      	movs	r2, #2
 8003c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c50:	e003      	b.n	8003c5a <HAL_TIM_PWM_Start+0xaa>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2202      	movs	r2, #2
 8003c56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	6839      	ldr	r1, [r7, #0]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f000 fd7c 	bl	8004760 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a1e      	ldr	r2, [pc, #120]	; (8003ce8 <HAL_TIM_PWM_Start+0x138>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d107      	bne.n	8003c82 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c80:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a18      	ldr	r2, [pc, #96]	; (8003ce8 <HAL_TIM_PWM_Start+0x138>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d00e      	beq.n	8003caa <HAL_TIM_PWM_Start+0xfa>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c94:	d009      	beq.n	8003caa <HAL_TIM_PWM_Start+0xfa>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a14      	ldr	r2, [pc, #80]	; (8003cec <HAL_TIM_PWM_Start+0x13c>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d004      	beq.n	8003caa <HAL_TIM_PWM_Start+0xfa>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a12      	ldr	r2, [pc, #72]	; (8003cf0 <HAL_TIM_PWM_Start+0x140>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d111      	bne.n	8003cce <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f003 0307 	and.w	r3, r3, #7
 8003cb4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2b06      	cmp	r3, #6
 8003cba:	d010      	beq.n	8003cde <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f042 0201 	orr.w	r2, r2, #1
 8003cca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ccc:	e007      	b.n	8003cde <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f042 0201 	orr.w	r2, r2, #1
 8003cdc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003cde:	2300      	movs	r3, #0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3710      	adds	r7, #16
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	40012c00 	.word	0x40012c00
 8003cec:	40000400 	.word	0x40000400
 8003cf0:	40000800 	.word	0x40000800

08003cf4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d122      	bne.n	8003d50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	f003 0302 	and.w	r3, r3, #2
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d11b      	bne.n	8003d50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f06f 0202 	mvn.w	r2, #2
 8003d20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2201      	movs	r2, #1
 8003d26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	f003 0303 	and.w	r3, r3, #3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d003      	beq.n	8003d3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 fa76 	bl	8004228 <HAL_TIM_IC_CaptureCallback>
 8003d3c:	e005      	b.n	8003d4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 fa69 	bl	8004216 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f000 fa78 	bl	800423a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	f003 0304 	and.w	r3, r3, #4
 8003d5a:	2b04      	cmp	r3, #4
 8003d5c:	d122      	bne.n	8003da4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	f003 0304 	and.w	r3, r3, #4
 8003d68:	2b04      	cmp	r3, #4
 8003d6a:	d11b      	bne.n	8003da4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f06f 0204 	mvn.w	r2, #4
 8003d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2202      	movs	r2, #2
 8003d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	699b      	ldr	r3, [r3, #24]
 8003d82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d003      	beq.n	8003d92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 fa4c 	bl	8004228 <HAL_TIM_IC_CaptureCallback>
 8003d90:	e005      	b.n	8003d9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 fa3f 	bl	8004216 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 fa4e 	bl	800423a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	f003 0308 	and.w	r3, r3, #8
 8003dae:	2b08      	cmp	r3, #8
 8003db0:	d122      	bne.n	8003df8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	f003 0308 	and.w	r3, r3, #8
 8003dbc:	2b08      	cmp	r3, #8
 8003dbe:	d11b      	bne.n	8003df8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f06f 0208 	mvn.w	r2, #8
 8003dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2204      	movs	r2, #4
 8003dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	69db      	ldr	r3, [r3, #28]
 8003dd6:	f003 0303 	and.w	r3, r3, #3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d003      	beq.n	8003de6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 fa22 	bl	8004228 <HAL_TIM_IC_CaptureCallback>
 8003de4:	e005      	b.n	8003df2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 fa15 	bl	8004216 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f000 fa24 	bl	800423a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	f003 0310 	and.w	r3, r3, #16
 8003e02:	2b10      	cmp	r3, #16
 8003e04:	d122      	bne.n	8003e4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	f003 0310 	and.w	r3, r3, #16
 8003e10:	2b10      	cmp	r3, #16
 8003e12:	d11b      	bne.n	8003e4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f06f 0210 	mvn.w	r2, #16
 8003e1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2208      	movs	r2, #8
 8003e22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d003      	beq.n	8003e3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f9f8 	bl	8004228 <HAL_TIM_IC_CaptureCallback>
 8003e38:	e005      	b.n	8003e46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f9eb 	bl	8004216 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 f9fa 	bl	800423a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d10e      	bne.n	8003e78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d107      	bne.n	8003e78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f06f 0201 	mvn.w	r2, #1
 8003e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f7fe f8ac 	bl	8001fd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e82:	2b80      	cmp	r3, #128	; 0x80
 8003e84:	d10e      	bne.n	8003ea4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e90:	2b80      	cmp	r3, #128	; 0x80
 8003e92:	d107      	bne.n	8003ea4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 fce9 	bl	8004876 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eae:	2b40      	cmp	r3, #64	; 0x40
 8003eb0:	d10e      	bne.n	8003ed0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ebc:	2b40      	cmp	r3, #64	; 0x40
 8003ebe:	d107      	bne.n	8003ed0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 f9be 	bl	800424c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	f003 0320 	and.w	r3, r3, #32
 8003eda:	2b20      	cmp	r3, #32
 8003edc:	d10e      	bne.n	8003efc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	f003 0320 	and.w	r3, r3, #32
 8003ee8:	2b20      	cmp	r3, #32
 8003eea:	d107      	bne.n	8003efc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f06f 0220 	mvn.w	r2, #32
 8003ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 fcb4 	bl	8004864 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003efc:	bf00      	nop
 8003efe:	3708      	adds	r7, #8
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b086      	sub	sp, #24
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f10:	2300      	movs	r3, #0
 8003f12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d101      	bne.n	8003f22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003f1e:	2302      	movs	r3, #2
 8003f20:	e0ae      	b.n	8004080 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2b0c      	cmp	r3, #12
 8003f2e:	f200 809f 	bhi.w	8004070 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003f32:	a201      	add	r2, pc, #4	; (adr r2, 8003f38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f38:	08003f6d 	.word	0x08003f6d
 8003f3c:	08004071 	.word	0x08004071
 8003f40:	08004071 	.word	0x08004071
 8003f44:	08004071 	.word	0x08004071
 8003f48:	08003fad 	.word	0x08003fad
 8003f4c:	08004071 	.word	0x08004071
 8003f50:	08004071 	.word	0x08004071
 8003f54:	08004071 	.word	0x08004071
 8003f58:	08003fef 	.word	0x08003fef
 8003f5c:	08004071 	.word	0x08004071
 8003f60:	08004071 	.word	0x08004071
 8003f64:	08004071 	.word	0x08004071
 8003f68:	0800402f 	.word	0x0800402f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68b9      	ldr	r1, [r7, #8]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f000 f9d6 	bl	8004324 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	699a      	ldr	r2, [r3, #24]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f042 0208 	orr.w	r2, r2, #8
 8003f86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	699a      	ldr	r2, [r3, #24]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f022 0204 	bic.w	r2, r2, #4
 8003f96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	6999      	ldr	r1, [r3, #24]
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	691a      	ldr	r2, [r3, #16]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	619a      	str	r2, [r3, #24]
      break;
 8003faa:	e064      	b.n	8004076 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68b9      	ldr	r1, [r7, #8]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f000 fa1c 	bl	80043f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	699a      	ldr	r2, [r3, #24]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	699a      	ldr	r2, [r3, #24]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	6999      	ldr	r1, [r3, #24]
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	021a      	lsls	r2, r3, #8
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	619a      	str	r2, [r3, #24]
      break;
 8003fec:	e043      	b.n	8004076 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68b9      	ldr	r1, [r7, #8]
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f000 fa65 	bl	80044c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	69da      	ldr	r2, [r3, #28]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f042 0208 	orr.w	r2, r2, #8
 8004008:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	69da      	ldr	r2, [r3, #28]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f022 0204 	bic.w	r2, r2, #4
 8004018:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	69d9      	ldr	r1, [r3, #28]
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	691a      	ldr	r2, [r3, #16]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	430a      	orrs	r2, r1
 800402a:	61da      	str	r2, [r3, #28]
      break;
 800402c:	e023      	b.n	8004076 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68b9      	ldr	r1, [r7, #8]
 8004034:	4618      	mov	r0, r3
 8004036:	f000 faaf 	bl	8004598 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	69da      	ldr	r2, [r3, #28]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004048:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	69da      	ldr	r2, [r3, #28]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004058:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	69d9      	ldr	r1, [r3, #28]
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	021a      	lsls	r2, r3, #8
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	430a      	orrs	r2, r1
 800406c:	61da      	str	r2, [r3, #28]
      break;
 800406e:	e002      	b.n	8004076 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	75fb      	strb	r3, [r7, #23]
      break;
 8004074:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800407e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004080:	4618      	mov	r0, r3
 8004082:	3718      	adds	r7, #24
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004092:	2300      	movs	r3, #0
 8004094:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800409c:	2b01      	cmp	r3, #1
 800409e:	d101      	bne.n	80040a4 <HAL_TIM_ConfigClockSource+0x1c>
 80040a0:	2302      	movs	r3, #2
 80040a2:	e0b4      	b.n	800420e <HAL_TIM_ConfigClockSource+0x186>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2202      	movs	r2, #2
 80040b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80040c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68ba      	ldr	r2, [r7, #8]
 80040d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040dc:	d03e      	beq.n	800415c <HAL_TIM_ConfigClockSource+0xd4>
 80040de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040e2:	f200 8087 	bhi.w	80041f4 <HAL_TIM_ConfigClockSource+0x16c>
 80040e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ea:	f000 8086 	beq.w	80041fa <HAL_TIM_ConfigClockSource+0x172>
 80040ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040f2:	d87f      	bhi.n	80041f4 <HAL_TIM_ConfigClockSource+0x16c>
 80040f4:	2b70      	cmp	r3, #112	; 0x70
 80040f6:	d01a      	beq.n	800412e <HAL_TIM_ConfigClockSource+0xa6>
 80040f8:	2b70      	cmp	r3, #112	; 0x70
 80040fa:	d87b      	bhi.n	80041f4 <HAL_TIM_ConfigClockSource+0x16c>
 80040fc:	2b60      	cmp	r3, #96	; 0x60
 80040fe:	d050      	beq.n	80041a2 <HAL_TIM_ConfigClockSource+0x11a>
 8004100:	2b60      	cmp	r3, #96	; 0x60
 8004102:	d877      	bhi.n	80041f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004104:	2b50      	cmp	r3, #80	; 0x50
 8004106:	d03c      	beq.n	8004182 <HAL_TIM_ConfigClockSource+0xfa>
 8004108:	2b50      	cmp	r3, #80	; 0x50
 800410a:	d873      	bhi.n	80041f4 <HAL_TIM_ConfigClockSource+0x16c>
 800410c:	2b40      	cmp	r3, #64	; 0x40
 800410e:	d058      	beq.n	80041c2 <HAL_TIM_ConfigClockSource+0x13a>
 8004110:	2b40      	cmp	r3, #64	; 0x40
 8004112:	d86f      	bhi.n	80041f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004114:	2b30      	cmp	r3, #48	; 0x30
 8004116:	d064      	beq.n	80041e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004118:	2b30      	cmp	r3, #48	; 0x30
 800411a:	d86b      	bhi.n	80041f4 <HAL_TIM_ConfigClockSource+0x16c>
 800411c:	2b20      	cmp	r3, #32
 800411e:	d060      	beq.n	80041e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004120:	2b20      	cmp	r3, #32
 8004122:	d867      	bhi.n	80041f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004124:	2b00      	cmp	r3, #0
 8004126:	d05c      	beq.n	80041e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004128:	2b10      	cmp	r3, #16
 800412a:	d05a      	beq.n	80041e2 <HAL_TIM_ConfigClockSource+0x15a>
 800412c:	e062      	b.n	80041f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6818      	ldr	r0, [r3, #0]
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	6899      	ldr	r1, [r3, #8]
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	685a      	ldr	r2, [r3, #4]
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	f000 faf0 	bl	8004722 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004150:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68ba      	ldr	r2, [r7, #8]
 8004158:	609a      	str	r2, [r3, #8]
      break;
 800415a:	e04f      	b.n	80041fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6818      	ldr	r0, [r3, #0]
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	6899      	ldr	r1, [r3, #8]
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	685a      	ldr	r2, [r3, #4]
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	f000 fad9 	bl	8004722 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	689a      	ldr	r2, [r3, #8]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800417e:	609a      	str	r2, [r3, #8]
      break;
 8004180:	e03c      	b.n	80041fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6818      	ldr	r0, [r3, #0]
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	6859      	ldr	r1, [r3, #4]
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	461a      	mov	r2, r3
 8004190:	f000 fa50 	bl	8004634 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2150      	movs	r1, #80	; 0x50
 800419a:	4618      	mov	r0, r3
 800419c:	f000 faa7 	bl	80046ee <TIM_ITRx_SetConfig>
      break;
 80041a0:	e02c      	b.n	80041fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6818      	ldr	r0, [r3, #0]
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	6859      	ldr	r1, [r3, #4]
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	461a      	mov	r2, r3
 80041b0:	f000 fa6e 	bl	8004690 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	2160      	movs	r1, #96	; 0x60
 80041ba:	4618      	mov	r0, r3
 80041bc:	f000 fa97 	bl	80046ee <TIM_ITRx_SetConfig>
      break;
 80041c0:	e01c      	b.n	80041fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6818      	ldr	r0, [r3, #0]
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	6859      	ldr	r1, [r3, #4]
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	461a      	mov	r2, r3
 80041d0:	f000 fa30 	bl	8004634 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2140      	movs	r1, #64	; 0x40
 80041da:	4618      	mov	r0, r3
 80041dc:	f000 fa87 	bl	80046ee <TIM_ITRx_SetConfig>
      break;
 80041e0:	e00c      	b.n	80041fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4619      	mov	r1, r3
 80041ec:	4610      	mov	r0, r2
 80041ee:	f000 fa7e 	bl	80046ee <TIM_ITRx_SetConfig>
      break;
 80041f2:	e003      	b.n	80041fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	73fb      	strb	r3, [r7, #15]
      break;
 80041f8:	e000      	b.n	80041fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80041fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800420c:	7bfb      	ldrb	r3, [r7, #15]
}
 800420e:	4618      	mov	r0, r3
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}

08004216 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004216:	b480      	push	{r7}
 8004218:	b083      	sub	sp, #12
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800421e:	bf00      	nop
 8004220:	370c      	adds	r7, #12
 8004222:	46bd      	mov	sp, r7
 8004224:	bc80      	pop	{r7}
 8004226:	4770      	bx	lr

08004228 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	bc80      	pop	{r7}
 8004238:	4770      	bx	lr

0800423a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800423a:	b480      	push	{r7}
 800423c:	b083      	sub	sp, #12
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004242:	bf00      	nop
 8004244:	370c      	adds	r7, #12
 8004246:	46bd      	mov	sp, r7
 8004248:	bc80      	pop	{r7}
 800424a:	4770      	bx	lr

0800424c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004254:	bf00      	nop
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	bc80      	pop	{r7}
 800425c:	4770      	bx	lr
	...

08004260 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004260:	b480      	push	{r7}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a29      	ldr	r2, [pc, #164]	; (8004318 <TIM_Base_SetConfig+0xb8>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d00b      	beq.n	8004290 <TIM_Base_SetConfig+0x30>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800427e:	d007      	beq.n	8004290 <TIM_Base_SetConfig+0x30>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a26      	ldr	r2, [pc, #152]	; (800431c <TIM_Base_SetConfig+0xbc>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d003      	beq.n	8004290 <TIM_Base_SetConfig+0x30>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a25      	ldr	r2, [pc, #148]	; (8004320 <TIM_Base_SetConfig+0xc0>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d108      	bne.n	80042a2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004296:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	4313      	orrs	r3, r2
 80042a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a1c      	ldr	r2, [pc, #112]	; (8004318 <TIM_Base_SetConfig+0xb8>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d00b      	beq.n	80042c2 <TIM_Base_SetConfig+0x62>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042b0:	d007      	beq.n	80042c2 <TIM_Base_SetConfig+0x62>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a19      	ldr	r2, [pc, #100]	; (800431c <TIM_Base_SetConfig+0xbc>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d003      	beq.n	80042c2 <TIM_Base_SetConfig+0x62>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a18      	ldr	r2, [pc, #96]	; (8004320 <TIM_Base_SetConfig+0xc0>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d108      	bne.n	80042d4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	4313      	orrs	r3, r2
 80042e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	689a      	ldr	r2, [r3, #8]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a07      	ldr	r2, [pc, #28]	; (8004318 <TIM_Base_SetConfig+0xb8>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d103      	bne.n	8004308 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	691a      	ldr	r2, [r3, #16]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	615a      	str	r2, [r3, #20]
}
 800430e:	bf00      	nop
 8004310:	3714      	adds	r7, #20
 8004312:	46bd      	mov	sp, r7
 8004314:	bc80      	pop	{r7}
 8004316:	4770      	bx	lr
 8004318:	40012c00 	.word	0x40012c00
 800431c:	40000400 	.word	0x40000400
 8004320:	40000800 	.word	0x40000800

08004324 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004324:	b480      	push	{r7}
 8004326:	b087      	sub	sp, #28
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a1b      	ldr	r3, [r3, #32]
 8004338:	f023 0201 	bic.w	r2, r3, #1
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004352:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f023 0303 	bic.w	r3, r3, #3
 800435a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	4313      	orrs	r3, r2
 8004364:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	f023 0302 	bic.w	r3, r3, #2
 800436c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	697a      	ldr	r2, [r7, #20]
 8004374:	4313      	orrs	r3, r2
 8004376:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a1c      	ldr	r2, [pc, #112]	; (80043ec <TIM_OC1_SetConfig+0xc8>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d10c      	bne.n	800439a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	f023 0308 	bic.w	r3, r3, #8
 8004386:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	697a      	ldr	r2, [r7, #20]
 800438e:	4313      	orrs	r3, r2
 8004390:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	f023 0304 	bic.w	r3, r3, #4
 8004398:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a13      	ldr	r2, [pc, #76]	; (80043ec <TIM_OC1_SetConfig+0xc8>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d111      	bne.n	80043c6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80043b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	693a      	ldr	r2, [r7, #16]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	699b      	ldr	r3, [r3, #24]
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	693a      	ldr	r2, [r7, #16]
 80043ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	697a      	ldr	r2, [r7, #20]
 80043de:	621a      	str	r2, [r3, #32]
}
 80043e0:	bf00      	nop
 80043e2:	371c      	adds	r7, #28
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bc80      	pop	{r7}
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop
 80043ec:	40012c00 	.word	0x40012c00

080043f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b087      	sub	sp, #28
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a1b      	ldr	r3, [r3, #32]
 8004404:	f023 0210 	bic.w	r2, r3, #16
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800441e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004426:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	021b      	lsls	r3, r3, #8
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	4313      	orrs	r3, r2
 8004432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	f023 0320 	bic.w	r3, r3, #32
 800443a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	011b      	lsls	r3, r3, #4
 8004442:	697a      	ldr	r2, [r7, #20]
 8004444:	4313      	orrs	r3, r2
 8004446:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4a1d      	ldr	r2, [pc, #116]	; (80044c0 <TIM_OC2_SetConfig+0xd0>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d10d      	bne.n	800446c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004456:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	011b      	lsls	r3, r3, #4
 800445e:	697a      	ldr	r2, [r7, #20]
 8004460:	4313      	orrs	r3, r2
 8004462:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800446a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a14      	ldr	r2, [pc, #80]	; (80044c0 <TIM_OC2_SetConfig+0xd0>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d113      	bne.n	800449c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800447a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004482:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	695b      	ldr	r3, [r3, #20]
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	693a      	ldr	r2, [r7, #16]
 800448c:	4313      	orrs	r3, r2
 800448e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	699b      	ldr	r3, [r3, #24]
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	4313      	orrs	r3, r2
 800449a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	68fa      	ldr	r2, [r7, #12]
 80044a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	685a      	ldr	r2, [r3, #4]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	697a      	ldr	r2, [r7, #20]
 80044b4:	621a      	str	r2, [r3, #32]
}
 80044b6:	bf00      	nop
 80044b8:	371c      	adds	r7, #28
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bc80      	pop	{r7}
 80044be:	4770      	bx	lr
 80044c0:	40012c00 	.word	0x40012c00

080044c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b087      	sub	sp, #28
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a1b      	ldr	r3, [r3, #32]
 80044d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a1b      	ldr	r3, [r3, #32]
 80044d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	69db      	ldr	r3, [r3, #28]
 80044ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f023 0303 	bic.w	r3, r3, #3
 80044fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	4313      	orrs	r3, r2
 8004504:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800450c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	021b      	lsls	r3, r3, #8
 8004514:	697a      	ldr	r2, [r7, #20]
 8004516:	4313      	orrs	r3, r2
 8004518:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a1d      	ldr	r2, [pc, #116]	; (8004594 <TIM_OC3_SetConfig+0xd0>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d10d      	bne.n	800453e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004528:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	021b      	lsls	r3, r3, #8
 8004530:	697a      	ldr	r2, [r7, #20]
 8004532:	4313      	orrs	r3, r2
 8004534:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800453c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a14      	ldr	r2, [pc, #80]	; (8004594 <TIM_OC3_SetConfig+0xd0>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d113      	bne.n	800456e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800454c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004554:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	011b      	lsls	r3, r3, #4
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	4313      	orrs	r3, r2
 8004560:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	011b      	lsls	r3, r3, #4
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	4313      	orrs	r3, r2
 800456c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	685a      	ldr	r2, [r3, #4]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	697a      	ldr	r2, [r7, #20]
 8004586:	621a      	str	r2, [r3, #32]
}
 8004588:	bf00      	nop
 800458a:	371c      	adds	r7, #28
 800458c:	46bd      	mov	sp, r7
 800458e:	bc80      	pop	{r7}
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	40012c00 	.word	0x40012c00

08004598 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004598:	b480      	push	{r7}
 800459a:	b087      	sub	sp, #28
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a1b      	ldr	r3, [r3, #32]
 80045a6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a1b      	ldr	r3, [r3, #32]
 80045ac:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	69db      	ldr	r3, [r3, #28]
 80045be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	021b      	lsls	r3, r3, #8
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	4313      	orrs	r3, r2
 80045da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	031b      	lsls	r3, r3, #12
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a0f      	ldr	r2, [pc, #60]	; (8004630 <TIM_OC4_SetConfig+0x98>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d109      	bne.n	800460c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	695b      	ldr	r3, [r3, #20]
 8004604:	019b      	lsls	r3, r3, #6
 8004606:	697a      	ldr	r2, [r7, #20]
 8004608:	4313      	orrs	r3, r2
 800460a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	68fa      	ldr	r2, [r7, #12]
 8004616:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	685a      	ldr	r2, [r3, #4]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	621a      	str	r2, [r3, #32]
}
 8004626:	bf00      	nop
 8004628:	371c      	adds	r7, #28
 800462a:	46bd      	mov	sp, r7
 800462c:	bc80      	pop	{r7}
 800462e:	4770      	bx	lr
 8004630:	40012c00 	.word	0x40012c00

08004634 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004634:	b480      	push	{r7}
 8004636:	b087      	sub	sp, #28
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6a1b      	ldr	r3, [r3, #32]
 8004644:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	f023 0201 	bic.w	r2, r3, #1
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800465e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	011b      	lsls	r3, r3, #4
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	4313      	orrs	r3, r2
 8004668:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	f023 030a 	bic.w	r3, r3, #10
 8004670:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004672:	697a      	ldr	r2, [r7, #20]
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	4313      	orrs	r3, r2
 8004678:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	697a      	ldr	r2, [r7, #20]
 8004684:	621a      	str	r2, [r3, #32]
}
 8004686:	bf00      	nop
 8004688:	371c      	adds	r7, #28
 800468a:	46bd      	mov	sp, r7
 800468c:	bc80      	pop	{r7}
 800468e:	4770      	bx	lr

08004690 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004690:	b480      	push	{r7}
 8004692:	b087      	sub	sp, #28
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6a1b      	ldr	r3, [r3, #32]
 80046a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6a1b      	ldr	r3, [r3, #32]
 80046a6:	f023 0210 	bic.w	r2, r3, #16
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	031b      	lsls	r3, r3, #12
 80046c0:	693a      	ldr	r2, [r7, #16]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80046cc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	011b      	lsls	r3, r3, #4
 80046d2:	697a      	ldr	r2, [r7, #20]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	693a      	ldr	r2, [r7, #16]
 80046dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	697a      	ldr	r2, [r7, #20]
 80046e2:	621a      	str	r2, [r3, #32]
}
 80046e4:	bf00      	nop
 80046e6:	371c      	adds	r7, #28
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bc80      	pop	{r7}
 80046ec:	4770      	bx	lr

080046ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046ee:	b480      	push	{r7}
 80046f0:	b085      	sub	sp, #20
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
 80046f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004704:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004706:	683a      	ldr	r2, [r7, #0]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	4313      	orrs	r3, r2
 800470c:	f043 0307 	orr.w	r3, r3, #7
 8004710:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	609a      	str	r2, [r3, #8]
}
 8004718:	bf00      	nop
 800471a:	3714      	adds	r7, #20
 800471c:	46bd      	mov	sp, r7
 800471e:	bc80      	pop	{r7}
 8004720:	4770      	bx	lr

08004722 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004722:	b480      	push	{r7}
 8004724:	b087      	sub	sp, #28
 8004726:	af00      	add	r7, sp, #0
 8004728:	60f8      	str	r0, [r7, #12]
 800472a:	60b9      	str	r1, [r7, #8]
 800472c:	607a      	str	r2, [r7, #4]
 800472e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800473c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	021a      	lsls	r2, r3, #8
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	431a      	orrs	r2, r3
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	4313      	orrs	r3, r2
 800474a:	697a      	ldr	r2, [r7, #20]
 800474c:	4313      	orrs	r3, r2
 800474e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	697a      	ldr	r2, [r7, #20]
 8004754:	609a      	str	r2, [r3, #8]
}
 8004756:	bf00      	nop
 8004758:	371c      	adds	r7, #28
 800475a:	46bd      	mov	sp, r7
 800475c:	bc80      	pop	{r7}
 800475e:	4770      	bx	lr

08004760 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004760:	b480      	push	{r7}
 8004762:	b087      	sub	sp, #28
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	f003 031f 	and.w	r3, r3, #31
 8004772:	2201      	movs	r2, #1
 8004774:	fa02 f303 	lsl.w	r3, r2, r3
 8004778:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6a1a      	ldr	r2, [r3, #32]
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	43db      	mvns	r3, r3
 8004782:	401a      	ands	r2, r3
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6a1a      	ldr	r2, [r3, #32]
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	f003 031f 	and.w	r3, r3, #31
 8004792:	6879      	ldr	r1, [r7, #4]
 8004794:	fa01 f303 	lsl.w	r3, r1, r3
 8004798:	431a      	orrs	r2, r3
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	621a      	str	r2, [r3, #32]
}
 800479e:	bf00      	nop
 80047a0:	371c      	adds	r7, #28
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bc80      	pop	{r7}
 80047a6:	4770      	bx	lr

080047a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b085      	sub	sp, #20
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d101      	bne.n	80047c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047bc:	2302      	movs	r3, #2
 80047be:	e046      	b.n	800484e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2202      	movs	r2, #2
 80047cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68fa      	ldr	r2, [r7, #12]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a16      	ldr	r2, [pc, #88]	; (8004858 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d00e      	beq.n	8004822 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800480c:	d009      	beq.n	8004822 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a12      	ldr	r2, [pc, #72]	; (800485c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d004      	beq.n	8004822 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a10      	ldr	r2, [pc, #64]	; (8004860 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d10c      	bne.n	800483c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004828:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	68ba      	ldr	r2, [r7, #8]
 8004830:	4313      	orrs	r3, r2
 8004832:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68ba      	ldr	r2, [r7, #8]
 800483a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3714      	adds	r7, #20
 8004852:	46bd      	mov	sp, r7
 8004854:	bc80      	pop	{r7}
 8004856:	4770      	bx	lr
 8004858:	40012c00 	.word	0x40012c00
 800485c:	40000400 	.word	0x40000400
 8004860:	40000800 	.word	0x40000800

08004864 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800486c:	bf00      	nop
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	bc80      	pop	{r7}
 8004874:	4770      	bx	lr

08004876 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004876:	b480      	push	{r7}
 8004878:	b083      	sub	sp, #12
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800487e:	bf00      	nop
 8004880:	370c      	adds	r7, #12
 8004882:	46bd      	mov	sp, r7
 8004884:	bc80      	pop	{r7}
 8004886:	4770      	bx	lr

08004888 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e042      	b.n	8004920 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d106      	bne.n	80048b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f7fd ff72 	bl	8002798 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2224      	movs	r2, #36	; 0x24
 80048b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68da      	ldr	r2, [r3, #12]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f000 fd71 	bl	80053b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	691a      	ldr	r2, [r3, #16]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	695a      	ldr	r2, [r3, #20]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68da      	ldr	r2, [r3, #12]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004900:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2220      	movs	r2, #32
 800490c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2220      	movs	r2, #32
 8004914:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	3708      	adds	r7, #8
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b08a      	sub	sp, #40	; 0x28
 800492c:	af02      	add	r7, sp, #8
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	603b      	str	r3, [r7, #0]
 8004934:	4613      	mov	r3, r2
 8004936:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004938:	2300      	movs	r3, #0
 800493a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004942:	b2db      	uxtb	r3, r3
 8004944:	2b20      	cmp	r3, #32
 8004946:	d16d      	bne.n	8004a24 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d002      	beq.n	8004954 <HAL_UART_Transmit+0x2c>
 800494e:	88fb      	ldrh	r3, [r7, #6]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d101      	bne.n	8004958 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e066      	b.n	8004a26 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2200      	movs	r2, #0
 800495c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2221      	movs	r2, #33	; 0x21
 8004962:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004966:	f7fe f869 	bl	8002a3c <HAL_GetTick>
 800496a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	88fa      	ldrh	r2, [r7, #6]
 8004970:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	88fa      	ldrh	r2, [r7, #6]
 8004976:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004980:	d108      	bne.n	8004994 <HAL_UART_Transmit+0x6c>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d104      	bne.n	8004994 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800498a:	2300      	movs	r3, #0
 800498c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	61bb      	str	r3, [r7, #24]
 8004992:	e003      	b.n	800499c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004998:	2300      	movs	r3, #0
 800499a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800499c:	e02a      	b.n	80049f4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	9300      	str	r3, [sp, #0]
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	2200      	movs	r2, #0
 80049a6:	2180      	movs	r1, #128	; 0x80
 80049a8:	68f8      	ldr	r0, [r7, #12]
 80049aa:	f000 faf9 	bl	8004fa0 <UART_WaitOnFlagUntilTimeout>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d001      	beq.n	80049b8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	e036      	b.n	8004a26 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d10b      	bne.n	80049d6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	881b      	ldrh	r3, [r3, #0]
 80049c2:	461a      	mov	r2, r3
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	3302      	adds	r3, #2
 80049d2:	61bb      	str	r3, [r7, #24]
 80049d4:	e007      	b.n	80049e6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	781a      	ldrb	r2, [r3, #0]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	3301      	adds	r3, #1
 80049e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	3b01      	subs	r3, #1
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d1cf      	bne.n	800499e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	9300      	str	r3, [sp, #0]
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	2200      	movs	r2, #0
 8004a06:	2140      	movs	r1, #64	; 0x40
 8004a08:	68f8      	ldr	r0, [r7, #12]
 8004a0a:	f000 fac9 	bl	8004fa0 <UART_WaitOnFlagUntilTimeout>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d001      	beq.n	8004a18 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	e006      	b.n	8004a26 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2220      	movs	r2, #32
 8004a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004a20:	2300      	movs	r3, #0
 8004a22:	e000      	b.n	8004a26 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004a24:	2302      	movs	r3, #2
  }
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3720      	adds	r7, #32
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
	...

08004a30 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b0ba      	sub	sp, #232	; 0xe8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004a56:	2300      	movs	r3, #0
 8004a58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a66:	f003 030f 	and.w	r3, r3, #15
 8004a6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004a6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d10f      	bne.n	8004a96 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a7a:	f003 0320 	and.w	r3, r3, #32
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d009      	beq.n	8004a96 <HAL_UART_IRQHandler+0x66>
 8004a82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a86:	f003 0320 	and.w	r3, r3, #32
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d003      	beq.n	8004a96 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 fbd1 	bl	8005236 <UART_Receive_IT>
      return;
 8004a94:	e25b      	b.n	8004f4e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004a96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	f000 80de 	beq.w	8004c5c <HAL_UART_IRQHandler+0x22c>
 8004aa0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004aa4:	f003 0301 	and.w	r3, r3, #1
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d106      	bne.n	8004aba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004aac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ab0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	f000 80d1 	beq.w	8004c5c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004abe:	f003 0301 	and.w	r3, r3, #1
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00b      	beq.n	8004ade <HAL_UART_IRQHandler+0xae>
 8004ac6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d005      	beq.n	8004ade <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ad6:	f043 0201 	orr.w	r2, r3, #1
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ae2:	f003 0304 	and.w	r3, r3, #4
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00b      	beq.n	8004b02 <HAL_UART_IRQHandler+0xd2>
 8004aea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004aee:	f003 0301 	and.w	r3, r3, #1
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d005      	beq.n	8004b02 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004afa:	f043 0202 	orr.w	r2, r3, #2
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b06:	f003 0302 	and.w	r3, r3, #2
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00b      	beq.n	8004b26 <HAL_UART_IRQHandler+0xf6>
 8004b0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b12:	f003 0301 	and.w	r3, r3, #1
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d005      	beq.n	8004b26 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b1e:	f043 0204 	orr.w	r2, r3, #4
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b2a:	f003 0308 	and.w	r3, r3, #8
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d011      	beq.n	8004b56 <HAL_UART_IRQHandler+0x126>
 8004b32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b36:	f003 0320 	and.w	r3, r3, #32
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d105      	bne.n	8004b4a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004b3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b42:	f003 0301 	and.w	r3, r3, #1
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d005      	beq.n	8004b56 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b4e:	f043 0208 	orr.w	r2, r3, #8
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	f000 81f2 	beq.w	8004f44 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b64:	f003 0320 	and.w	r3, r3, #32
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d008      	beq.n	8004b7e <HAL_UART_IRQHandler+0x14e>
 8004b6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b70:	f003 0320 	and.w	r3, r3, #32
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d002      	beq.n	8004b7e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 fb5c 	bl	8005236 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	695b      	ldr	r3, [r3, #20]
 8004b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	bf14      	ite	ne
 8004b8c:	2301      	movne	r3, #1
 8004b8e:	2300      	moveq	r3, #0
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b9a:	f003 0308 	and.w	r3, r3, #8
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d103      	bne.n	8004baa <HAL_UART_IRQHandler+0x17a>
 8004ba2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d04f      	beq.n	8004c4a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 fa66 	bl	800507c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	695b      	ldr	r3, [r3, #20]
 8004bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d041      	beq.n	8004c42 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	3314      	adds	r3, #20
 8004bc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004bcc:	e853 3f00 	ldrex	r3, [r3]
 8004bd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004bd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004bd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bdc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	3314      	adds	r3, #20
 8004be6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004bea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004bee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004bf6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004bfa:	e841 2300 	strex	r3, r2, [r1]
 8004bfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004c02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1d9      	bne.n	8004bbe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d013      	beq.n	8004c3a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c16:	4a7e      	ldr	r2, [pc, #504]	; (8004e10 <HAL_UART_IRQHandler+0x3e0>)
 8004c18:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f7fe f85e 	bl	8002ce0 <HAL_DMA_Abort_IT>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d016      	beq.n	8004c58 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004c34:	4610      	mov	r0, r2
 8004c36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c38:	e00e      	b.n	8004c58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 f99c 	bl	8004f78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c40:	e00a      	b.n	8004c58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 f998 	bl	8004f78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c48:	e006      	b.n	8004c58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 f994 	bl	8004f78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004c56:	e175      	b.n	8004f44 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c58:	bf00      	nop
    return;
 8004c5a:	e173      	b.n	8004f44 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	f040 814f 	bne.w	8004f04 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c6a:	f003 0310 	and.w	r3, r3, #16
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	f000 8148 	beq.w	8004f04 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004c74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c78:	f003 0310 	and.w	r3, r3, #16
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	f000 8141 	beq.w	8004f04 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c82:	2300      	movs	r3, #0
 8004c84:	60bb      	str	r3, [r7, #8]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	60bb      	str	r3, [r7, #8]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	60bb      	str	r3, [r7, #8]
 8004c96:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	f000 80b6 	beq.w	8004e14 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004cb4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	f000 8145 	beq.w	8004f48 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004cc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	f080 813e 	bcs.w	8004f48 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004cd2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	2b20      	cmp	r3, #32
 8004cdc:	f000 8088 	beq.w	8004df0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	330c      	adds	r3, #12
 8004ce6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004cee:	e853 3f00 	ldrex	r3, [r3]
 8004cf2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004cf6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004cfa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cfe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	330c      	adds	r3, #12
 8004d08:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004d0c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004d10:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d14:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004d18:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004d1c:	e841 2300 	strex	r3, r2, [r1]
 8004d20:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004d24:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1d9      	bne.n	8004ce0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	3314      	adds	r3, #20
 8004d32:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d36:	e853 3f00 	ldrex	r3, [r3]
 8004d3a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004d3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d3e:	f023 0301 	bic.w	r3, r3, #1
 8004d42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	3314      	adds	r3, #20
 8004d4c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004d50:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004d54:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d56:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004d58:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004d5c:	e841 2300 	strex	r3, r2, [r1]
 8004d60:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004d62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d1e1      	bne.n	8004d2c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	3314      	adds	r3, #20
 8004d6e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d72:	e853 3f00 	ldrex	r3, [r3]
 8004d76:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004d78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	3314      	adds	r3, #20
 8004d88:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004d8c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004d8e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d90:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004d92:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004d94:	e841 2300 	strex	r3, r2, [r1]
 8004d98:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004d9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d1e3      	bne.n	8004d68 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2220      	movs	r2, #32
 8004da4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	330c      	adds	r3, #12
 8004db4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004db8:	e853 3f00 	ldrex	r3, [r3]
 8004dbc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004dbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dc0:	f023 0310 	bic.w	r3, r3, #16
 8004dc4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	330c      	adds	r3, #12
 8004dce:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004dd2:	65ba      	str	r2, [r7, #88]	; 0x58
 8004dd4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004dd8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004dda:	e841 2300 	strex	r3, r2, [r1]
 8004dde:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004de0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1e3      	bne.n	8004dae <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dea:	4618      	mov	r0, r3
 8004dec:	f7fd ff3d 	bl	8002c6a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2202      	movs	r2, #2
 8004df4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	4619      	mov	r1, r3
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 f8bf 	bl	8004f8a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e0c:	e09c      	b.n	8004f48 <HAL_UART_IRQHandler+0x518>
 8004e0e:	bf00      	nop
 8004e10:	08005141 	.word	0x08005141
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	f000 808e 	beq.w	8004f4c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004e30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	f000 8089 	beq.w	8004f4c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	330c      	adds	r3, #12
 8004e40:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e44:	e853 3f00 	ldrex	r3, [r3]
 8004e48:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e50:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	330c      	adds	r3, #12
 8004e5a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004e5e:	647a      	str	r2, [r7, #68]	; 0x44
 8004e60:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e62:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e66:	e841 2300 	strex	r3, r2, [r1]
 8004e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d1e3      	bne.n	8004e3a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	3314      	adds	r3, #20
 8004e78:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7c:	e853 3f00 	ldrex	r3, [r3]
 8004e80:	623b      	str	r3, [r7, #32]
   return(result);
 8004e82:	6a3b      	ldr	r3, [r7, #32]
 8004e84:	f023 0301 	bic.w	r3, r3, #1
 8004e88:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	3314      	adds	r3, #20
 8004e92:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004e96:	633a      	str	r2, [r7, #48]	; 0x30
 8004e98:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e9e:	e841 2300 	strex	r3, r2, [r1]
 8004ea2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d1e3      	bne.n	8004e72 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2220      	movs	r2, #32
 8004eae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	330c      	adds	r3, #12
 8004ebe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	e853 3f00 	ldrex	r3, [r3]
 8004ec6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f023 0310 	bic.w	r3, r3, #16
 8004ece:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	330c      	adds	r3, #12
 8004ed8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004edc:	61fa      	str	r2, [r7, #28]
 8004ede:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee0:	69b9      	ldr	r1, [r7, #24]
 8004ee2:	69fa      	ldr	r2, [r7, #28]
 8004ee4:	e841 2300 	strex	r3, r2, [r1]
 8004ee8:	617b      	str	r3, [r7, #20]
   return(result);
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d1e3      	bne.n	8004eb8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2202      	movs	r2, #2
 8004ef4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ef6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004efa:	4619      	mov	r1, r3
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f000 f844 	bl	8004f8a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f02:	e023      	b.n	8004f4c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004f04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d009      	beq.n	8004f24 <HAL_UART_IRQHandler+0x4f4>
 8004f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d003      	beq.n	8004f24 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f000 f923 	bl	8005168 <UART_Transmit_IT>
    return;
 8004f22:	e014      	b.n	8004f4e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004f24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d00e      	beq.n	8004f4e <HAL_UART_IRQHandler+0x51e>
 8004f30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d008      	beq.n	8004f4e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f000 f962 	bl	8005206 <UART_EndTransmit_IT>
    return;
 8004f42:	e004      	b.n	8004f4e <HAL_UART_IRQHandler+0x51e>
    return;
 8004f44:	bf00      	nop
 8004f46:	e002      	b.n	8004f4e <HAL_UART_IRQHandler+0x51e>
      return;
 8004f48:	bf00      	nop
 8004f4a:	e000      	b.n	8004f4e <HAL_UART_IRQHandler+0x51e>
      return;
 8004f4c:	bf00      	nop
  }
}
 8004f4e:	37e8      	adds	r7, #232	; 0xe8
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004f5c:	bf00      	nop
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bc80      	pop	{r7}
 8004f64:	4770      	bx	lr

08004f66 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f66:	b480      	push	{r7}
 8004f68:	b083      	sub	sp, #12
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004f6e:	bf00      	nop
 8004f70:	370c      	adds	r7, #12
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bc80      	pop	{r7}
 8004f76:	4770      	bx	lr

08004f78 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004f80:	bf00      	nop
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bc80      	pop	{r7}
 8004f88:	4770      	bx	lr

08004f8a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f8a:	b480      	push	{r7}
 8004f8c:	b083      	sub	sp, #12
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
 8004f92:	460b      	mov	r3, r1
 8004f94:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f96:	bf00      	nop
 8004f98:	370c      	adds	r7, #12
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bc80      	pop	{r7}
 8004f9e:	4770      	bx	lr

08004fa0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b090      	sub	sp, #64	; 0x40
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	603b      	str	r3, [r7, #0]
 8004fac:	4613      	mov	r3, r2
 8004fae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fb0:	e050      	b.n	8005054 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fb8:	d04c      	beq.n	8005054 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004fba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d007      	beq.n	8004fd0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004fc0:	f7fd fd3c 	bl	8002a3c <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d241      	bcs.n	8005054 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	330c      	adds	r3, #12
 8004fd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fda:	e853 3f00 	ldrex	r3, [r3]
 8004fde:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	330c      	adds	r3, #12
 8004fee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ff0:	637a      	str	r2, [r7, #52]	; 0x34
 8004ff2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ff6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ff8:	e841 2300 	strex	r3, r2, [r1]
 8004ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005000:	2b00      	cmp	r3, #0
 8005002:	d1e5      	bne.n	8004fd0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	3314      	adds	r3, #20
 800500a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	e853 3f00 	ldrex	r3, [r3]
 8005012:	613b      	str	r3, [r7, #16]
   return(result);
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	f023 0301 	bic.w	r3, r3, #1
 800501a:	63bb      	str	r3, [r7, #56]	; 0x38
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	3314      	adds	r3, #20
 8005022:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005024:	623a      	str	r2, [r7, #32]
 8005026:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005028:	69f9      	ldr	r1, [r7, #28]
 800502a:	6a3a      	ldr	r2, [r7, #32]
 800502c:	e841 2300 	strex	r3, r2, [r1]
 8005030:	61bb      	str	r3, [r7, #24]
   return(result);
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d1e5      	bne.n	8005004 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2220      	movs	r2, #32
 800503c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2220      	movs	r2, #32
 8005044:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2200      	movs	r2, #0
 800504c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e00f      	b.n	8005074 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	4013      	ands	r3, r2
 800505e:	68ba      	ldr	r2, [r7, #8]
 8005060:	429a      	cmp	r2, r3
 8005062:	bf0c      	ite	eq
 8005064:	2301      	moveq	r3, #1
 8005066:	2300      	movne	r3, #0
 8005068:	b2db      	uxtb	r3, r3
 800506a:	461a      	mov	r2, r3
 800506c:	79fb      	ldrb	r3, [r7, #7]
 800506e:	429a      	cmp	r2, r3
 8005070:	d09f      	beq.n	8004fb2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005072:	2300      	movs	r3, #0
}
 8005074:	4618      	mov	r0, r3
 8005076:	3740      	adds	r7, #64	; 0x40
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800507c:	b480      	push	{r7}
 800507e:	b095      	sub	sp, #84	; 0x54
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	330c      	adds	r3, #12
 800508a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800508c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800508e:	e853 3f00 	ldrex	r3, [r3]
 8005092:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005096:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800509a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	330c      	adds	r3, #12
 80050a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80050a4:	643a      	str	r2, [r7, #64]	; 0x40
 80050a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80050aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80050ac:	e841 2300 	strex	r3, r2, [r1]
 80050b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80050b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d1e5      	bne.n	8005084 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	3314      	adds	r3, #20
 80050be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c0:	6a3b      	ldr	r3, [r7, #32]
 80050c2:	e853 3f00 	ldrex	r3, [r3]
 80050c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	f023 0301 	bic.w	r3, r3, #1
 80050ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	3314      	adds	r3, #20
 80050d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050e0:	e841 2300 	strex	r3, r2, [r1]
 80050e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d1e5      	bne.n	80050b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d119      	bne.n	8005128 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	330c      	adds	r3, #12
 80050fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	e853 3f00 	ldrex	r3, [r3]
 8005102:	60bb      	str	r3, [r7, #8]
   return(result);
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	f023 0310 	bic.w	r3, r3, #16
 800510a:	647b      	str	r3, [r7, #68]	; 0x44
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	330c      	adds	r3, #12
 8005112:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005114:	61ba      	str	r2, [r7, #24]
 8005116:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005118:	6979      	ldr	r1, [r7, #20]
 800511a:	69ba      	ldr	r2, [r7, #24]
 800511c:	e841 2300 	strex	r3, r2, [r1]
 8005120:	613b      	str	r3, [r7, #16]
   return(result);
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d1e5      	bne.n	80050f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2220      	movs	r2, #32
 800512c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005136:	bf00      	nop
 8005138:	3754      	adds	r7, #84	; 0x54
 800513a:	46bd      	mov	sp, r7
 800513c:	bc80      	pop	{r7}
 800513e:	4770      	bx	lr

08005140 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2200      	movs	r2, #0
 8005152:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2200      	movs	r2, #0
 8005158:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800515a:	68f8      	ldr	r0, [r7, #12]
 800515c:	f7ff ff0c 	bl	8004f78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005160:	bf00      	nop
 8005162:	3710      	adds	r7, #16
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005168:	b480      	push	{r7}
 800516a:	b085      	sub	sp, #20
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005176:	b2db      	uxtb	r3, r3
 8005178:	2b21      	cmp	r3, #33	; 0x21
 800517a:	d13e      	bne.n	80051fa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005184:	d114      	bne.n	80051b0 <UART_Transmit_IT+0x48>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d110      	bne.n	80051b0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	881b      	ldrh	r3, [r3, #0]
 8005198:	461a      	mov	r2, r3
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051a2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6a1b      	ldr	r3, [r3, #32]
 80051a8:	1c9a      	adds	r2, r3, #2
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	621a      	str	r2, [r3, #32]
 80051ae:	e008      	b.n	80051c2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6a1b      	ldr	r3, [r3, #32]
 80051b4:	1c59      	adds	r1, r3, #1
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	6211      	str	r1, [r2, #32]
 80051ba:	781a      	ldrb	r2, [r3, #0]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	3b01      	subs	r3, #1
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	4619      	mov	r1, r3
 80051d0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d10f      	bne.n	80051f6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68da      	ldr	r2, [r3, #12]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051e4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68da      	ldr	r2, [r3, #12]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051f4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80051f6:	2300      	movs	r3, #0
 80051f8:	e000      	b.n	80051fc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80051fa:	2302      	movs	r3, #2
  }
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3714      	adds	r7, #20
 8005200:	46bd      	mov	sp, r7
 8005202:	bc80      	pop	{r7}
 8005204:	4770      	bx	lr

08005206 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005206:	b580      	push	{r7, lr}
 8005208:	b082      	sub	sp, #8
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68da      	ldr	r2, [r3, #12]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800521c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2220      	movs	r2, #32
 8005222:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f7ff fe94 	bl	8004f54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	3708      	adds	r7, #8
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}

08005236 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005236:	b580      	push	{r7, lr}
 8005238:	b08c      	sub	sp, #48	; 0x30
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005244:	b2db      	uxtb	r3, r3
 8005246:	2b22      	cmp	r3, #34	; 0x22
 8005248:	f040 80ae 	bne.w	80053a8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005254:	d117      	bne.n	8005286 <UART_Receive_IT+0x50>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d113      	bne.n	8005286 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800525e:	2300      	movs	r3, #0
 8005260:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005266:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	b29b      	uxth	r3, r3
 8005270:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005274:	b29a      	uxth	r2, r3
 8005276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005278:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800527e:	1c9a      	adds	r2, r3, #2
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	629a      	str	r2, [r3, #40]	; 0x28
 8005284:	e026      	b.n	80052d4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800528a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800528c:	2300      	movs	r3, #0
 800528e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005298:	d007      	beq.n	80052aa <UART_Receive_IT+0x74>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d10a      	bne.n	80052b8 <UART_Receive_IT+0x82>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	691b      	ldr	r3, [r3, #16]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d106      	bne.n	80052b8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	b2da      	uxtb	r2, r3
 80052b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052b4:	701a      	strb	r2, [r3, #0]
 80052b6:	e008      	b.n	80052ca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052c4:	b2da      	uxtb	r2, r3
 80052c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ce:	1c5a      	adds	r2, r3, #1
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80052d8:	b29b      	uxth	r3, r3
 80052da:	3b01      	subs	r3, #1
 80052dc:	b29b      	uxth	r3, r3
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	4619      	mov	r1, r3
 80052e2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d15d      	bne.n	80053a4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68da      	ldr	r2, [r3, #12]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f022 0220 	bic.w	r2, r2, #32
 80052f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68da      	ldr	r2, [r3, #12]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005306:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	695a      	ldr	r2, [r3, #20]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f022 0201 	bic.w	r2, r2, #1
 8005316:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2220      	movs	r2, #32
 800531c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800532a:	2b01      	cmp	r3, #1
 800532c:	d135      	bne.n	800539a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	330c      	adds	r3, #12
 800533a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	e853 3f00 	ldrex	r3, [r3]
 8005342:	613b      	str	r3, [r7, #16]
   return(result);
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	f023 0310 	bic.w	r3, r3, #16
 800534a:	627b      	str	r3, [r7, #36]	; 0x24
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	330c      	adds	r3, #12
 8005352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005354:	623a      	str	r2, [r7, #32]
 8005356:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005358:	69f9      	ldr	r1, [r7, #28]
 800535a:	6a3a      	ldr	r2, [r7, #32]
 800535c:	e841 2300 	strex	r3, r2, [r1]
 8005360:	61bb      	str	r3, [r7, #24]
   return(result);
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d1e5      	bne.n	8005334 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0310 	and.w	r3, r3, #16
 8005372:	2b10      	cmp	r3, #16
 8005374:	d10a      	bne.n	800538c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005376:	2300      	movs	r3, #0
 8005378:	60fb      	str	r3, [r7, #12]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	60fb      	str	r3, [r7, #12]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	60fb      	str	r3, [r7, #12]
 800538a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005390:	4619      	mov	r1, r3
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f7ff fdf9 	bl	8004f8a <HAL_UARTEx_RxEventCallback>
 8005398:	e002      	b.n	80053a0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f7ff fde3 	bl	8004f66 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80053a0:	2300      	movs	r3, #0
 80053a2:	e002      	b.n	80053aa <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80053a4:	2300      	movs	r3, #0
 80053a6:	e000      	b.n	80053aa <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80053a8:	2302      	movs	r3, #2
  }
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3730      	adds	r7, #48	; 0x30
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
	...

080053b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	68da      	ldr	r2, [r3, #12]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	430a      	orrs	r2, r1
 80053d0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	689a      	ldr	r2, [r3, #8]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	431a      	orrs	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	695b      	ldr	r3, [r3, #20]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80053ee:	f023 030c 	bic.w	r3, r3, #12
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	6812      	ldr	r2, [r2, #0]
 80053f6:	68b9      	ldr	r1, [r7, #8]
 80053f8:	430b      	orrs	r3, r1
 80053fa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	699a      	ldr	r2, [r3, #24]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	430a      	orrs	r2, r1
 8005410:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a2c      	ldr	r2, [pc, #176]	; (80054c8 <UART_SetConfig+0x114>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d103      	bne.n	8005424 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800541c:	f7fe fa9c 	bl	8003958 <HAL_RCC_GetPCLK2Freq>
 8005420:	60f8      	str	r0, [r7, #12]
 8005422:	e002      	b.n	800542a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005424:	f7fe fa84 	bl	8003930 <HAL_RCC_GetPCLK1Freq>
 8005428:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	4613      	mov	r3, r2
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	4413      	add	r3, r2
 8005432:	009a      	lsls	r2, r3, #2
 8005434:	441a      	add	r2, r3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005440:	4a22      	ldr	r2, [pc, #136]	; (80054cc <UART_SetConfig+0x118>)
 8005442:	fba2 2303 	umull	r2, r3, r2, r3
 8005446:	095b      	lsrs	r3, r3, #5
 8005448:	0119      	lsls	r1, r3, #4
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	4613      	mov	r3, r2
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	4413      	add	r3, r2
 8005452:	009a      	lsls	r2, r3, #2
 8005454:	441a      	add	r2, r3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005460:	4b1a      	ldr	r3, [pc, #104]	; (80054cc <UART_SetConfig+0x118>)
 8005462:	fba3 0302 	umull	r0, r3, r3, r2
 8005466:	095b      	lsrs	r3, r3, #5
 8005468:	2064      	movs	r0, #100	; 0x64
 800546a:	fb00 f303 	mul.w	r3, r0, r3
 800546e:	1ad3      	subs	r3, r2, r3
 8005470:	011b      	lsls	r3, r3, #4
 8005472:	3332      	adds	r3, #50	; 0x32
 8005474:	4a15      	ldr	r2, [pc, #84]	; (80054cc <UART_SetConfig+0x118>)
 8005476:	fba2 2303 	umull	r2, r3, r2, r3
 800547a:	095b      	lsrs	r3, r3, #5
 800547c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005480:	4419      	add	r1, r3
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	4613      	mov	r3, r2
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	4413      	add	r3, r2
 800548a:	009a      	lsls	r2, r3, #2
 800548c:	441a      	add	r2, r3
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	fbb2 f2f3 	udiv	r2, r2, r3
 8005498:	4b0c      	ldr	r3, [pc, #48]	; (80054cc <UART_SetConfig+0x118>)
 800549a:	fba3 0302 	umull	r0, r3, r3, r2
 800549e:	095b      	lsrs	r3, r3, #5
 80054a0:	2064      	movs	r0, #100	; 0x64
 80054a2:	fb00 f303 	mul.w	r3, r0, r3
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	011b      	lsls	r3, r3, #4
 80054aa:	3332      	adds	r3, #50	; 0x32
 80054ac:	4a07      	ldr	r2, [pc, #28]	; (80054cc <UART_SetConfig+0x118>)
 80054ae:	fba2 2303 	umull	r2, r3, r2, r3
 80054b2:	095b      	lsrs	r3, r3, #5
 80054b4:	f003 020f 	and.w	r2, r3, #15
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	440a      	add	r2, r1
 80054be:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80054c0:	bf00      	nop
 80054c2:	3710      	adds	r7, #16
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	40013800 	.word	0x40013800
 80054cc:	51eb851f 	.word	0x51eb851f

080054d0 <__errno>:
 80054d0:	4b01      	ldr	r3, [pc, #4]	; (80054d8 <__errno+0x8>)
 80054d2:	6818      	ldr	r0, [r3, #0]
 80054d4:	4770      	bx	lr
 80054d6:	bf00      	nop
 80054d8:	2000006c 	.word	0x2000006c

080054dc <__libc_init_array>:
 80054dc:	b570      	push	{r4, r5, r6, lr}
 80054de:	2600      	movs	r6, #0
 80054e0:	4d0c      	ldr	r5, [pc, #48]	; (8005514 <__libc_init_array+0x38>)
 80054e2:	4c0d      	ldr	r4, [pc, #52]	; (8005518 <__libc_init_array+0x3c>)
 80054e4:	1b64      	subs	r4, r4, r5
 80054e6:	10a4      	asrs	r4, r4, #2
 80054e8:	42a6      	cmp	r6, r4
 80054ea:	d109      	bne.n	8005500 <__libc_init_array+0x24>
 80054ec:	f000 fcb4 	bl	8005e58 <_init>
 80054f0:	2600      	movs	r6, #0
 80054f2:	4d0a      	ldr	r5, [pc, #40]	; (800551c <__libc_init_array+0x40>)
 80054f4:	4c0a      	ldr	r4, [pc, #40]	; (8005520 <__libc_init_array+0x44>)
 80054f6:	1b64      	subs	r4, r4, r5
 80054f8:	10a4      	asrs	r4, r4, #2
 80054fa:	42a6      	cmp	r6, r4
 80054fc:	d105      	bne.n	800550a <__libc_init_array+0x2e>
 80054fe:	bd70      	pop	{r4, r5, r6, pc}
 8005500:	f855 3b04 	ldr.w	r3, [r5], #4
 8005504:	4798      	blx	r3
 8005506:	3601      	adds	r6, #1
 8005508:	e7ee      	b.n	80054e8 <__libc_init_array+0xc>
 800550a:	f855 3b04 	ldr.w	r3, [r5], #4
 800550e:	4798      	blx	r3
 8005510:	3601      	adds	r6, #1
 8005512:	e7f2      	b.n	80054fa <__libc_init_array+0x1e>
 8005514:	08005f0c 	.word	0x08005f0c
 8005518:	08005f0c 	.word	0x08005f0c
 800551c:	08005f0c 	.word	0x08005f0c
 8005520:	08005f10 	.word	0x08005f10

08005524 <malloc>:
 8005524:	4b02      	ldr	r3, [pc, #8]	; (8005530 <malloc+0xc>)
 8005526:	4601      	mov	r1, r0
 8005528:	6818      	ldr	r0, [r3, #0]
 800552a:	f000 b85f 	b.w	80055ec <_malloc_r>
 800552e:	bf00      	nop
 8005530:	2000006c 	.word	0x2000006c

08005534 <free>:
 8005534:	4b02      	ldr	r3, [pc, #8]	; (8005540 <free+0xc>)
 8005536:	4601      	mov	r1, r0
 8005538:	6818      	ldr	r0, [r3, #0]
 800553a:	f000 b80b 	b.w	8005554 <_free_r>
 800553e:	bf00      	nop
 8005540:	2000006c 	.word	0x2000006c

08005544 <memset>:
 8005544:	4603      	mov	r3, r0
 8005546:	4402      	add	r2, r0
 8005548:	4293      	cmp	r3, r2
 800554a:	d100      	bne.n	800554e <memset+0xa>
 800554c:	4770      	bx	lr
 800554e:	f803 1b01 	strb.w	r1, [r3], #1
 8005552:	e7f9      	b.n	8005548 <memset+0x4>

08005554 <_free_r>:
 8005554:	b538      	push	{r3, r4, r5, lr}
 8005556:	4605      	mov	r5, r0
 8005558:	2900      	cmp	r1, #0
 800555a:	d043      	beq.n	80055e4 <_free_r+0x90>
 800555c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005560:	1f0c      	subs	r4, r1, #4
 8005562:	2b00      	cmp	r3, #0
 8005564:	bfb8      	it	lt
 8005566:	18e4      	addlt	r4, r4, r3
 8005568:	f000 f8ca 	bl	8005700 <__malloc_lock>
 800556c:	4a1e      	ldr	r2, [pc, #120]	; (80055e8 <_free_r+0x94>)
 800556e:	6813      	ldr	r3, [r2, #0]
 8005570:	4610      	mov	r0, r2
 8005572:	b933      	cbnz	r3, 8005582 <_free_r+0x2e>
 8005574:	6063      	str	r3, [r4, #4]
 8005576:	6014      	str	r4, [r2, #0]
 8005578:	4628      	mov	r0, r5
 800557a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800557e:	f000 b8c5 	b.w	800570c <__malloc_unlock>
 8005582:	42a3      	cmp	r3, r4
 8005584:	d90a      	bls.n	800559c <_free_r+0x48>
 8005586:	6821      	ldr	r1, [r4, #0]
 8005588:	1862      	adds	r2, r4, r1
 800558a:	4293      	cmp	r3, r2
 800558c:	bf01      	itttt	eq
 800558e:	681a      	ldreq	r2, [r3, #0]
 8005590:	685b      	ldreq	r3, [r3, #4]
 8005592:	1852      	addeq	r2, r2, r1
 8005594:	6022      	streq	r2, [r4, #0]
 8005596:	6063      	str	r3, [r4, #4]
 8005598:	6004      	str	r4, [r0, #0]
 800559a:	e7ed      	b.n	8005578 <_free_r+0x24>
 800559c:	461a      	mov	r2, r3
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	b10b      	cbz	r3, 80055a6 <_free_r+0x52>
 80055a2:	42a3      	cmp	r3, r4
 80055a4:	d9fa      	bls.n	800559c <_free_r+0x48>
 80055a6:	6811      	ldr	r1, [r2, #0]
 80055a8:	1850      	adds	r0, r2, r1
 80055aa:	42a0      	cmp	r0, r4
 80055ac:	d10b      	bne.n	80055c6 <_free_r+0x72>
 80055ae:	6820      	ldr	r0, [r4, #0]
 80055b0:	4401      	add	r1, r0
 80055b2:	1850      	adds	r0, r2, r1
 80055b4:	4283      	cmp	r3, r0
 80055b6:	6011      	str	r1, [r2, #0]
 80055b8:	d1de      	bne.n	8005578 <_free_r+0x24>
 80055ba:	6818      	ldr	r0, [r3, #0]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	4401      	add	r1, r0
 80055c0:	6011      	str	r1, [r2, #0]
 80055c2:	6053      	str	r3, [r2, #4]
 80055c4:	e7d8      	b.n	8005578 <_free_r+0x24>
 80055c6:	d902      	bls.n	80055ce <_free_r+0x7a>
 80055c8:	230c      	movs	r3, #12
 80055ca:	602b      	str	r3, [r5, #0]
 80055cc:	e7d4      	b.n	8005578 <_free_r+0x24>
 80055ce:	6820      	ldr	r0, [r4, #0]
 80055d0:	1821      	adds	r1, r4, r0
 80055d2:	428b      	cmp	r3, r1
 80055d4:	bf01      	itttt	eq
 80055d6:	6819      	ldreq	r1, [r3, #0]
 80055d8:	685b      	ldreq	r3, [r3, #4]
 80055da:	1809      	addeq	r1, r1, r0
 80055dc:	6021      	streq	r1, [r4, #0]
 80055de:	6063      	str	r3, [r4, #4]
 80055e0:	6054      	str	r4, [r2, #4]
 80055e2:	e7c9      	b.n	8005578 <_free_r+0x24>
 80055e4:	bd38      	pop	{r3, r4, r5, pc}
 80055e6:	bf00      	nop
 80055e8:	20000134 	.word	0x20000134

080055ec <_malloc_r>:
 80055ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ee:	1ccd      	adds	r5, r1, #3
 80055f0:	f025 0503 	bic.w	r5, r5, #3
 80055f4:	3508      	adds	r5, #8
 80055f6:	2d0c      	cmp	r5, #12
 80055f8:	bf38      	it	cc
 80055fa:	250c      	movcc	r5, #12
 80055fc:	2d00      	cmp	r5, #0
 80055fe:	4606      	mov	r6, r0
 8005600:	db01      	blt.n	8005606 <_malloc_r+0x1a>
 8005602:	42a9      	cmp	r1, r5
 8005604:	d903      	bls.n	800560e <_malloc_r+0x22>
 8005606:	230c      	movs	r3, #12
 8005608:	6033      	str	r3, [r6, #0]
 800560a:	2000      	movs	r0, #0
 800560c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800560e:	f000 f877 	bl	8005700 <__malloc_lock>
 8005612:	4921      	ldr	r1, [pc, #132]	; (8005698 <_malloc_r+0xac>)
 8005614:	680a      	ldr	r2, [r1, #0]
 8005616:	4614      	mov	r4, r2
 8005618:	b99c      	cbnz	r4, 8005642 <_malloc_r+0x56>
 800561a:	4f20      	ldr	r7, [pc, #128]	; (800569c <_malloc_r+0xb0>)
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	b923      	cbnz	r3, 800562a <_malloc_r+0x3e>
 8005620:	4621      	mov	r1, r4
 8005622:	4630      	mov	r0, r6
 8005624:	f000 f83c 	bl	80056a0 <_sbrk_r>
 8005628:	6038      	str	r0, [r7, #0]
 800562a:	4629      	mov	r1, r5
 800562c:	4630      	mov	r0, r6
 800562e:	f000 f837 	bl	80056a0 <_sbrk_r>
 8005632:	1c43      	adds	r3, r0, #1
 8005634:	d123      	bne.n	800567e <_malloc_r+0x92>
 8005636:	230c      	movs	r3, #12
 8005638:	4630      	mov	r0, r6
 800563a:	6033      	str	r3, [r6, #0]
 800563c:	f000 f866 	bl	800570c <__malloc_unlock>
 8005640:	e7e3      	b.n	800560a <_malloc_r+0x1e>
 8005642:	6823      	ldr	r3, [r4, #0]
 8005644:	1b5b      	subs	r3, r3, r5
 8005646:	d417      	bmi.n	8005678 <_malloc_r+0x8c>
 8005648:	2b0b      	cmp	r3, #11
 800564a:	d903      	bls.n	8005654 <_malloc_r+0x68>
 800564c:	6023      	str	r3, [r4, #0]
 800564e:	441c      	add	r4, r3
 8005650:	6025      	str	r5, [r4, #0]
 8005652:	e004      	b.n	800565e <_malloc_r+0x72>
 8005654:	6863      	ldr	r3, [r4, #4]
 8005656:	42a2      	cmp	r2, r4
 8005658:	bf0c      	ite	eq
 800565a:	600b      	streq	r3, [r1, #0]
 800565c:	6053      	strne	r3, [r2, #4]
 800565e:	4630      	mov	r0, r6
 8005660:	f000 f854 	bl	800570c <__malloc_unlock>
 8005664:	f104 000b 	add.w	r0, r4, #11
 8005668:	1d23      	adds	r3, r4, #4
 800566a:	f020 0007 	bic.w	r0, r0, #7
 800566e:	1ac2      	subs	r2, r0, r3
 8005670:	d0cc      	beq.n	800560c <_malloc_r+0x20>
 8005672:	1a1b      	subs	r3, r3, r0
 8005674:	50a3      	str	r3, [r4, r2]
 8005676:	e7c9      	b.n	800560c <_malloc_r+0x20>
 8005678:	4622      	mov	r2, r4
 800567a:	6864      	ldr	r4, [r4, #4]
 800567c:	e7cc      	b.n	8005618 <_malloc_r+0x2c>
 800567e:	1cc4      	adds	r4, r0, #3
 8005680:	f024 0403 	bic.w	r4, r4, #3
 8005684:	42a0      	cmp	r0, r4
 8005686:	d0e3      	beq.n	8005650 <_malloc_r+0x64>
 8005688:	1a21      	subs	r1, r4, r0
 800568a:	4630      	mov	r0, r6
 800568c:	f000 f808 	bl	80056a0 <_sbrk_r>
 8005690:	3001      	adds	r0, #1
 8005692:	d1dd      	bne.n	8005650 <_malloc_r+0x64>
 8005694:	e7cf      	b.n	8005636 <_malloc_r+0x4a>
 8005696:	bf00      	nop
 8005698:	20000134 	.word	0x20000134
 800569c:	20000138 	.word	0x20000138

080056a0 <_sbrk_r>:
 80056a0:	b538      	push	{r3, r4, r5, lr}
 80056a2:	2300      	movs	r3, #0
 80056a4:	4d05      	ldr	r5, [pc, #20]	; (80056bc <_sbrk_r+0x1c>)
 80056a6:	4604      	mov	r4, r0
 80056a8:	4608      	mov	r0, r1
 80056aa:	602b      	str	r3, [r5, #0]
 80056ac:	f7fd f90c 	bl	80028c8 <_sbrk>
 80056b0:	1c43      	adds	r3, r0, #1
 80056b2:	d102      	bne.n	80056ba <_sbrk_r+0x1a>
 80056b4:	682b      	ldr	r3, [r5, #0]
 80056b6:	b103      	cbz	r3, 80056ba <_sbrk_r+0x1a>
 80056b8:	6023      	str	r3, [r4, #0]
 80056ba:	bd38      	pop	{r3, r4, r5, pc}
 80056bc:	20000290 	.word	0x20000290

080056c0 <siprintf>:
 80056c0:	b40e      	push	{r1, r2, r3}
 80056c2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80056c6:	b500      	push	{lr}
 80056c8:	b09c      	sub	sp, #112	; 0x70
 80056ca:	ab1d      	add	r3, sp, #116	; 0x74
 80056cc:	9002      	str	r0, [sp, #8]
 80056ce:	9006      	str	r0, [sp, #24]
 80056d0:	9107      	str	r1, [sp, #28]
 80056d2:	9104      	str	r1, [sp, #16]
 80056d4:	4808      	ldr	r0, [pc, #32]	; (80056f8 <siprintf+0x38>)
 80056d6:	4909      	ldr	r1, [pc, #36]	; (80056fc <siprintf+0x3c>)
 80056d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80056dc:	9105      	str	r1, [sp, #20]
 80056de:	6800      	ldr	r0, [r0, #0]
 80056e0:	a902      	add	r1, sp, #8
 80056e2:	9301      	str	r3, [sp, #4]
 80056e4:	f000 f874 	bl	80057d0 <_svfiprintf_r>
 80056e8:	2200      	movs	r2, #0
 80056ea:	9b02      	ldr	r3, [sp, #8]
 80056ec:	701a      	strb	r2, [r3, #0]
 80056ee:	b01c      	add	sp, #112	; 0x70
 80056f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80056f4:	b003      	add	sp, #12
 80056f6:	4770      	bx	lr
 80056f8:	2000006c 	.word	0x2000006c
 80056fc:	ffff0208 	.word	0xffff0208

08005700 <__malloc_lock>:
 8005700:	4801      	ldr	r0, [pc, #4]	; (8005708 <__malloc_lock+0x8>)
 8005702:	f000 bafb 	b.w	8005cfc <__retarget_lock_acquire_recursive>
 8005706:	bf00      	nop
 8005708:	20000298 	.word	0x20000298

0800570c <__malloc_unlock>:
 800570c:	4801      	ldr	r0, [pc, #4]	; (8005714 <__malloc_unlock+0x8>)
 800570e:	f000 baf6 	b.w	8005cfe <__retarget_lock_release_recursive>
 8005712:	bf00      	nop
 8005714:	20000298 	.word	0x20000298

08005718 <__ssputs_r>:
 8005718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800571c:	688e      	ldr	r6, [r1, #8]
 800571e:	4682      	mov	sl, r0
 8005720:	429e      	cmp	r6, r3
 8005722:	460c      	mov	r4, r1
 8005724:	4690      	mov	r8, r2
 8005726:	461f      	mov	r7, r3
 8005728:	d838      	bhi.n	800579c <__ssputs_r+0x84>
 800572a:	898a      	ldrh	r2, [r1, #12]
 800572c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005730:	d032      	beq.n	8005798 <__ssputs_r+0x80>
 8005732:	6825      	ldr	r5, [r4, #0]
 8005734:	6909      	ldr	r1, [r1, #16]
 8005736:	3301      	adds	r3, #1
 8005738:	eba5 0901 	sub.w	r9, r5, r1
 800573c:	6965      	ldr	r5, [r4, #20]
 800573e:	444b      	add	r3, r9
 8005740:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005744:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005748:	106d      	asrs	r5, r5, #1
 800574a:	429d      	cmp	r5, r3
 800574c:	bf38      	it	cc
 800574e:	461d      	movcc	r5, r3
 8005750:	0553      	lsls	r3, r2, #21
 8005752:	d531      	bpl.n	80057b8 <__ssputs_r+0xa0>
 8005754:	4629      	mov	r1, r5
 8005756:	f7ff ff49 	bl	80055ec <_malloc_r>
 800575a:	4606      	mov	r6, r0
 800575c:	b950      	cbnz	r0, 8005774 <__ssputs_r+0x5c>
 800575e:	230c      	movs	r3, #12
 8005760:	f04f 30ff 	mov.w	r0, #4294967295
 8005764:	f8ca 3000 	str.w	r3, [sl]
 8005768:	89a3      	ldrh	r3, [r4, #12]
 800576a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800576e:	81a3      	strh	r3, [r4, #12]
 8005770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005774:	464a      	mov	r2, r9
 8005776:	6921      	ldr	r1, [r4, #16]
 8005778:	f000 fad0 	bl	8005d1c <memcpy>
 800577c:	89a3      	ldrh	r3, [r4, #12]
 800577e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005782:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005786:	81a3      	strh	r3, [r4, #12]
 8005788:	6126      	str	r6, [r4, #16]
 800578a:	444e      	add	r6, r9
 800578c:	6026      	str	r6, [r4, #0]
 800578e:	463e      	mov	r6, r7
 8005790:	6165      	str	r5, [r4, #20]
 8005792:	eba5 0509 	sub.w	r5, r5, r9
 8005796:	60a5      	str	r5, [r4, #8]
 8005798:	42be      	cmp	r6, r7
 800579a:	d900      	bls.n	800579e <__ssputs_r+0x86>
 800579c:	463e      	mov	r6, r7
 800579e:	4632      	mov	r2, r6
 80057a0:	4641      	mov	r1, r8
 80057a2:	6820      	ldr	r0, [r4, #0]
 80057a4:	f000 fac8 	bl	8005d38 <memmove>
 80057a8:	68a3      	ldr	r3, [r4, #8]
 80057aa:	6822      	ldr	r2, [r4, #0]
 80057ac:	1b9b      	subs	r3, r3, r6
 80057ae:	4432      	add	r2, r6
 80057b0:	2000      	movs	r0, #0
 80057b2:	60a3      	str	r3, [r4, #8]
 80057b4:	6022      	str	r2, [r4, #0]
 80057b6:	e7db      	b.n	8005770 <__ssputs_r+0x58>
 80057b8:	462a      	mov	r2, r5
 80057ba:	f000 fad7 	bl	8005d6c <_realloc_r>
 80057be:	4606      	mov	r6, r0
 80057c0:	2800      	cmp	r0, #0
 80057c2:	d1e1      	bne.n	8005788 <__ssputs_r+0x70>
 80057c4:	4650      	mov	r0, sl
 80057c6:	6921      	ldr	r1, [r4, #16]
 80057c8:	f7ff fec4 	bl	8005554 <_free_r>
 80057cc:	e7c7      	b.n	800575e <__ssputs_r+0x46>
	...

080057d0 <_svfiprintf_r>:
 80057d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057d4:	4698      	mov	r8, r3
 80057d6:	898b      	ldrh	r3, [r1, #12]
 80057d8:	4607      	mov	r7, r0
 80057da:	061b      	lsls	r3, r3, #24
 80057dc:	460d      	mov	r5, r1
 80057de:	4614      	mov	r4, r2
 80057e0:	b09d      	sub	sp, #116	; 0x74
 80057e2:	d50e      	bpl.n	8005802 <_svfiprintf_r+0x32>
 80057e4:	690b      	ldr	r3, [r1, #16]
 80057e6:	b963      	cbnz	r3, 8005802 <_svfiprintf_r+0x32>
 80057e8:	2140      	movs	r1, #64	; 0x40
 80057ea:	f7ff feff 	bl	80055ec <_malloc_r>
 80057ee:	6028      	str	r0, [r5, #0]
 80057f0:	6128      	str	r0, [r5, #16]
 80057f2:	b920      	cbnz	r0, 80057fe <_svfiprintf_r+0x2e>
 80057f4:	230c      	movs	r3, #12
 80057f6:	603b      	str	r3, [r7, #0]
 80057f8:	f04f 30ff 	mov.w	r0, #4294967295
 80057fc:	e0d1      	b.n	80059a2 <_svfiprintf_r+0x1d2>
 80057fe:	2340      	movs	r3, #64	; 0x40
 8005800:	616b      	str	r3, [r5, #20]
 8005802:	2300      	movs	r3, #0
 8005804:	9309      	str	r3, [sp, #36]	; 0x24
 8005806:	2320      	movs	r3, #32
 8005808:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800580c:	2330      	movs	r3, #48	; 0x30
 800580e:	f04f 0901 	mov.w	r9, #1
 8005812:	f8cd 800c 	str.w	r8, [sp, #12]
 8005816:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80059bc <_svfiprintf_r+0x1ec>
 800581a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800581e:	4623      	mov	r3, r4
 8005820:	469a      	mov	sl, r3
 8005822:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005826:	b10a      	cbz	r2, 800582c <_svfiprintf_r+0x5c>
 8005828:	2a25      	cmp	r2, #37	; 0x25
 800582a:	d1f9      	bne.n	8005820 <_svfiprintf_r+0x50>
 800582c:	ebba 0b04 	subs.w	fp, sl, r4
 8005830:	d00b      	beq.n	800584a <_svfiprintf_r+0x7a>
 8005832:	465b      	mov	r3, fp
 8005834:	4622      	mov	r2, r4
 8005836:	4629      	mov	r1, r5
 8005838:	4638      	mov	r0, r7
 800583a:	f7ff ff6d 	bl	8005718 <__ssputs_r>
 800583e:	3001      	adds	r0, #1
 8005840:	f000 80aa 	beq.w	8005998 <_svfiprintf_r+0x1c8>
 8005844:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005846:	445a      	add	r2, fp
 8005848:	9209      	str	r2, [sp, #36]	; 0x24
 800584a:	f89a 3000 	ldrb.w	r3, [sl]
 800584e:	2b00      	cmp	r3, #0
 8005850:	f000 80a2 	beq.w	8005998 <_svfiprintf_r+0x1c8>
 8005854:	2300      	movs	r3, #0
 8005856:	f04f 32ff 	mov.w	r2, #4294967295
 800585a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800585e:	f10a 0a01 	add.w	sl, sl, #1
 8005862:	9304      	str	r3, [sp, #16]
 8005864:	9307      	str	r3, [sp, #28]
 8005866:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800586a:	931a      	str	r3, [sp, #104]	; 0x68
 800586c:	4654      	mov	r4, sl
 800586e:	2205      	movs	r2, #5
 8005870:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005874:	4851      	ldr	r0, [pc, #324]	; (80059bc <_svfiprintf_r+0x1ec>)
 8005876:	f000 fa43 	bl	8005d00 <memchr>
 800587a:	9a04      	ldr	r2, [sp, #16]
 800587c:	b9d8      	cbnz	r0, 80058b6 <_svfiprintf_r+0xe6>
 800587e:	06d0      	lsls	r0, r2, #27
 8005880:	bf44      	itt	mi
 8005882:	2320      	movmi	r3, #32
 8005884:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005888:	0711      	lsls	r1, r2, #28
 800588a:	bf44      	itt	mi
 800588c:	232b      	movmi	r3, #43	; 0x2b
 800588e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005892:	f89a 3000 	ldrb.w	r3, [sl]
 8005896:	2b2a      	cmp	r3, #42	; 0x2a
 8005898:	d015      	beq.n	80058c6 <_svfiprintf_r+0xf6>
 800589a:	4654      	mov	r4, sl
 800589c:	2000      	movs	r0, #0
 800589e:	f04f 0c0a 	mov.w	ip, #10
 80058a2:	9a07      	ldr	r2, [sp, #28]
 80058a4:	4621      	mov	r1, r4
 80058a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80058aa:	3b30      	subs	r3, #48	; 0x30
 80058ac:	2b09      	cmp	r3, #9
 80058ae:	d94e      	bls.n	800594e <_svfiprintf_r+0x17e>
 80058b0:	b1b0      	cbz	r0, 80058e0 <_svfiprintf_r+0x110>
 80058b2:	9207      	str	r2, [sp, #28]
 80058b4:	e014      	b.n	80058e0 <_svfiprintf_r+0x110>
 80058b6:	eba0 0308 	sub.w	r3, r0, r8
 80058ba:	fa09 f303 	lsl.w	r3, r9, r3
 80058be:	4313      	orrs	r3, r2
 80058c0:	46a2      	mov	sl, r4
 80058c2:	9304      	str	r3, [sp, #16]
 80058c4:	e7d2      	b.n	800586c <_svfiprintf_r+0x9c>
 80058c6:	9b03      	ldr	r3, [sp, #12]
 80058c8:	1d19      	adds	r1, r3, #4
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	9103      	str	r1, [sp, #12]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	bfbb      	ittet	lt
 80058d2:	425b      	neglt	r3, r3
 80058d4:	f042 0202 	orrlt.w	r2, r2, #2
 80058d8:	9307      	strge	r3, [sp, #28]
 80058da:	9307      	strlt	r3, [sp, #28]
 80058dc:	bfb8      	it	lt
 80058de:	9204      	strlt	r2, [sp, #16]
 80058e0:	7823      	ldrb	r3, [r4, #0]
 80058e2:	2b2e      	cmp	r3, #46	; 0x2e
 80058e4:	d10c      	bne.n	8005900 <_svfiprintf_r+0x130>
 80058e6:	7863      	ldrb	r3, [r4, #1]
 80058e8:	2b2a      	cmp	r3, #42	; 0x2a
 80058ea:	d135      	bne.n	8005958 <_svfiprintf_r+0x188>
 80058ec:	9b03      	ldr	r3, [sp, #12]
 80058ee:	3402      	adds	r4, #2
 80058f0:	1d1a      	adds	r2, r3, #4
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	9203      	str	r2, [sp, #12]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	bfb8      	it	lt
 80058fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80058fe:	9305      	str	r3, [sp, #20]
 8005900:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80059cc <_svfiprintf_r+0x1fc>
 8005904:	2203      	movs	r2, #3
 8005906:	4650      	mov	r0, sl
 8005908:	7821      	ldrb	r1, [r4, #0]
 800590a:	f000 f9f9 	bl	8005d00 <memchr>
 800590e:	b140      	cbz	r0, 8005922 <_svfiprintf_r+0x152>
 8005910:	2340      	movs	r3, #64	; 0x40
 8005912:	eba0 000a 	sub.w	r0, r0, sl
 8005916:	fa03 f000 	lsl.w	r0, r3, r0
 800591a:	9b04      	ldr	r3, [sp, #16]
 800591c:	3401      	adds	r4, #1
 800591e:	4303      	orrs	r3, r0
 8005920:	9304      	str	r3, [sp, #16]
 8005922:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005926:	2206      	movs	r2, #6
 8005928:	4825      	ldr	r0, [pc, #148]	; (80059c0 <_svfiprintf_r+0x1f0>)
 800592a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800592e:	f000 f9e7 	bl	8005d00 <memchr>
 8005932:	2800      	cmp	r0, #0
 8005934:	d038      	beq.n	80059a8 <_svfiprintf_r+0x1d8>
 8005936:	4b23      	ldr	r3, [pc, #140]	; (80059c4 <_svfiprintf_r+0x1f4>)
 8005938:	bb1b      	cbnz	r3, 8005982 <_svfiprintf_r+0x1b2>
 800593a:	9b03      	ldr	r3, [sp, #12]
 800593c:	3307      	adds	r3, #7
 800593e:	f023 0307 	bic.w	r3, r3, #7
 8005942:	3308      	adds	r3, #8
 8005944:	9303      	str	r3, [sp, #12]
 8005946:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005948:	4433      	add	r3, r6
 800594a:	9309      	str	r3, [sp, #36]	; 0x24
 800594c:	e767      	b.n	800581e <_svfiprintf_r+0x4e>
 800594e:	460c      	mov	r4, r1
 8005950:	2001      	movs	r0, #1
 8005952:	fb0c 3202 	mla	r2, ip, r2, r3
 8005956:	e7a5      	b.n	80058a4 <_svfiprintf_r+0xd4>
 8005958:	2300      	movs	r3, #0
 800595a:	f04f 0c0a 	mov.w	ip, #10
 800595e:	4619      	mov	r1, r3
 8005960:	3401      	adds	r4, #1
 8005962:	9305      	str	r3, [sp, #20]
 8005964:	4620      	mov	r0, r4
 8005966:	f810 2b01 	ldrb.w	r2, [r0], #1
 800596a:	3a30      	subs	r2, #48	; 0x30
 800596c:	2a09      	cmp	r2, #9
 800596e:	d903      	bls.n	8005978 <_svfiprintf_r+0x1a8>
 8005970:	2b00      	cmp	r3, #0
 8005972:	d0c5      	beq.n	8005900 <_svfiprintf_r+0x130>
 8005974:	9105      	str	r1, [sp, #20]
 8005976:	e7c3      	b.n	8005900 <_svfiprintf_r+0x130>
 8005978:	4604      	mov	r4, r0
 800597a:	2301      	movs	r3, #1
 800597c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005980:	e7f0      	b.n	8005964 <_svfiprintf_r+0x194>
 8005982:	ab03      	add	r3, sp, #12
 8005984:	9300      	str	r3, [sp, #0]
 8005986:	462a      	mov	r2, r5
 8005988:	4638      	mov	r0, r7
 800598a:	4b0f      	ldr	r3, [pc, #60]	; (80059c8 <_svfiprintf_r+0x1f8>)
 800598c:	a904      	add	r1, sp, #16
 800598e:	f3af 8000 	nop.w
 8005992:	1c42      	adds	r2, r0, #1
 8005994:	4606      	mov	r6, r0
 8005996:	d1d6      	bne.n	8005946 <_svfiprintf_r+0x176>
 8005998:	89ab      	ldrh	r3, [r5, #12]
 800599a:	065b      	lsls	r3, r3, #25
 800599c:	f53f af2c 	bmi.w	80057f8 <_svfiprintf_r+0x28>
 80059a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80059a2:	b01d      	add	sp, #116	; 0x74
 80059a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059a8:	ab03      	add	r3, sp, #12
 80059aa:	9300      	str	r3, [sp, #0]
 80059ac:	462a      	mov	r2, r5
 80059ae:	4638      	mov	r0, r7
 80059b0:	4b05      	ldr	r3, [pc, #20]	; (80059c8 <_svfiprintf_r+0x1f8>)
 80059b2:	a904      	add	r1, sp, #16
 80059b4:	f000 f87c 	bl	8005ab0 <_printf_i>
 80059b8:	e7eb      	b.n	8005992 <_svfiprintf_r+0x1c2>
 80059ba:	bf00      	nop
 80059bc:	08005ed6 	.word	0x08005ed6
 80059c0:	08005ee0 	.word	0x08005ee0
 80059c4:	00000000 	.word	0x00000000
 80059c8:	08005719 	.word	0x08005719
 80059cc:	08005edc 	.word	0x08005edc

080059d0 <_printf_common>:
 80059d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059d4:	4616      	mov	r6, r2
 80059d6:	4699      	mov	r9, r3
 80059d8:	688a      	ldr	r2, [r1, #8]
 80059da:	690b      	ldr	r3, [r1, #16]
 80059dc:	4607      	mov	r7, r0
 80059de:	4293      	cmp	r3, r2
 80059e0:	bfb8      	it	lt
 80059e2:	4613      	movlt	r3, r2
 80059e4:	6033      	str	r3, [r6, #0]
 80059e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80059ea:	460c      	mov	r4, r1
 80059ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80059f0:	b10a      	cbz	r2, 80059f6 <_printf_common+0x26>
 80059f2:	3301      	adds	r3, #1
 80059f4:	6033      	str	r3, [r6, #0]
 80059f6:	6823      	ldr	r3, [r4, #0]
 80059f8:	0699      	lsls	r1, r3, #26
 80059fa:	bf42      	ittt	mi
 80059fc:	6833      	ldrmi	r3, [r6, #0]
 80059fe:	3302      	addmi	r3, #2
 8005a00:	6033      	strmi	r3, [r6, #0]
 8005a02:	6825      	ldr	r5, [r4, #0]
 8005a04:	f015 0506 	ands.w	r5, r5, #6
 8005a08:	d106      	bne.n	8005a18 <_printf_common+0x48>
 8005a0a:	f104 0a19 	add.w	sl, r4, #25
 8005a0e:	68e3      	ldr	r3, [r4, #12]
 8005a10:	6832      	ldr	r2, [r6, #0]
 8005a12:	1a9b      	subs	r3, r3, r2
 8005a14:	42ab      	cmp	r3, r5
 8005a16:	dc28      	bgt.n	8005a6a <_printf_common+0x9a>
 8005a18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a1c:	1e13      	subs	r3, r2, #0
 8005a1e:	6822      	ldr	r2, [r4, #0]
 8005a20:	bf18      	it	ne
 8005a22:	2301      	movne	r3, #1
 8005a24:	0692      	lsls	r2, r2, #26
 8005a26:	d42d      	bmi.n	8005a84 <_printf_common+0xb4>
 8005a28:	4649      	mov	r1, r9
 8005a2a:	4638      	mov	r0, r7
 8005a2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a30:	47c0      	blx	r8
 8005a32:	3001      	adds	r0, #1
 8005a34:	d020      	beq.n	8005a78 <_printf_common+0xa8>
 8005a36:	6823      	ldr	r3, [r4, #0]
 8005a38:	68e5      	ldr	r5, [r4, #12]
 8005a3a:	f003 0306 	and.w	r3, r3, #6
 8005a3e:	2b04      	cmp	r3, #4
 8005a40:	bf18      	it	ne
 8005a42:	2500      	movne	r5, #0
 8005a44:	6832      	ldr	r2, [r6, #0]
 8005a46:	f04f 0600 	mov.w	r6, #0
 8005a4a:	68a3      	ldr	r3, [r4, #8]
 8005a4c:	bf08      	it	eq
 8005a4e:	1aad      	subeq	r5, r5, r2
 8005a50:	6922      	ldr	r2, [r4, #16]
 8005a52:	bf08      	it	eq
 8005a54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	bfc4      	itt	gt
 8005a5c:	1a9b      	subgt	r3, r3, r2
 8005a5e:	18ed      	addgt	r5, r5, r3
 8005a60:	341a      	adds	r4, #26
 8005a62:	42b5      	cmp	r5, r6
 8005a64:	d11a      	bne.n	8005a9c <_printf_common+0xcc>
 8005a66:	2000      	movs	r0, #0
 8005a68:	e008      	b.n	8005a7c <_printf_common+0xac>
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	4652      	mov	r2, sl
 8005a6e:	4649      	mov	r1, r9
 8005a70:	4638      	mov	r0, r7
 8005a72:	47c0      	blx	r8
 8005a74:	3001      	adds	r0, #1
 8005a76:	d103      	bne.n	8005a80 <_printf_common+0xb0>
 8005a78:	f04f 30ff 	mov.w	r0, #4294967295
 8005a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a80:	3501      	adds	r5, #1
 8005a82:	e7c4      	b.n	8005a0e <_printf_common+0x3e>
 8005a84:	2030      	movs	r0, #48	; 0x30
 8005a86:	18e1      	adds	r1, r4, r3
 8005a88:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a8c:	1c5a      	adds	r2, r3, #1
 8005a8e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a92:	4422      	add	r2, r4
 8005a94:	3302      	adds	r3, #2
 8005a96:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a9a:	e7c5      	b.n	8005a28 <_printf_common+0x58>
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	4622      	mov	r2, r4
 8005aa0:	4649      	mov	r1, r9
 8005aa2:	4638      	mov	r0, r7
 8005aa4:	47c0      	blx	r8
 8005aa6:	3001      	adds	r0, #1
 8005aa8:	d0e6      	beq.n	8005a78 <_printf_common+0xa8>
 8005aaa:	3601      	adds	r6, #1
 8005aac:	e7d9      	b.n	8005a62 <_printf_common+0x92>
	...

08005ab0 <_printf_i>:
 8005ab0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ab4:	460c      	mov	r4, r1
 8005ab6:	7e27      	ldrb	r7, [r4, #24]
 8005ab8:	4691      	mov	r9, r2
 8005aba:	2f78      	cmp	r7, #120	; 0x78
 8005abc:	4680      	mov	r8, r0
 8005abe:	469a      	mov	sl, r3
 8005ac0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005ac2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ac6:	d807      	bhi.n	8005ad8 <_printf_i+0x28>
 8005ac8:	2f62      	cmp	r7, #98	; 0x62
 8005aca:	d80a      	bhi.n	8005ae2 <_printf_i+0x32>
 8005acc:	2f00      	cmp	r7, #0
 8005ace:	f000 80d9 	beq.w	8005c84 <_printf_i+0x1d4>
 8005ad2:	2f58      	cmp	r7, #88	; 0x58
 8005ad4:	f000 80a4 	beq.w	8005c20 <_printf_i+0x170>
 8005ad8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005adc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ae0:	e03a      	b.n	8005b58 <_printf_i+0xa8>
 8005ae2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ae6:	2b15      	cmp	r3, #21
 8005ae8:	d8f6      	bhi.n	8005ad8 <_printf_i+0x28>
 8005aea:	a001      	add	r0, pc, #4	; (adr r0, 8005af0 <_printf_i+0x40>)
 8005aec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005af0:	08005b49 	.word	0x08005b49
 8005af4:	08005b5d 	.word	0x08005b5d
 8005af8:	08005ad9 	.word	0x08005ad9
 8005afc:	08005ad9 	.word	0x08005ad9
 8005b00:	08005ad9 	.word	0x08005ad9
 8005b04:	08005ad9 	.word	0x08005ad9
 8005b08:	08005b5d 	.word	0x08005b5d
 8005b0c:	08005ad9 	.word	0x08005ad9
 8005b10:	08005ad9 	.word	0x08005ad9
 8005b14:	08005ad9 	.word	0x08005ad9
 8005b18:	08005ad9 	.word	0x08005ad9
 8005b1c:	08005c6b 	.word	0x08005c6b
 8005b20:	08005b8d 	.word	0x08005b8d
 8005b24:	08005c4d 	.word	0x08005c4d
 8005b28:	08005ad9 	.word	0x08005ad9
 8005b2c:	08005ad9 	.word	0x08005ad9
 8005b30:	08005c8d 	.word	0x08005c8d
 8005b34:	08005ad9 	.word	0x08005ad9
 8005b38:	08005b8d 	.word	0x08005b8d
 8005b3c:	08005ad9 	.word	0x08005ad9
 8005b40:	08005ad9 	.word	0x08005ad9
 8005b44:	08005c55 	.word	0x08005c55
 8005b48:	680b      	ldr	r3, [r1, #0]
 8005b4a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005b4e:	1d1a      	adds	r2, r3, #4
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	600a      	str	r2, [r1, #0]
 8005b54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e0a4      	b.n	8005ca6 <_printf_i+0x1f6>
 8005b5c:	6825      	ldr	r5, [r4, #0]
 8005b5e:	6808      	ldr	r0, [r1, #0]
 8005b60:	062e      	lsls	r6, r5, #24
 8005b62:	f100 0304 	add.w	r3, r0, #4
 8005b66:	d50a      	bpl.n	8005b7e <_printf_i+0xce>
 8005b68:	6805      	ldr	r5, [r0, #0]
 8005b6a:	600b      	str	r3, [r1, #0]
 8005b6c:	2d00      	cmp	r5, #0
 8005b6e:	da03      	bge.n	8005b78 <_printf_i+0xc8>
 8005b70:	232d      	movs	r3, #45	; 0x2d
 8005b72:	426d      	negs	r5, r5
 8005b74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b78:	230a      	movs	r3, #10
 8005b7a:	485e      	ldr	r0, [pc, #376]	; (8005cf4 <_printf_i+0x244>)
 8005b7c:	e019      	b.n	8005bb2 <_printf_i+0x102>
 8005b7e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005b82:	6805      	ldr	r5, [r0, #0]
 8005b84:	600b      	str	r3, [r1, #0]
 8005b86:	bf18      	it	ne
 8005b88:	b22d      	sxthne	r5, r5
 8005b8a:	e7ef      	b.n	8005b6c <_printf_i+0xbc>
 8005b8c:	680b      	ldr	r3, [r1, #0]
 8005b8e:	6825      	ldr	r5, [r4, #0]
 8005b90:	1d18      	adds	r0, r3, #4
 8005b92:	6008      	str	r0, [r1, #0]
 8005b94:	0628      	lsls	r0, r5, #24
 8005b96:	d501      	bpl.n	8005b9c <_printf_i+0xec>
 8005b98:	681d      	ldr	r5, [r3, #0]
 8005b9a:	e002      	b.n	8005ba2 <_printf_i+0xf2>
 8005b9c:	0669      	lsls	r1, r5, #25
 8005b9e:	d5fb      	bpl.n	8005b98 <_printf_i+0xe8>
 8005ba0:	881d      	ldrh	r5, [r3, #0]
 8005ba2:	2f6f      	cmp	r7, #111	; 0x6f
 8005ba4:	bf0c      	ite	eq
 8005ba6:	2308      	moveq	r3, #8
 8005ba8:	230a      	movne	r3, #10
 8005baa:	4852      	ldr	r0, [pc, #328]	; (8005cf4 <_printf_i+0x244>)
 8005bac:	2100      	movs	r1, #0
 8005bae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005bb2:	6866      	ldr	r6, [r4, #4]
 8005bb4:	2e00      	cmp	r6, #0
 8005bb6:	bfa8      	it	ge
 8005bb8:	6821      	ldrge	r1, [r4, #0]
 8005bba:	60a6      	str	r6, [r4, #8]
 8005bbc:	bfa4      	itt	ge
 8005bbe:	f021 0104 	bicge.w	r1, r1, #4
 8005bc2:	6021      	strge	r1, [r4, #0]
 8005bc4:	b90d      	cbnz	r5, 8005bca <_printf_i+0x11a>
 8005bc6:	2e00      	cmp	r6, #0
 8005bc8:	d04d      	beq.n	8005c66 <_printf_i+0x1b6>
 8005bca:	4616      	mov	r6, r2
 8005bcc:	fbb5 f1f3 	udiv	r1, r5, r3
 8005bd0:	fb03 5711 	mls	r7, r3, r1, r5
 8005bd4:	5dc7      	ldrb	r7, [r0, r7]
 8005bd6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005bda:	462f      	mov	r7, r5
 8005bdc:	42bb      	cmp	r3, r7
 8005bde:	460d      	mov	r5, r1
 8005be0:	d9f4      	bls.n	8005bcc <_printf_i+0x11c>
 8005be2:	2b08      	cmp	r3, #8
 8005be4:	d10b      	bne.n	8005bfe <_printf_i+0x14e>
 8005be6:	6823      	ldr	r3, [r4, #0]
 8005be8:	07df      	lsls	r7, r3, #31
 8005bea:	d508      	bpl.n	8005bfe <_printf_i+0x14e>
 8005bec:	6923      	ldr	r3, [r4, #16]
 8005bee:	6861      	ldr	r1, [r4, #4]
 8005bf0:	4299      	cmp	r1, r3
 8005bf2:	bfde      	ittt	le
 8005bf4:	2330      	movle	r3, #48	; 0x30
 8005bf6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005bfa:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005bfe:	1b92      	subs	r2, r2, r6
 8005c00:	6122      	str	r2, [r4, #16]
 8005c02:	464b      	mov	r3, r9
 8005c04:	4621      	mov	r1, r4
 8005c06:	4640      	mov	r0, r8
 8005c08:	f8cd a000 	str.w	sl, [sp]
 8005c0c:	aa03      	add	r2, sp, #12
 8005c0e:	f7ff fedf 	bl	80059d0 <_printf_common>
 8005c12:	3001      	adds	r0, #1
 8005c14:	d14c      	bne.n	8005cb0 <_printf_i+0x200>
 8005c16:	f04f 30ff 	mov.w	r0, #4294967295
 8005c1a:	b004      	add	sp, #16
 8005c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c20:	4834      	ldr	r0, [pc, #208]	; (8005cf4 <_printf_i+0x244>)
 8005c22:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005c26:	680e      	ldr	r6, [r1, #0]
 8005c28:	6823      	ldr	r3, [r4, #0]
 8005c2a:	f856 5b04 	ldr.w	r5, [r6], #4
 8005c2e:	061f      	lsls	r7, r3, #24
 8005c30:	600e      	str	r6, [r1, #0]
 8005c32:	d514      	bpl.n	8005c5e <_printf_i+0x1ae>
 8005c34:	07d9      	lsls	r1, r3, #31
 8005c36:	bf44      	itt	mi
 8005c38:	f043 0320 	orrmi.w	r3, r3, #32
 8005c3c:	6023      	strmi	r3, [r4, #0]
 8005c3e:	b91d      	cbnz	r5, 8005c48 <_printf_i+0x198>
 8005c40:	6823      	ldr	r3, [r4, #0]
 8005c42:	f023 0320 	bic.w	r3, r3, #32
 8005c46:	6023      	str	r3, [r4, #0]
 8005c48:	2310      	movs	r3, #16
 8005c4a:	e7af      	b.n	8005bac <_printf_i+0xfc>
 8005c4c:	6823      	ldr	r3, [r4, #0]
 8005c4e:	f043 0320 	orr.w	r3, r3, #32
 8005c52:	6023      	str	r3, [r4, #0]
 8005c54:	2378      	movs	r3, #120	; 0x78
 8005c56:	4828      	ldr	r0, [pc, #160]	; (8005cf8 <_printf_i+0x248>)
 8005c58:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c5c:	e7e3      	b.n	8005c26 <_printf_i+0x176>
 8005c5e:	065e      	lsls	r6, r3, #25
 8005c60:	bf48      	it	mi
 8005c62:	b2ad      	uxthmi	r5, r5
 8005c64:	e7e6      	b.n	8005c34 <_printf_i+0x184>
 8005c66:	4616      	mov	r6, r2
 8005c68:	e7bb      	b.n	8005be2 <_printf_i+0x132>
 8005c6a:	680b      	ldr	r3, [r1, #0]
 8005c6c:	6826      	ldr	r6, [r4, #0]
 8005c6e:	1d1d      	adds	r5, r3, #4
 8005c70:	6960      	ldr	r0, [r4, #20]
 8005c72:	600d      	str	r5, [r1, #0]
 8005c74:	0635      	lsls	r5, r6, #24
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	d501      	bpl.n	8005c7e <_printf_i+0x1ce>
 8005c7a:	6018      	str	r0, [r3, #0]
 8005c7c:	e002      	b.n	8005c84 <_printf_i+0x1d4>
 8005c7e:	0671      	lsls	r1, r6, #25
 8005c80:	d5fb      	bpl.n	8005c7a <_printf_i+0x1ca>
 8005c82:	8018      	strh	r0, [r3, #0]
 8005c84:	2300      	movs	r3, #0
 8005c86:	4616      	mov	r6, r2
 8005c88:	6123      	str	r3, [r4, #16]
 8005c8a:	e7ba      	b.n	8005c02 <_printf_i+0x152>
 8005c8c:	680b      	ldr	r3, [r1, #0]
 8005c8e:	1d1a      	adds	r2, r3, #4
 8005c90:	600a      	str	r2, [r1, #0]
 8005c92:	681e      	ldr	r6, [r3, #0]
 8005c94:	2100      	movs	r1, #0
 8005c96:	4630      	mov	r0, r6
 8005c98:	6862      	ldr	r2, [r4, #4]
 8005c9a:	f000 f831 	bl	8005d00 <memchr>
 8005c9e:	b108      	cbz	r0, 8005ca4 <_printf_i+0x1f4>
 8005ca0:	1b80      	subs	r0, r0, r6
 8005ca2:	6060      	str	r0, [r4, #4]
 8005ca4:	6863      	ldr	r3, [r4, #4]
 8005ca6:	6123      	str	r3, [r4, #16]
 8005ca8:	2300      	movs	r3, #0
 8005caa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cae:	e7a8      	b.n	8005c02 <_printf_i+0x152>
 8005cb0:	4632      	mov	r2, r6
 8005cb2:	4649      	mov	r1, r9
 8005cb4:	4640      	mov	r0, r8
 8005cb6:	6923      	ldr	r3, [r4, #16]
 8005cb8:	47d0      	blx	sl
 8005cba:	3001      	adds	r0, #1
 8005cbc:	d0ab      	beq.n	8005c16 <_printf_i+0x166>
 8005cbe:	6823      	ldr	r3, [r4, #0]
 8005cc0:	079b      	lsls	r3, r3, #30
 8005cc2:	d413      	bmi.n	8005cec <_printf_i+0x23c>
 8005cc4:	68e0      	ldr	r0, [r4, #12]
 8005cc6:	9b03      	ldr	r3, [sp, #12]
 8005cc8:	4298      	cmp	r0, r3
 8005cca:	bfb8      	it	lt
 8005ccc:	4618      	movlt	r0, r3
 8005cce:	e7a4      	b.n	8005c1a <_printf_i+0x16a>
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	4632      	mov	r2, r6
 8005cd4:	4649      	mov	r1, r9
 8005cd6:	4640      	mov	r0, r8
 8005cd8:	47d0      	blx	sl
 8005cda:	3001      	adds	r0, #1
 8005cdc:	d09b      	beq.n	8005c16 <_printf_i+0x166>
 8005cde:	3501      	adds	r5, #1
 8005ce0:	68e3      	ldr	r3, [r4, #12]
 8005ce2:	9903      	ldr	r1, [sp, #12]
 8005ce4:	1a5b      	subs	r3, r3, r1
 8005ce6:	42ab      	cmp	r3, r5
 8005ce8:	dcf2      	bgt.n	8005cd0 <_printf_i+0x220>
 8005cea:	e7eb      	b.n	8005cc4 <_printf_i+0x214>
 8005cec:	2500      	movs	r5, #0
 8005cee:	f104 0619 	add.w	r6, r4, #25
 8005cf2:	e7f5      	b.n	8005ce0 <_printf_i+0x230>
 8005cf4:	08005ee7 	.word	0x08005ee7
 8005cf8:	08005ef8 	.word	0x08005ef8

08005cfc <__retarget_lock_acquire_recursive>:
 8005cfc:	4770      	bx	lr

08005cfe <__retarget_lock_release_recursive>:
 8005cfe:	4770      	bx	lr

08005d00 <memchr>:
 8005d00:	4603      	mov	r3, r0
 8005d02:	b510      	push	{r4, lr}
 8005d04:	b2c9      	uxtb	r1, r1
 8005d06:	4402      	add	r2, r0
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	d101      	bne.n	8005d12 <memchr+0x12>
 8005d0e:	2000      	movs	r0, #0
 8005d10:	e003      	b.n	8005d1a <memchr+0x1a>
 8005d12:	7804      	ldrb	r4, [r0, #0]
 8005d14:	3301      	adds	r3, #1
 8005d16:	428c      	cmp	r4, r1
 8005d18:	d1f6      	bne.n	8005d08 <memchr+0x8>
 8005d1a:	bd10      	pop	{r4, pc}

08005d1c <memcpy>:
 8005d1c:	440a      	add	r2, r1
 8005d1e:	4291      	cmp	r1, r2
 8005d20:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d24:	d100      	bne.n	8005d28 <memcpy+0xc>
 8005d26:	4770      	bx	lr
 8005d28:	b510      	push	{r4, lr}
 8005d2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d2e:	4291      	cmp	r1, r2
 8005d30:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d34:	d1f9      	bne.n	8005d2a <memcpy+0xe>
 8005d36:	bd10      	pop	{r4, pc}

08005d38 <memmove>:
 8005d38:	4288      	cmp	r0, r1
 8005d3a:	b510      	push	{r4, lr}
 8005d3c:	eb01 0402 	add.w	r4, r1, r2
 8005d40:	d902      	bls.n	8005d48 <memmove+0x10>
 8005d42:	4284      	cmp	r4, r0
 8005d44:	4623      	mov	r3, r4
 8005d46:	d807      	bhi.n	8005d58 <memmove+0x20>
 8005d48:	1e43      	subs	r3, r0, #1
 8005d4a:	42a1      	cmp	r1, r4
 8005d4c:	d008      	beq.n	8005d60 <memmove+0x28>
 8005d4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d52:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005d56:	e7f8      	b.n	8005d4a <memmove+0x12>
 8005d58:	4601      	mov	r1, r0
 8005d5a:	4402      	add	r2, r0
 8005d5c:	428a      	cmp	r2, r1
 8005d5e:	d100      	bne.n	8005d62 <memmove+0x2a>
 8005d60:	bd10      	pop	{r4, pc}
 8005d62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005d6a:	e7f7      	b.n	8005d5c <memmove+0x24>

08005d6c <_realloc_r>:
 8005d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d6e:	4607      	mov	r7, r0
 8005d70:	4614      	mov	r4, r2
 8005d72:	460e      	mov	r6, r1
 8005d74:	b921      	cbnz	r1, 8005d80 <_realloc_r+0x14>
 8005d76:	4611      	mov	r1, r2
 8005d78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005d7c:	f7ff bc36 	b.w	80055ec <_malloc_r>
 8005d80:	b922      	cbnz	r2, 8005d8c <_realloc_r+0x20>
 8005d82:	f7ff fbe7 	bl	8005554 <_free_r>
 8005d86:	4625      	mov	r5, r4
 8005d88:	4628      	mov	r0, r5
 8005d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d8c:	f000 f814 	bl	8005db8 <_malloc_usable_size_r>
 8005d90:	42a0      	cmp	r0, r4
 8005d92:	d20f      	bcs.n	8005db4 <_realloc_r+0x48>
 8005d94:	4621      	mov	r1, r4
 8005d96:	4638      	mov	r0, r7
 8005d98:	f7ff fc28 	bl	80055ec <_malloc_r>
 8005d9c:	4605      	mov	r5, r0
 8005d9e:	2800      	cmp	r0, #0
 8005da0:	d0f2      	beq.n	8005d88 <_realloc_r+0x1c>
 8005da2:	4631      	mov	r1, r6
 8005da4:	4622      	mov	r2, r4
 8005da6:	f7ff ffb9 	bl	8005d1c <memcpy>
 8005daa:	4631      	mov	r1, r6
 8005dac:	4638      	mov	r0, r7
 8005dae:	f7ff fbd1 	bl	8005554 <_free_r>
 8005db2:	e7e9      	b.n	8005d88 <_realloc_r+0x1c>
 8005db4:	4635      	mov	r5, r6
 8005db6:	e7e7      	b.n	8005d88 <_realloc_r+0x1c>

08005db8 <_malloc_usable_size_r>:
 8005db8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005dbc:	1f18      	subs	r0, r3, #4
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	bfbc      	itt	lt
 8005dc2:	580b      	ldrlt	r3, [r1, r0]
 8005dc4:	18c0      	addlt	r0, r0, r3
 8005dc6:	4770      	bx	lr

08005dc8 <round>:
 8005dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dca:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005dce:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
 8005dd2:	2c13      	cmp	r4, #19
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	460b      	mov	r3, r1
 8005dd8:	4606      	mov	r6, r0
 8005dda:	460d      	mov	r5, r1
 8005ddc:	dc19      	bgt.n	8005e12 <round+0x4a>
 8005dde:	2c00      	cmp	r4, #0
 8005de0:	da09      	bge.n	8005df6 <round+0x2e>
 8005de2:	3401      	adds	r4, #1
 8005de4:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8005de8:	d103      	bne.n	8005df2 <round+0x2a>
 8005dea:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005dee:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005df2:	2200      	movs	r2, #0
 8005df4:	e02a      	b.n	8005e4c <round+0x84>
 8005df6:	4917      	ldr	r1, [pc, #92]	; (8005e54 <round+0x8c>)
 8005df8:	4121      	asrs	r1, r4
 8005dfa:	ea03 0001 	and.w	r0, r3, r1
 8005dfe:	4302      	orrs	r2, r0
 8005e00:	d010      	beq.n	8005e24 <round+0x5c>
 8005e02:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005e06:	fa42 f404 	asr.w	r4, r2, r4
 8005e0a:	4423      	add	r3, r4
 8005e0c:	ea23 0301 	bic.w	r3, r3, r1
 8005e10:	e7ef      	b.n	8005df2 <round+0x2a>
 8005e12:	2c33      	cmp	r4, #51	; 0x33
 8005e14:	dd09      	ble.n	8005e2a <round+0x62>
 8005e16:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8005e1a:	d103      	bne.n	8005e24 <round+0x5c>
 8005e1c:	f7fa fac6 	bl	80003ac <__adddf3>
 8005e20:	4606      	mov	r6, r0
 8005e22:	460d      	mov	r5, r1
 8005e24:	4630      	mov	r0, r6
 8005e26:	4629      	mov	r1, r5
 8005e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e2a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e2e:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8005e32:	40f8      	lsrs	r0, r7
 8005e34:	4202      	tst	r2, r0
 8005e36:	d0f5      	beq.n	8005e24 <round+0x5c>
 8005e38:	2101      	movs	r1, #1
 8005e3a:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8005e3e:	fa01 f404 	lsl.w	r4, r1, r4
 8005e42:	1912      	adds	r2, r2, r4
 8005e44:	bf28      	it	cs
 8005e46:	185b      	addcs	r3, r3, r1
 8005e48:	ea22 0200 	bic.w	r2, r2, r0
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	4610      	mov	r0, r2
 8005e50:	e7e6      	b.n	8005e20 <round+0x58>
 8005e52:	bf00      	nop
 8005e54:	000fffff 	.word	0x000fffff

08005e58 <_init>:
 8005e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e5a:	bf00      	nop
 8005e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e5e:	bc08      	pop	{r3}
 8005e60:	469e      	mov	lr, r3
 8005e62:	4770      	bx	lr

08005e64 <_fini>:
 8005e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e66:	bf00      	nop
 8005e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e6a:	bc08      	pop	{r3}
 8005e6c:	469e      	mov	lr, r3
 8005e6e:	4770      	bx	lr

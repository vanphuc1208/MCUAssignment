
Assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003420  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800352c  0800352c  0001352c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003550  08003550  000200a4  2**0
                  CONTENTS
  4 .ARM          00000000  08003550  08003550  000200a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003550  08003550  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003550  08003550  00013550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003554  08003554  00013554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08003558  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  200000a4  080035fc  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  080035fc  000201d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d1da  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002529  00000000  00000000  0002d2a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc8  00000000  00000000  0002f7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a78  00000000  00000000  00030398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000187e2  00000000  00000000  00030e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e13e  00000000  00000000  000495f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089237  00000000  00000000  00057730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e0967  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f44  00000000  00000000  000e09bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a4 	.word	0x200000a4
 8000128:	00000000 	.word	0x00000000
 800012c:	08003514 	.word	0x08003514

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a8 	.word	0x200000a8
 8000148:	08003514 	.word	0x08003514

0800014c <Button_Reading>:
// Defining  counter for automatically increasing the value
// After the button is pressed more than 1 second.

int buttonFlag[N0_OF_BUTTONS] = {0};
void Button_Reading(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	for(int i = 0; i < N0_OF_BUTTONS; i ++)
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e076      	b.n	8000246 <Button_Reading+0xfa>
	{
		debounceButtonBuffer3[i] =debounceButtonBuffer2[i];
 8000158:	4a3f      	ldr	r2, [pc, #252]	; (8000258 <Button_Reading+0x10c>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	4413      	add	r3, r2
 800015e:	7819      	ldrb	r1, [r3, #0]
 8000160:	4a3e      	ldr	r2, [pc, #248]	; (800025c <Button_Reading+0x110>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	4413      	add	r3, r2
 8000166:	460a      	mov	r2, r1
 8000168:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer2[i] =debounceButtonBuffer1[i];
 800016a:	4a3d      	ldr	r2, [pc, #244]	; (8000260 <Button_Reading+0x114>)
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	4413      	add	r3, r2
 8000170:	7819      	ldrb	r1, [r3, #0]
 8000172:	4a39      	ldr	r2, [pc, #228]	; (8000258 <Button_Reading+0x10c>)
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	4413      	add	r3, r2
 8000178:	460a      	mov	r2, r1
 800017a:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(buttonGPIO[i], buttonPin[i]);
 800017c:	4a39      	ldr	r2, [pc, #228]	; (8000264 <Button_Reading+0x118>)
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000184:	4938      	ldr	r1, [pc, #224]	; (8000268 <Button_Reading+0x11c>)
 8000186:	687b      	ldr	r3, [r7, #4]
 8000188:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800018c:	b29b      	uxth	r3, r3
 800018e:	4619      	mov	r1, r3
 8000190:	4610      	mov	r0, r2
 8000192:	f001 fd13 	bl	8001bbc <HAL_GPIO_ReadPin>
 8000196:	4603      	mov	r3, r0
 8000198:	4619      	mov	r1, r3
 800019a:	4a31      	ldr	r2, [pc, #196]	; (8000260 <Button_Reading+0x114>)
 800019c:	687b      	ldr	r3, [r7, #4]
 800019e:	4413      	add	r3, r2
 80001a0:	460a      	mov	r2, r1
 80001a2:	701a      	strb	r2, [r3, #0]
		if(debounceButtonBuffer1[i] == debounceButtonBuffer2[i] && debounceButtonBuffer2[i] == debounceButtonBuffer3[i])
 80001a4:	4a2e      	ldr	r2, [pc, #184]	; (8000260 <Button_Reading+0x114>)
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	4413      	add	r3, r2
 80001aa:	781a      	ldrb	r2, [r3, #0]
 80001ac:	492a      	ldr	r1, [pc, #168]	; (8000258 <Button_Reading+0x10c>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	440b      	add	r3, r1
 80001b2:	781b      	ldrb	r3, [r3, #0]
 80001b4:	429a      	cmp	r2, r3
 80001b6:	d12d      	bne.n	8000214 <Button_Reading+0xc8>
 80001b8:	4a27      	ldr	r2, [pc, #156]	; (8000258 <Button_Reading+0x10c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	4413      	add	r3, r2
 80001be:	781a      	ldrb	r2, [r3, #0]
 80001c0:	4926      	ldr	r1, [pc, #152]	; (800025c <Button_Reading+0x110>)
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	440b      	add	r3, r1
 80001c6:	781b      	ldrb	r3, [r3, #0]
 80001c8:	429a      	cmp	r2, r3
 80001ca:	d123      	bne.n	8000214 <Button_Reading+0xc8>
		{
			if(debounceButtonBuffer1[i] != buttonBuffer[i])
 80001cc:	4a24      	ldr	r2, [pc, #144]	; (8000260 <Button_Reading+0x114>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	4413      	add	r3, r2
 80001d2:	781a      	ldrb	r2, [r3, #0]
 80001d4:	4925      	ldr	r1, [pc, #148]	; (800026c <Button_Reading+0x120>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	440b      	add	r3, r1
 80001da:	781b      	ldrb	r3, [r3, #0]
 80001dc:	429a      	cmp	r2, r3
 80001de:	d02e      	beq.n	800023e <Button_Reading+0xf2>
			{
				buttonBuffer[i] = debounceButtonBuffer1[i];
 80001e0:	4a1f      	ldr	r2, [pc, #124]	; (8000260 <Button_Reading+0x114>)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	4413      	add	r3, r2
 80001e6:	7819      	ldrb	r1, [r3, #0]
 80001e8:	4a20      	ldr	r2, [pc, #128]	; (800026c <Button_Reading+0x120>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	4413      	add	r3, r2
 80001ee:	460a      	mov	r2, r1
 80001f0:	701a      	strb	r2, [r3, #0]
						if(buttonBuffer[i] == BUTTON_IS_PRESSED)
 80001f2:	4a1e      	ldr	r2, [pc, #120]	; (800026c <Button_Reading+0x120>)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	4413      	add	r3, r2
 80001f8:	781b      	ldrb	r3, [r3, #0]
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d11f      	bne.n	800023e <Button_Reading+0xf2>
						{
							buttonFlag[i] = 1;
 80001fe:	4a1c      	ldr	r2, [pc, #112]	; (8000270 <Button_Reading+0x124>)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	2101      	movs	r1, #1
 8000204:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							buttonTimeOut[i] = DURATION_FOR_AUTO_INCREASING;
 8000208:	4a1a      	ldr	r2, [pc, #104]	; (8000274 <Button_Reading+0x128>)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	2164      	movs	r1, #100	; 0x64
 800020e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if(debounceButtonBuffer1[i] != buttonBuffer[i])
 8000212:	e014      	b.n	800023e <Button_Reading+0xf2>
						}
			}
		}
		else
		{
			buttonTimeOut[i]--;
 8000214:	4a17      	ldr	r2, [pc, #92]	; (8000274 <Button_Reading+0x128>)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800021c:	1e5a      	subs	r2, r3, #1
 800021e:	4915      	ldr	r1, [pc, #84]	; (8000274 <Button_Reading+0x128>)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(buttonTimeOut[i] <= 0)
 8000226:	4a13      	ldr	r2, [pc, #76]	; (8000274 <Button_Reading+0x128>)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800022e:	2b00      	cmp	r3, #0
 8000230:	dc06      	bgt.n	8000240 <Button_Reading+0xf4>
					buttonBuffer[i] = BUTTON_IS_RELEASED;
 8000232:	4a0e      	ldr	r2, [pc, #56]	; (800026c <Button_Reading+0x120>)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	4413      	add	r3, r2
 8000238:	2201      	movs	r2, #1
 800023a:	701a      	strb	r2, [r3, #0]
 800023c:	e000      	b.n	8000240 <Button_Reading+0xf4>
			if(debounceButtonBuffer1[i] != buttonBuffer[i])
 800023e:	bf00      	nop
	for(int i = 0; i < N0_OF_BUTTONS; i ++)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	3301      	adds	r3, #1
 8000244:	607b      	str	r3, [r7, #4]
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	2b03      	cmp	r3, #3
 800024a:	dd85      	ble.n	8000158 <Button_Reading+0xc>
		}
	}
}
 800024c:	bf00      	nop
 800024e:	bf00      	nop
 8000250:	3708      	adds	r7, #8
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}
 8000256:	bf00      	nop
 8000258:	200000d4 	.word	0x200000d4
 800025c:	200000d8 	.word	0x200000d8
 8000260:	200000d0 	.word	0x200000d0
 8000264:	20000004 	.word	0x20000004
 8000268:	20000014 	.word	0x20000014
 800026c:	20000000 	.word	0x20000000
 8000270:	200000dc 	.word	0x200000dc
 8000274:	200000c0 	.word	0x200000c0

08000278 <Is_Button_Pressed>:

int Is_Button_Pressed(int index)
{
 8000278:	b480      	push	{r7}
 800027a:	b083      	sub	sp, #12
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
	if(index >= N0_OF_BUTTONS || index < 0)	return 0;
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	2b03      	cmp	r3, #3
 8000284:	dc02      	bgt.n	800028c <Is_Button_Pressed+0x14>
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	2b00      	cmp	r3, #0
 800028a:	da01      	bge.n	8000290 <Is_Button_Pressed+0x18>
 800028c:	2300      	movs	r3, #0
 800028e:	e00d      	b.n	80002ac <Is_Button_Pressed+0x34>

		if(buttonFlag[index] == 1)
 8000290:	4a09      	ldr	r2, [pc, #36]	; (80002b8 <Is_Button_Pressed+0x40>)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000298:	2b01      	cmp	r3, #1
 800029a:	d106      	bne.n	80002aa <Is_Button_Pressed+0x32>
		{
			buttonFlag[index] = 0;
 800029c:	4a06      	ldr	r2, [pc, #24]	; (80002b8 <Is_Button_Pressed+0x40>)
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	2100      	movs	r1, #0
 80002a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			return 1;
 80002a6:	2301      	movs	r3, #1
 80002a8:	e000      	b.n	80002ac <Is_Button_Pressed+0x34>
		}
		return 0;
 80002aa:	2300      	movs	r3, #0
}
 80002ac:	4618      	mov	r0, r3
 80002ae:	370c      	adds	r7, #12
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bc80      	pop	{r7}
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	200000dc 	.word	0x200000dc

080002bc <buzzer>:
 */

#include "buzzer.h"

void buzzer()
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
//	 htim3.Instance->CCR1 = buzzerValue;
     __HAL_TIM_SET_AUTORELOAD(&htim3, buzzerValue*2); // Increasing frequency : Auto-Reload Register - ARR
 80002c0:	4b0a      	ldr	r3, [pc, #40]	; (80002ec <buzzer+0x30>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	005a      	lsls	r2, r3, #1
 80002c6:	4b0a      	ldr	r3, [pc, #40]	; (80002f0 <buzzer+0x34>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	62da      	str	r2, [r3, #44]	; 0x2c
 80002cc:	4b07      	ldr	r3, [pc, #28]	; (80002ec <buzzer+0x30>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	005b      	lsls	r3, r3, #1
 80002d2:	461a      	mov	r2, r3
 80002d4:	4b06      	ldr	r3, [pc, #24]	; (80002f0 <buzzer+0x34>)
 80002d6:	60da      	str	r2, [r3, #12]
     __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, buzzerValue); // Increasing duty cycle: Capture/Compare Register - CCR
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <buzzer+0x30>)
 80002da:	681a      	ldr	r2, [r3, #0]
 80002dc:	4b04      	ldr	r3, [pc, #16]	; (80002f0 <buzzer+0x34>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80002e2:	bf00      	nop
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bc80      	pop	{r7}
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop
 80002ec:	200000f4 	.word	0x200000f4
 80002f0:	2000010c 	.word	0x2000010c

080002f4 <clearAllLed1>:
 */
#include "main.h"
#include "displayLed.h"

void clearAllLed1()
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 80002f8:	2200      	movs	r2, #0
 80002fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002fe:	4805      	ldr	r0, [pc, #20]	; (8000314 <clearAllLed1+0x20>)
 8000300:	f001 fc73 	bl	8001bea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8000304:	2200      	movs	r2, #0
 8000306:	2108      	movs	r1, #8
 8000308:	4803      	ldr	r0, [pc, #12]	; (8000318 <clearAllLed1+0x24>)
 800030a:	f001 fc6e 	bl	8001bea <HAL_GPIO_WritePin>
}
 800030e:	bf00      	nop
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	40010800 	.word	0x40010800
 8000318:	40010c00 	.word	0x40010c00

0800031c <clearAllLed2>:

void clearAllLed2()
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 8000320:	2200      	movs	r2, #0
 8000322:	2120      	movs	r1, #32
 8000324:	4804      	ldr	r0, [pc, #16]	; (8000338 <clearAllLed2+0x1c>)
 8000326:	f001 fc60 	bl	8001bea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 800032a:	2200      	movs	r2, #0
 800032c:	2110      	movs	r1, #16
 800032e:	4802      	ldr	r0, [pc, #8]	; (8000338 <clearAllLed2+0x1c>)
 8000330:	f001 fc5b 	bl	8001bea <HAL_GPIO_WritePin>
}
 8000334:	bf00      	nop
 8000336:	bd80      	pop	{r7, pc}
 8000338:	40010c00 	.word	0x40010c00

0800033c <displayRed1>:
void displayRed1()
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000340:	2201      	movs	r2, #1
 8000342:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000346:	4805      	ldr	r0, [pc, #20]	; (800035c <displayRed1+0x20>)
 8000348:	f001 fc4f 	bl	8001bea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 800034c:	2200      	movs	r2, #0
 800034e:	2108      	movs	r1, #8
 8000350:	4803      	ldr	r0, [pc, #12]	; (8000360 <displayRed1+0x24>)
 8000352:	f001 fc4a 	bl	8001bea <HAL_GPIO_WritePin>

}
 8000356:	bf00      	nop
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	40010800 	.word	0x40010800
 8000360:	40010c00 	.word	0x40010c00

08000364 <displayYellow1>:

void displayYellow1()
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000368:	2201      	movs	r2, #1
 800036a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800036e:	4805      	ldr	r0, [pc, #20]	; (8000384 <displayYellow1+0x20>)
 8000370:	f001 fc3b 	bl	8001bea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000374:	2201      	movs	r2, #1
 8000376:	2108      	movs	r1, #8
 8000378:	4803      	ldr	r0, [pc, #12]	; (8000388 <displayYellow1+0x24>)
 800037a:	f001 fc36 	bl	8001bea <HAL_GPIO_WritePin>
}
 800037e:	bf00      	nop
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	40010800 	.word	0x40010800
 8000388:	40010c00 	.word	0x40010c00

0800038c <displayGreen1>:

void displayGreen1()
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8000390:	2200      	movs	r2, #0
 8000392:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000396:	4805      	ldr	r0, [pc, #20]	; (80003ac <displayGreen1+0x20>)
 8000398:	f001 fc27 	bl	8001bea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 800039c:	2201      	movs	r2, #1
 800039e:	2108      	movs	r1, #8
 80003a0:	4803      	ldr	r0, [pc, #12]	; (80003b0 <displayGreen1+0x24>)
 80003a2:	f001 fc22 	bl	8001bea <HAL_GPIO_WritePin>
}
 80003a6:	bf00      	nop
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	40010800 	.word	0x40010800
 80003b0:	40010c00 	.word	0x40010c00

080003b4 <displayRed2>:

void displayRed2()
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 80003b8:	2201      	movs	r2, #1
 80003ba:	2120      	movs	r1, #32
 80003bc:	4804      	ldr	r0, [pc, #16]	; (80003d0 <displayRed2+0x1c>)
 80003be:	f001 fc14 	bl	8001bea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 80003c2:	2200      	movs	r2, #0
 80003c4:	2110      	movs	r1, #16
 80003c6:	4802      	ldr	r0, [pc, #8]	; (80003d0 <displayRed2+0x1c>)
 80003c8:	f001 fc0f 	bl	8001bea <HAL_GPIO_WritePin>
}
 80003cc:	bf00      	nop
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	40010c00 	.word	0x40010c00

080003d4 <displayYellow2>:


void displayYellow2()
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 80003d8:	2201      	movs	r2, #1
 80003da:	2120      	movs	r1, #32
 80003dc:	4804      	ldr	r0, [pc, #16]	; (80003f0 <displayYellow2+0x1c>)
 80003de:	f001 fc04 	bl	8001bea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 80003e2:	2201      	movs	r2, #1
 80003e4:	2110      	movs	r1, #16
 80003e6:	4802      	ldr	r0, [pc, #8]	; (80003f0 <displayYellow2+0x1c>)
 80003e8:	f001 fbff 	bl	8001bea <HAL_GPIO_WritePin>
}
 80003ec:	bf00      	nop
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	40010c00 	.word	0x40010c00

080003f4 <displayGreen2>:

void displayGreen2()
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 80003f8:	2200      	movs	r2, #0
 80003fa:	2120      	movs	r1, #32
 80003fc:	4804      	ldr	r0, [pc, #16]	; (8000410 <displayGreen2+0x1c>)
 80003fe:	f001 fbf4 	bl	8001bea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000402:	2201      	movs	r2, #1
 8000404:	2110      	movs	r1, #16
 8000406:	4802      	ldr	r0, [pc, #8]	; (8000410 <displayGreen2+0x1c>)
 8000408:	f001 fbef 	bl	8001bea <HAL_GPIO_WritePin>
}
 800040c:	bf00      	nop
 800040e:	bd80      	pop	{r7, pc}
 8000410:	40010c00 	.word	0x40010c00

08000414 <toggleRed>:

void toggleRed()
{	// Remember to clear all led before toggle
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(D2_GPIO_Port, D2_Pin);
 8000418:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800041c:	4804      	ldr	r0, [pc, #16]	; (8000430 <toggleRed+0x1c>)
 800041e:	f001 fbfc 	bl	8001c1a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);
 8000422:	2120      	movs	r1, #32
 8000424:	4803      	ldr	r0, [pc, #12]	; (8000434 <toggleRed+0x20>)
 8000426:	f001 fbf8 	bl	8001c1a <HAL_GPIO_TogglePin>
}
 800042a:	bf00      	nop
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	40010800 	.word	0x40010800
 8000434:	40010c00 	.word	0x40010c00

08000438 <toggleYellow>:

void toggleYellow()
{	// Remember to clear all led before toggle
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(D2_GPIO_Port, D2_Pin);
 800043c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000440:	4808      	ldr	r0, [pc, #32]	; (8000464 <toggleYellow+0x2c>)
 8000442:	f001 fbea 	bl	8001c1a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
 8000446:	2108      	movs	r1, #8
 8000448:	4807      	ldr	r0, [pc, #28]	; (8000468 <toggleYellow+0x30>)
 800044a:	f001 fbe6 	bl	8001c1a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);
 800044e:	2120      	movs	r1, #32
 8000450:	4805      	ldr	r0, [pc, #20]	; (8000468 <toggleYellow+0x30>)
 8000452:	f001 fbe2 	bl	8001c1a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D5_GPIO_Port, D5_Pin);
 8000456:	2110      	movs	r1, #16
 8000458:	4803      	ldr	r0, [pc, #12]	; (8000468 <toggleYellow+0x30>)
 800045a:	f001 fbde 	bl	8001c1a <HAL_GPIO_TogglePin>
}
 800045e:	bf00      	nop
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	40010800 	.word	0x40010800
 8000468:	40010c00 	.word	0x40010c00

0800046c <toggleGreen>:

void toggleGreen()
{	// Remember to clear all led before toggle
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
 8000470:	2108      	movs	r1, #8
 8000472:	4804      	ldr	r0, [pc, #16]	; (8000484 <toggleGreen+0x18>)
 8000474:	f001 fbd1 	bl	8001c1a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D5_GPIO_Port, D5_Pin);
 8000478:	2110      	movs	r1, #16
 800047a:	4802      	ldr	r0, [pc, #8]	; (8000484 <toggleGreen+0x18>)
 800047c:	f001 fbcd 	bl	8001c1a <HAL_GPIO_TogglePin>
}
 8000480:	bf00      	nop
 8000482:	bd80      	pop	{r7, pc}
 8000484:	40010c00 	.word	0x40010c00

08000488 <clearPedestrian>:

void clearPedestrian()
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 800048c:	2200      	movs	r2, #0
 800048e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000492:	4805      	ldr	r0, [pc, #20]	; (80004a8 <clearPedestrian+0x20>)
 8000494:	f001 fba9 	bl	8001bea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 8000498:	2200      	movs	r2, #0
 800049a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800049e:	4803      	ldr	r0, [pc, #12]	; (80004ac <clearPedestrian+0x24>)
 80004a0:	f001 fba3 	bl	8001bea <HAL_GPIO_WritePin>
}
 80004a4:	bf00      	nop
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	40010c00 	.word	0x40010c00
 80004ac:	40010800 	.word	0x40010800

080004b0 <displayPedestrianRed>:

void displayPedestrianRed()
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
 80004b4:	2201      	movs	r2, #1
 80004b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004ba:	4805      	ldr	r0, [pc, #20]	; (80004d0 <displayPedestrianRed+0x20>)
 80004bc:	f001 fb95 	bl	8001bea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 80004c0:	2200      	movs	r2, #0
 80004c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004c6:	4803      	ldr	r0, [pc, #12]	; (80004d4 <displayPedestrianRed+0x24>)
 80004c8:	f001 fb8f 	bl	8001bea <HAL_GPIO_WritePin>
}
 80004cc:	bf00      	nop
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	40010c00 	.word	0x40010c00
 80004d4:	40010800 	.word	0x40010800

080004d8 <displayPedestrianGreen>:
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
}

void displayPedestrianGreen()
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 80004dc:	2200      	movs	r2, #0
 80004de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004e2:	4805      	ldr	r0, [pc, #20]	; (80004f8 <displayPedestrianGreen+0x20>)
 80004e4:	f001 fb81 	bl	8001bea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 80004e8:	2201      	movs	r2, #1
 80004ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004ee:	4803      	ldr	r0, [pc, #12]	; (80004fc <displayPedestrianGreen+0x24>)
 80004f0:	f001 fb7b 	bl	8001bea <HAL_GPIO_WritePin>
}
 80004f4:	bf00      	nop
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	40010c00 	.word	0x40010c00
 80004fc:	40010800 	.word	0x40010800

08000500 <increase>:
 */

#include "global.h"

void increase()
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
	time1++;
 8000504:	4b07      	ldr	r3, [pc, #28]	; (8000524 <increase+0x24>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	3301      	adds	r3, #1
 800050a:	4a06      	ldr	r2, [pc, #24]	; (8000524 <increase+0x24>)
 800050c:	6013      	str	r3, [r2, #0]
	if(time1 > 99)
 800050e:	4b05      	ldr	r3, [pc, #20]	; (8000524 <increase+0x24>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	2b63      	cmp	r3, #99	; 0x63
 8000514:	dd02      	ble.n	800051c <increase+0x1c>
		time1 = 1;
 8000516:	4b03      	ldr	r3, [pc, #12]	; (8000524 <increase+0x24>)
 8000518:	2201      	movs	r2, #1
 800051a:	601a      	str	r2, [r3, #0]
}
 800051c:	bf00      	nop
 800051e:	46bd      	mov	sp, r7
 8000520:	bc80      	pop	{r7}
 8000522:	4770      	bx	lr
 8000524:	20000108 	.word	0x20000108

08000528 <balance>:

void balance(int RED, int AMBER, int GREEN)
{
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
 800052e:	60f8      	str	r0, [r7, #12]
 8000530:	60b9      	str	r1, [r7, #8]
 8000532:	607a      	str	r2, [r7, #4]
	if(RED > timeRed)
 8000534:	4b5c      	ldr	r3, [pc, #368]	; (80006a8 <balance+0x180>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	68fa      	ldr	r2, [r7, #12]
 800053a:	429a      	cmp	r2, r3
 800053c:	dd19      	ble.n	8000572 <balance+0x4a>
	{
		timeYellow = timeYellow * (RED / timeRed);
 800053e:	4b5a      	ldr	r3, [pc, #360]	; (80006a8 <balance+0x180>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	68fa      	ldr	r2, [r7, #12]
 8000544:	fb92 f3f3 	sdiv	r3, r2, r3
 8000548:	4a58      	ldr	r2, [pc, #352]	; (80006ac <balance+0x184>)
 800054a:	6812      	ldr	r2, [r2, #0]
 800054c:	fb02 f303 	mul.w	r3, r2, r3
 8000550:	4a56      	ldr	r2, [pc, #344]	; (80006ac <balance+0x184>)
 8000552:	6013      	str	r3, [r2, #0]
		timeGreen = timeGreen * (RED / timeRed);
 8000554:	4b54      	ldr	r3, [pc, #336]	; (80006a8 <balance+0x180>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	68fa      	ldr	r2, [r7, #12]
 800055a:	fb92 f3f3 	sdiv	r3, r2, r3
 800055e:	4a54      	ldr	r2, [pc, #336]	; (80006b0 <balance+0x188>)
 8000560:	6812      	ldr	r2, [r2, #0]
 8000562:	fb02 f303 	mul.w	r3, r2, r3
 8000566:	4a52      	ldr	r2, [pc, #328]	; (80006b0 <balance+0x188>)
 8000568:	6013      	str	r3, [r2, #0]
		timeRed = RED;
 800056a:	4a4f      	ldr	r2, [pc, #316]	; (80006a8 <balance+0x180>)
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	6013      	str	r3, [r2, #0]
	{
		timeRed = (GREEN / 3) * 5;
		timeYellow = (GREEN / 3) * 2;
		timeGreen = GREEN;
	}
}
 8000570:	e094      	b.n	800069c <balance+0x174>
	else if(AMBER > timeYellow)
 8000572:	4b4e      	ldr	r3, [pc, #312]	; (80006ac <balance+0x184>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	68ba      	ldr	r2, [r7, #8]
 8000578:	429a      	cmp	r2, r3
 800057a:	dd19      	ble.n	80005b0 <balance+0x88>
		timeRed = timeRed * (AMBER / timeYellow);
 800057c:	4b4b      	ldr	r3, [pc, #300]	; (80006ac <balance+0x184>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	68ba      	ldr	r2, [r7, #8]
 8000582:	fb92 f3f3 	sdiv	r3, r2, r3
 8000586:	4a48      	ldr	r2, [pc, #288]	; (80006a8 <balance+0x180>)
 8000588:	6812      	ldr	r2, [r2, #0]
 800058a:	fb02 f303 	mul.w	r3, r2, r3
 800058e:	4a46      	ldr	r2, [pc, #280]	; (80006a8 <balance+0x180>)
 8000590:	6013      	str	r3, [r2, #0]
		timeGreen = timeGreen * (AMBER / timeYellow);
 8000592:	4b46      	ldr	r3, [pc, #280]	; (80006ac <balance+0x184>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	68ba      	ldr	r2, [r7, #8]
 8000598:	fb92 f3f3 	sdiv	r3, r2, r3
 800059c:	4a44      	ldr	r2, [pc, #272]	; (80006b0 <balance+0x188>)
 800059e:	6812      	ldr	r2, [r2, #0]
 80005a0:	fb02 f303 	mul.w	r3, r2, r3
 80005a4:	4a42      	ldr	r2, [pc, #264]	; (80006b0 <balance+0x188>)
 80005a6:	6013      	str	r3, [r2, #0]
		timeYellow = AMBER;
 80005a8:	4a40      	ldr	r2, [pc, #256]	; (80006ac <balance+0x184>)
 80005aa:	68bb      	ldr	r3, [r7, #8]
 80005ac:	6013      	str	r3, [r2, #0]
}
 80005ae:	e075      	b.n	800069c <balance+0x174>
	else if(GREEN > timeGreen)
 80005b0:	4b3f      	ldr	r3, [pc, #252]	; (80006b0 <balance+0x188>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	687a      	ldr	r2, [r7, #4]
 80005b6:	429a      	cmp	r2, r3
 80005b8:	dd18      	ble.n	80005ec <balance+0xc4>
		timeRed = timeRed * (GREEN / timeGreen);
 80005ba:	4b3d      	ldr	r3, [pc, #244]	; (80006b0 <balance+0x188>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	687a      	ldr	r2, [r7, #4]
 80005c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80005c4:	4a38      	ldr	r2, [pc, #224]	; (80006a8 <balance+0x180>)
 80005c6:	6812      	ldr	r2, [r2, #0]
 80005c8:	fb02 f303 	mul.w	r3, r2, r3
 80005cc:	4a36      	ldr	r2, [pc, #216]	; (80006a8 <balance+0x180>)
 80005ce:	6013      	str	r3, [r2, #0]
		timeYellow = AMBER * (GREEN / timeGreen);
 80005d0:	4b37      	ldr	r3, [pc, #220]	; (80006b0 <balance+0x188>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	687a      	ldr	r2, [r7, #4]
 80005d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80005da:	68ba      	ldr	r2, [r7, #8]
 80005dc:	fb02 f303 	mul.w	r3, r2, r3
 80005e0:	4a32      	ldr	r2, [pc, #200]	; (80006ac <balance+0x184>)
 80005e2:	6013      	str	r3, [r2, #0]
		timeGreen = GREEN;
 80005e4:	4a32      	ldr	r2, [pc, #200]	; (80006b0 <balance+0x188>)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	6013      	str	r3, [r2, #0]
}
 80005ea:	e057      	b.n	800069c <balance+0x174>
	else if(RED < timeRed)
 80005ec:	4b2e      	ldr	r3, [pc, #184]	; (80006a8 <balance+0x180>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	68fa      	ldr	r2, [r7, #12]
 80005f2:	429a      	cmp	r2, r3
 80005f4:	da19      	bge.n	800062a <balance+0x102>
		timeYellow = (RED / 5) * 2;
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	4a2e      	ldr	r2, [pc, #184]	; (80006b4 <balance+0x18c>)
 80005fa:	fb82 1203 	smull	r1, r2, r2, r3
 80005fe:	1052      	asrs	r2, r2, #1
 8000600:	17db      	asrs	r3, r3, #31
 8000602:	1ad3      	subs	r3, r2, r3
 8000604:	005b      	lsls	r3, r3, #1
 8000606:	4a29      	ldr	r2, [pc, #164]	; (80006ac <balance+0x184>)
 8000608:	6013      	str	r3, [r2, #0]
		timeGreen = (RED / 5) * 3;
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	4a29      	ldr	r2, [pc, #164]	; (80006b4 <balance+0x18c>)
 800060e:	fb82 1203 	smull	r1, r2, r2, r3
 8000612:	1052      	asrs	r2, r2, #1
 8000614:	17db      	asrs	r3, r3, #31
 8000616:	1ad2      	subs	r2, r2, r3
 8000618:	4613      	mov	r3, r2
 800061a:	005b      	lsls	r3, r3, #1
 800061c:	4413      	add	r3, r2
 800061e:	4a24      	ldr	r2, [pc, #144]	; (80006b0 <balance+0x188>)
 8000620:	6013      	str	r3, [r2, #0]
		timeRed = RED;
 8000622:	4a21      	ldr	r2, [pc, #132]	; (80006a8 <balance+0x180>)
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	6013      	str	r3, [r2, #0]
}
 8000628:	e038      	b.n	800069c <balance+0x174>
	else if(AMBER < timeYellow)
 800062a:	4b20      	ldr	r3, [pc, #128]	; (80006ac <balance+0x184>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	68ba      	ldr	r2, [r7, #8]
 8000630:	429a      	cmp	r2, r3
 8000632:	da17      	bge.n	8000664 <balance+0x13c>
		timeRed = (AMBER / 2) * 5;
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	0fda      	lsrs	r2, r3, #31
 8000638:	4413      	add	r3, r2
 800063a:	105b      	asrs	r3, r3, #1
 800063c:	461a      	mov	r2, r3
 800063e:	4613      	mov	r3, r2
 8000640:	009b      	lsls	r3, r3, #2
 8000642:	4413      	add	r3, r2
 8000644:	4a18      	ldr	r2, [pc, #96]	; (80006a8 <balance+0x180>)
 8000646:	6013      	str	r3, [r2, #0]
		timeGreen = (AMBER / 2) * 3;
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	0fda      	lsrs	r2, r3, #31
 800064c:	4413      	add	r3, r2
 800064e:	105b      	asrs	r3, r3, #1
 8000650:	461a      	mov	r2, r3
 8000652:	4613      	mov	r3, r2
 8000654:	005b      	lsls	r3, r3, #1
 8000656:	4413      	add	r3, r2
 8000658:	4a15      	ldr	r2, [pc, #84]	; (80006b0 <balance+0x188>)
 800065a:	6013      	str	r3, [r2, #0]
		timeYellow = AMBER;
 800065c:	4a13      	ldr	r2, [pc, #76]	; (80006ac <balance+0x184>)
 800065e:	68bb      	ldr	r3, [r7, #8]
 8000660:	6013      	str	r3, [r2, #0]
}
 8000662:	e01b      	b.n	800069c <balance+0x174>
	else if(GREEN < timeGreen)
 8000664:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <balance+0x188>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	687a      	ldr	r2, [r7, #4]
 800066a:	429a      	cmp	r2, r3
 800066c:	da16      	bge.n	800069c <balance+0x174>
		timeRed = (GREEN / 3) * 5;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4a11      	ldr	r2, [pc, #68]	; (80006b8 <balance+0x190>)
 8000672:	fb82 1203 	smull	r1, r2, r2, r3
 8000676:	17db      	asrs	r3, r3, #31
 8000678:	1ad2      	subs	r2, r2, r3
 800067a:	4613      	mov	r3, r2
 800067c:	009b      	lsls	r3, r3, #2
 800067e:	4413      	add	r3, r2
 8000680:	4a09      	ldr	r2, [pc, #36]	; (80006a8 <balance+0x180>)
 8000682:	6013      	str	r3, [r2, #0]
		timeYellow = (GREEN / 3) * 2;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	4a0c      	ldr	r2, [pc, #48]	; (80006b8 <balance+0x190>)
 8000688:	fb82 1203 	smull	r1, r2, r2, r3
 800068c:	17db      	asrs	r3, r3, #31
 800068e:	1ad3      	subs	r3, r2, r3
 8000690:	005b      	lsls	r3, r3, #1
 8000692:	4a06      	ldr	r2, [pc, #24]	; (80006ac <balance+0x184>)
 8000694:	6013      	str	r3, [r2, #0]
		timeGreen = GREEN;
 8000696:	4a06      	ldr	r2, [pc, #24]	; (80006b0 <balance+0x188>)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	6013      	str	r3, [r2, #0]
}
 800069c:	bf00      	nop
 800069e:	3714      	adds	r7, #20
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bc80      	pop	{r7}
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	20000024 	.word	0x20000024
 80006ac:	20000028 	.word	0x20000028
 80006b0:	2000002c 	.word	0x2000002c
 80006b4:	66666667 	.word	0x66666667
 80006b8:	55555556 	.word	0x55555556

080006bc <normalState>:

void normalState(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
	switch(status)
 80006c0:	4b87      	ldr	r3, [pc, #540]	; (80008e0 <normalState+0x224>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2b0c      	cmp	r3, #12
 80006c6:	f200 82e9 	bhi.w	8000c9c <normalState+0x5e0>
 80006ca:	a201      	add	r2, pc, #4	; (adr r2, 80006d0 <normalState+0x14>)
 80006cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006d0:	08000705 	.word	0x08000705
 80006d4:	0800073f 	.word	0x0800073f
 80006d8:	08000809 	.word	0x08000809
 80006dc:	080008fd 	.word	0x080008fd
 80006e0:	080009f3 	.word	0x080009f3
 80006e4:	08000c9d 	.word	0x08000c9d
 80006e8:	08000c9d 	.word	0x08000c9d
 80006ec:	08000c9d 	.word	0x08000c9d
 80006f0:	08000c9d 	.word	0x08000c9d
 80006f4:	08000c9d 	.word	0x08000c9d
 80006f8:	08000b05 	.word	0x08000b05
 80006fc:	08000ba1 	.word	0x08000ba1
 8000700:	08000c19 	.word	0x08000c19
	{
	case INIT:
		clearAllLed1();
 8000704:	f7ff fdf6 	bl	80002f4 <clearAllLed1>
		clearAllLed2();
 8000708:	f7ff fe08 	bl	800031c <clearAllLed2>

		status = RedGreen;
 800070c:	4b74      	ldr	r3, [pc, #464]	; (80008e0 <normalState+0x224>)
 800070e:	2201      	movs	r2, #1
 8000710:	601a      	str	r2, [r3, #0]

		setTimer(0, timeGreen * 100);
 8000712:	4b74      	ldr	r3, [pc, #464]	; (80008e4 <normalState+0x228>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	2264      	movs	r2, #100	; 0x64
 8000718:	fb02 f303 	mul.w	r3, r2, r3
 800071c:	4619      	mov	r1, r3
 800071e:	2000      	movs	r0, #0
 8000720:	f000 fdce 	bl	80012c0 <setTimer>
		setTimer(1, 100);
 8000724:	2164      	movs	r1, #100	; 0x64
 8000726:	2001      	movs	r0, #1
 8000728:	f000 fdca 	bl	80012c0 <setTimer>

		time1 = timeRed;
 800072c:	4b6e      	ldr	r3, [pc, #440]	; (80008e8 <normalState+0x22c>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a6e      	ldr	r2, [pc, #440]	; (80008ec <normalState+0x230>)
 8000732:	6013      	str	r3, [r2, #0]
		time2 = timeGreen;
 8000734:	4b6b      	ldr	r3, [pc, #428]	; (80008e4 <normalState+0x228>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a6d      	ldr	r2, [pc, #436]	; (80008f0 <normalState+0x234>)
 800073a:	6013      	str	r3, [r2, #0]

		break;
 800073c:	e2bd      	b.n	8000cba <normalState+0x5fe>

	case RedGreen:
		displayRed1();
 800073e:	f7ff fdfd 	bl	800033c <displayRed1>
		displayGreen2();
 8000742:	f7ff fe57 	bl	80003f4 <displayGreen2>

		if(isTimerUp(0) == 1)	// Transit State
 8000746:	2000      	movs	r0, #0
 8000748:	f000 fda6 	bl	8001298 <isTimerUp>
 800074c:	4603      	mov	r3, r0
 800074e:	2b01      	cmp	r3, #1
 8000750:	d117      	bne.n	8000782 <normalState+0xc6>
		{
			status = RedAmber;
 8000752:	4b63      	ldr	r3, [pc, #396]	; (80008e0 <normalState+0x224>)
 8000754:	2202      	movs	r2, #2
 8000756:	601a      	str	r2, [r3, #0]

			setTimer(0, timeYellow * 100);
 8000758:	4b66      	ldr	r3, [pc, #408]	; (80008f4 <normalState+0x238>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2264      	movs	r2, #100	; 0x64
 800075e:	fb02 f303 	mul.w	r3, r2, r3
 8000762:	4619      	mov	r1, r3
 8000764:	2000      	movs	r0, #0
 8000766:	f000 fdab 	bl	80012c0 <setTimer>
			setTimer(1, 100);
 800076a:	2164      	movs	r1, #100	; 0x64
 800076c:	2001      	movs	r0, #1
 800076e:	f000 fda7 	bl	80012c0 <setTimer>

			time1 = timeYellow;
 8000772:	4b60      	ldr	r3, [pc, #384]	; (80008f4 <normalState+0x238>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4a5d      	ldr	r2, [pc, #372]	; (80008ec <normalState+0x230>)
 8000778:	6013      	str	r3, [r2, #0]
			time2 = timeYellow;
 800077a:	4b5e      	ldr	r3, [pc, #376]	; (80008f4 <normalState+0x238>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4a5c      	ldr	r2, [pc, #368]	; (80008f0 <normalState+0x234>)
 8000780:	6013      	str	r3, [r2, #0]
		}

		if(isTimerUp(1) == 1)	// Update Time
 8000782:	2001      	movs	r0, #1
 8000784:	f000 fd88 	bl	8001298 <isTimerUp>
 8000788:	4603      	mov	r3, r0
 800078a:	2b01      	cmp	r3, #1
 800078c:	d10d      	bne.n	80007aa <normalState+0xee>
		{
			setTimer(1, 100);
 800078e:	2164      	movs	r1, #100	; 0x64
 8000790:	2001      	movs	r0, #1
 8000792:	f000 fd95 	bl	80012c0 <setTimer>

			time1--;
 8000796:	4b55      	ldr	r3, [pc, #340]	; (80008ec <normalState+0x230>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	3b01      	subs	r3, #1
 800079c:	4a53      	ldr	r2, [pc, #332]	; (80008ec <normalState+0x230>)
 800079e:	6013      	str	r3, [r2, #0]
			time2--;
 80007a0:	4b53      	ldr	r3, [pc, #332]	; (80008f0 <normalState+0x234>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	3b01      	subs	r3, #1
 80007a6:	4a52      	ldr	r2, [pc, #328]	; (80008f0 <normalState+0x234>)
 80007a8:	6013      	str	r3, [r2, #0]
		}

		if(Is_Button_Pressed(1))
 80007aa:	2001      	movs	r0, #1
 80007ac:	f7ff fd64 	bl	8000278 <Is_Button_Pressed>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d011      	beq.n	80007da <normalState+0x11e>
		{
			status = ManRed;
 80007b6:	4b4a      	ldr	r3, [pc, #296]	; (80008e0 <normalState+0x224>)
 80007b8:	220a      	movs	r2, #10
 80007ba:	601a      	str	r2, [r3, #0]

			time1 = timeRed;
 80007bc:	4b4a      	ldr	r3, [pc, #296]	; (80008e8 <normalState+0x22c>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a4a      	ldr	r2, [pc, #296]	; (80008ec <normalState+0x230>)
 80007c2:	6013      	str	r3, [r2, #0]
			time2 = 2;
 80007c4:	4b4a      	ldr	r3, [pc, #296]	; (80008f0 <normalState+0x234>)
 80007c6:	2202      	movs	r2, #2
 80007c8:	601a      	str	r2, [r3, #0]

			clearAllLed1();
 80007ca:	f7ff fd93 	bl	80002f4 <clearAllLed1>
			clearAllLed2();
 80007ce:	f7ff fda5 	bl	800031c <clearAllLed2>

			setTimer(2, 25);
 80007d2:	2119      	movs	r1, #25
 80007d4:	2002      	movs	r0, #2
 80007d6:	f000 fd73 	bl	80012c0 <setTimer>
		}
		if(Is_Button_Pressed(0))
 80007da:	2000      	movs	r0, #0
 80007dc:	f7ff fd4c 	bl	8000278 <Is_Button_Pressed>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	f000 825c 	beq.w	8000ca0 <normalState+0x5e4>
		{
			pedestrian_flag = Pedestrian_RED;
 80007e8:	4b43      	ldr	r3, [pc, #268]	; (80008f8 <normalState+0x23c>)
 80007ea:	2208      	movs	r2, #8
 80007ec:	601a      	str	r2, [r3, #0]
			setTimer(3, (timeRed + timeGreen) * 100);
 80007ee:	4b3e      	ldr	r3, [pc, #248]	; (80008e8 <normalState+0x22c>)
 80007f0:	681a      	ldr	r2, [r3, #0]
 80007f2:	4b3c      	ldr	r3, [pc, #240]	; (80008e4 <normalState+0x228>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4413      	add	r3, r2
 80007f8:	2264      	movs	r2, #100	; 0x64
 80007fa:	fb02 f303 	mul.w	r3, r2, r3
 80007fe:	4619      	mov	r1, r3
 8000800:	2003      	movs	r0, #3
 8000802:	f000 fd5d 	bl	80012c0 <setTimer>
		}

		break;
 8000806:	e24b      	b.n	8000ca0 <normalState+0x5e4>

	case RedAmber:
		displayRed1();
 8000808:	f7ff fd98 	bl	800033c <displayRed1>
		displayYellow2();
 800080c:	f7ff fde2 	bl	80003d4 <displayYellow2>

		if(isTimerUp(0)==1)		// Transit State
 8000810:	2000      	movs	r0, #0
 8000812:	f000 fd41 	bl	8001298 <isTimerUp>
 8000816:	4603      	mov	r3, r0
 8000818:	2b01      	cmp	r3, #1
 800081a:	d11e      	bne.n	800085a <normalState+0x19e>
		{
			status = GreenRed;
 800081c:	4b30      	ldr	r3, [pc, #192]	; (80008e0 <normalState+0x224>)
 800081e:	2203      	movs	r2, #3
 8000820:	601a      	str	r2, [r3, #0]

			setTimer(0, timeGreen * 100);
 8000822:	4b30      	ldr	r3, [pc, #192]	; (80008e4 <normalState+0x228>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	2264      	movs	r2, #100	; 0x64
 8000828:	fb02 f303 	mul.w	r3, r2, r3
 800082c:	4619      	mov	r1, r3
 800082e:	2000      	movs	r0, #0
 8000830:	f000 fd46 	bl	80012c0 <setTimer>
			setTimer(1, 100);
 8000834:	2164      	movs	r1, #100	; 0x64
 8000836:	2001      	movs	r0, #1
 8000838:	f000 fd42 	bl	80012c0 <setTimer>

			time1 = timeGreen;
 800083c:	4b29      	ldr	r3, [pc, #164]	; (80008e4 <normalState+0x228>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a2a      	ldr	r2, [pc, #168]	; (80008ec <normalState+0x230>)
 8000842:	6013      	str	r3, [r2, #0]
			time2 = timeRed;
 8000844:	4b28      	ldr	r3, [pc, #160]	; (80008e8 <normalState+0x22c>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a29      	ldr	r2, [pc, #164]	; (80008f0 <normalState+0x234>)
 800084a:	6013      	str	r3, [r2, #0]

			if(pedestrian_flag == Pedestrian_RED)
 800084c:	4b2a      	ldr	r3, [pc, #168]	; (80008f8 <normalState+0x23c>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	2b08      	cmp	r3, #8
 8000852:	d102      	bne.n	800085a <normalState+0x19e>
				pedestrian_flag = Pedestrian_GREEN;
 8000854:	4b28      	ldr	r3, [pc, #160]	; (80008f8 <normalState+0x23c>)
 8000856:	2209      	movs	r2, #9
 8000858:	601a      	str	r2, [r3, #0]
		}

		if(isTimerUp(0) == 1)	// Update Time
 800085a:	2000      	movs	r0, #0
 800085c:	f000 fd1c 	bl	8001298 <isTimerUp>
 8000860:	4603      	mov	r3, r0
 8000862:	2b01      	cmp	r3, #1
 8000864:	d10d      	bne.n	8000882 <normalState+0x1c6>
		{
			setTimer(1, 100);
 8000866:	2164      	movs	r1, #100	; 0x64
 8000868:	2001      	movs	r0, #1
 800086a:	f000 fd29 	bl	80012c0 <setTimer>

			time1--;
 800086e:	4b1f      	ldr	r3, [pc, #124]	; (80008ec <normalState+0x230>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	3b01      	subs	r3, #1
 8000874:	4a1d      	ldr	r2, [pc, #116]	; (80008ec <normalState+0x230>)
 8000876:	6013      	str	r3, [r2, #0]
			time2--;
 8000878:	4b1d      	ldr	r3, [pc, #116]	; (80008f0 <normalState+0x234>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	3b01      	subs	r3, #1
 800087e:	4a1c      	ldr	r2, [pc, #112]	; (80008f0 <normalState+0x234>)
 8000880:	6013      	str	r3, [r2, #0]
		}

		if(Is_Button_Pressed(1))
 8000882:	2001      	movs	r0, #1
 8000884:	f7ff fcf8 	bl	8000278 <Is_Button_Pressed>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d011      	beq.n	80008b2 <normalState+0x1f6>
		{
			status = ManRed;
 800088e:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <normalState+0x224>)
 8000890:	220a      	movs	r2, #10
 8000892:	601a      	str	r2, [r3, #0]

			time1 = timeRed;
 8000894:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <normalState+0x22c>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a14      	ldr	r2, [pc, #80]	; (80008ec <normalState+0x230>)
 800089a:	6013      	str	r3, [r2, #0]
			time2 = 2;
 800089c:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <normalState+0x234>)
 800089e:	2202      	movs	r2, #2
 80008a0:	601a      	str	r2, [r3, #0]

			clearAllLed1();
 80008a2:	f7ff fd27 	bl	80002f4 <clearAllLed1>
			clearAllLed2();
 80008a6:	f7ff fd39 	bl	800031c <clearAllLed2>

			setTimer(2, 25);
 80008aa:	2119      	movs	r1, #25
 80008ac:	2002      	movs	r0, #2
 80008ae:	f000 fd07 	bl	80012c0 <setTimer>
		}

		if(Is_Button_Pressed(0))
 80008b2:	2000      	movs	r0, #0
 80008b4:	f7ff fce0 	bl	8000278 <Is_Button_Pressed>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	f000 81f2 	beq.w	8000ca4 <normalState+0x5e8>
		{
			pedestrian_flag = Pedestrian_RED;
 80008c0:	4b0d      	ldr	r3, [pc, #52]	; (80008f8 <normalState+0x23c>)
 80008c2:	2208      	movs	r2, #8
 80008c4:	601a      	str	r2, [r3, #0]
			setTimer(3, (timeRed + timeGreen) * 100);
 80008c6:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <normalState+0x22c>)
 80008c8:	681a      	ldr	r2, [r3, #0]
 80008ca:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <normalState+0x228>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4413      	add	r3, r2
 80008d0:	2264      	movs	r2, #100	; 0x64
 80008d2:	fb02 f303 	mul.w	r3, r2, r3
 80008d6:	4619      	mov	r1, r3
 80008d8:	2003      	movs	r0, #3
 80008da:	f000 fcf1 	bl	80012c0 <setTimer>
		}

		break;
 80008de:	e1e1      	b.n	8000ca4 <normalState+0x5e8>
 80008e0:	200000ec 	.word	0x200000ec
 80008e4:	2000002c 	.word	0x2000002c
 80008e8:	20000024 	.word	0x20000024
 80008ec:	20000108 	.word	0x20000108
 80008f0:	200000f0 	.word	0x200000f0
 80008f4:	20000028 	.word	0x20000028
 80008f8:	20000030 	.word	0x20000030

	case GreenRed:
		displayGreen1();
 80008fc:	f7ff fd46 	bl	800038c <displayGreen1>
		displayRed2();
 8000900:	f7ff fd58 	bl	80003b4 <displayRed2>

		if(isTimerUp(0) == 1)	// Transit State
 8000904:	2000      	movs	r0, #0
 8000906:	f000 fcc7 	bl	8001298 <isTimerUp>
 800090a:	4603      	mov	r3, r0
 800090c:	2b01      	cmp	r3, #1
 800090e:	d117      	bne.n	8000940 <normalState+0x284>
		{
			status = AmberRed;
 8000910:	4b9b      	ldr	r3, [pc, #620]	; (8000b80 <normalState+0x4c4>)
 8000912:	2204      	movs	r2, #4
 8000914:	601a      	str	r2, [r3, #0]

			setTimer(0, timeYellow * 100);
 8000916:	4b9b      	ldr	r3, [pc, #620]	; (8000b84 <normalState+0x4c8>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	2264      	movs	r2, #100	; 0x64
 800091c:	fb02 f303 	mul.w	r3, r2, r3
 8000920:	4619      	mov	r1, r3
 8000922:	2000      	movs	r0, #0
 8000924:	f000 fccc 	bl	80012c0 <setTimer>
			setTimer(1, 100);
 8000928:	2164      	movs	r1, #100	; 0x64
 800092a:	2001      	movs	r0, #1
 800092c:	f000 fcc8 	bl	80012c0 <setTimer>

			time1 = timeYellow;
 8000930:	4b94      	ldr	r3, [pc, #592]	; (8000b84 <normalState+0x4c8>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a94      	ldr	r2, [pc, #592]	; (8000b88 <normalState+0x4cc>)
 8000936:	6013      	str	r3, [r2, #0]
			time2 = timeYellow;
 8000938:	4b92      	ldr	r3, [pc, #584]	; (8000b84 <normalState+0x4c8>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a93      	ldr	r2, [pc, #588]	; (8000b8c <normalState+0x4d0>)
 800093e:	6013      	str	r3, [r2, #0]
		}

		if(isTimerUp(1)==1)		// Update Time
 8000940:	2001      	movs	r0, #1
 8000942:	f000 fca9 	bl	8001298 <isTimerUp>
 8000946:	4603      	mov	r3, r0
 8000948:	2b01      	cmp	r3, #1
 800094a:	d10d      	bne.n	8000968 <normalState+0x2ac>
		{
			setTimer(1, 100);
 800094c:	2164      	movs	r1, #100	; 0x64
 800094e:	2001      	movs	r0, #1
 8000950:	f000 fcb6 	bl	80012c0 <setTimer>

			time1--;
 8000954:	4b8c      	ldr	r3, [pc, #560]	; (8000b88 <normalState+0x4cc>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	3b01      	subs	r3, #1
 800095a:	4a8b      	ldr	r2, [pc, #556]	; (8000b88 <normalState+0x4cc>)
 800095c:	6013      	str	r3, [r2, #0]
			time2--;
 800095e:	4b8b      	ldr	r3, [pc, #556]	; (8000b8c <normalState+0x4d0>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	3b01      	subs	r3, #1
 8000964:	4a89      	ldr	r2, [pc, #548]	; (8000b8c <normalState+0x4d0>)
 8000966:	6013      	str	r3, [r2, #0]
		}

		if(timeYellow < 5 && time1 <= 5 - timeYellow)
 8000968:	4b86      	ldr	r3, [pc, #536]	; (8000b84 <normalState+0x4c8>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	2b04      	cmp	r3, #4
 800096e:	dc11      	bgt.n	8000994 <normalState+0x2d8>
 8000970:	4b84      	ldr	r3, [pc, #528]	; (8000b84 <normalState+0x4c8>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f1c3 0205 	rsb	r2, r3, #5
 8000978:	4b83      	ldr	r3, [pc, #524]	; (8000b88 <normalState+0x4cc>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	429a      	cmp	r2, r3
 800097e:	db09      	blt.n	8000994 <normalState+0x2d8>
				buzzerValue = 512 * (5 - timeYellow - time1);
 8000980:	4b80      	ldr	r3, [pc, #512]	; (8000b84 <normalState+0x4c8>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f1c3 0205 	rsb	r2, r3, #5
 8000988:	4b7f      	ldr	r3, [pc, #508]	; (8000b88 <normalState+0x4cc>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	1ad3      	subs	r3, r2, r3
 800098e:	025b      	lsls	r3, r3, #9
 8000990:	4a7f      	ldr	r2, [pc, #508]	; (8000b90 <normalState+0x4d4>)
 8000992:	6013      	str	r3, [r2, #0]

		if(Is_Button_Pressed(1))
 8000994:	2001      	movs	r0, #1
 8000996:	f7ff fc6f 	bl	8000278 <Is_Button_Pressed>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d011      	beq.n	80009c4 <normalState+0x308>
		{
			status = ManRed;
 80009a0:	4b77      	ldr	r3, [pc, #476]	; (8000b80 <normalState+0x4c4>)
 80009a2:	220a      	movs	r2, #10
 80009a4:	601a      	str	r2, [r3, #0]

			time1 = timeRed;
 80009a6:	4b7b      	ldr	r3, [pc, #492]	; (8000b94 <normalState+0x4d8>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4a77      	ldr	r2, [pc, #476]	; (8000b88 <normalState+0x4cc>)
 80009ac:	6013      	str	r3, [r2, #0]
			time2 = 2;
 80009ae:	4b77      	ldr	r3, [pc, #476]	; (8000b8c <normalState+0x4d0>)
 80009b0:	2202      	movs	r2, #2
 80009b2:	601a      	str	r2, [r3, #0]

			clearAllLed1();
 80009b4:	f7ff fc9e 	bl	80002f4 <clearAllLed1>
			clearAllLed2();
 80009b8:	f7ff fcb0 	bl	800031c <clearAllLed2>

			setTimer(2, 25);
 80009bc:	2119      	movs	r1, #25
 80009be:	2002      	movs	r0, #2
 80009c0:	f000 fc7e 	bl	80012c0 <setTimer>
		}

		if(Is_Button_Pressed(0))
 80009c4:	2000      	movs	r0, #0
 80009c6:	f7ff fc57 	bl	8000278 <Is_Button_Pressed>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	f000 816b 	beq.w	8000ca8 <normalState+0x5ec>
		{
			pedestrian_flag = Pedestrian_GREEN;
 80009d2:	4b71      	ldr	r3, [pc, #452]	; (8000b98 <normalState+0x4dc>)
 80009d4:	2209      	movs	r2, #9
 80009d6:	601a      	str	r2, [r3, #0]
			setTimer(3, (timeRed + timeGreen) * 100);
 80009d8:	4b6e      	ldr	r3, [pc, #440]	; (8000b94 <normalState+0x4d8>)
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	4b6f      	ldr	r3, [pc, #444]	; (8000b9c <normalState+0x4e0>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4413      	add	r3, r2
 80009e2:	2264      	movs	r2, #100	; 0x64
 80009e4:	fb02 f303 	mul.w	r3, r2, r3
 80009e8:	4619      	mov	r1, r3
 80009ea:	2003      	movs	r0, #3
 80009ec:	f000 fc68 	bl	80012c0 <setTimer>
		}

		break;
 80009f0:	e15a      	b.n	8000ca8 <normalState+0x5ec>

	case AmberRed:
		displayYellow1();
 80009f2:	f7ff fcb7 	bl	8000364 <displayYellow1>
		displayRed2();
 80009f6:	f7ff fcdd 	bl	80003b4 <displayRed2>

		if(isTimerUp(0) == 1)	// Transit State
 80009fa:	2000      	movs	r0, #0
 80009fc:	f000 fc4c 	bl	8001298 <isTimerUp>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d11e      	bne.n	8000a44 <normalState+0x388>
		{
			status = RedGreen;
 8000a06:	4b5e      	ldr	r3, [pc, #376]	; (8000b80 <normalState+0x4c4>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	601a      	str	r2, [r3, #0]

			setTimer(0, timeGreen * 100);
 8000a0c:	4b63      	ldr	r3, [pc, #396]	; (8000b9c <normalState+0x4e0>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2264      	movs	r2, #100	; 0x64
 8000a12:	fb02 f303 	mul.w	r3, r2, r3
 8000a16:	4619      	mov	r1, r3
 8000a18:	2000      	movs	r0, #0
 8000a1a:	f000 fc51 	bl	80012c0 <setTimer>
			setTimer(1, 100);
 8000a1e:	2164      	movs	r1, #100	; 0x64
 8000a20:	2001      	movs	r0, #1
 8000a22:	f000 fc4d 	bl	80012c0 <setTimer>

			time1 = timeRed;
 8000a26:	4b5b      	ldr	r3, [pc, #364]	; (8000b94 <normalState+0x4d8>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4a57      	ldr	r2, [pc, #348]	; (8000b88 <normalState+0x4cc>)
 8000a2c:	6013      	str	r3, [r2, #0]
			time2 = timeGreen;
 8000a2e:	4b5b      	ldr	r3, [pc, #364]	; (8000b9c <normalState+0x4e0>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4a56      	ldr	r2, [pc, #344]	; (8000b8c <normalState+0x4d0>)
 8000a34:	6013      	str	r3, [r2, #0]

			if(pedestrian_flag == Pedestrian_GREEN)
 8000a36:	4b58      	ldr	r3, [pc, #352]	; (8000b98 <normalState+0x4dc>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	2b09      	cmp	r3, #9
 8000a3c:	d102      	bne.n	8000a44 <normalState+0x388>
				pedestrian_flag = Pedestrian_RED;
 8000a3e:	4b56      	ldr	r3, [pc, #344]	; (8000b98 <normalState+0x4dc>)
 8000a40:	2208      	movs	r2, #8
 8000a42:	601a      	str	r2, [r3, #0]
		}

		if (timeYellow >= 5 && time1 <= 5)
 8000a44:	4b4f      	ldr	r3, [pc, #316]	; (8000b84 <normalState+0x4c8>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	2b04      	cmp	r3, #4
 8000a4a:	dd0a      	ble.n	8000a62 <normalState+0x3a6>
 8000a4c:	4b4e      	ldr	r3, [pc, #312]	; (8000b88 <normalState+0x4cc>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2b05      	cmp	r3, #5
 8000a52:	dc06      	bgt.n	8000a62 <normalState+0x3a6>
			buzzerValue = 512 * (5 - time1);
 8000a54:	4b4c      	ldr	r3, [pc, #304]	; (8000b88 <normalState+0x4cc>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f1c3 0305 	rsb	r3, r3, #5
 8000a5c:	025b      	lsls	r3, r3, #9
 8000a5e:	4a4c      	ldr	r2, [pc, #304]	; (8000b90 <normalState+0x4d4>)
 8000a60:	6013      	str	r3, [r2, #0]

		if(timeYellow < 5)
 8000a62:	4b48      	ldr	r3, [pc, #288]	; (8000b84 <normalState+0x4c8>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	2b04      	cmp	r3, #4
 8000a68:	dc09      	bgt.n	8000a7e <normalState+0x3c2>
			buzzerValue += 256 * (5 - time1);
 8000a6a:	4b47      	ldr	r3, [pc, #284]	; (8000b88 <normalState+0x4cc>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f1c3 0305 	rsb	r3, r3, #5
 8000a72:	021a      	lsls	r2, r3, #8
 8000a74:	4b46      	ldr	r3, [pc, #280]	; (8000b90 <normalState+0x4d4>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4413      	add	r3, r2
 8000a7a:	4a45      	ldr	r2, [pc, #276]	; (8000b90 <normalState+0x4d4>)
 8000a7c:	6013      	str	r3, [r2, #0]

		if(isTimerUp(1) == 1)	// Update Time
 8000a7e:	2001      	movs	r0, #1
 8000a80:	f000 fc0a 	bl	8001298 <isTimerUp>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d10d      	bne.n	8000aa6 <normalState+0x3ea>
		{
			setTimer(1, 100);
 8000a8a:	2164      	movs	r1, #100	; 0x64
 8000a8c:	2001      	movs	r0, #1
 8000a8e:	f000 fc17 	bl	80012c0 <setTimer>

			time1--;
 8000a92:	4b3d      	ldr	r3, [pc, #244]	; (8000b88 <normalState+0x4cc>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	3b01      	subs	r3, #1
 8000a98:	4a3b      	ldr	r2, [pc, #236]	; (8000b88 <normalState+0x4cc>)
 8000a9a:	6013      	str	r3, [r2, #0]
			time2--;
 8000a9c:	4b3b      	ldr	r3, [pc, #236]	; (8000b8c <normalState+0x4d0>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	3b01      	subs	r3, #1
 8000aa2:	4a3a      	ldr	r2, [pc, #232]	; (8000b8c <normalState+0x4d0>)
 8000aa4:	6013      	str	r3, [r2, #0]
		}

		if(Is_Button_Pressed(1))
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	f7ff fbe6 	bl	8000278 <Is_Button_Pressed>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d011      	beq.n	8000ad6 <normalState+0x41a>
		{
			status = ManRed;
 8000ab2:	4b33      	ldr	r3, [pc, #204]	; (8000b80 <normalState+0x4c4>)
 8000ab4:	220a      	movs	r2, #10
 8000ab6:	601a      	str	r2, [r3, #0]

			time1 = timeRed;
 8000ab8:	4b36      	ldr	r3, [pc, #216]	; (8000b94 <normalState+0x4d8>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a32      	ldr	r2, [pc, #200]	; (8000b88 <normalState+0x4cc>)
 8000abe:	6013      	str	r3, [r2, #0]
			time2 = 2;
 8000ac0:	4b32      	ldr	r3, [pc, #200]	; (8000b8c <normalState+0x4d0>)
 8000ac2:	2202      	movs	r2, #2
 8000ac4:	601a      	str	r2, [r3, #0]

			clearAllLed1();
 8000ac6:	f7ff fc15 	bl	80002f4 <clearAllLed1>
			clearAllLed2();
 8000aca:	f7ff fc27 	bl	800031c <clearAllLed2>

			setTimer(2, 25);
 8000ace:	2119      	movs	r1, #25
 8000ad0:	2002      	movs	r0, #2
 8000ad2:	f000 fbf5 	bl	80012c0 <setTimer>
		}

		if(Is_Button_Pressed(0))
 8000ad6:	2000      	movs	r0, #0
 8000ad8:	f7ff fbce 	bl	8000278 <Is_Button_Pressed>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	f000 80e4 	beq.w	8000cac <normalState+0x5f0>
		{
			pedestrian_flag = Pedestrian_GREEN;
 8000ae4:	4b2c      	ldr	r3, [pc, #176]	; (8000b98 <normalState+0x4dc>)
 8000ae6:	2209      	movs	r2, #9
 8000ae8:	601a      	str	r2, [r3, #0]
			setTimer(3, (timeRed + timeGreen) * 100);
 8000aea:	4b2a      	ldr	r3, [pc, #168]	; (8000b94 <normalState+0x4d8>)
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	4b2b      	ldr	r3, [pc, #172]	; (8000b9c <normalState+0x4e0>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4413      	add	r3, r2
 8000af4:	2264      	movs	r2, #100	; 0x64
 8000af6:	fb02 f303 	mul.w	r3, r2, r3
 8000afa:	4619      	mov	r1, r3
 8000afc:	2003      	movs	r0, #3
 8000afe:	f000 fbdf 	bl	80012c0 <setTimer>
		}

		break;
 8000b02:	e0d3      	b.n	8000cac <normalState+0x5f0>

	case ManRed:
		if(isTimerUp(2) == 1)
 8000b04:	2002      	movs	r0, #2
 8000b06:	f000 fbc7 	bl	8001298 <isTimerUp>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d105      	bne.n	8000b1c <normalState+0x460>
		{
			setTimer(2, 25);
 8000b10:	2119      	movs	r1, #25
 8000b12:	2002      	movs	r0, #2
 8000b14:	f000 fbd4 	bl	80012c0 <setTimer>
			toggleRed();
 8000b18:	f7ff fc7c 	bl	8000414 <toggleRed>
		}

		if(Is_Button_Pressed(2))
 8000b1c:	2002      	movs	r0, #2
 8000b1e:	f7ff fbab 	bl	8000278 <Is_Button_Pressed>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <normalState+0x470>
			increase();
 8000b28:	f7ff fcea 	bl	8000500 <increase>

		if(Is_Button_Pressed(3))
 8000b2c:	2003      	movs	r0, #3
 8000b2e:	f7ff fba3 	bl	8000278 <Is_Button_Pressed>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d008      	beq.n	8000b4a <normalState+0x48e>
			balance(time1, timeYellow, timeGreen);
 8000b38:	4b13      	ldr	r3, [pc, #76]	; (8000b88 <normalState+0x4cc>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a11      	ldr	r2, [pc, #68]	; (8000b84 <normalState+0x4c8>)
 8000b3e:	6811      	ldr	r1, [r2, #0]
 8000b40:	4a16      	ldr	r2, [pc, #88]	; (8000b9c <normalState+0x4e0>)
 8000b42:	6812      	ldr	r2, [r2, #0]
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff fcef 	bl	8000528 <balance>

		if(Is_Button_Pressed(1))
 8000b4a:	2001      	movs	r0, #1
 8000b4c:	f7ff fb94 	bl	8000278 <Is_Button_Pressed>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	f000 80ac 	beq.w	8000cb0 <normalState+0x5f4>
		{
			status = ManAmber;
 8000b58:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <normalState+0x4c4>)
 8000b5a:	220b      	movs	r2, #11
 8000b5c:	601a      	str	r2, [r3, #0]

			time1 = timeYellow;
 8000b5e:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <normalState+0x4c8>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a09      	ldr	r2, [pc, #36]	; (8000b88 <normalState+0x4cc>)
 8000b64:	6013      	str	r3, [r2, #0]
			time2 = 3;
 8000b66:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <normalState+0x4d0>)
 8000b68:	2203      	movs	r2, #3
 8000b6a:	601a      	str	r2, [r3, #0]

			clearAllLed1();
 8000b6c:	f7ff fbc2 	bl	80002f4 <clearAllLed1>
			clearAllLed2();
 8000b70:	f7ff fbd4 	bl	800031c <clearAllLed2>

			setTimer(2, 25);
 8000b74:	2119      	movs	r1, #25
 8000b76:	2002      	movs	r0, #2
 8000b78:	f000 fba2 	bl	80012c0 <setTimer>
		}

		break;
 8000b7c:	e098      	b.n	8000cb0 <normalState+0x5f4>
 8000b7e:	bf00      	nop
 8000b80:	200000ec 	.word	0x200000ec
 8000b84:	20000028 	.word	0x20000028
 8000b88:	20000108 	.word	0x20000108
 8000b8c:	200000f0 	.word	0x200000f0
 8000b90:	200000f4 	.word	0x200000f4
 8000b94:	20000024 	.word	0x20000024
 8000b98:	20000030 	.word	0x20000030
 8000b9c:	2000002c 	.word	0x2000002c

	case ManAmber:
		if(isTimerUp(2) == 1)
 8000ba0:	2002      	movs	r0, #2
 8000ba2:	f000 fb79 	bl	8001298 <isTimerUp>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d105      	bne.n	8000bb8 <normalState+0x4fc>
		{
			setTimer(2, 25);
 8000bac:	2119      	movs	r1, #25
 8000bae:	2002      	movs	r0, #2
 8000bb0:	f000 fb86 	bl	80012c0 <setTimer>
			toggleYellow();
 8000bb4:	f7ff fc40 	bl	8000438 <toggleYellow>
		}

		if(Is_Button_Pressed(2))
 8000bb8:	2002      	movs	r0, #2
 8000bba:	f7ff fb5d 	bl	8000278 <Is_Button_Pressed>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <normalState+0x50c>
			increase();
 8000bc4:	f7ff fc9c 	bl	8000500 <increase>

		if(Is_Button_Pressed(3))
 8000bc8:	2003      	movs	r0, #3
 8000bca:	f7ff fb55 	bl	8000278 <Is_Button_Pressed>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d008      	beq.n	8000be6 <normalState+0x52a>
			balance(timeRed, time1, timeGreen);
 8000bd4:	4b3a      	ldr	r3, [pc, #232]	; (8000cc0 <normalState+0x604>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a3a      	ldr	r2, [pc, #232]	; (8000cc4 <normalState+0x608>)
 8000bda:	6811      	ldr	r1, [r2, #0]
 8000bdc:	4a3a      	ldr	r2, [pc, #232]	; (8000cc8 <normalState+0x60c>)
 8000bde:	6812      	ldr	r2, [r2, #0]
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff fca1 	bl	8000528 <balance>

		if(Is_Button_Pressed(1))
 8000be6:	2001      	movs	r0, #1
 8000be8:	f7ff fb46 	bl	8000278 <Is_Button_Pressed>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d060      	beq.n	8000cb4 <normalState+0x5f8>
		{
			status = ManGreen;
 8000bf2:	4b36      	ldr	r3, [pc, #216]	; (8000ccc <normalState+0x610>)
 8000bf4:	220c      	movs	r2, #12
 8000bf6:	601a      	str	r2, [r3, #0]

			time1 = timeGreen;
 8000bf8:	4b33      	ldr	r3, [pc, #204]	; (8000cc8 <normalState+0x60c>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a31      	ldr	r2, [pc, #196]	; (8000cc4 <normalState+0x608>)
 8000bfe:	6013      	str	r3, [r2, #0]
			time2 = 4;
 8000c00:	4b33      	ldr	r3, [pc, #204]	; (8000cd0 <normalState+0x614>)
 8000c02:	2204      	movs	r2, #4
 8000c04:	601a      	str	r2, [r3, #0]

			clearAllLed1();
 8000c06:	f7ff fb75 	bl	80002f4 <clearAllLed1>
			clearAllLed2();
 8000c0a:	f7ff fb87 	bl	800031c <clearAllLed2>

			setTimer(2, 25);
 8000c0e:	2119      	movs	r1, #25
 8000c10:	2002      	movs	r0, #2
 8000c12:	f000 fb55 	bl	80012c0 <setTimer>
		}

		break;
 8000c16:	e04d      	b.n	8000cb4 <normalState+0x5f8>

	case ManGreen:
		if(isTimerUp(2) == 1)
 8000c18:	2002      	movs	r0, #2
 8000c1a:	f000 fb3d 	bl	8001298 <isTimerUp>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d105      	bne.n	8000c30 <normalState+0x574>
		{
			setTimer(2, 25);
 8000c24:	2119      	movs	r1, #25
 8000c26:	2002      	movs	r0, #2
 8000c28:	f000 fb4a 	bl	80012c0 <setTimer>
			toggleGreen();
 8000c2c:	f7ff fc1e 	bl	800046c <toggleGreen>
		}

		if(Is_Button_Pressed(2))
 8000c30:	2002      	movs	r0, #2
 8000c32:	f7ff fb21 	bl	8000278 <Is_Button_Pressed>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <normalState+0x584>
			increase();
 8000c3c:	f7ff fc60 	bl	8000500 <increase>

		if(Is_Button_Pressed(3))
 8000c40:	2003      	movs	r0, #3
 8000c42:	f7ff fb19 	bl	8000278 <Is_Button_Pressed>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d008      	beq.n	8000c5e <normalState+0x5a2>
			balance(timeRed, timeYellow, time1);
 8000c4c:	4b1c      	ldr	r3, [pc, #112]	; (8000cc0 <normalState+0x604>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a20      	ldr	r2, [pc, #128]	; (8000cd4 <normalState+0x618>)
 8000c52:	6811      	ldr	r1, [r2, #0]
 8000c54:	4a1b      	ldr	r2, [pc, #108]	; (8000cc4 <normalState+0x608>)
 8000c56:	6812      	ldr	r2, [r2, #0]
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff fc65 	bl	8000528 <balance>

		if(Is_Button_Pressed(1))
 8000c5e:	2001      	movs	r0, #1
 8000c60:	f7ff fb0a 	bl	8000278 <Is_Button_Pressed>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d026      	beq.n	8000cb8 <normalState+0x5fc>
		{
			status = RedGreen;
 8000c6a:	4b18      	ldr	r3, [pc, #96]	; (8000ccc <normalState+0x610>)
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	601a      	str	r2, [r3, #0]

			setTimer(0, timeGreen * 100);
 8000c70:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <normalState+0x60c>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2264      	movs	r2, #100	; 0x64
 8000c76:	fb02 f303 	mul.w	r3, r2, r3
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	2000      	movs	r0, #0
 8000c7e:	f000 fb1f 	bl	80012c0 <setTimer>
			setTimer(1, 100);
 8000c82:	2164      	movs	r1, #100	; 0x64
 8000c84:	2001      	movs	r0, #1
 8000c86:	f000 fb1b 	bl	80012c0 <setTimer>

			time1 = timeRed;
 8000c8a:	4b0d      	ldr	r3, [pc, #52]	; (8000cc0 <normalState+0x604>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a0d      	ldr	r2, [pc, #52]	; (8000cc4 <normalState+0x608>)
 8000c90:	6013      	str	r3, [r2, #0]
			time2 = timeGreen;
 8000c92:	4b0d      	ldr	r3, [pc, #52]	; (8000cc8 <normalState+0x60c>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a0e      	ldr	r2, [pc, #56]	; (8000cd0 <normalState+0x614>)
 8000c98:	6013      	str	r3, [r2, #0]
		}

		break;
 8000c9a:	e00d      	b.n	8000cb8 <normalState+0x5fc>

	default:
		break;
 8000c9c:	bf00      	nop
 8000c9e:	e00c      	b.n	8000cba <normalState+0x5fe>
		break;
 8000ca0:	bf00      	nop
 8000ca2:	e00a      	b.n	8000cba <normalState+0x5fe>
		break;
 8000ca4:	bf00      	nop
 8000ca6:	e008      	b.n	8000cba <normalState+0x5fe>
		break;
 8000ca8:	bf00      	nop
 8000caa:	e006      	b.n	8000cba <normalState+0x5fe>
		break;
 8000cac:	bf00      	nop
 8000cae:	e004      	b.n	8000cba <normalState+0x5fe>
		break;
 8000cb0:	bf00      	nop
 8000cb2:	e002      	b.n	8000cba <normalState+0x5fe>
		break;
 8000cb4:	bf00      	nop
 8000cb6:	e000      	b.n	8000cba <normalState+0x5fe>
		break;
 8000cb8:	bf00      	nop
	}
}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000024 	.word	0x20000024
 8000cc4:	20000108 	.word	0x20000108
 8000cc8:	2000002c 	.word	0x2000002c
 8000ccc:	200000ec 	.word	0x200000ec
 8000cd0:	200000f0 	.word	0x200000f0
 8000cd4:	20000028 	.word	0x20000028

08000cd8 <fsm_pedestrian>:
 */

#include "global.h"

void fsm_pedestrian(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
	switch(pedestrian_flag)
 8000cdc:	4b19      	ldr	r3, [pc, #100]	; (8000d44 <fsm_pedestrian+0x6c>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2b09      	cmp	r3, #9
 8000ce2:	d01f      	beq.n	8000d24 <fsm_pedestrian+0x4c>
 8000ce4:	2b09      	cmp	r3, #9
 8000ce6:	dc2b      	bgt.n	8000d40 <fsm_pedestrian+0x68>
 8000ce8:	2b07      	cmp	r3, #7
 8000cea:	d002      	beq.n	8000cf2 <fsm_pedestrian+0x1a>
 8000cec:	2b08      	cmp	r3, #8
 8000cee:	d008      	beq.n	8000d02 <fsm_pedestrian+0x2a>
			displayPedestrianGreen();

			buzzer();
			break;
	}
}
 8000cf0:	e026      	b.n	8000d40 <fsm_pedestrian+0x68>
			clearPedestrian();
 8000cf2:	f7ff fbc9 	bl	8000488 <clearPedestrian>
			buzzerValue = 0;
 8000cf6:	4b14      	ldr	r3, [pc, #80]	; (8000d48 <fsm_pedestrian+0x70>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
			buzzer();
 8000cfc:	f7ff fade 	bl	80002bc <buzzer>
			break;
 8000d00:	e01e      	b.n	8000d40 <fsm_pedestrian+0x68>
			if(isTimerUp(3) == 1)
 8000d02:	2003      	movs	r0, #3
 8000d04:	f000 fac8 	bl	8001298 <isTimerUp>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d102      	bne.n	8000d14 <fsm_pedestrian+0x3c>
				pedestrian_flag = Pedestrian_INIT;
 8000d0e:	4b0d      	ldr	r3, [pc, #52]	; (8000d44 <fsm_pedestrian+0x6c>)
 8000d10:	2207      	movs	r2, #7
 8000d12:	601a      	str	r2, [r3, #0]
			displayPedestrianRed();
 8000d14:	f7ff fbcc 	bl	80004b0 <displayPedestrianRed>
			buzzerValue = 0;
 8000d18:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <fsm_pedestrian+0x70>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
			buzzer();
 8000d1e:	f7ff facd 	bl	80002bc <buzzer>
			break;
 8000d22:	e00d      	b.n	8000d40 <fsm_pedestrian+0x68>
			if(isTimerUp(3) == 1)
 8000d24:	2003      	movs	r0, #3
 8000d26:	f000 fab7 	bl	8001298 <isTimerUp>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d102      	bne.n	8000d36 <fsm_pedestrian+0x5e>
				pedestrian_flag = Pedestrian_INIT;
 8000d30:	4b04      	ldr	r3, [pc, #16]	; (8000d44 <fsm_pedestrian+0x6c>)
 8000d32:	2207      	movs	r2, #7
 8000d34:	601a      	str	r2, [r3, #0]
			displayPedestrianGreen();
 8000d36:	f7ff fbcf 	bl	80004d8 <displayPedestrianGreen>
			buzzer();
 8000d3a:	f7ff fabf 	bl	80002bc <buzzer>
			break;
 8000d3e:	bf00      	nop
}
 8000d40:	bf00      	nop
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	20000030 	.word	0x20000030
 8000d48:	200000f4 	.word	0x200000f4

08000d4c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
	//timerRun();
	SCH_Update();
 8000d54:	f000 fa58 	bl	8001208 <SCH_Update>
	Button_Reading();
 8000d58:	f7ff f9f8 	bl	800014c <Button_Reading>
}
 8000d5c:	bf00      	nop
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d68:	f000 fc34 	bl	80015d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d6c:	f000 f82a 	bl	8000dc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d70:	f000 f92c 	bl	8000fcc <MX_GPIO_Init>
  MX_TIM3_Init();
 8000d74:	f000 f8b4 	bl	8000ee0 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000d78:	f000 f866 	bl	8000e48 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

 HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	480c      	ldr	r0, [pc, #48]	; (8000db0 <main+0x4c>)
 8000d80:	f001 fc56 	bl	8002630 <HAL_TIM_PWM_Start>
 HAL_TIM_Base_Start_IT(&htim2);
 8000d84:	480b      	ldr	r0, [pc, #44]	; (8000db4 <main+0x50>)
 8000d86:	f001 fba9 	bl	80024dc <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

 SCH_Add_Task(timerRun, 0, 1);
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	480a      	ldr	r0, [pc, #40]	; (8000db8 <main+0x54>)
 8000d90:	f000 fa1c 	bl	80011cc <SCH_Add_Task>
 SCH_Add_Task(normalState, 1, 1);
 8000d94:	2201      	movs	r2, #1
 8000d96:	2101      	movs	r1, #1
 8000d98:	4808      	ldr	r0, [pc, #32]	; (8000dbc <main+0x58>)
 8000d9a:	f000 fa17 	bl	80011cc <SCH_Add_Task>
 SCH_Add_Task(fsm_pedestrian, 1, 1);
 8000d9e:	2201      	movs	r2, #1
 8000da0:	2101      	movs	r1, #1
 8000da2:	4807      	ldr	r0, [pc, #28]	; (8000dc0 <main+0x5c>)
 8000da4:	f000 fa12 	bl	80011cc <SCH_Add_Task>

  while (1)
  {
    /* USER CODE END WHILE */
	  SCH_Dispatch_Tasks();
 8000da8:	f000 fa4a 	bl	8001240 <SCH_Dispatch_Tasks>
 8000dac:	e7fc      	b.n	8000da8 <main+0x44>
 8000dae:	bf00      	nop
 8000db0:	2000010c 	.word	0x2000010c
 8000db4:	20000154 	.word	0x20000154
 8000db8:	080012f1 	.word	0x080012f1
 8000dbc:	080006bd 	.word	0x080006bd
 8000dc0:	08000cd9 	.word	0x08000cd9

08000dc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b090      	sub	sp, #64	; 0x40
 8000dc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dca:	f107 0318 	add.w	r3, r7, #24
 8000dce:	2228      	movs	r2, #40	; 0x28
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f002 fad2 	bl	800337c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dd8:	1d3b      	adds	r3, r7, #4
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	605a      	str	r2, [r3, #4]
 8000de0:	609a      	str	r2, [r3, #8]
 8000de2:	60da      	str	r2, [r3, #12]
 8000de4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000de6:	2302      	movs	r3, #2
 8000de8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dea:	2301      	movs	r3, #1
 8000dec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dee:	2310      	movs	r3, #16
 8000df0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000df2:	2302      	movs	r3, #2
 8000df4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000df6:	2300      	movs	r3, #0
 8000df8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000dfa:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e00:	f107 0318 	add.w	r3, r7, #24
 8000e04:	4618      	mov	r0, r3
 8000e06:	f000 ff3d 	bl	8001c84 <HAL_RCC_OscConfig>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000e10:	f000 f94a 	bl	80010a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e14:	230f      	movs	r3, #15
 8000e16:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e24:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e2a:	1d3b      	adds	r3, r7, #4
 8000e2c:	2102      	movs	r1, #2
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f001 f9a8 	bl	8002184 <HAL_RCC_ClockConfig>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000e3a:	f000 f935 	bl	80010a8 <Error_Handler>
  }
}
 8000e3e:	bf00      	nop
 8000e40:	3740      	adds	r7, #64	; 0x40
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
	...

08000e48 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e4e:	f107 0308 	add.w	r3, r7, #8
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	605a      	str	r2, [r3, #4]
 8000e58:	609a      	str	r2, [r3, #8]
 8000e5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e5c:	463b      	mov	r3, r7
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e64:	4b1d      	ldr	r3, [pc, #116]	; (8000edc <MX_TIM2_Init+0x94>)
 8000e66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e6a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6399;
 8000e6c:	4b1b      	ldr	r3, [pc, #108]	; (8000edc <MX_TIM2_Init+0x94>)
 8000e6e:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8000e72:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e74:	4b19      	ldr	r3, [pc, #100]	; (8000edc <MX_TIM2_Init+0x94>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000e7a:	4b18      	ldr	r3, [pc, #96]	; (8000edc <MX_TIM2_Init+0x94>)
 8000e7c:	2263      	movs	r2, #99	; 0x63
 8000e7e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e80:	4b16      	ldr	r3, [pc, #88]	; (8000edc <MX_TIM2_Init+0x94>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e86:	4b15      	ldr	r3, [pc, #84]	; (8000edc <MX_TIM2_Init+0x94>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e8c:	4813      	ldr	r0, [pc, #76]	; (8000edc <MX_TIM2_Init+0x94>)
 8000e8e:	f001 fad5 	bl	800243c <HAL_TIM_Base_Init>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000e98:	f000 f906 	bl	80010a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ea0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ea2:	f107 0308 	add.w	r3, r7, #8
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	480c      	ldr	r0, [pc, #48]	; (8000edc <MX_TIM2_Init+0x94>)
 8000eaa:	f001 fe2d 	bl	8002b08 <HAL_TIM_ConfigClockSource>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000eb4:	f000 f8f8 	bl	80010a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ec0:	463b      	mov	r3, r7
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4805      	ldr	r0, [pc, #20]	; (8000edc <MX_TIM2_Init+0x94>)
 8000ec6:	f002 f9af 	bl	8003228 <HAL_TIMEx_MasterConfigSynchronization>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ed0:	f000 f8ea 	bl	80010a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ed4:	bf00      	nop
 8000ed6:	3718      	adds	r7, #24
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20000154 	.word	0x20000154

08000ee0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b08e      	sub	sp, #56	; 0x38
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ee6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	605a      	str	r2, [r3, #4]
 8000ef0:	609a      	str	r2, [r3, #8]
 8000ef2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ef4:	f107 0320 	add.w	r3, r7, #32
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000efe:	1d3b      	adds	r3, r7, #4
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
 8000f0c:	615a      	str	r2, [r3, #20]
 8000f0e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f10:	4b2c      	ldr	r3, [pc, #176]	; (8000fc4 <MX_TIM3_Init+0xe4>)
 8000f12:	4a2d      	ldr	r2, [pc, #180]	; (8000fc8 <MX_TIM3_Init+0xe8>)
 8000f14:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000f16:	4b2b      	ldr	r3, [pc, #172]	; (8000fc4 <MX_TIM3_Init+0xe4>)
 8000f18:	223f      	movs	r2, #63	; 0x3f
 8000f1a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f1c:	4b29      	ldr	r3, [pc, #164]	; (8000fc4 <MX_TIM3_Init+0xe4>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000f22:	4b28      	ldr	r3, [pc, #160]	; (8000fc4 <MX_TIM3_Init+0xe4>)
 8000f24:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f28:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f2a:	4b26      	ldr	r3, [pc, #152]	; (8000fc4 <MX_TIM3_Init+0xe4>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f30:	4b24      	ldr	r3, [pc, #144]	; (8000fc4 <MX_TIM3_Init+0xe4>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f36:	4823      	ldr	r0, [pc, #140]	; (8000fc4 <MX_TIM3_Init+0xe4>)
 8000f38:	f001 fa80 	bl	800243c <HAL_TIM_Base_Init>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000f42:	f000 f8b1 	bl	80010a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f4a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f50:	4619      	mov	r1, r3
 8000f52:	481c      	ldr	r0, [pc, #112]	; (8000fc4 <MX_TIM3_Init+0xe4>)
 8000f54:	f001 fdd8 	bl	8002b08 <HAL_TIM_ConfigClockSource>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000f5e:	f000 f8a3 	bl	80010a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f62:	4818      	ldr	r0, [pc, #96]	; (8000fc4 <MX_TIM3_Init+0xe4>)
 8000f64:	f001 fb0c 	bl	8002580 <HAL_TIM_PWM_Init>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000f6e:	f000 f89b 	bl	80010a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f72:	2300      	movs	r3, #0
 8000f74:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f76:	2300      	movs	r3, #0
 8000f78:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f7a:	f107 0320 	add.w	r3, r7, #32
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4810      	ldr	r0, [pc, #64]	; (8000fc4 <MX_TIM3_Init+0xe4>)
 8000f82:	f002 f951 	bl	8003228 <HAL_TIMEx_MasterConfigSynchronization>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000f8c:	f000 f88c 	bl	80010a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f90:	2360      	movs	r3, #96	; 0x60
 8000f92:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fa0:	1d3b      	adds	r3, r7, #4
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4807      	ldr	r0, [pc, #28]	; (8000fc4 <MX_TIM3_Init+0xe4>)
 8000fa8:	f001 fcec 	bl	8002984 <HAL_TIM_PWM_ConfigChannel>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000fb2:	f000 f879 	bl	80010a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000fb6:	4803      	ldr	r0, [pc, #12]	; (8000fc4 <MX_TIM3_Init+0xe4>)
 8000fb8:	f000 fa3c 	bl	8001434 <HAL_TIM_MspPostInit>

}
 8000fbc:	bf00      	nop
 8000fbe:	3738      	adds	r7, #56	; 0x38
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	2000010c 	.word	0x2000010c
 8000fc8:	40000400 	.word	0x40000400

08000fcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd2:	f107 0308 	add.w	r3, r7, #8
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	605a      	str	r2, [r3, #4]
 8000fdc:	609a      	str	r2, [r3, #8]
 8000fde:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe0:	4b2e      	ldr	r3, [pc, #184]	; (800109c <MX_GPIO_Init+0xd0>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	4a2d      	ldr	r2, [pc, #180]	; (800109c <MX_GPIO_Init+0xd0>)
 8000fe6:	f043 0304 	orr.w	r3, r3, #4
 8000fea:	6193      	str	r3, [r2, #24]
 8000fec:	4b2b      	ldr	r3, [pc, #172]	; (800109c <MX_GPIO_Init+0xd0>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	f003 0304 	and.w	r3, r3, #4
 8000ff4:	607b      	str	r3, [r7, #4]
 8000ff6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff8:	4b28      	ldr	r3, [pc, #160]	; (800109c <MX_GPIO_Init+0xd0>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	4a27      	ldr	r2, [pc, #156]	; (800109c <MX_GPIO_Init+0xd0>)
 8000ffe:	f043 0308 	orr.w	r3, r3, #8
 8001002:	6193      	str	r3, [r2, #24]
 8001004:	4b25      	ldr	r3, [pc, #148]	; (800109c <MX_GPIO_Init+0xd0>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	f003 0308 	and.w	r3, r3, #8
 800100c:	603b      	str	r3, [r7, #0]
 800100e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8001010:	2200      	movs	r2, #0
 8001012:	f44f 6186 	mov.w	r1, #1072	; 0x430
 8001016:	4822      	ldr	r0, [pc, #136]	; (80010a0 <MX_GPIO_Init+0xd4>)
 8001018:	f000 fde7 	bl	8001bea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_Pin|D2_Pin, GPIO_PIN_RESET);
 800101c:	2200      	movs	r2, #0
 800101e:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8001022:	4820      	ldr	r0, [pc, #128]	; (80010a4 <MX_GPIO_Init+0xd8>)
 8001024:	f000 fde1 	bl	8001bea <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin;
 8001028:	2313      	movs	r3, #19
 800102a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800102c:	2300      	movs	r3, #0
 800102e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001034:	f107 0308 	add.w	r3, r7, #8
 8001038:	4619      	mov	r1, r3
 800103a:	481a      	ldr	r0, [pc, #104]	; (80010a4 <MX_GPIO_Init+0xd8>)
 800103c:	f000 fc3a 	bl	80018b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : A3_Pin D3_Pin */
  GPIO_InitStruct.Pin = A3_Pin|D3_Pin;
 8001040:	2309      	movs	r3, #9
 8001042:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001044:	2300      	movs	r3, #0
 8001046:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104c:	f107 0308 	add.w	r3, r7, #8
 8001050:	4619      	mov	r1, r3
 8001052:	4813      	ldr	r0, [pc, #76]	; (80010a0 <MX_GPIO_Init+0xd4>)
 8001054:	f000 fc2e 	bl	80018b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D5_Pin|D4_Pin;
 8001058:	f44f 6386 	mov.w	r3, #1072	; 0x430
 800105c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105e:	2301      	movs	r3, #1
 8001060:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001066:	2302      	movs	r3, #2
 8001068:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800106a:	f107 0308 	add.w	r3, r7, #8
 800106e:	4619      	mov	r1, r3
 8001070:	480b      	ldr	r0, [pc, #44]	; (80010a0 <MX_GPIO_Init+0xd4>)
 8001072:	f000 fc1f 	bl	80018b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D2_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D2_Pin;
 8001076:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800107a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107c:	2301      	movs	r3, #1
 800107e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001084:	2302      	movs	r3, #2
 8001086:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001088:	f107 0308 	add.w	r3, r7, #8
 800108c:	4619      	mov	r1, r3
 800108e:	4805      	ldr	r0, [pc, #20]	; (80010a4 <MX_GPIO_Init+0xd8>)
 8001090:	f000 fc10 	bl	80018b4 <HAL_GPIO_Init>

}
 8001094:	bf00      	nop
 8001096:	3718      	adds	r7, #24
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40021000 	.word	0x40021000
 80010a0:	40010c00 	.word	0x40010c00
 80010a4:	40010800 	.word	0x40010800

080010a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010ac:	b672      	cpsid	i
}
 80010ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010b0:	e7fe      	b.n	80010b0 <Error_Handler+0x8>
	...

080010b4 <AddNode>:
{
	head = NULL;
}

void AddNode(sTask NewTask)
{
 80010b4:	b590      	push	{r4, r7, lr}
 80010b6:	b087      	sub	sp, #28
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	463c      	mov	r4, r7
 80010bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	struct Node* NewNode = (struct Node*)malloc(sizeof(struct Node));
 80010c0:	2014      	movs	r0, #20
 80010c2:	f002 f94b 	bl	800335c <malloc>
 80010c6:	4603      	mov	r3, r0
 80010c8:	613b      	str	r3, [r7, #16]
	NewNode -> data.pTask = NewTask.pTask;
 80010ca:	683a      	ldr	r2, [r7, #0]
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	601a      	str	r2, [r3, #0]
	NewNode -> data.Delay = NewTask.Delay;
 80010d0:	687a      	ldr	r2, [r7, #4]
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	605a      	str	r2, [r3, #4]
	NewNode -> data.Period = NewTask.Period;
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	609a      	str	r2, [r3, #8]
	NewNode -> data.RunMe = NewTask.RunMe;
 80010dc:	7b3a      	ldrb	r2, [r7, #12]
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	731a      	strb	r2, [r3, #12]
	NewNode -> next = NULL;
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	2200      	movs	r2, #0
 80010e6:	611a      	str	r2, [r3, #16]

	// List is empty, just addNode
	if(head == NULL)
 80010e8:	4b2b      	ldr	r3, [pc, #172]	; (8001198 <AddNode+0xe4>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d103      	bne.n	80010f8 <AddNode+0x44>
	{
		head = NewNode;
 80010f0:	4a29      	ldr	r2, [pc, #164]	; (8001198 <AddNode+0xe4>)
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	6013      	str	r3, [r2, #0]
		return;
 80010f6:	e04c      	b.n	8001192 <AddNode+0xde>
	}
	struct Node* temp = head;
 80010f8:	4b27      	ldr	r3, [pc, #156]	; (8001198 <AddNode+0xe4>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	617b      	str	r3, [r7, #20]

	// If the list has A5 B3 C2 Adding D3  ->  D3 A2 B3 C2
	if(NewNode -> data.Delay < temp -> data.Delay )
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	685a      	ldr	r2, [r3, #4]
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	429a      	cmp	r2, r3
 8001108:	d21e      	bcs.n	8001148 <AddNode+0x94>
	{
		temp -> data.Delay -= NewNode -> data.Delay;
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	685a      	ldr	r2, [r3, #4]
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	1ad2      	subs	r2, r2, r3
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	605a      	str	r2, [r3, #4]
		NewNode -> next = temp;
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	697a      	ldr	r2, [r7, #20]
 800111c:	611a      	str	r2, [r3, #16]
		head = NewNode;
 800111e:	4a1e      	ldr	r2, [pc, #120]	; (8001198 <AddNode+0xe4>)
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	6013      	str	r3, [r2, #0]
		return;
 8001124:	e035      	b.n	8001192 <AddNode+0xde>
	}

	// If the list has A5 B3 C2 Adding D9  ->  A5 B3 D1 C1
	while(temp -> next != NULL)
	{
		NewNode -> data.Delay -= temp -> data.Delay;
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	685a      	ldr	r2, [r3, #4]
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	1ad2      	subs	r2, r2, r3
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	605a      	str	r2, [r3, #4]
		if(NewNode -> data.Delay <= temp -> next -> data.Delay)
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	685a      	ldr	r2, [r3, #4]
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	691b      	ldr	r3, [r3, #16]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	429a      	cmp	r2, r3
 8001140:	d907      	bls.n	8001152 <AddNode+0x9e>
			break;

		temp = temp -> next;
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	691b      	ldr	r3, [r3, #16]
 8001146:	617b      	str	r3, [r7, #20]
	while(temp -> next != NULL)
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	691b      	ldr	r3, [r3, #16]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d1ea      	bne.n	8001126 <AddNode+0x72>
 8001150:	e000      	b.n	8001154 <AddNode+0xa0>
			break;
 8001152:	bf00      	nop
	}

	// temp current in B3 and D become D1
	if(temp -> next == NULL)
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	691b      	ldr	r3, [r3, #16]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d10a      	bne.n	8001172 <AddNode+0xbe>
	{
		NewNode -> data.Delay -= temp -> data.Delay;
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	685a      	ldr	r2, [r3, #4]
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	1ad2      	subs	r2, r2, r3
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	605a      	str	r2, [r3, #4]
		temp -> next = NewNode;
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	611a      	str	r2, [r3, #16]
 8001170:	e00f      	b.n	8001192 <AddNode+0xde>
	}
	else
	{
		temp -> next -> data.Delay -= NewNode -> data.Delay; // convert C2 to C1
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	691b      	ldr	r3, [r3, #16]
 8001176:	6859      	ldr	r1, [r3, #4]
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	685a      	ldr	r2, [r3, #4]
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	691b      	ldr	r3, [r3, #16]
 8001180:	1a8a      	subs	r2, r1, r2
 8001182:	605a      	str	r2, [r3, #4]
		NewNode -> next = temp -> next;
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	691a      	ldr	r2, [r3, #16]
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	611a      	str	r2, [r3, #16]
		temp -> next = NewNode;
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	611a      	str	r2, [r3, #16]
	}
}
 8001192:	371c      	adds	r7, #28
 8001194:	46bd      	mov	sp, r7
 8001196:	bd90      	pop	{r4, r7, pc}
 8001198:	200000f8 	.word	0x200000f8

0800119c <DeleteBegin>:

void DeleteBegin()
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
	struct Node* temp = head;
 80011a2:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <DeleteBegin+0x2c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	607b      	str	r3, [r7, #4]
	if(temp == NULL) return;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d008      	beq.n	80011c0 <DeleteBegin+0x24>
	head = head -> next;
 80011ae:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <DeleteBegin+0x2c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	691b      	ldr	r3, [r3, #16]
 80011b4:	4a04      	ldr	r2, [pc, #16]	; (80011c8 <DeleteBegin+0x2c>)
 80011b6:	6013      	str	r3, [r2, #0]
	free(temp);
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f002 f8d7 	bl	800336c <free>
 80011be:	e000      	b.n	80011c2 <DeleteBegin+0x26>
	if(temp == NULL) return;
 80011c0:	bf00      	nop
}
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	200000f8 	.word	0x200000f8

080011cc <SCH_Add_Task>:

void SCH_Add_Task(void (*p_function)(), uint32_t DELAY, uint32_t PERIOD)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b088      	sub	sp, #32
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
	sTask NewTask;
	NewTask.pTask = p_function;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	613b      	str	r3, [r7, #16]
	NewTask.Delay = DELAY;
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	617b      	str	r3, [r7, #20]
	NewTask.Period = PERIOD;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	61bb      	str	r3, [r7, #24]

	if(NewTask.Delay == 0)
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d102      	bne.n	80011f0 <SCH_Add_Task+0x24>
		NewTask.RunMe = 1;
 80011ea:	2301      	movs	r3, #1
 80011ec:	773b      	strb	r3, [r7, #28]
 80011ee:	e001      	b.n	80011f4 <SCH_Add_Task+0x28>
	else
		NewTask.RunMe = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	773b      	strb	r3, [r7, #28]

	AddNode(NewTask);
 80011f4:	f107 0310 	add.w	r3, r7, #16
 80011f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011fa:	f7ff ff5b 	bl	80010b4 <AddNode>
}
 80011fe:	bf00      	nop
 8001200:	3720      	adds	r7, #32
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
	...

08001208 <SCH_Update>:

void SCH_Update(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
	if(head == NULL) return;
 800120c:	4b0b      	ldr	r3, [pc, #44]	; (800123c <SCH_Update+0x34>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d00f      	beq.n	8001234 <SCH_Update+0x2c>

	if(head -> data.Delay <= 0)
 8001214:	4b09      	ldr	r3, [pc, #36]	; (800123c <SCH_Update+0x34>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d104      	bne.n	8001228 <SCH_Update+0x20>
		head -> data.RunMe = 1;
 800121e:	4b07      	ldr	r3, [pc, #28]	; (800123c <SCH_Update+0x34>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2201      	movs	r2, #1
 8001224:	731a      	strb	r2, [r3, #12]
 8001226:	e006      	b.n	8001236 <SCH_Update+0x2e>
	else
		head -> data.Delay--;
 8001228:	4b04      	ldr	r3, [pc, #16]	; (800123c <SCH_Update+0x34>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	685a      	ldr	r2, [r3, #4]
 800122e:	3a01      	subs	r2, #1
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	e000      	b.n	8001236 <SCH_Update+0x2e>
	if(head == NULL) return;
 8001234:	bf00      	nop
}
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr
 800123c:	200000f8 	.word	0x200000f8

08001240 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void)
{
 8001240:	b590      	push	{r4, r7, lr}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
	if(head == NULL) return;
 8001246:	4b13      	ldr	r3, [pc, #76]	; (8001294 <SCH_Dispatch_Tasks+0x54>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d01e      	beq.n	800128c <SCH_Dispatch_Tasks+0x4c>

	if(head -> data.RunMe > 0)
 800124e:	4b11      	ldr	r3, [pc, #68]	; (8001294 <SCH_Dispatch_Tasks+0x54>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	7b1b      	ldrb	r3, [r3, #12]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d014      	beq.n	8001282 <SCH_Dispatch_Tasks+0x42>
	{
		(*head -> data.pTask)();
 8001258:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <SCH_Dispatch_Tasks+0x54>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4798      	blx	r3
		sTask NewTask = head -> data;
 8001260:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <SCH_Dispatch_Tasks+0x54>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	463c      	mov	r4, r7
 8001266:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001268:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		DeleteBegin();
 800126c:	f7ff ff96 	bl	800119c <DeleteBegin>

		if(NewTask.Period != 0)
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d005      	beq.n	8001282 <SCH_Dispatch_Tasks+0x42>
			SCH_Add_Task(NewTask.pTask, NewTask.Period, NewTask.Period);
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	68b9      	ldr	r1, [r7, #8]
 800127a:	68ba      	ldr	r2, [r7, #8]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff ffa5 	bl	80011cc <SCH_Add_Task>
	}
	 HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001282:	2101      	movs	r1, #1
 8001284:	2000      	movs	r0, #0
 8001286:	f000 fce1 	bl	8001c4c <HAL_PWR_EnterSLEEPMode>
 800128a:	e000      	b.n	800128e <SCH_Dispatch_Tasks+0x4e>
	if(head == NULL) return;
 800128c:	bf00      	nop
}
 800128e:	3714      	adds	r7, #20
 8001290:	46bd      	mov	sp, r7
 8001292:	bd90      	pop	{r4, r7, pc}
 8001294:	200000f8 	.word	0x200000f8

08001298 <isTimerUp>:

int timer_counter[TIMER];
int timer_flag[TIMER];

int isTimerUp(int timer)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
	return (timer_flag[timer] == 1);
 80012a0:	4a06      	ldr	r2, [pc, #24]	; (80012bc <isTimerUp+0x24>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	bf0c      	ite	eq
 80012ac:	2301      	moveq	r3, #1
 80012ae:	2300      	movne	r3, #0
 80012b0:	b2db      	uxtb	r3, r3
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr
 80012bc:	200001b0 	.word	0x200001b0

080012c0 <setTimer>:

void setTimer(int timer, int duration)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
	timer_counter[timer] = duration;
 80012ca:	4907      	ldr	r1, [pc, #28]	; (80012e8 <setTimer+0x28>)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	683a      	ldr	r2, [r7, #0]
 80012d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[timer] = 0;
 80012d4:	4a05      	ldr	r2, [pc, #20]	; (80012ec <setTimer+0x2c>)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2100      	movs	r1, #0
 80012da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bc80      	pop	{r7}
 80012e6:	4770      	bx	lr
 80012e8:	2000019c 	.word	0x2000019c
 80012ec:	200001b0 	.word	0x200001b0

080012f0 <timerRun>:
void timerRun(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
	for (int timer = 0; timer < TIMER; timer++)
 80012f6:	2300      	movs	r3, #0
 80012f8:	607b      	str	r3, [r7, #4]
 80012fa:	e01c      	b.n	8001336 <timerRun+0x46>
	{
		if(timer_counter[timer] > 0)
 80012fc:	4a12      	ldr	r2, [pc, #72]	; (8001348 <timerRun+0x58>)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001304:	2b00      	cmp	r3, #0
 8001306:	dd13      	ble.n	8001330 <timerRun+0x40>
		{
			timer_counter[timer]--;
 8001308:	4a0f      	ldr	r2, [pc, #60]	; (8001348 <timerRun+0x58>)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001310:	1e5a      	subs	r2, r3, #1
 8001312:	490d      	ldr	r1, [pc, #52]	; (8001348 <timerRun+0x58>)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[timer] == 0)
 800131a:	4a0b      	ldr	r2, [pc, #44]	; (8001348 <timerRun+0x58>)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d104      	bne.n	8001330 <timerRun+0x40>
				timer_flag[timer] = 1;
 8001326:	4a09      	ldr	r2, [pc, #36]	; (800134c <timerRun+0x5c>)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2101      	movs	r1, #1
 800132c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int timer = 0; timer < TIMER; timer++)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3301      	adds	r3, #1
 8001334:	607b      	str	r3, [r7, #4]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2b04      	cmp	r3, #4
 800133a:	dddf      	ble.n	80012fc <timerRun+0xc>
		}
	}
}
 800133c:	bf00      	nop
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr
 8001348:	2000019c 	.word	0x2000019c
 800134c:	200001b0 	.word	0x200001b0

08001350 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001350:	b480      	push	{r7}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001356:	4b15      	ldr	r3, [pc, #84]	; (80013ac <HAL_MspInit+0x5c>)
 8001358:	699b      	ldr	r3, [r3, #24]
 800135a:	4a14      	ldr	r2, [pc, #80]	; (80013ac <HAL_MspInit+0x5c>)
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	6193      	str	r3, [r2, #24]
 8001362:	4b12      	ldr	r3, [pc, #72]	; (80013ac <HAL_MspInit+0x5c>)
 8001364:	699b      	ldr	r3, [r3, #24]
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	60bb      	str	r3, [r7, #8]
 800136c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800136e:	4b0f      	ldr	r3, [pc, #60]	; (80013ac <HAL_MspInit+0x5c>)
 8001370:	69db      	ldr	r3, [r3, #28]
 8001372:	4a0e      	ldr	r2, [pc, #56]	; (80013ac <HAL_MspInit+0x5c>)
 8001374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001378:	61d3      	str	r3, [r2, #28]
 800137a:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <HAL_MspInit+0x5c>)
 800137c:	69db      	ldr	r3, [r3, #28]
 800137e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001386:	4b0a      	ldr	r3, [pc, #40]	; (80013b0 <HAL_MspInit+0x60>)
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	4a04      	ldr	r2, [pc, #16]	; (80013b0 <HAL_MspInit+0x60>)
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013a2:	bf00      	nop
 80013a4:	3714      	adds	r7, #20
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr
 80013ac:	40021000 	.word	0x40021000
 80013b0:	40010000 	.word	0x40010000

080013b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013c4:	d114      	bne.n	80013f0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013c6:	4b19      	ldr	r3, [pc, #100]	; (800142c <HAL_TIM_Base_MspInit+0x78>)
 80013c8:	69db      	ldr	r3, [r3, #28]
 80013ca:	4a18      	ldr	r2, [pc, #96]	; (800142c <HAL_TIM_Base_MspInit+0x78>)
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	61d3      	str	r3, [r2, #28]
 80013d2:	4b16      	ldr	r3, [pc, #88]	; (800142c <HAL_TIM_Base_MspInit+0x78>)
 80013d4:	69db      	ldr	r3, [r3, #28]
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013de:	2200      	movs	r2, #0
 80013e0:	2100      	movs	r1, #0
 80013e2:	201c      	movs	r0, #28
 80013e4:	f000 fa2f 	bl	8001846 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013e8:	201c      	movs	r0, #28
 80013ea:	f000 fa48 	bl	800187e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80013ee:	e018      	b.n	8001422 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a0e      	ldr	r2, [pc, #56]	; (8001430 <HAL_TIM_Base_MspInit+0x7c>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d113      	bne.n	8001422 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013fa:	4b0c      	ldr	r3, [pc, #48]	; (800142c <HAL_TIM_Base_MspInit+0x78>)
 80013fc:	69db      	ldr	r3, [r3, #28]
 80013fe:	4a0b      	ldr	r2, [pc, #44]	; (800142c <HAL_TIM_Base_MspInit+0x78>)
 8001400:	f043 0302 	orr.w	r3, r3, #2
 8001404:	61d3      	str	r3, [r2, #28]
 8001406:	4b09      	ldr	r3, [pc, #36]	; (800142c <HAL_TIM_Base_MspInit+0x78>)
 8001408:	69db      	ldr	r3, [r3, #28]
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	60bb      	str	r3, [r7, #8]
 8001410:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001412:	2200      	movs	r2, #0
 8001414:	2100      	movs	r1, #0
 8001416:	201d      	movs	r0, #29
 8001418:	f000 fa15 	bl	8001846 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800141c:	201d      	movs	r0, #29
 800141e:	f000 fa2e 	bl	800187e <HAL_NVIC_EnableIRQ>
}
 8001422:	bf00      	nop
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40021000 	.word	0x40021000
 8001430:	40000400 	.word	0x40000400

08001434 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b088      	sub	sp, #32
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143c:	f107 0310 	add.w	r3, r7, #16
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a0f      	ldr	r2, [pc, #60]	; (800148c <HAL_TIM_MspPostInit+0x58>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d117      	bne.n	8001484 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001454:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <HAL_TIM_MspPostInit+0x5c>)
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	4a0d      	ldr	r2, [pc, #52]	; (8001490 <HAL_TIM_MspPostInit+0x5c>)
 800145a:	f043 0304 	orr.w	r3, r3, #4
 800145e:	6193      	str	r3, [r2, #24]
 8001460:	4b0b      	ldr	r3, [pc, #44]	; (8001490 <HAL_TIM_MspPostInit+0x5c>)
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	f003 0304 	and.w	r3, r3, #4
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800146c:	2340      	movs	r3, #64	; 0x40
 800146e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001470:	2302      	movs	r3, #2
 8001472:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001474:	2302      	movs	r3, #2
 8001476:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001478:	f107 0310 	add.w	r3, r7, #16
 800147c:	4619      	mov	r1, r3
 800147e:	4805      	ldr	r0, [pc, #20]	; (8001494 <HAL_TIM_MspPostInit+0x60>)
 8001480:	f000 fa18 	bl	80018b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001484:	bf00      	nop
 8001486:	3720      	adds	r7, #32
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40000400 	.word	0x40000400
 8001490:	40021000 	.word	0x40021000
 8001494:	40010800 	.word	0x40010800

08001498 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800149c:	e7fe      	b.n	800149c <NMI_Handler+0x4>

0800149e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014a2:	e7fe      	b.n	80014a2 <HardFault_Handler+0x4>

080014a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014a8:	e7fe      	b.n	80014a8 <MemManage_Handler+0x4>

080014aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ae:	e7fe      	b.n	80014ae <BusFault_Handler+0x4>

080014b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014b4:	e7fe      	b.n	80014b4 <UsageFault_Handler+0x4>

080014b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	46bd      	mov	sp, r7
 80014be:	bc80      	pop	{r7}
 80014c0:	4770      	bx	lr

080014c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014c2:	b480      	push	{r7}
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bc80      	pop	{r7}
 80014cc:	4770      	bx	lr

080014ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ce:	b480      	push	{r7}
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bc80      	pop	{r7}
 80014d8:	4770      	bx	lr

080014da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014de:	f000 f8bf 	bl	8001660 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
	...

080014e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014ec:	4802      	ldr	r0, [pc, #8]	; (80014f8 <TIM2_IRQHandler+0x10>)
 80014ee:	f001 f941 	bl	8002774 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000154 	.word	0x20000154

080014fc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001500:	4802      	ldr	r0, [pc, #8]	; (800150c <TIM3_IRQHandler+0x10>)
 8001502:	f001 f937 	bl	8002774 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	2000010c 	.word	0x2000010c

08001510 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001518:	4a14      	ldr	r2, [pc, #80]	; (800156c <_sbrk+0x5c>)
 800151a:	4b15      	ldr	r3, [pc, #84]	; (8001570 <_sbrk+0x60>)
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001524:	4b13      	ldr	r3, [pc, #76]	; (8001574 <_sbrk+0x64>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d102      	bne.n	8001532 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800152c:	4b11      	ldr	r3, [pc, #68]	; (8001574 <_sbrk+0x64>)
 800152e:	4a12      	ldr	r2, [pc, #72]	; (8001578 <_sbrk+0x68>)
 8001530:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001532:	4b10      	ldr	r3, [pc, #64]	; (8001574 <_sbrk+0x64>)
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4413      	add	r3, r2
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	429a      	cmp	r2, r3
 800153e:	d207      	bcs.n	8001550 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001540:	f001 fee2 	bl	8003308 <__errno>
 8001544:	4603      	mov	r3, r0
 8001546:	220c      	movs	r2, #12
 8001548:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800154a:	f04f 33ff 	mov.w	r3, #4294967295
 800154e:	e009      	b.n	8001564 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001550:	4b08      	ldr	r3, [pc, #32]	; (8001574 <_sbrk+0x64>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001556:	4b07      	ldr	r3, [pc, #28]	; (8001574 <_sbrk+0x64>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4413      	add	r3, r2
 800155e:	4a05      	ldr	r2, [pc, #20]	; (8001574 <_sbrk+0x64>)
 8001560:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001562:	68fb      	ldr	r3, [r7, #12]
}
 8001564:	4618      	mov	r0, r3
 8001566:	3718      	adds	r7, #24
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20005000 	.word	0x20005000
 8001570:	00000400 	.word	0x00000400
 8001574:	200000fc 	.word	0x200000fc
 8001578:	200001d8 	.word	0x200001d8

0800157c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr

08001588 <Reset_Handler>:
 8001588:	f7ff fff8 	bl	800157c <SystemInit>
 800158c:	480b      	ldr	r0, [pc, #44]	; (80015bc <LoopFillZerobss+0xe>)
 800158e:	490c      	ldr	r1, [pc, #48]	; (80015c0 <LoopFillZerobss+0x12>)
 8001590:	4a0c      	ldr	r2, [pc, #48]	; (80015c4 <LoopFillZerobss+0x16>)
 8001592:	2300      	movs	r3, #0
 8001594:	e002      	b.n	800159c <LoopCopyDataInit>

08001596 <CopyDataInit>:
 8001596:	58d4      	ldr	r4, [r2, r3]
 8001598:	50c4      	str	r4, [r0, r3]
 800159a:	3304      	adds	r3, #4

0800159c <LoopCopyDataInit>:
 800159c:	18c4      	adds	r4, r0, r3
 800159e:	428c      	cmp	r4, r1
 80015a0:	d3f9      	bcc.n	8001596 <CopyDataInit>
 80015a2:	4a09      	ldr	r2, [pc, #36]	; (80015c8 <LoopFillZerobss+0x1a>)
 80015a4:	4c09      	ldr	r4, [pc, #36]	; (80015cc <LoopFillZerobss+0x1e>)
 80015a6:	2300      	movs	r3, #0
 80015a8:	e001      	b.n	80015ae <LoopFillZerobss>

080015aa <FillZerobss>:
 80015aa:	6013      	str	r3, [r2, #0]
 80015ac:	3204      	adds	r2, #4

080015ae <LoopFillZerobss>:
 80015ae:	42a2      	cmp	r2, r4
 80015b0:	d3fb      	bcc.n	80015aa <FillZerobss>
 80015b2:	f001 feaf 	bl	8003314 <__libc_init_array>
 80015b6:	f7ff fbd5 	bl	8000d64 <main>
 80015ba:	4770      	bx	lr
 80015bc:	20000000 	.word	0x20000000
 80015c0:	200000a4 	.word	0x200000a4
 80015c4:	08003558 	.word	0x08003558
 80015c8:	200000a4 	.word	0x200000a4
 80015cc:	200001d8 	.word	0x200001d8

080015d0 <ADC1_2_IRQHandler>:
 80015d0:	e7fe      	b.n	80015d0 <ADC1_2_IRQHandler>
	...

080015d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015d8:	4b08      	ldr	r3, [pc, #32]	; (80015fc <HAL_Init+0x28>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a07      	ldr	r2, [pc, #28]	; (80015fc <HAL_Init+0x28>)
 80015de:	f043 0310 	orr.w	r3, r3, #16
 80015e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015e4:	2003      	movs	r0, #3
 80015e6:	f000 f923 	bl	8001830 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ea:	200f      	movs	r0, #15
 80015ec:	f000 f808 	bl	8001600 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015f0:	f7ff feae 	bl	8001350 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40022000 	.word	0x40022000

08001600 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001608:	4b12      	ldr	r3, [pc, #72]	; (8001654 <HAL_InitTick+0x54>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	4b12      	ldr	r3, [pc, #72]	; (8001658 <HAL_InitTick+0x58>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	4619      	mov	r1, r3
 8001612:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001616:	fbb3 f3f1 	udiv	r3, r3, r1
 800161a:	fbb2 f3f3 	udiv	r3, r2, r3
 800161e:	4618      	mov	r0, r3
 8001620:	f000 f93b 	bl	800189a <HAL_SYSTICK_Config>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e00e      	b.n	800164c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2b0f      	cmp	r3, #15
 8001632:	d80a      	bhi.n	800164a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001634:	2200      	movs	r2, #0
 8001636:	6879      	ldr	r1, [r7, #4]
 8001638:	f04f 30ff 	mov.w	r0, #4294967295
 800163c:	f000 f903 	bl	8001846 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001640:	4a06      	ldr	r2, [pc, #24]	; (800165c <HAL_InitTick+0x5c>)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001646:	2300      	movs	r3, #0
 8001648:	e000      	b.n	800164c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
}
 800164c:	4618      	mov	r0, r3
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20000034 	.word	0x20000034
 8001658:	2000003c 	.word	0x2000003c
 800165c:	20000038 	.word	0x20000038

08001660 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001664:	4b05      	ldr	r3, [pc, #20]	; (800167c <HAL_IncTick+0x1c>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	461a      	mov	r2, r3
 800166a:	4b05      	ldr	r3, [pc, #20]	; (8001680 <HAL_IncTick+0x20>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4413      	add	r3, r2
 8001670:	4a03      	ldr	r2, [pc, #12]	; (8001680 <HAL_IncTick+0x20>)
 8001672:	6013      	str	r3, [r2, #0]
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	bc80      	pop	{r7}
 800167a:	4770      	bx	lr
 800167c:	2000003c 	.word	0x2000003c
 8001680:	200001c4 	.word	0x200001c4

08001684 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  return uwTick;
 8001688:	4b02      	ldr	r3, [pc, #8]	; (8001694 <HAL_GetTick+0x10>)
 800168a:	681b      	ldr	r3, [r3, #0]
}
 800168c:	4618      	mov	r0, r3
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr
 8001694:	200001c4 	.word	0x200001c4

08001698 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016a8:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <__NVIC_SetPriorityGrouping+0x44>)
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ae:	68ba      	ldr	r2, [r7, #8]
 80016b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016b4:	4013      	ands	r3, r2
 80016b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ca:	4a04      	ldr	r2, [pc, #16]	; (80016dc <__NVIC_SetPriorityGrouping+0x44>)
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	60d3      	str	r3, [r2, #12]
}
 80016d0:	bf00      	nop
 80016d2:	3714      	adds	r7, #20
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	e000ed00 	.word	0xe000ed00

080016e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016e4:	4b04      	ldr	r3, [pc, #16]	; (80016f8 <__NVIC_GetPriorityGrouping+0x18>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	0a1b      	lsrs	r3, r3, #8
 80016ea:	f003 0307 	and.w	r3, r3, #7
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bc80      	pop	{r7}
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	e000ed00 	.word	0xe000ed00

080016fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170a:	2b00      	cmp	r3, #0
 800170c:	db0b      	blt.n	8001726 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800170e:	79fb      	ldrb	r3, [r7, #7]
 8001710:	f003 021f 	and.w	r2, r3, #31
 8001714:	4906      	ldr	r1, [pc, #24]	; (8001730 <__NVIC_EnableIRQ+0x34>)
 8001716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171a:	095b      	lsrs	r3, r3, #5
 800171c:	2001      	movs	r0, #1
 800171e:	fa00 f202 	lsl.w	r2, r0, r2
 8001722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr
 8001730:	e000e100 	.word	0xe000e100

08001734 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	6039      	str	r1, [r7, #0]
 800173e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001744:	2b00      	cmp	r3, #0
 8001746:	db0a      	blt.n	800175e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	b2da      	uxtb	r2, r3
 800174c:	490c      	ldr	r1, [pc, #48]	; (8001780 <__NVIC_SetPriority+0x4c>)
 800174e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001752:	0112      	lsls	r2, r2, #4
 8001754:	b2d2      	uxtb	r2, r2
 8001756:	440b      	add	r3, r1
 8001758:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800175c:	e00a      	b.n	8001774 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	b2da      	uxtb	r2, r3
 8001762:	4908      	ldr	r1, [pc, #32]	; (8001784 <__NVIC_SetPriority+0x50>)
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	f003 030f 	and.w	r3, r3, #15
 800176a:	3b04      	subs	r3, #4
 800176c:	0112      	lsls	r2, r2, #4
 800176e:	b2d2      	uxtb	r2, r2
 8001770:	440b      	add	r3, r1
 8001772:	761a      	strb	r2, [r3, #24]
}
 8001774:	bf00      	nop
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	bc80      	pop	{r7}
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	e000e100 	.word	0xe000e100
 8001784:	e000ed00 	.word	0xe000ed00

08001788 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001788:	b480      	push	{r7}
 800178a:	b089      	sub	sp, #36	; 0x24
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	f1c3 0307 	rsb	r3, r3, #7
 80017a2:	2b04      	cmp	r3, #4
 80017a4:	bf28      	it	cs
 80017a6:	2304      	movcs	r3, #4
 80017a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	3304      	adds	r3, #4
 80017ae:	2b06      	cmp	r3, #6
 80017b0:	d902      	bls.n	80017b8 <NVIC_EncodePriority+0x30>
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	3b03      	subs	r3, #3
 80017b6:	e000      	b.n	80017ba <NVIC_EncodePriority+0x32>
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017bc:	f04f 32ff 	mov.w	r2, #4294967295
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	43da      	mvns	r2, r3
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	401a      	ands	r2, r3
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017d0:	f04f 31ff 	mov.w	r1, #4294967295
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	fa01 f303 	lsl.w	r3, r1, r3
 80017da:	43d9      	mvns	r1, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e0:	4313      	orrs	r3, r2
         );
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3724      	adds	r7, #36	; 0x24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bc80      	pop	{r7}
 80017ea:	4770      	bx	lr

080017ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	3b01      	subs	r3, #1
 80017f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017fc:	d301      	bcc.n	8001802 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017fe:	2301      	movs	r3, #1
 8001800:	e00f      	b.n	8001822 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001802:	4a0a      	ldr	r2, [pc, #40]	; (800182c <SysTick_Config+0x40>)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3b01      	subs	r3, #1
 8001808:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800180a:	210f      	movs	r1, #15
 800180c:	f04f 30ff 	mov.w	r0, #4294967295
 8001810:	f7ff ff90 	bl	8001734 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001814:	4b05      	ldr	r3, [pc, #20]	; (800182c <SysTick_Config+0x40>)
 8001816:	2200      	movs	r2, #0
 8001818:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800181a:	4b04      	ldr	r3, [pc, #16]	; (800182c <SysTick_Config+0x40>)
 800181c:	2207      	movs	r2, #7
 800181e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	e000e010 	.word	0xe000e010

08001830 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f7ff ff2d 	bl	8001698 <__NVIC_SetPriorityGrouping>
}
 800183e:	bf00      	nop
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001846:	b580      	push	{r7, lr}
 8001848:	b086      	sub	sp, #24
 800184a:	af00      	add	r7, sp, #0
 800184c:	4603      	mov	r3, r0
 800184e:	60b9      	str	r1, [r7, #8]
 8001850:	607a      	str	r2, [r7, #4]
 8001852:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001854:	2300      	movs	r3, #0
 8001856:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001858:	f7ff ff42 	bl	80016e0 <__NVIC_GetPriorityGrouping>
 800185c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	68b9      	ldr	r1, [r7, #8]
 8001862:	6978      	ldr	r0, [r7, #20]
 8001864:	f7ff ff90 	bl	8001788 <NVIC_EncodePriority>
 8001868:	4602      	mov	r2, r0
 800186a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800186e:	4611      	mov	r1, r2
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff ff5f 	bl	8001734 <__NVIC_SetPriority>
}
 8001876:	bf00      	nop
 8001878:	3718      	adds	r7, #24
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b082      	sub	sp, #8
 8001882:	af00      	add	r7, sp, #0
 8001884:	4603      	mov	r3, r0
 8001886:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff ff35 	bl	80016fc <__NVIC_EnableIRQ>
}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	b082      	sub	sp, #8
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f7ff ffa2 	bl	80017ec <SysTick_Config>
 80018a8:	4603      	mov	r3, r0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
	...

080018b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b08b      	sub	sp, #44	; 0x2c
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018be:	2300      	movs	r3, #0
 80018c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018c2:	2300      	movs	r3, #0
 80018c4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018c6:	e169      	b.n	8001b9c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018c8:	2201      	movs	r2, #1
 80018ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	69fa      	ldr	r2, [r7, #28]
 80018d8:	4013      	ands	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	f040 8158 	bne.w	8001b96 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	4a9a      	ldr	r2, [pc, #616]	; (8001b54 <HAL_GPIO_Init+0x2a0>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d05e      	beq.n	80019ae <HAL_GPIO_Init+0xfa>
 80018f0:	4a98      	ldr	r2, [pc, #608]	; (8001b54 <HAL_GPIO_Init+0x2a0>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d875      	bhi.n	80019e2 <HAL_GPIO_Init+0x12e>
 80018f6:	4a98      	ldr	r2, [pc, #608]	; (8001b58 <HAL_GPIO_Init+0x2a4>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d058      	beq.n	80019ae <HAL_GPIO_Init+0xfa>
 80018fc:	4a96      	ldr	r2, [pc, #600]	; (8001b58 <HAL_GPIO_Init+0x2a4>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d86f      	bhi.n	80019e2 <HAL_GPIO_Init+0x12e>
 8001902:	4a96      	ldr	r2, [pc, #600]	; (8001b5c <HAL_GPIO_Init+0x2a8>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d052      	beq.n	80019ae <HAL_GPIO_Init+0xfa>
 8001908:	4a94      	ldr	r2, [pc, #592]	; (8001b5c <HAL_GPIO_Init+0x2a8>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d869      	bhi.n	80019e2 <HAL_GPIO_Init+0x12e>
 800190e:	4a94      	ldr	r2, [pc, #592]	; (8001b60 <HAL_GPIO_Init+0x2ac>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d04c      	beq.n	80019ae <HAL_GPIO_Init+0xfa>
 8001914:	4a92      	ldr	r2, [pc, #584]	; (8001b60 <HAL_GPIO_Init+0x2ac>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d863      	bhi.n	80019e2 <HAL_GPIO_Init+0x12e>
 800191a:	4a92      	ldr	r2, [pc, #584]	; (8001b64 <HAL_GPIO_Init+0x2b0>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d046      	beq.n	80019ae <HAL_GPIO_Init+0xfa>
 8001920:	4a90      	ldr	r2, [pc, #576]	; (8001b64 <HAL_GPIO_Init+0x2b0>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d85d      	bhi.n	80019e2 <HAL_GPIO_Init+0x12e>
 8001926:	2b12      	cmp	r3, #18
 8001928:	d82a      	bhi.n	8001980 <HAL_GPIO_Init+0xcc>
 800192a:	2b12      	cmp	r3, #18
 800192c:	d859      	bhi.n	80019e2 <HAL_GPIO_Init+0x12e>
 800192e:	a201      	add	r2, pc, #4	; (adr r2, 8001934 <HAL_GPIO_Init+0x80>)
 8001930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001934:	080019af 	.word	0x080019af
 8001938:	08001989 	.word	0x08001989
 800193c:	0800199b 	.word	0x0800199b
 8001940:	080019dd 	.word	0x080019dd
 8001944:	080019e3 	.word	0x080019e3
 8001948:	080019e3 	.word	0x080019e3
 800194c:	080019e3 	.word	0x080019e3
 8001950:	080019e3 	.word	0x080019e3
 8001954:	080019e3 	.word	0x080019e3
 8001958:	080019e3 	.word	0x080019e3
 800195c:	080019e3 	.word	0x080019e3
 8001960:	080019e3 	.word	0x080019e3
 8001964:	080019e3 	.word	0x080019e3
 8001968:	080019e3 	.word	0x080019e3
 800196c:	080019e3 	.word	0x080019e3
 8001970:	080019e3 	.word	0x080019e3
 8001974:	080019e3 	.word	0x080019e3
 8001978:	08001991 	.word	0x08001991
 800197c:	080019a5 	.word	0x080019a5
 8001980:	4a79      	ldr	r2, [pc, #484]	; (8001b68 <HAL_GPIO_Init+0x2b4>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d013      	beq.n	80019ae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001986:	e02c      	b.n	80019e2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	623b      	str	r3, [r7, #32]
          break;
 800198e:	e029      	b.n	80019e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	3304      	adds	r3, #4
 8001996:	623b      	str	r3, [r7, #32]
          break;
 8001998:	e024      	b.n	80019e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	3308      	adds	r3, #8
 80019a0:	623b      	str	r3, [r7, #32]
          break;
 80019a2:	e01f      	b.n	80019e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	330c      	adds	r3, #12
 80019aa:	623b      	str	r3, [r7, #32]
          break;
 80019ac:	e01a      	b.n	80019e4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d102      	bne.n	80019bc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019b6:	2304      	movs	r3, #4
 80019b8:	623b      	str	r3, [r7, #32]
          break;
 80019ba:	e013      	b.n	80019e4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d105      	bne.n	80019d0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019c4:	2308      	movs	r3, #8
 80019c6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	69fa      	ldr	r2, [r7, #28]
 80019cc:	611a      	str	r2, [r3, #16]
          break;
 80019ce:	e009      	b.n	80019e4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019d0:	2308      	movs	r3, #8
 80019d2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	69fa      	ldr	r2, [r7, #28]
 80019d8:	615a      	str	r2, [r3, #20]
          break;
 80019da:	e003      	b.n	80019e4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019dc:	2300      	movs	r3, #0
 80019de:	623b      	str	r3, [r7, #32]
          break;
 80019e0:	e000      	b.n	80019e4 <HAL_GPIO_Init+0x130>
          break;
 80019e2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	2bff      	cmp	r3, #255	; 0xff
 80019e8:	d801      	bhi.n	80019ee <HAL_GPIO_Init+0x13a>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	e001      	b.n	80019f2 <HAL_GPIO_Init+0x13e>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	3304      	adds	r3, #4
 80019f2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	2bff      	cmp	r3, #255	; 0xff
 80019f8:	d802      	bhi.n	8001a00 <HAL_GPIO_Init+0x14c>
 80019fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	e002      	b.n	8001a06 <HAL_GPIO_Init+0x152>
 8001a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a02:	3b08      	subs	r3, #8
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	210f      	movs	r1, #15
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	fa01 f303 	lsl.w	r3, r1, r3
 8001a14:	43db      	mvns	r3, r3
 8001a16:	401a      	ands	r2, r3
 8001a18:	6a39      	ldr	r1, [r7, #32]
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a20:	431a      	orrs	r2, r3
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	f000 80b1 	beq.w	8001b96 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a34:	4b4d      	ldr	r3, [pc, #308]	; (8001b6c <HAL_GPIO_Init+0x2b8>)
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	4a4c      	ldr	r2, [pc, #304]	; (8001b6c <HAL_GPIO_Init+0x2b8>)
 8001a3a:	f043 0301 	orr.w	r3, r3, #1
 8001a3e:	6193      	str	r3, [r2, #24]
 8001a40:	4b4a      	ldr	r3, [pc, #296]	; (8001b6c <HAL_GPIO_Init+0x2b8>)
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	f003 0301 	and.w	r3, r3, #1
 8001a48:	60bb      	str	r3, [r7, #8]
 8001a4a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a4c:	4a48      	ldr	r2, [pc, #288]	; (8001b70 <HAL_GPIO_Init+0x2bc>)
 8001a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a50:	089b      	lsrs	r3, r3, #2
 8001a52:	3302      	adds	r3, #2
 8001a54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a58:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5c:	f003 0303 	and.w	r3, r3, #3
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	220f      	movs	r2, #15
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	68fa      	ldr	r2, [r7, #12]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4a40      	ldr	r2, [pc, #256]	; (8001b74 <HAL_GPIO_Init+0x2c0>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d013      	beq.n	8001aa0 <HAL_GPIO_Init+0x1ec>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	4a3f      	ldr	r2, [pc, #252]	; (8001b78 <HAL_GPIO_Init+0x2c4>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d00d      	beq.n	8001a9c <HAL_GPIO_Init+0x1e8>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4a3e      	ldr	r2, [pc, #248]	; (8001b7c <HAL_GPIO_Init+0x2c8>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d007      	beq.n	8001a98 <HAL_GPIO_Init+0x1e4>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	4a3d      	ldr	r2, [pc, #244]	; (8001b80 <HAL_GPIO_Init+0x2cc>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d101      	bne.n	8001a94 <HAL_GPIO_Init+0x1e0>
 8001a90:	2303      	movs	r3, #3
 8001a92:	e006      	b.n	8001aa2 <HAL_GPIO_Init+0x1ee>
 8001a94:	2304      	movs	r3, #4
 8001a96:	e004      	b.n	8001aa2 <HAL_GPIO_Init+0x1ee>
 8001a98:	2302      	movs	r3, #2
 8001a9a:	e002      	b.n	8001aa2 <HAL_GPIO_Init+0x1ee>
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e000      	b.n	8001aa2 <HAL_GPIO_Init+0x1ee>
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aa4:	f002 0203 	and.w	r2, r2, #3
 8001aa8:	0092      	lsls	r2, r2, #2
 8001aaa:	4093      	lsls	r3, r2
 8001aac:	68fa      	ldr	r2, [r7, #12]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ab2:	492f      	ldr	r1, [pc, #188]	; (8001b70 <HAL_GPIO_Init+0x2bc>)
 8001ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab6:	089b      	lsrs	r3, r3, #2
 8001ab8:	3302      	adds	r3, #2
 8001aba:	68fa      	ldr	r2, [r7, #12]
 8001abc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d006      	beq.n	8001ada <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001acc:	4b2d      	ldr	r3, [pc, #180]	; (8001b84 <HAL_GPIO_Init+0x2d0>)
 8001ace:	689a      	ldr	r2, [r3, #8]
 8001ad0:	492c      	ldr	r1, [pc, #176]	; (8001b84 <HAL_GPIO_Init+0x2d0>)
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	608b      	str	r3, [r1, #8]
 8001ad8:	e006      	b.n	8001ae8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ada:	4b2a      	ldr	r3, [pc, #168]	; (8001b84 <HAL_GPIO_Init+0x2d0>)
 8001adc:	689a      	ldr	r2, [r3, #8]
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	4928      	ldr	r1, [pc, #160]	; (8001b84 <HAL_GPIO_Init+0x2d0>)
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d006      	beq.n	8001b02 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001af4:	4b23      	ldr	r3, [pc, #140]	; (8001b84 <HAL_GPIO_Init+0x2d0>)
 8001af6:	68da      	ldr	r2, [r3, #12]
 8001af8:	4922      	ldr	r1, [pc, #136]	; (8001b84 <HAL_GPIO_Init+0x2d0>)
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	60cb      	str	r3, [r1, #12]
 8001b00:	e006      	b.n	8001b10 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b02:	4b20      	ldr	r3, [pc, #128]	; (8001b84 <HAL_GPIO_Init+0x2d0>)
 8001b04:	68da      	ldr	r2, [r3, #12]
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	491e      	ldr	r1, [pc, #120]	; (8001b84 <HAL_GPIO_Init+0x2d0>)
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d006      	beq.n	8001b2a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b1c:	4b19      	ldr	r3, [pc, #100]	; (8001b84 <HAL_GPIO_Init+0x2d0>)
 8001b1e:	685a      	ldr	r2, [r3, #4]
 8001b20:	4918      	ldr	r1, [pc, #96]	; (8001b84 <HAL_GPIO_Init+0x2d0>)
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	604b      	str	r3, [r1, #4]
 8001b28:	e006      	b.n	8001b38 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b2a:	4b16      	ldr	r3, [pc, #88]	; (8001b84 <HAL_GPIO_Init+0x2d0>)
 8001b2c:	685a      	ldr	r2, [r3, #4]
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	43db      	mvns	r3, r3
 8001b32:	4914      	ldr	r1, [pc, #80]	; (8001b84 <HAL_GPIO_Init+0x2d0>)
 8001b34:	4013      	ands	r3, r2
 8001b36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d021      	beq.n	8001b88 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b44:	4b0f      	ldr	r3, [pc, #60]	; (8001b84 <HAL_GPIO_Init+0x2d0>)
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	490e      	ldr	r1, [pc, #56]	; (8001b84 <HAL_GPIO_Init+0x2d0>)
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	600b      	str	r3, [r1, #0]
 8001b50:	e021      	b.n	8001b96 <HAL_GPIO_Init+0x2e2>
 8001b52:	bf00      	nop
 8001b54:	10320000 	.word	0x10320000
 8001b58:	10310000 	.word	0x10310000
 8001b5c:	10220000 	.word	0x10220000
 8001b60:	10210000 	.word	0x10210000
 8001b64:	10120000 	.word	0x10120000
 8001b68:	10110000 	.word	0x10110000
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	40010000 	.word	0x40010000
 8001b74:	40010800 	.word	0x40010800
 8001b78:	40010c00 	.word	0x40010c00
 8001b7c:	40011000 	.word	0x40011000
 8001b80:	40011400 	.word	0x40011400
 8001b84:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b88:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <HAL_GPIO_Init+0x304>)
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	43db      	mvns	r3, r3
 8001b90:	4909      	ldr	r1, [pc, #36]	; (8001bb8 <HAL_GPIO_Init+0x304>)
 8001b92:	4013      	ands	r3, r2
 8001b94:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b98:	3301      	adds	r3, #1
 8001b9a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f47f ae8e 	bne.w	80018c8 <HAL_GPIO_Init+0x14>
  }
}
 8001bac:	bf00      	nop
 8001bae:	bf00      	nop
 8001bb0:	372c      	adds	r7, #44	; 0x2c
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bc80      	pop	{r7}
 8001bb6:	4770      	bx	lr
 8001bb8:	40010400 	.word	0x40010400

08001bbc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689a      	ldr	r2, [r3, #8]
 8001bcc:	887b      	ldrh	r3, [r7, #2]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d002      	beq.n	8001bda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	73fb      	strb	r3, [r7, #15]
 8001bd8:	e001      	b.n	8001bde <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3714      	adds	r7, #20
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bc80      	pop	{r7}
 8001be8:	4770      	bx	lr

08001bea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b083      	sub	sp, #12
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	807b      	strh	r3, [r7, #2]
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bfa:	787b      	ldrb	r3, [r7, #1]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d003      	beq.n	8001c08 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c00:	887a      	ldrh	r2, [r7, #2]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c06:	e003      	b.n	8001c10 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c08:	887b      	ldrh	r3, [r7, #2]
 8001c0a:	041a      	lsls	r2, r3, #16
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	611a      	str	r2, [r3, #16]
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bc80      	pop	{r7}
 8001c18:	4770      	bx	lr

08001c1a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b085      	sub	sp, #20
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
 8001c22:	460b      	mov	r3, r1
 8001c24:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c2c:	887a      	ldrh	r2, [r7, #2]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	4013      	ands	r3, r2
 8001c32:	041a      	lsls	r2, r3, #16
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	43d9      	mvns	r1, r3
 8001c38:	887b      	ldrh	r3, [r7, #2]
 8001c3a:	400b      	ands	r3, r1
 8001c3c:	431a      	orrs	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	611a      	str	r2, [r3, #16]
}
 8001c42:	bf00      	nop
 8001c44:	3714      	adds	r7, #20
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr

08001c4c <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	460b      	mov	r3, r1
 8001c56:	70fb      	strb	r3, [r7, #3]
  UNUSED(Regulator);

  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001c58:	4b09      	ldr	r3, [pc, #36]	; (8001c80 <HAL_PWR_EnterSLEEPMode+0x34>)
 8001c5a:	691b      	ldr	r3, [r3, #16]
 8001c5c:	4a08      	ldr	r2, [pc, #32]	; (8001c80 <HAL_PWR_EnterSLEEPMode+0x34>)
 8001c5e:	f023 0304 	bic.w	r3, r3, #4
 8001c62:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8001c64:	78fb      	ldrb	r3, [r7, #3]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d101      	bne.n	8001c6e <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001c6a:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8001c6c:	e002      	b.n	8001c74 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 8001c6e:	bf40      	sev
    __WFE();
 8001c70:	bf20      	wfe
    __WFE();
 8001c72:	bf20      	wfe
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bc80      	pop	{r7}
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e26c      	b.n	8002170 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f000 8087 	beq.w	8001db2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ca4:	4b92      	ldr	r3, [pc, #584]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f003 030c 	and.w	r3, r3, #12
 8001cac:	2b04      	cmp	r3, #4
 8001cae:	d00c      	beq.n	8001cca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cb0:	4b8f      	ldr	r3, [pc, #572]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f003 030c 	and.w	r3, r3, #12
 8001cb8:	2b08      	cmp	r3, #8
 8001cba:	d112      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x5e>
 8001cbc:	4b8c      	ldr	r3, [pc, #560]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cc8:	d10b      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cca:	4b89      	ldr	r3, [pc, #548]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d06c      	beq.n	8001db0 <HAL_RCC_OscConfig+0x12c>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d168      	bne.n	8001db0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e246      	b.n	8002170 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cea:	d106      	bne.n	8001cfa <HAL_RCC_OscConfig+0x76>
 8001cec:	4b80      	ldr	r3, [pc, #512]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a7f      	ldr	r2, [pc, #508]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001cf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf6:	6013      	str	r3, [r2, #0]
 8001cf8:	e02e      	b.n	8001d58 <HAL_RCC_OscConfig+0xd4>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d10c      	bne.n	8001d1c <HAL_RCC_OscConfig+0x98>
 8001d02:	4b7b      	ldr	r3, [pc, #492]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a7a      	ldr	r2, [pc, #488]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001d08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d0c:	6013      	str	r3, [r2, #0]
 8001d0e:	4b78      	ldr	r3, [pc, #480]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a77      	ldr	r2, [pc, #476]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001d14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d18:	6013      	str	r3, [r2, #0]
 8001d1a:	e01d      	b.n	8001d58 <HAL_RCC_OscConfig+0xd4>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d24:	d10c      	bne.n	8001d40 <HAL_RCC_OscConfig+0xbc>
 8001d26:	4b72      	ldr	r3, [pc, #456]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a71      	ldr	r2, [pc, #452]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d30:	6013      	str	r3, [r2, #0]
 8001d32:	4b6f      	ldr	r3, [pc, #444]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a6e      	ldr	r2, [pc, #440]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001d38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d3c:	6013      	str	r3, [r2, #0]
 8001d3e:	e00b      	b.n	8001d58 <HAL_RCC_OscConfig+0xd4>
 8001d40:	4b6b      	ldr	r3, [pc, #428]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a6a      	ldr	r2, [pc, #424]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001d46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d4a:	6013      	str	r3, [r2, #0]
 8001d4c:	4b68      	ldr	r3, [pc, #416]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a67      	ldr	r2, [pc, #412]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001d52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d56:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d013      	beq.n	8001d88 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d60:	f7ff fc90 	bl	8001684 <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d68:	f7ff fc8c 	bl	8001684 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b64      	cmp	r3, #100	; 0x64
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e1fa      	b.n	8002170 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d7a:	4b5d      	ldr	r3, [pc, #372]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d0f0      	beq.n	8001d68 <HAL_RCC_OscConfig+0xe4>
 8001d86:	e014      	b.n	8001db2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d88:	f7ff fc7c 	bl	8001684 <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d8e:	e008      	b.n	8001da2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d90:	f7ff fc78 	bl	8001684 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b64      	cmp	r3, #100	; 0x64
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e1e6      	b.n	8002170 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001da2:	4b53      	ldr	r3, [pc, #332]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1f0      	bne.n	8001d90 <HAL_RCC_OscConfig+0x10c>
 8001dae:	e000      	b.n	8001db2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001db0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d063      	beq.n	8001e86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dbe:	4b4c      	ldr	r3, [pc, #304]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f003 030c 	and.w	r3, r3, #12
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d00b      	beq.n	8001de2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001dca:	4b49      	ldr	r3, [pc, #292]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f003 030c 	and.w	r3, r3, #12
 8001dd2:	2b08      	cmp	r3, #8
 8001dd4:	d11c      	bne.n	8001e10 <HAL_RCC_OscConfig+0x18c>
 8001dd6:	4b46      	ldr	r3, [pc, #280]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d116      	bne.n	8001e10 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001de2:	4b43      	ldr	r3, [pc, #268]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d005      	beq.n	8001dfa <HAL_RCC_OscConfig+0x176>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d001      	beq.n	8001dfa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e1ba      	b.n	8002170 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dfa:	4b3d      	ldr	r3, [pc, #244]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	4939      	ldr	r1, [pc, #228]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e0e:	e03a      	b.n	8001e86 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	691b      	ldr	r3, [r3, #16]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d020      	beq.n	8001e5a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e18:	4b36      	ldr	r3, [pc, #216]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1e:	f7ff fc31 	bl	8001684 <HAL_GetTick>
 8001e22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e24:	e008      	b.n	8001e38 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e26:	f7ff fc2d 	bl	8001684 <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d901      	bls.n	8001e38 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e19b      	b.n	8002170 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e38:	4b2d      	ldr	r3, [pc, #180]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d0f0      	beq.n	8001e26 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e44:	4b2a      	ldr	r3, [pc, #168]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	695b      	ldr	r3, [r3, #20]
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	4927      	ldr	r1, [pc, #156]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001e54:	4313      	orrs	r3, r2
 8001e56:	600b      	str	r3, [r1, #0]
 8001e58:	e015      	b.n	8001e86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e5a:	4b26      	ldr	r3, [pc, #152]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e60:	f7ff fc10 	bl	8001684 <HAL_GetTick>
 8001e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e68:	f7ff fc0c 	bl	8001684 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e17a      	b.n	8002170 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e7a:	4b1d      	ldr	r3, [pc, #116]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1f0      	bne.n	8001e68 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0308 	and.w	r3, r3, #8
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d03a      	beq.n	8001f08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d019      	beq.n	8001ece <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e9a:	4b17      	ldr	r3, [pc, #92]	; (8001ef8 <HAL_RCC_OscConfig+0x274>)
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ea0:	f7ff fbf0 	bl	8001684 <HAL_GetTick>
 8001ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ea6:	e008      	b.n	8001eba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ea8:	f7ff fbec 	bl	8001684 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e15a      	b.n	8002170 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eba:	4b0d      	ldr	r3, [pc, #52]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d0f0      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ec6:	2001      	movs	r0, #1
 8001ec8:	f000 fa9a 	bl	8002400 <RCC_Delay>
 8001ecc:	e01c      	b.n	8001f08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ece:	4b0a      	ldr	r3, [pc, #40]	; (8001ef8 <HAL_RCC_OscConfig+0x274>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ed4:	f7ff fbd6 	bl	8001684 <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eda:	e00f      	b.n	8001efc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001edc:	f7ff fbd2 	bl	8001684 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d908      	bls.n	8001efc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e140      	b.n	8002170 <HAL_RCC_OscConfig+0x4ec>
 8001eee:	bf00      	nop
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	42420000 	.word	0x42420000
 8001ef8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001efc:	4b9e      	ldr	r3, [pc, #632]	; (8002178 <HAL_RCC_OscConfig+0x4f4>)
 8001efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d1e9      	bne.n	8001edc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0304 	and.w	r3, r3, #4
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	f000 80a6 	beq.w	8002062 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f16:	2300      	movs	r3, #0
 8001f18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f1a:	4b97      	ldr	r3, [pc, #604]	; (8002178 <HAL_RCC_OscConfig+0x4f4>)
 8001f1c:	69db      	ldr	r3, [r3, #28]
 8001f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d10d      	bne.n	8001f42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f26:	4b94      	ldr	r3, [pc, #592]	; (8002178 <HAL_RCC_OscConfig+0x4f4>)
 8001f28:	69db      	ldr	r3, [r3, #28]
 8001f2a:	4a93      	ldr	r2, [pc, #588]	; (8002178 <HAL_RCC_OscConfig+0x4f4>)
 8001f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f30:	61d3      	str	r3, [r2, #28]
 8001f32:	4b91      	ldr	r3, [pc, #580]	; (8002178 <HAL_RCC_OscConfig+0x4f4>)
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f3a:	60bb      	str	r3, [r7, #8]
 8001f3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f42:	4b8e      	ldr	r3, [pc, #568]	; (800217c <HAL_RCC_OscConfig+0x4f8>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d118      	bne.n	8001f80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f4e:	4b8b      	ldr	r3, [pc, #556]	; (800217c <HAL_RCC_OscConfig+0x4f8>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a8a      	ldr	r2, [pc, #552]	; (800217c <HAL_RCC_OscConfig+0x4f8>)
 8001f54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f5a:	f7ff fb93 	bl	8001684 <HAL_GetTick>
 8001f5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f60:	e008      	b.n	8001f74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f62:	f7ff fb8f 	bl	8001684 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b64      	cmp	r3, #100	; 0x64
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e0fd      	b.n	8002170 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f74:	4b81      	ldr	r3, [pc, #516]	; (800217c <HAL_RCC_OscConfig+0x4f8>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d0f0      	beq.n	8001f62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d106      	bne.n	8001f96 <HAL_RCC_OscConfig+0x312>
 8001f88:	4b7b      	ldr	r3, [pc, #492]	; (8002178 <HAL_RCC_OscConfig+0x4f4>)
 8001f8a:	6a1b      	ldr	r3, [r3, #32]
 8001f8c:	4a7a      	ldr	r2, [pc, #488]	; (8002178 <HAL_RCC_OscConfig+0x4f4>)
 8001f8e:	f043 0301 	orr.w	r3, r3, #1
 8001f92:	6213      	str	r3, [r2, #32]
 8001f94:	e02d      	b.n	8001ff2 <HAL_RCC_OscConfig+0x36e>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d10c      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x334>
 8001f9e:	4b76      	ldr	r3, [pc, #472]	; (8002178 <HAL_RCC_OscConfig+0x4f4>)
 8001fa0:	6a1b      	ldr	r3, [r3, #32]
 8001fa2:	4a75      	ldr	r2, [pc, #468]	; (8002178 <HAL_RCC_OscConfig+0x4f4>)
 8001fa4:	f023 0301 	bic.w	r3, r3, #1
 8001fa8:	6213      	str	r3, [r2, #32]
 8001faa:	4b73      	ldr	r3, [pc, #460]	; (8002178 <HAL_RCC_OscConfig+0x4f4>)
 8001fac:	6a1b      	ldr	r3, [r3, #32]
 8001fae:	4a72      	ldr	r2, [pc, #456]	; (8002178 <HAL_RCC_OscConfig+0x4f4>)
 8001fb0:	f023 0304 	bic.w	r3, r3, #4
 8001fb4:	6213      	str	r3, [r2, #32]
 8001fb6:	e01c      	b.n	8001ff2 <HAL_RCC_OscConfig+0x36e>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	2b05      	cmp	r3, #5
 8001fbe:	d10c      	bne.n	8001fda <HAL_RCC_OscConfig+0x356>
 8001fc0:	4b6d      	ldr	r3, [pc, #436]	; (8002178 <HAL_RCC_OscConfig+0x4f4>)
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
 8001fc4:	4a6c      	ldr	r2, [pc, #432]	; (8002178 <HAL_RCC_OscConfig+0x4f4>)
 8001fc6:	f043 0304 	orr.w	r3, r3, #4
 8001fca:	6213      	str	r3, [r2, #32]
 8001fcc:	4b6a      	ldr	r3, [pc, #424]	; (8002178 <HAL_RCC_OscConfig+0x4f4>)
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	4a69      	ldr	r2, [pc, #420]	; (8002178 <HAL_RCC_OscConfig+0x4f4>)
 8001fd2:	f043 0301 	orr.w	r3, r3, #1
 8001fd6:	6213      	str	r3, [r2, #32]
 8001fd8:	e00b      	b.n	8001ff2 <HAL_RCC_OscConfig+0x36e>
 8001fda:	4b67      	ldr	r3, [pc, #412]	; (8002178 <HAL_RCC_OscConfig+0x4f4>)
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
 8001fde:	4a66      	ldr	r2, [pc, #408]	; (8002178 <HAL_RCC_OscConfig+0x4f4>)
 8001fe0:	f023 0301 	bic.w	r3, r3, #1
 8001fe4:	6213      	str	r3, [r2, #32]
 8001fe6:	4b64      	ldr	r3, [pc, #400]	; (8002178 <HAL_RCC_OscConfig+0x4f4>)
 8001fe8:	6a1b      	ldr	r3, [r3, #32]
 8001fea:	4a63      	ldr	r2, [pc, #396]	; (8002178 <HAL_RCC_OscConfig+0x4f4>)
 8001fec:	f023 0304 	bic.w	r3, r3, #4
 8001ff0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d015      	beq.n	8002026 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ffa:	f7ff fb43 	bl	8001684 <HAL_GetTick>
 8001ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002000:	e00a      	b.n	8002018 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002002:	f7ff fb3f 	bl	8001684 <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002010:	4293      	cmp	r3, r2
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e0ab      	b.n	8002170 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002018:	4b57      	ldr	r3, [pc, #348]	; (8002178 <HAL_RCC_OscConfig+0x4f4>)
 800201a:	6a1b      	ldr	r3, [r3, #32]
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d0ee      	beq.n	8002002 <HAL_RCC_OscConfig+0x37e>
 8002024:	e014      	b.n	8002050 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002026:	f7ff fb2d 	bl	8001684 <HAL_GetTick>
 800202a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800202c:	e00a      	b.n	8002044 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800202e:	f7ff fb29 	bl	8001684 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	f241 3288 	movw	r2, #5000	; 0x1388
 800203c:	4293      	cmp	r3, r2
 800203e:	d901      	bls.n	8002044 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e095      	b.n	8002170 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002044:	4b4c      	ldr	r3, [pc, #304]	; (8002178 <HAL_RCC_OscConfig+0x4f4>)
 8002046:	6a1b      	ldr	r3, [r3, #32]
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d1ee      	bne.n	800202e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002050:	7dfb      	ldrb	r3, [r7, #23]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d105      	bne.n	8002062 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002056:	4b48      	ldr	r3, [pc, #288]	; (8002178 <HAL_RCC_OscConfig+0x4f4>)
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	4a47      	ldr	r2, [pc, #284]	; (8002178 <HAL_RCC_OscConfig+0x4f4>)
 800205c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002060:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	2b00      	cmp	r3, #0
 8002068:	f000 8081 	beq.w	800216e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800206c:	4b42      	ldr	r3, [pc, #264]	; (8002178 <HAL_RCC_OscConfig+0x4f4>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f003 030c 	and.w	r3, r3, #12
 8002074:	2b08      	cmp	r3, #8
 8002076:	d061      	beq.n	800213c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	69db      	ldr	r3, [r3, #28]
 800207c:	2b02      	cmp	r3, #2
 800207e:	d146      	bne.n	800210e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002080:	4b3f      	ldr	r3, [pc, #252]	; (8002180 <HAL_RCC_OscConfig+0x4fc>)
 8002082:	2200      	movs	r2, #0
 8002084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002086:	f7ff fafd 	bl	8001684 <HAL_GetTick>
 800208a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800208c:	e008      	b.n	80020a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800208e:	f7ff faf9 	bl	8001684 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e067      	b.n	8002170 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020a0:	4b35      	ldr	r3, [pc, #212]	; (8002178 <HAL_RCC_OscConfig+0x4f4>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d1f0      	bne.n	800208e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a1b      	ldr	r3, [r3, #32]
 80020b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020b4:	d108      	bne.n	80020c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020b6:	4b30      	ldr	r3, [pc, #192]	; (8002178 <HAL_RCC_OscConfig+0x4f4>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	492d      	ldr	r1, [pc, #180]	; (8002178 <HAL_RCC_OscConfig+0x4f4>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020c8:	4b2b      	ldr	r3, [pc, #172]	; (8002178 <HAL_RCC_OscConfig+0x4f4>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a19      	ldr	r1, [r3, #32]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d8:	430b      	orrs	r3, r1
 80020da:	4927      	ldr	r1, [pc, #156]	; (8002178 <HAL_RCC_OscConfig+0x4f4>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020e0:	4b27      	ldr	r3, [pc, #156]	; (8002180 <HAL_RCC_OscConfig+0x4fc>)
 80020e2:	2201      	movs	r2, #1
 80020e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e6:	f7ff facd 	bl	8001684 <HAL_GetTick>
 80020ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020ec:	e008      	b.n	8002100 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ee:	f7ff fac9 	bl	8001684 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d901      	bls.n	8002100 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e037      	b.n	8002170 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002100:	4b1d      	ldr	r3, [pc, #116]	; (8002178 <HAL_RCC_OscConfig+0x4f4>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d0f0      	beq.n	80020ee <HAL_RCC_OscConfig+0x46a>
 800210c:	e02f      	b.n	800216e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800210e:	4b1c      	ldr	r3, [pc, #112]	; (8002180 <HAL_RCC_OscConfig+0x4fc>)
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002114:	f7ff fab6 	bl	8001684 <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800211c:	f7ff fab2 	bl	8001684 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e020      	b.n	8002170 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800212e:	4b12      	ldr	r3, [pc, #72]	; (8002178 <HAL_RCC_OscConfig+0x4f4>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1f0      	bne.n	800211c <HAL_RCC_OscConfig+0x498>
 800213a:	e018      	b.n	800216e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	69db      	ldr	r3, [r3, #28]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d101      	bne.n	8002148 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e013      	b.n	8002170 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002148:	4b0b      	ldr	r3, [pc, #44]	; (8002178 <HAL_RCC_OscConfig+0x4f4>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a1b      	ldr	r3, [r3, #32]
 8002158:	429a      	cmp	r2, r3
 800215a:	d106      	bne.n	800216a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002166:	429a      	cmp	r2, r3
 8002168:	d001      	beq.n	800216e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e000      	b.n	8002170 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800216e:	2300      	movs	r3, #0
}
 8002170:	4618      	mov	r0, r3
 8002172:	3718      	adds	r7, #24
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40021000 	.word	0x40021000
 800217c:	40007000 	.word	0x40007000
 8002180:	42420060 	.word	0x42420060

08002184 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d101      	bne.n	8002198 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e0d0      	b.n	800233a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002198:	4b6a      	ldr	r3, [pc, #424]	; (8002344 <HAL_RCC_ClockConfig+0x1c0>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0307 	and.w	r3, r3, #7
 80021a0:	683a      	ldr	r2, [r7, #0]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d910      	bls.n	80021c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021a6:	4b67      	ldr	r3, [pc, #412]	; (8002344 <HAL_RCC_ClockConfig+0x1c0>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f023 0207 	bic.w	r2, r3, #7
 80021ae:	4965      	ldr	r1, [pc, #404]	; (8002344 <HAL_RCC_ClockConfig+0x1c0>)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021b6:	4b63      	ldr	r3, [pc, #396]	; (8002344 <HAL_RCC_ClockConfig+0x1c0>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d001      	beq.n	80021c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e0b8      	b.n	800233a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d020      	beq.n	8002216 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0304 	and.w	r3, r3, #4
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d005      	beq.n	80021ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021e0:	4b59      	ldr	r3, [pc, #356]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	4a58      	ldr	r2, [pc, #352]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 80021e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0308 	and.w	r3, r3, #8
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d005      	beq.n	8002204 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021f8:	4b53      	ldr	r3, [pc, #332]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	4a52      	ldr	r2, [pc, #328]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 80021fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002202:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002204:	4b50      	ldr	r3, [pc, #320]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	494d      	ldr	r1, [pc, #308]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 8002212:	4313      	orrs	r3, r2
 8002214:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	2b00      	cmp	r3, #0
 8002220:	d040      	beq.n	80022a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d107      	bne.n	800223a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800222a:	4b47      	ldr	r3, [pc, #284]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d115      	bne.n	8002262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e07f      	b.n	800233a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	2b02      	cmp	r3, #2
 8002240:	d107      	bne.n	8002252 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002242:	4b41      	ldr	r3, [pc, #260]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d109      	bne.n	8002262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e073      	b.n	800233a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002252:	4b3d      	ldr	r3, [pc, #244]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e06b      	b.n	800233a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002262:	4b39      	ldr	r3, [pc, #228]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f023 0203 	bic.w	r2, r3, #3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	4936      	ldr	r1, [pc, #216]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 8002270:	4313      	orrs	r3, r2
 8002272:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002274:	f7ff fa06 	bl	8001684 <HAL_GetTick>
 8002278:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800227a:	e00a      	b.n	8002292 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800227c:	f7ff fa02 	bl	8001684 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	f241 3288 	movw	r2, #5000	; 0x1388
 800228a:	4293      	cmp	r3, r2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e053      	b.n	800233a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002292:	4b2d      	ldr	r3, [pc, #180]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f003 020c 	and.w	r2, r3, #12
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d1eb      	bne.n	800227c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022a4:	4b27      	ldr	r3, [pc, #156]	; (8002344 <HAL_RCC_ClockConfig+0x1c0>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	683a      	ldr	r2, [r7, #0]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d210      	bcs.n	80022d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022b2:	4b24      	ldr	r3, [pc, #144]	; (8002344 <HAL_RCC_ClockConfig+0x1c0>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f023 0207 	bic.w	r2, r3, #7
 80022ba:	4922      	ldr	r1, [pc, #136]	; (8002344 <HAL_RCC_ClockConfig+0x1c0>)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	4313      	orrs	r3, r2
 80022c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022c2:	4b20      	ldr	r3, [pc, #128]	; (8002344 <HAL_RCC_ClockConfig+0x1c0>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d001      	beq.n	80022d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e032      	b.n	800233a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0304 	and.w	r3, r3, #4
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d008      	beq.n	80022f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022e0:	4b19      	ldr	r3, [pc, #100]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	4916      	ldr	r1, [pc, #88]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0308 	and.w	r3, r3, #8
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d009      	beq.n	8002312 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022fe:	4b12      	ldr	r3, [pc, #72]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	490e      	ldr	r1, [pc, #56]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 800230e:	4313      	orrs	r3, r2
 8002310:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002312:	f000 f821 	bl	8002358 <HAL_RCC_GetSysClockFreq>
 8002316:	4602      	mov	r2, r0
 8002318:	4b0b      	ldr	r3, [pc, #44]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	091b      	lsrs	r3, r3, #4
 800231e:	f003 030f 	and.w	r3, r3, #15
 8002322:	490a      	ldr	r1, [pc, #40]	; (800234c <HAL_RCC_ClockConfig+0x1c8>)
 8002324:	5ccb      	ldrb	r3, [r1, r3]
 8002326:	fa22 f303 	lsr.w	r3, r2, r3
 800232a:	4a09      	ldr	r2, [pc, #36]	; (8002350 <HAL_RCC_ClockConfig+0x1cc>)
 800232c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800232e:	4b09      	ldr	r3, [pc, #36]	; (8002354 <HAL_RCC_ClockConfig+0x1d0>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4618      	mov	r0, r3
 8002334:	f7ff f964 	bl	8001600 <HAL_InitTick>

  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40022000 	.word	0x40022000
 8002348:	40021000 	.word	0x40021000
 800234c:	0800352c 	.word	0x0800352c
 8002350:	20000034 	.word	0x20000034
 8002354:	20000038 	.word	0x20000038

08002358 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002358:	b480      	push	{r7}
 800235a:	b087      	sub	sp, #28
 800235c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800235e:	2300      	movs	r3, #0
 8002360:	60fb      	str	r3, [r7, #12]
 8002362:	2300      	movs	r3, #0
 8002364:	60bb      	str	r3, [r7, #8]
 8002366:	2300      	movs	r3, #0
 8002368:	617b      	str	r3, [r7, #20]
 800236a:	2300      	movs	r3, #0
 800236c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800236e:	2300      	movs	r3, #0
 8002370:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002372:	4b1e      	ldr	r3, [pc, #120]	; (80023ec <HAL_RCC_GetSysClockFreq+0x94>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f003 030c 	and.w	r3, r3, #12
 800237e:	2b04      	cmp	r3, #4
 8002380:	d002      	beq.n	8002388 <HAL_RCC_GetSysClockFreq+0x30>
 8002382:	2b08      	cmp	r3, #8
 8002384:	d003      	beq.n	800238e <HAL_RCC_GetSysClockFreq+0x36>
 8002386:	e027      	b.n	80023d8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002388:	4b19      	ldr	r3, [pc, #100]	; (80023f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800238a:	613b      	str	r3, [r7, #16]
      break;
 800238c:	e027      	b.n	80023de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	0c9b      	lsrs	r3, r3, #18
 8002392:	f003 030f 	and.w	r3, r3, #15
 8002396:	4a17      	ldr	r2, [pc, #92]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002398:	5cd3      	ldrb	r3, [r2, r3]
 800239a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d010      	beq.n	80023c8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023a6:	4b11      	ldr	r3, [pc, #68]	; (80023ec <HAL_RCC_GetSysClockFreq+0x94>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	0c5b      	lsrs	r3, r3, #17
 80023ac:	f003 0301 	and.w	r3, r3, #1
 80023b0:	4a11      	ldr	r2, [pc, #68]	; (80023f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80023b2:	5cd3      	ldrb	r3, [r2, r3]
 80023b4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a0d      	ldr	r2, [pc, #52]	; (80023f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80023ba:	fb02 f203 	mul.w	r2, r2, r3
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c4:	617b      	str	r3, [r7, #20]
 80023c6:	e004      	b.n	80023d2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4a0c      	ldr	r2, [pc, #48]	; (80023fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80023cc:	fb02 f303 	mul.w	r3, r2, r3
 80023d0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	613b      	str	r3, [r7, #16]
      break;
 80023d6:	e002      	b.n	80023de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023d8:	4b05      	ldr	r3, [pc, #20]	; (80023f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80023da:	613b      	str	r3, [r7, #16]
      break;
 80023dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023de:	693b      	ldr	r3, [r7, #16]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	371c      	adds	r7, #28
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bc80      	pop	{r7}
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	40021000 	.word	0x40021000
 80023f0:	007a1200 	.word	0x007a1200
 80023f4:	0800353c 	.word	0x0800353c
 80023f8:	0800354c 	.word	0x0800354c
 80023fc:	003d0900 	.word	0x003d0900

08002400 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002400:	b480      	push	{r7}
 8002402:	b085      	sub	sp, #20
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002408:	4b0a      	ldr	r3, [pc, #40]	; (8002434 <RCC_Delay+0x34>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a0a      	ldr	r2, [pc, #40]	; (8002438 <RCC_Delay+0x38>)
 800240e:	fba2 2303 	umull	r2, r3, r2, r3
 8002412:	0a5b      	lsrs	r3, r3, #9
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	fb02 f303 	mul.w	r3, r2, r3
 800241a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800241c:	bf00      	nop
  }
  while (Delay --);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	1e5a      	subs	r2, r3, #1
 8002422:	60fa      	str	r2, [r7, #12]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d1f9      	bne.n	800241c <RCC_Delay+0x1c>
}
 8002428:	bf00      	nop
 800242a:	bf00      	nop
 800242c:	3714      	adds	r7, #20
 800242e:	46bd      	mov	sp, r7
 8002430:	bc80      	pop	{r7}
 8002432:	4770      	bx	lr
 8002434:	20000034 	.word	0x20000034
 8002438:	10624dd3 	.word	0x10624dd3

0800243c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e041      	b.n	80024d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d106      	bne.n	8002468 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f7fe ffa6 	bl	80013b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2202      	movs	r2, #2
 800246c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	3304      	adds	r3, #4
 8002478:	4619      	mov	r1, r3
 800247a:	4610      	mov	r0, r2
 800247c:	f000 fc30 	bl	8002ce0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
	...

080024dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d001      	beq.n	80024f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e03a      	b.n	800256a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2202      	movs	r2, #2
 80024f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68da      	ldr	r2, [r3, #12]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f042 0201 	orr.w	r2, r2, #1
 800250a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a18      	ldr	r2, [pc, #96]	; (8002574 <HAL_TIM_Base_Start_IT+0x98>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d00e      	beq.n	8002534 <HAL_TIM_Base_Start_IT+0x58>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800251e:	d009      	beq.n	8002534 <HAL_TIM_Base_Start_IT+0x58>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a14      	ldr	r2, [pc, #80]	; (8002578 <HAL_TIM_Base_Start_IT+0x9c>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d004      	beq.n	8002534 <HAL_TIM_Base_Start_IT+0x58>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a13      	ldr	r2, [pc, #76]	; (800257c <HAL_TIM_Base_Start_IT+0xa0>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d111      	bne.n	8002558 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f003 0307 	and.w	r3, r3, #7
 800253e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2b06      	cmp	r3, #6
 8002544:	d010      	beq.n	8002568 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f042 0201 	orr.w	r2, r2, #1
 8002554:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002556:	e007      	b.n	8002568 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f042 0201 	orr.w	r2, r2, #1
 8002566:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3714      	adds	r7, #20
 800256e:	46bd      	mov	sp, r7
 8002570:	bc80      	pop	{r7}
 8002572:	4770      	bx	lr
 8002574:	40012c00 	.word	0x40012c00
 8002578:	40000400 	.word	0x40000400
 800257c:	40000800 	.word	0x40000800

08002580 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e041      	b.n	8002616 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b00      	cmp	r3, #0
 800259c:	d106      	bne.n	80025ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 f839 	bl	800261e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2202      	movs	r2, #2
 80025b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3304      	adds	r3, #4
 80025bc:	4619      	mov	r1, r3
 80025be:	4610      	mov	r0, r2
 80025c0:	f000 fb8e 	bl	8002ce0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800261e:	b480      	push	{r7}
 8002620:	b083      	sub	sp, #12
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002626:	bf00      	nop
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	bc80      	pop	{r7}
 800262e:	4770      	bx	lr

08002630 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d109      	bne.n	8002654 <HAL_TIM_PWM_Start+0x24>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002646:	b2db      	uxtb	r3, r3
 8002648:	2b01      	cmp	r3, #1
 800264a:	bf14      	ite	ne
 800264c:	2301      	movne	r3, #1
 800264e:	2300      	moveq	r3, #0
 8002650:	b2db      	uxtb	r3, r3
 8002652:	e022      	b.n	800269a <HAL_TIM_PWM_Start+0x6a>
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	2b04      	cmp	r3, #4
 8002658:	d109      	bne.n	800266e <HAL_TIM_PWM_Start+0x3e>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b01      	cmp	r3, #1
 8002664:	bf14      	ite	ne
 8002666:	2301      	movne	r3, #1
 8002668:	2300      	moveq	r3, #0
 800266a:	b2db      	uxtb	r3, r3
 800266c:	e015      	b.n	800269a <HAL_TIM_PWM_Start+0x6a>
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	2b08      	cmp	r3, #8
 8002672:	d109      	bne.n	8002688 <HAL_TIM_PWM_Start+0x58>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b01      	cmp	r3, #1
 800267e:	bf14      	ite	ne
 8002680:	2301      	movne	r3, #1
 8002682:	2300      	moveq	r3, #0
 8002684:	b2db      	uxtb	r3, r3
 8002686:	e008      	b.n	800269a <HAL_TIM_PWM_Start+0x6a>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800268e:	b2db      	uxtb	r3, r3
 8002690:	2b01      	cmp	r3, #1
 8002692:	bf14      	ite	ne
 8002694:	2301      	movne	r3, #1
 8002696:	2300      	moveq	r3, #0
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e05e      	b.n	8002760 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d104      	bne.n	80026b2 <HAL_TIM_PWM_Start+0x82>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2202      	movs	r2, #2
 80026ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026b0:	e013      	b.n	80026da <HAL_TIM_PWM_Start+0xaa>
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	2b04      	cmp	r3, #4
 80026b6:	d104      	bne.n	80026c2 <HAL_TIM_PWM_Start+0x92>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2202      	movs	r2, #2
 80026bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026c0:	e00b      	b.n	80026da <HAL_TIM_PWM_Start+0xaa>
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	2b08      	cmp	r3, #8
 80026c6:	d104      	bne.n	80026d2 <HAL_TIM_PWM_Start+0xa2>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2202      	movs	r2, #2
 80026cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026d0:	e003      	b.n	80026da <HAL_TIM_PWM_Start+0xaa>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2202      	movs	r2, #2
 80026d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2201      	movs	r2, #1
 80026e0:	6839      	ldr	r1, [r7, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f000 fd7c 	bl	80031e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a1e      	ldr	r2, [pc, #120]	; (8002768 <HAL_TIM_PWM_Start+0x138>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d107      	bne.n	8002702 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002700:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a18      	ldr	r2, [pc, #96]	; (8002768 <HAL_TIM_PWM_Start+0x138>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d00e      	beq.n	800272a <HAL_TIM_PWM_Start+0xfa>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002714:	d009      	beq.n	800272a <HAL_TIM_PWM_Start+0xfa>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a14      	ldr	r2, [pc, #80]	; (800276c <HAL_TIM_PWM_Start+0x13c>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d004      	beq.n	800272a <HAL_TIM_PWM_Start+0xfa>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a12      	ldr	r2, [pc, #72]	; (8002770 <HAL_TIM_PWM_Start+0x140>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d111      	bne.n	800274e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f003 0307 	and.w	r3, r3, #7
 8002734:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2b06      	cmp	r3, #6
 800273a:	d010      	beq.n	800275e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f042 0201 	orr.w	r2, r2, #1
 800274a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800274c:	e007      	b.n	800275e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f042 0201 	orr.w	r2, r2, #1
 800275c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	3710      	adds	r7, #16
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40012c00 	.word	0x40012c00
 800276c:	40000400 	.word	0x40000400
 8002770:	40000800 	.word	0x40000800

08002774 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b02      	cmp	r3, #2
 8002788:	d122      	bne.n	80027d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	f003 0302 	and.w	r3, r3, #2
 8002794:	2b02      	cmp	r3, #2
 8002796:	d11b      	bne.n	80027d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f06f 0202 	mvn.w	r2, #2
 80027a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2201      	movs	r2, #1
 80027a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	f003 0303 	and.w	r3, r3, #3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 fa76 	bl	8002ca8 <HAL_TIM_IC_CaptureCallback>
 80027bc:	e005      	b.n	80027ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 fa69 	bl	8002c96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f000 fa78 	bl	8002cba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	f003 0304 	and.w	r3, r3, #4
 80027da:	2b04      	cmp	r3, #4
 80027dc:	d122      	bne.n	8002824 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	f003 0304 	and.w	r3, r3, #4
 80027e8:	2b04      	cmp	r3, #4
 80027ea:	d11b      	bne.n	8002824 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f06f 0204 	mvn.w	r2, #4
 80027f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2202      	movs	r2, #2
 80027fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 fa4c 	bl	8002ca8 <HAL_TIM_IC_CaptureCallback>
 8002810:	e005      	b.n	800281e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 fa3f 	bl	8002c96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f000 fa4e 	bl	8002cba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	f003 0308 	and.w	r3, r3, #8
 800282e:	2b08      	cmp	r3, #8
 8002830:	d122      	bne.n	8002878 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	f003 0308 	and.w	r3, r3, #8
 800283c:	2b08      	cmp	r3, #8
 800283e:	d11b      	bne.n	8002878 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f06f 0208 	mvn.w	r2, #8
 8002848:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2204      	movs	r2, #4
 800284e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	69db      	ldr	r3, [r3, #28]
 8002856:	f003 0303 	and.w	r3, r3, #3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d003      	beq.n	8002866 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f000 fa22 	bl	8002ca8 <HAL_TIM_IC_CaptureCallback>
 8002864:	e005      	b.n	8002872 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f000 fa15 	bl	8002c96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f000 fa24 	bl	8002cba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	f003 0310 	and.w	r3, r3, #16
 8002882:	2b10      	cmp	r3, #16
 8002884:	d122      	bne.n	80028cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	f003 0310 	and.w	r3, r3, #16
 8002890:	2b10      	cmp	r3, #16
 8002892:	d11b      	bne.n	80028cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f06f 0210 	mvn.w	r2, #16
 800289c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2208      	movs	r2, #8
 80028a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d003      	beq.n	80028ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 f9f8 	bl	8002ca8 <HAL_TIM_IC_CaptureCallback>
 80028b8:	e005      	b.n	80028c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 f9eb 	bl	8002c96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f000 f9fa 	bl	8002cba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d10e      	bne.n	80028f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	f003 0301 	and.w	r3, r3, #1
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d107      	bne.n	80028f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f06f 0201 	mvn.w	r2, #1
 80028f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f7fe fa2a 	bl	8000d4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002902:	2b80      	cmp	r3, #128	; 0x80
 8002904:	d10e      	bne.n	8002924 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002910:	2b80      	cmp	r3, #128	; 0x80
 8002912:	d107      	bne.n	8002924 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800291c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 fce9 	bl	80032f6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800292e:	2b40      	cmp	r3, #64	; 0x40
 8002930:	d10e      	bne.n	8002950 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800293c:	2b40      	cmp	r3, #64	; 0x40
 800293e:	d107      	bne.n	8002950 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002948:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 f9be 	bl	8002ccc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	f003 0320 	and.w	r3, r3, #32
 800295a:	2b20      	cmp	r3, #32
 800295c:	d10e      	bne.n	800297c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	f003 0320 	and.w	r3, r3, #32
 8002968:	2b20      	cmp	r3, #32
 800296a:	d107      	bne.n	800297c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f06f 0220 	mvn.w	r2, #32
 8002974:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 fcb4 	bl	80032e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800297c:	bf00      	nop
 800297e:	3708      	adds	r7, #8
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002990:	2300      	movs	r3, #0
 8002992:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800299a:	2b01      	cmp	r3, #1
 800299c:	d101      	bne.n	80029a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800299e:	2302      	movs	r3, #2
 80029a0:	e0ae      	b.n	8002b00 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2b0c      	cmp	r3, #12
 80029ae:	f200 809f 	bhi.w	8002af0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80029b2:	a201      	add	r2, pc, #4	; (adr r2, 80029b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80029b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029b8:	080029ed 	.word	0x080029ed
 80029bc:	08002af1 	.word	0x08002af1
 80029c0:	08002af1 	.word	0x08002af1
 80029c4:	08002af1 	.word	0x08002af1
 80029c8:	08002a2d 	.word	0x08002a2d
 80029cc:	08002af1 	.word	0x08002af1
 80029d0:	08002af1 	.word	0x08002af1
 80029d4:	08002af1 	.word	0x08002af1
 80029d8:	08002a6f 	.word	0x08002a6f
 80029dc:	08002af1 	.word	0x08002af1
 80029e0:	08002af1 	.word	0x08002af1
 80029e4:	08002af1 	.word	0x08002af1
 80029e8:	08002aaf 	.word	0x08002aaf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68b9      	ldr	r1, [r7, #8]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f000 f9d6 	bl	8002da4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	699a      	ldr	r2, [r3, #24]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f042 0208 	orr.w	r2, r2, #8
 8002a06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	699a      	ldr	r2, [r3, #24]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f022 0204 	bic.w	r2, r2, #4
 8002a16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6999      	ldr	r1, [r3, #24]
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	691a      	ldr	r2, [r3, #16]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	430a      	orrs	r2, r1
 8002a28:	619a      	str	r2, [r3, #24]
      break;
 8002a2a:	e064      	b.n	8002af6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68b9      	ldr	r1, [r7, #8]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f000 fa1c 	bl	8002e70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	699a      	ldr	r2, [r3, #24]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	699a      	ldr	r2, [r3, #24]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6999      	ldr	r1, [r3, #24]
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	021a      	lsls	r2, r3, #8
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	619a      	str	r2, [r3, #24]
      break;
 8002a6c:	e043      	b.n	8002af6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68b9      	ldr	r1, [r7, #8]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f000 fa65 	bl	8002f44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	69da      	ldr	r2, [r3, #28]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f042 0208 	orr.w	r2, r2, #8
 8002a88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	69da      	ldr	r2, [r3, #28]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f022 0204 	bic.w	r2, r2, #4
 8002a98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	69d9      	ldr	r1, [r3, #28]
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	691a      	ldr	r2, [r3, #16]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	61da      	str	r2, [r3, #28]
      break;
 8002aac:	e023      	b.n	8002af6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68b9      	ldr	r1, [r7, #8]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f000 faaf 	bl	8003018 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	69da      	ldr	r2, [r3, #28]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ac8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	69da      	ldr	r2, [r3, #28]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ad8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	69d9      	ldr	r1, [r3, #28]
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	021a      	lsls	r2, r3, #8
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	430a      	orrs	r2, r1
 8002aec:	61da      	str	r2, [r3, #28]
      break;
 8002aee:	e002      	b.n	8002af6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	75fb      	strb	r3, [r7, #23]
      break;
 8002af4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002afe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3718      	adds	r7, #24
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b12:	2300      	movs	r3, #0
 8002b14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d101      	bne.n	8002b24 <HAL_TIM_ConfigClockSource+0x1c>
 8002b20:	2302      	movs	r3, #2
 8002b22:	e0b4      	b.n	8002c8e <HAL_TIM_ConfigClockSource+0x186>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2202      	movs	r2, #2
 8002b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	68ba      	ldr	r2, [r7, #8]
 8002b52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b5c:	d03e      	beq.n	8002bdc <HAL_TIM_ConfigClockSource+0xd4>
 8002b5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b62:	f200 8087 	bhi.w	8002c74 <HAL_TIM_ConfigClockSource+0x16c>
 8002b66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b6a:	f000 8086 	beq.w	8002c7a <HAL_TIM_ConfigClockSource+0x172>
 8002b6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b72:	d87f      	bhi.n	8002c74 <HAL_TIM_ConfigClockSource+0x16c>
 8002b74:	2b70      	cmp	r3, #112	; 0x70
 8002b76:	d01a      	beq.n	8002bae <HAL_TIM_ConfigClockSource+0xa6>
 8002b78:	2b70      	cmp	r3, #112	; 0x70
 8002b7a:	d87b      	bhi.n	8002c74 <HAL_TIM_ConfigClockSource+0x16c>
 8002b7c:	2b60      	cmp	r3, #96	; 0x60
 8002b7e:	d050      	beq.n	8002c22 <HAL_TIM_ConfigClockSource+0x11a>
 8002b80:	2b60      	cmp	r3, #96	; 0x60
 8002b82:	d877      	bhi.n	8002c74 <HAL_TIM_ConfigClockSource+0x16c>
 8002b84:	2b50      	cmp	r3, #80	; 0x50
 8002b86:	d03c      	beq.n	8002c02 <HAL_TIM_ConfigClockSource+0xfa>
 8002b88:	2b50      	cmp	r3, #80	; 0x50
 8002b8a:	d873      	bhi.n	8002c74 <HAL_TIM_ConfigClockSource+0x16c>
 8002b8c:	2b40      	cmp	r3, #64	; 0x40
 8002b8e:	d058      	beq.n	8002c42 <HAL_TIM_ConfigClockSource+0x13a>
 8002b90:	2b40      	cmp	r3, #64	; 0x40
 8002b92:	d86f      	bhi.n	8002c74 <HAL_TIM_ConfigClockSource+0x16c>
 8002b94:	2b30      	cmp	r3, #48	; 0x30
 8002b96:	d064      	beq.n	8002c62 <HAL_TIM_ConfigClockSource+0x15a>
 8002b98:	2b30      	cmp	r3, #48	; 0x30
 8002b9a:	d86b      	bhi.n	8002c74 <HAL_TIM_ConfigClockSource+0x16c>
 8002b9c:	2b20      	cmp	r3, #32
 8002b9e:	d060      	beq.n	8002c62 <HAL_TIM_ConfigClockSource+0x15a>
 8002ba0:	2b20      	cmp	r3, #32
 8002ba2:	d867      	bhi.n	8002c74 <HAL_TIM_ConfigClockSource+0x16c>
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d05c      	beq.n	8002c62 <HAL_TIM_ConfigClockSource+0x15a>
 8002ba8:	2b10      	cmp	r3, #16
 8002baa:	d05a      	beq.n	8002c62 <HAL_TIM_ConfigClockSource+0x15a>
 8002bac:	e062      	b.n	8002c74 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6818      	ldr	r0, [r3, #0]
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	6899      	ldr	r1, [r3, #8]
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685a      	ldr	r2, [r3, #4]
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	f000 faf0 	bl	80031a2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002bd0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68ba      	ldr	r2, [r7, #8]
 8002bd8:	609a      	str	r2, [r3, #8]
      break;
 8002bda:	e04f      	b.n	8002c7c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6818      	ldr	r0, [r3, #0]
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	6899      	ldr	r1, [r3, #8]
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685a      	ldr	r2, [r3, #4]
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	f000 fad9 	bl	80031a2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	689a      	ldr	r2, [r3, #8]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bfe:	609a      	str	r2, [r3, #8]
      break;
 8002c00:	e03c      	b.n	8002c7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6818      	ldr	r0, [r3, #0]
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	6859      	ldr	r1, [r3, #4]
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	461a      	mov	r2, r3
 8002c10:	f000 fa50 	bl	80030b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2150      	movs	r1, #80	; 0x50
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f000 faa7 	bl	800316e <TIM_ITRx_SetConfig>
      break;
 8002c20:	e02c      	b.n	8002c7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6818      	ldr	r0, [r3, #0]
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	6859      	ldr	r1, [r3, #4]
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	461a      	mov	r2, r3
 8002c30:	f000 fa6e 	bl	8003110 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2160      	movs	r1, #96	; 0x60
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f000 fa97 	bl	800316e <TIM_ITRx_SetConfig>
      break;
 8002c40:	e01c      	b.n	8002c7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6818      	ldr	r0, [r3, #0]
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	6859      	ldr	r1, [r3, #4]
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	461a      	mov	r2, r3
 8002c50:	f000 fa30 	bl	80030b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2140      	movs	r1, #64	; 0x40
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f000 fa87 	bl	800316e <TIM_ITRx_SetConfig>
      break;
 8002c60:	e00c      	b.n	8002c7c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	4610      	mov	r0, r2
 8002c6e:	f000 fa7e 	bl	800316e <TIM_ITRx_SetConfig>
      break;
 8002c72:	e003      	b.n	8002c7c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	73fb      	strb	r3, [r7, #15]
      break;
 8002c78:	e000      	b.n	8002c7c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002c7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c96:	b480      	push	{r7}
 8002c98:	b083      	sub	sp, #12
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c9e:	bf00      	nop
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bc80      	pop	{r7}
 8002ca6:	4770      	bx	lr

08002ca8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cb0:	bf00      	nop
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bc80      	pop	{r7}
 8002cb8:	4770      	bx	lr

08002cba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b083      	sub	sp, #12
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cc2:	bf00      	nop
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bc80      	pop	{r7}
 8002cca:	4770      	bx	lr

08002ccc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bc80      	pop	{r7}
 8002cdc:	4770      	bx	lr
	...

08002ce0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a29      	ldr	r2, [pc, #164]	; (8002d98 <TIM_Base_SetConfig+0xb8>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d00b      	beq.n	8002d10 <TIM_Base_SetConfig+0x30>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cfe:	d007      	beq.n	8002d10 <TIM_Base_SetConfig+0x30>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a26      	ldr	r2, [pc, #152]	; (8002d9c <TIM_Base_SetConfig+0xbc>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d003      	beq.n	8002d10 <TIM_Base_SetConfig+0x30>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a25      	ldr	r2, [pc, #148]	; (8002da0 <TIM_Base_SetConfig+0xc0>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d108      	bne.n	8002d22 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a1c      	ldr	r2, [pc, #112]	; (8002d98 <TIM_Base_SetConfig+0xb8>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d00b      	beq.n	8002d42 <TIM_Base_SetConfig+0x62>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d30:	d007      	beq.n	8002d42 <TIM_Base_SetConfig+0x62>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a19      	ldr	r2, [pc, #100]	; (8002d9c <TIM_Base_SetConfig+0xbc>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d003      	beq.n	8002d42 <TIM_Base_SetConfig+0x62>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a18      	ldr	r2, [pc, #96]	; (8002da0 <TIM_Base_SetConfig+0xc0>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d108      	bne.n	8002d54 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	689a      	ldr	r2, [r3, #8]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a07      	ldr	r2, [pc, #28]	; (8002d98 <TIM_Base_SetConfig+0xb8>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d103      	bne.n	8002d88 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	691a      	ldr	r2, [r3, #16]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	615a      	str	r2, [r3, #20]
}
 8002d8e:	bf00      	nop
 8002d90:	3714      	adds	r7, #20
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bc80      	pop	{r7}
 8002d96:	4770      	bx	lr
 8002d98:	40012c00 	.word	0x40012c00
 8002d9c:	40000400 	.word	0x40000400
 8002da0:	40000800 	.word	0x40000800

08002da4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b087      	sub	sp, #28
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a1b      	ldr	r3, [r3, #32]
 8002db2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a1b      	ldr	r3, [r3, #32]
 8002db8:	f023 0201 	bic.w	r2, r3, #1
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	699b      	ldr	r3, [r3, #24]
 8002dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f023 0303 	bic.w	r3, r3, #3
 8002dda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	f023 0302 	bic.w	r3, r3, #2
 8002dec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a1c      	ldr	r2, [pc, #112]	; (8002e6c <TIM_OC1_SetConfig+0xc8>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d10c      	bne.n	8002e1a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	f023 0308 	bic.w	r3, r3, #8
 8002e06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	697a      	ldr	r2, [r7, #20]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	f023 0304 	bic.w	r3, r3, #4
 8002e18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a13      	ldr	r2, [pc, #76]	; (8002e6c <TIM_OC1_SetConfig+0xc8>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d111      	bne.n	8002e46 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	693a      	ldr	r2, [r7, #16]
 8002e4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685a      	ldr	r2, [r3, #4]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	697a      	ldr	r2, [r7, #20]
 8002e5e:	621a      	str	r2, [r3, #32]
}
 8002e60:	bf00      	nop
 8002e62:	371c      	adds	r7, #28
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bc80      	pop	{r7}
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	40012c00 	.word	0x40012c00

08002e70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b087      	sub	sp, #28
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a1b      	ldr	r3, [r3, #32]
 8002e7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a1b      	ldr	r3, [r3, #32]
 8002e84:	f023 0210 	bic.w	r2, r3, #16
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ea6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	021b      	lsls	r3, r3, #8
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	f023 0320 	bic.w	r3, r3, #32
 8002eba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	011b      	lsls	r3, r3, #4
 8002ec2:	697a      	ldr	r2, [r7, #20]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a1d      	ldr	r2, [pc, #116]	; (8002f40 <TIM_OC2_SetConfig+0xd0>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d10d      	bne.n	8002eec <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ed6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	011b      	lsls	r3, r3, #4
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002eea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a14      	ldr	r2, [pc, #80]	; (8002f40 <TIM_OC2_SetConfig+0xd0>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d113      	bne.n	8002f1c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002efa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685a      	ldr	r2, [r3, #4]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	621a      	str	r2, [r3, #32]
}
 8002f36:	bf00      	nop
 8002f38:	371c      	adds	r7, #28
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bc80      	pop	{r7}
 8002f3e:	4770      	bx	lr
 8002f40:	40012c00 	.word	0x40012c00

08002f44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b087      	sub	sp, #28
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a1b      	ldr	r3, [r3, #32]
 8002f52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f023 0303 	bic.w	r3, r3, #3
 8002f7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68fa      	ldr	r2, [r7, #12]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	021b      	lsls	r3, r3, #8
 8002f94:	697a      	ldr	r2, [r7, #20]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a1d      	ldr	r2, [pc, #116]	; (8003014 <TIM_OC3_SetConfig+0xd0>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d10d      	bne.n	8002fbe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002fa8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	021b      	lsls	r3, r3, #8
 8002fb0:	697a      	ldr	r2, [r7, #20]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002fbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a14      	ldr	r2, [pc, #80]	; (8003014 <TIM_OC3_SetConfig+0xd0>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d113      	bne.n	8002fee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002fcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002fd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	011b      	lsls	r3, r3, #4
 8002fdc:	693a      	ldr	r2, [r7, #16]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	011b      	lsls	r3, r3, #4
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685a      	ldr	r2, [r3, #4]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	697a      	ldr	r2, [r7, #20]
 8003006:	621a      	str	r2, [r3, #32]
}
 8003008:	bf00      	nop
 800300a:	371c      	adds	r7, #28
 800300c:	46bd      	mov	sp, r7
 800300e:	bc80      	pop	{r7}
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	40012c00 	.word	0x40012c00

08003018 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003018:	b480      	push	{r7}
 800301a:	b087      	sub	sp, #28
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a1b      	ldr	r3, [r3, #32]
 8003026:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a1b      	ldr	r3, [r3, #32]
 800302c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	69db      	ldr	r3, [r3, #28]
 800303e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003046:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800304e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	021b      	lsls	r3, r3, #8
 8003056:	68fa      	ldr	r2, [r7, #12]
 8003058:	4313      	orrs	r3, r2
 800305a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003062:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	031b      	lsls	r3, r3, #12
 800306a:	693a      	ldr	r2, [r7, #16]
 800306c:	4313      	orrs	r3, r2
 800306e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a0f      	ldr	r2, [pc, #60]	; (80030b0 <TIM_OC4_SetConfig+0x98>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d109      	bne.n	800308c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800307e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	695b      	ldr	r3, [r3, #20]
 8003084:	019b      	lsls	r3, r3, #6
 8003086:	697a      	ldr	r2, [r7, #20]
 8003088:	4313      	orrs	r3, r2
 800308a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685a      	ldr	r2, [r3, #4]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	693a      	ldr	r2, [r7, #16]
 80030a4:	621a      	str	r2, [r3, #32]
}
 80030a6:	bf00      	nop
 80030a8:	371c      	adds	r7, #28
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bc80      	pop	{r7}
 80030ae:	4770      	bx	lr
 80030b0:	40012c00 	.word	0x40012c00

080030b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b087      	sub	sp, #28
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6a1b      	ldr	r3, [r3, #32]
 80030c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6a1b      	ldr	r3, [r3, #32]
 80030ca:	f023 0201 	bic.w	r2, r3, #1
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	011b      	lsls	r3, r3, #4
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	f023 030a 	bic.w	r3, r3, #10
 80030f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030f2:	697a      	ldr	r2, [r7, #20]
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	621a      	str	r2, [r3, #32]
}
 8003106:	bf00      	nop
 8003108:	371c      	adds	r7, #28
 800310a:	46bd      	mov	sp, r7
 800310c:	bc80      	pop	{r7}
 800310e:	4770      	bx	lr

08003110 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003110:	b480      	push	{r7}
 8003112:	b087      	sub	sp, #28
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6a1b      	ldr	r3, [r3, #32]
 8003126:	f023 0210 	bic.w	r2, r3, #16
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800313a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	031b      	lsls	r3, r3, #12
 8003140:	693a      	ldr	r2, [r7, #16]
 8003142:	4313      	orrs	r3, r2
 8003144:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800314c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	011b      	lsls	r3, r3, #4
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	4313      	orrs	r3, r2
 8003156:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	697a      	ldr	r2, [r7, #20]
 8003162:	621a      	str	r2, [r3, #32]
}
 8003164:	bf00      	nop
 8003166:	371c      	adds	r7, #28
 8003168:	46bd      	mov	sp, r7
 800316a:	bc80      	pop	{r7}
 800316c:	4770      	bx	lr

0800316e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800316e:	b480      	push	{r7}
 8003170:	b085      	sub	sp, #20
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
 8003176:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003184:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003186:	683a      	ldr	r2, [r7, #0]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	4313      	orrs	r3, r2
 800318c:	f043 0307 	orr.w	r3, r3, #7
 8003190:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	609a      	str	r2, [r3, #8]
}
 8003198:	bf00      	nop
 800319a:	3714      	adds	r7, #20
 800319c:	46bd      	mov	sp, r7
 800319e:	bc80      	pop	{r7}
 80031a0:	4770      	bx	lr

080031a2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031a2:	b480      	push	{r7}
 80031a4:	b087      	sub	sp, #28
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	60f8      	str	r0, [r7, #12]
 80031aa:	60b9      	str	r1, [r7, #8]
 80031ac:	607a      	str	r2, [r7, #4]
 80031ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031bc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	021a      	lsls	r2, r3, #8
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	431a      	orrs	r2, r3
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	609a      	str	r2, [r3, #8]
}
 80031d6:	bf00      	nop
 80031d8:	371c      	adds	r7, #28
 80031da:	46bd      	mov	sp, r7
 80031dc:	bc80      	pop	{r7}
 80031de:	4770      	bx	lr

080031e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b087      	sub	sp, #28
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	f003 031f 	and.w	r3, r3, #31
 80031f2:	2201      	movs	r2, #1
 80031f4:	fa02 f303 	lsl.w	r3, r2, r3
 80031f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6a1a      	ldr	r2, [r3, #32]
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	43db      	mvns	r3, r3
 8003202:	401a      	ands	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6a1a      	ldr	r2, [r3, #32]
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	f003 031f 	and.w	r3, r3, #31
 8003212:	6879      	ldr	r1, [r7, #4]
 8003214:	fa01 f303 	lsl.w	r3, r1, r3
 8003218:	431a      	orrs	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	621a      	str	r2, [r3, #32]
}
 800321e:	bf00      	nop
 8003220:	371c      	adds	r7, #28
 8003222:	46bd      	mov	sp, r7
 8003224:	bc80      	pop	{r7}
 8003226:	4770      	bx	lr

08003228 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003228:	b480      	push	{r7}
 800322a:	b085      	sub	sp, #20
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003238:	2b01      	cmp	r3, #1
 800323a:	d101      	bne.n	8003240 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800323c:	2302      	movs	r3, #2
 800323e:	e046      	b.n	80032ce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2202      	movs	r2, #2
 800324c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003266:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	4313      	orrs	r3, r2
 8003270:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a16      	ldr	r2, [pc, #88]	; (80032d8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d00e      	beq.n	80032a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800328c:	d009      	beq.n	80032a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a12      	ldr	r2, [pc, #72]	; (80032dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d004      	beq.n	80032a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a10      	ldr	r2, [pc, #64]	; (80032e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d10c      	bne.n	80032bc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	68ba      	ldr	r2, [r7, #8]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68ba      	ldr	r2, [r7, #8]
 80032ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3714      	adds	r7, #20
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bc80      	pop	{r7}
 80032d6:	4770      	bx	lr
 80032d8:	40012c00 	.word	0x40012c00
 80032dc:	40000400 	.word	0x40000400
 80032e0:	40000800 	.word	0x40000800

080032e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bc80      	pop	{r7}
 80032f4:	4770      	bx	lr

080032f6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032f6:	b480      	push	{r7}
 80032f8:	b083      	sub	sp, #12
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032fe:	bf00      	nop
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	bc80      	pop	{r7}
 8003306:	4770      	bx	lr

08003308 <__errno>:
 8003308:	4b01      	ldr	r3, [pc, #4]	; (8003310 <__errno+0x8>)
 800330a:	6818      	ldr	r0, [r3, #0]
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	20000040 	.word	0x20000040

08003314 <__libc_init_array>:
 8003314:	b570      	push	{r4, r5, r6, lr}
 8003316:	2600      	movs	r6, #0
 8003318:	4d0c      	ldr	r5, [pc, #48]	; (800334c <__libc_init_array+0x38>)
 800331a:	4c0d      	ldr	r4, [pc, #52]	; (8003350 <__libc_init_array+0x3c>)
 800331c:	1b64      	subs	r4, r4, r5
 800331e:	10a4      	asrs	r4, r4, #2
 8003320:	42a6      	cmp	r6, r4
 8003322:	d109      	bne.n	8003338 <__libc_init_array+0x24>
 8003324:	f000 f8f6 	bl	8003514 <_init>
 8003328:	2600      	movs	r6, #0
 800332a:	4d0a      	ldr	r5, [pc, #40]	; (8003354 <__libc_init_array+0x40>)
 800332c:	4c0a      	ldr	r4, [pc, #40]	; (8003358 <__libc_init_array+0x44>)
 800332e:	1b64      	subs	r4, r4, r5
 8003330:	10a4      	asrs	r4, r4, #2
 8003332:	42a6      	cmp	r6, r4
 8003334:	d105      	bne.n	8003342 <__libc_init_array+0x2e>
 8003336:	bd70      	pop	{r4, r5, r6, pc}
 8003338:	f855 3b04 	ldr.w	r3, [r5], #4
 800333c:	4798      	blx	r3
 800333e:	3601      	adds	r6, #1
 8003340:	e7ee      	b.n	8003320 <__libc_init_array+0xc>
 8003342:	f855 3b04 	ldr.w	r3, [r5], #4
 8003346:	4798      	blx	r3
 8003348:	3601      	adds	r6, #1
 800334a:	e7f2      	b.n	8003332 <__libc_init_array+0x1e>
 800334c:	08003550 	.word	0x08003550
 8003350:	08003550 	.word	0x08003550
 8003354:	08003550 	.word	0x08003550
 8003358:	08003554 	.word	0x08003554

0800335c <malloc>:
 800335c:	4b02      	ldr	r3, [pc, #8]	; (8003368 <malloc+0xc>)
 800335e:	4601      	mov	r1, r0
 8003360:	6818      	ldr	r0, [r3, #0]
 8003362:	f000 b85f 	b.w	8003424 <_malloc_r>
 8003366:	bf00      	nop
 8003368:	20000040 	.word	0x20000040

0800336c <free>:
 800336c:	4b02      	ldr	r3, [pc, #8]	; (8003378 <free+0xc>)
 800336e:	4601      	mov	r1, r0
 8003370:	6818      	ldr	r0, [r3, #0]
 8003372:	f000 b80b 	b.w	800338c <_free_r>
 8003376:	bf00      	nop
 8003378:	20000040 	.word	0x20000040

0800337c <memset>:
 800337c:	4603      	mov	r3, r0
 800337e:	4402      	add	r2, r0
 8003380:	4293      	cmp	r3, r2
 8003382:	d100      	bne.n	8003386 <memset+0xa>
 8003384:	4770      	bx	lr
 8003386:	f803 1b01 	strb.w	r1, [r3], #1
 800338a:	e7f9      	b.n	8003380 <memset+0x4>

0800338c <_free_r>:
 800338c:	b538      	push	{r3, r4, r5, lr}
 800338e:	4605      	mov	r5, r0
 8003390:	2900      	cmp	r1, #0
 8003392:	d043      	beq.n	800341c <_free_r+0x90>
 8003394:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003398:	1f0c      	subs	r4, r1, #4
 800339a:	2b00      	cmp	r3, #0
 800339c:	bfb8      	it	lt
 800339e:	18e4      	addlt	r4, r4, r3
 80033a0:	f000 f8aa 	bl	80034f8 <__malloc_lock>
 80033a4:	4a1e      	ldr	r2, [pc, #120]	; (8003420 <_free_r+0x94>)
 80033a6:	6813      	ldr	r3, [r2, #0]
 80033a8:	4610      	mov	r0, r2
 80033aa:	b933      	cbnz	r3, 80033ba <_free_r+0x2e>
 80033ac:	6063      	str	r3, [r4, #4]
 80033ae:	6014      	str	r4, [r2, #0]
 80033b0:	4628      	mov	r0, r5
 80033b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80033b6:	f000 b8a5 	b.w	8003504 <__malloc_unlock>
 80033ba:	42a3      	cmp	r3, r4
 80033bc:	d90a      	bls.n	80033d4 <_free_r+0x48>
 80033be:	6821      	ldr	r1, [r4, #0]
 80033c0:	1862      	adds	r2, r4, r1
 80033c2:	4293      	cmp	r3, r2
 80033c4:	bf01      	itttt	eq
 80033c6:	681a      	ldreq	r2, [r3, #0]
 80033c8:	685b      	ldreq	r3, [r3, #4]
 80033ca:	1852      	addeq	r2, r2, r1
 80033cc:	6022      	streq	r2, [r4, #0]
 80033ce:	6063      	str	r3, [r4, #4]
 80033d0:	6004      	str	r4, [r0, #0]
 80033d2:	e7ed      	b.n	80033b0 <_free_r+0x24>
 80033d4:	461a      	mov	r2, r3
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	b10b      	cbz	r3, 80033de <_free_r+0x52>
 80033da:	42a3      	cmp	r3, r4
 80033dc:	d9fa      	bls.n	80033d4 <_free_r+0x48>
 80033de:	6811      	ldr	r1, [r2, #0]
 80033e0:	1850      	adds	r0, r2, r1
 80033e2:	42a0      	cmp	r0, r4
 80033e4:	d10b      	bne.n	80033fe <_free_r+0x72>
 80033e6:	6820      	ldr	r0, [r4, #0]
 80033e8:	4401      	add	r1, r0
 80033ea:	1850      	adds	r0, r2, r1
 80033ec:	4283      	cmp	r3, r0
 80033ee:	6011      	str	r1, [r2, #0]
 80033f0:	d1de      	bne.n	80033b0 <_free_r+0x24>
 80033f2:	6818      	ldr	r0, [r3, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	4401      	add	r1, r0
 80033f8:	6011      	str	r1, [r2, #0]
 80033fa:	6053      	str	r3, [r2, #4]
 80033fc:	e7d8      	b.n	80033b0 <_free_r+0x24>
 80033fe:	d902      	bls.n	8003406 <_free_r+0x7a>
 8003400:	230c      	movs	r3, #12
 8003402:	602b      	str	r3, [r5, #0]
 8003404:	e7d4      	b.n	80033b0 <_free_r+0x24>
 8003406:	6820      	ldr	r0, [r4, #0]
 8003408:	1821      	adds	r1, r4, r0
 800340a:	428b      	cmp	r3, r1
 800340c:	bf01      	itttt	eq
 800340e:	6819      	ldreq	r1, [r3, #0]
 8003410:	685b      	ldreq	r3, [r3, #4]
 8003412:	1809      	addeq	r1, r1, r0
 8003414:	6021      	streq	r1, [r4, #0]
 8003416:	6063      	str	r3, [r4, #4]
 8003418:	6054      	str	r4, [r2, #4]
 800341a:	e7c9      	b.n	80033b0 <_free_r+0x24>
 800341c:	bd38      	pop	{r3, r4, r5, pc}
 800341e:	bf00      	nop
 8003420:	20000100 	.word	0x20000100

08003424 <_malloc_r>:
 8003424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003426:	1ccd      	adds	r5, r1, #3
 8003428:	f025 0503 	bic.w	r5, r5, #3
 800342c:	3508      	adds	r5, #8
 800342e:	2d0c      	cmp	r5, #12
 8003430:	bf38      	it	cc
 8003432:	250c      	movcc	r5, #12
 8003434:	2d00      	cmp	r5, #0
 8003436:	4606      	mov	r6, r0
 8003438:	db01      	blt.n	800343e <_malloc_r+0x1a>
 800343a:	42a9      	cmp	r1, r5
 800343c:	d903      	bls.n	8003446 <_malloc_r+0x22>
 800343e:	230c      	movs	r3, #12
 8003440:	6033      	str	r3, [r6, #0]
 8003442:	2000      	movs	r0, #0
 8003444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003446:	f000 f857 	bl	80034f8 <__malloc_lock>
 800344a:	4921      	ldr	r1, [pc, #132]	; (80034d0 <_malloc_r+0xac>)
 800344c:	680a      	ldr	r2, [r1, #0]
 800344e:	4614      	mov	r4, r2
 8003450:	b99c      	cbnz	r4, 800347a <_malloc_r+0x56>
 8003452:	4f20      	ldr	r7, [pc, #128]	; (80034d4 <_malloc_r+0xb0>)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	b923      	cbnz	r3, 8003462 <_malloc_r+0x3e>
 8003458:	4621      	mov	r1, r4
 800345a:	4630      	mov	r0, r6
 800345c:	f000 f83c 	bl	80034d8 <_sbrk_r>
 8003460:	6038      	str	r0, [r7, #0]
 8003462:	4629      	mov	r1, r5
 8003464:	4630      	mov	r0, r6
 8003466:	f000 f837 	bl	80034d8 <_sbrk_r>
 800346a:	1c43      	adds	r3, r0, #1
 800346c:	d123      	bne.n	80034b6 <_malloc_r+0x92>
 800346e:	230c      	movs	r3, #12
 8003470:	4630      	mov	r0, r6
 8003472:	6033      	str	r3, [r6, #0]
 8003474:	f000 f846 	bl	8003504 <__malloc_unlock>
 8003478:	e7e3      	b.n	8003442 <_malloc_r+0x1e>
 800347a:	6823      	ldr	r3, [r4, #0]
 800347c:	1b5b      	subs	r3, r3, r5
 800347e:	d417      	bmi.n	80034b0 <_malloc_r+0x8c>
 8003480:	2b0b      	cmp	r3, #11
 8003482:	d903      	bls.n	800348c <_malloc_r+0x68>
 8003484:	6023      	str	r3, [r4, #0]
 8003486:	441c      	add	r4, r3
 8003488:	6025      	str	r5, [r4, #0]
 800348a:	e004      	b.n	8003496 <_malloc_r+0x72>
 800348c:	6863      	ldr	r3, [r4, #4]
 800348e:	42a2      	cmp	r2, r4
 8003490:	bf0c      	ite	eq
 8003492:	600b      	streq	r3, [r1, #0]
 8003494:	6053      	strne	r3, [r2, #4]
 8003496:	4630      	mov	r0, r6
 8003498:	f000 f834 	bl	8003504 <__malloc_unlock>
 800349c:	f104 000b 	add.w	r0, r4, #11
 80034a0:	1d23      	adds	r3, r4, #4
 80034a2:	f020 0007 	bic.w	r0, r0, #7
 80034a6:	1ac2      	subs	r2, r0, r3
 80034a8:	d0cc      	beq.n	8003444 <_malloc_r+0x20>
 80034aa:	1a1b      	subs	r3, r3, r0
 80034ac:	50a3      	str	r3, [r4, r2]
 80034ae:	e7c9      	b.n	8003444 <_malloc_r+0x20>
 80034b0:	4622      	mov	r2, r4
 80034b2:	6864      	ldr	r4, [r4, #4]
 80034b4:	e7cc      	b.n	8003450 <_malloc_r+0x2c>
 80034b6:	1cc4      	adds	r4, r0, #3
 80034b8:	f024 0403 	bic.w	r4, r4, #3
 80034bc:	42a0      	cmp	r0, r4
 80034be:	d0e3      	beq.n	8003488 <_malloc_r+0x64>
 80034c0:	1a21      	subs	r1, r4, r0
 80034c2:	4630      	mov	r0, r6
 80034c4:	f000 f808 	bl	80034d8 <_sbrk_r>
 80034c8:	3001      	adds	r0, #1
 80034ca:	d1dd      	bne.n	8003488 <_malloc_r+0x64>
 80034cc:	e7cf      	b.n	800346e <_malloc_r+0x4a>
 80034ce:	bf00      	nop
 80034d0:	20000100 	.word	0x20000100
 80034d4:	20000104 	.word	0x20000104

080034d8 <_sbrk_r>:
 80034d8:	b538      	push	{r3, r4, r5, lr}
 80034da:	2300      	movs	r3, #0
 80034dc:	4d05      	ldr	r5, [pc, #20]	; (80034f4 <_sbrk_r+0x1c>)
 80034de:	4604      	mov	r4, r0
 80034e0:	4608      	mov	r0, r1
 80034e2:	602b      	str	r3, [r5, #0]
 80034e4:	f7fe f814 	bl	8001510 <_sbrk>
 80034e8:	1c43      	adds	r3, r0, #1
 80034ea:	d102      	bne.n	80034f2 <_sbrk_r+0x1a>
 80034ec:	682b      	ldr	r3, [r5, #0]
 80034ee:	b103      	cbz	r3, 80034f2 <_sbrk_r+0x1a>
 80034f0:	6023      	str	r3, [r4, #0]
 80034f2:	bd38      	pop	{r3, r4, r5, pc}
 80034f4:	200001c8 	.word	0x200001c8

080034f8 <__malloc_lock>:
 80034f8:	4801      	ldr	r0, [pc, #4]	; (8003500 <__malloc_lock+0x8>)
 80034fa:	f000 b809 	b.w	8003510 <__retarget_lock_acquire_recursive>
 80034fe:	bf00      	nop
 8003500:	200001d0 	.word	0x200001d0

08003504 <__malloc_unlock>:
 8003504:	4801      	ldr	r0, [pc, #4]	; (800350c <__malloc_unlock+0x8>)
 8003506:	f000 b804 	b.w	8003512 <__retarget_lock_release_recursive>
 800350a:	bf00      	nop
 800350c:	200001d0 	.word	0x200001d0

08003510 <__retarget_lock_acquire_recursive>:
 8003510:	4770      	bx	lr

08003512 <__retarget_lock_release_recursive>:
 8003512:	4770      	bx	lr

08003514 <_init>:
 8003514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003516:	bf00      	nop
 8003518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800351a:	bc08      	pop	{r3}
 800351c:	469e      	mov	lr, r3
 800351e:	4770      	bx	lr

08003520 <_fini>:
 8003520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003522:	bf00      	nop
 8003524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003526:	bc08      	pop	{r3}
 8003528:	469e      	mov	lr, r3
 800352a:	4770      	bx	lr


Assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c48  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08004d54  08004d54  00014d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004dd8  08004dd8  000200a8  2**0
                  CONTENTS
  4 .ARM          00000000  08004dd8  08004dd8  000200a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004dd8  08004dd8  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004dd8  08004dd8  00014dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ddc  08004ddc  00014ddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08004de0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  200000a8  08004e88  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000022c  08004e88  0002022c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000121d0  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002aab  00000000  00000000  000322a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e70  00000000  00000000  00034d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d30  00000000  00000000  00035bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e7b  00000000  00000000  000368f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011a27  00000000  00000000  0004f76b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b8ff  00000000  00000000  00061192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000eca91  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d54  00000000  00000000  000ecae4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a8 	.word	0x200000a8
 8000128:	00000000 	.word	0x00000000
 800012c:	08004d3c 	.word	0x08004d3c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000ac 	.word	0x200000ac
 8000148:	08004d3c 	.word	0x08004d3c

0800014c <Button_Reading>:
// Defining  counter for automatically increasing the value
// After the button is pressed more than 1 second.

int buttonFlag[N0_OF_BUTTONS] = {0};
void Button_Reading(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	for(int i = 0; i < N0_OF_BUTTONS; i ++)
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e076      	b.n	8000246 <Button_Reading+0xfa>
	{
		debounceButtonBuffer3[i] =debounceButtonBuffer2[i];
 8000158:	4a3f      	ldr	r2, [pc, #252]	; (8000258 <Button_Reading+0x10c>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	4413      	add	r3, r2
 800015e:	7819      	ldrb	r1, [r3, #0]
 8000160:	4a3e      	ldr	r2, [pc, #248]	; (800025c <Button_Reading+0x110>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	4413      	add	r3, r2
 8000166:	460a      	mov	r2, r1
 8000168:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer2[i] =debounceButtonBuffer1[i];
 800016a:	4a3d      	ldr	r2, [pc, #244]	; (8000260 <Button_Reading+0x114>)
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	4413      	add	r3, r2
 8000170:	7819      	ldrb	r1, [r3, #0]
 8000172:	4a39      	ldr	r2, [pc, #228]	; (8000258 <Button_Reading+0x10c>)
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	4413      	add	r3, r2
 8000178:	460a      	mov	r2, r1
 800017a:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(buttonGPIO[i], buttonPin[i]);
 800017c:	4a39      	ldr	r2, [pc, #228]	; (8000264 <Button_Reading+0x118>)
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000184:	4938      	ldr	r1, [pc, #224]	; (8000268 <Button_Reading+0x11c>)
 8000186:	687b      	ldr	r3, [r7, #4]
 8000188:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800018c:	b29b      	uxth	r3, r3
 800018e:	4619      	mov	r1, r3
 8000190:	4610      	mov	r0, r2
 8000192:	f001 ff5b 	bl	800204c <HAL_GPIO_ReadPin>
 8000196:	4603      	mov	r3, r0
 8000198:	4619      	mov	r1, r3
 800019a:	4a31      	ldr	r2, [pc, #196]	; (8000260 <Button_Reading+0x114>)
 800019c:	687b      	ldr	r3, [r7, #4]
 800019e:	4413      	add	r3, r2
 80001a0:	460a      	mov	r2, r1
 80001a2:	701a      	strb	r2, [r3, #0]
		if(debounceButtonBuffer1[i] == debounceButtonBuffer2[i] && debounceButtonBuffer2[i] == debounceButtonBuffer3[i])
 80001a4:	4a2e      	ldr	r2, [pc, #184]	; (8000260 <Button_Reading+0x114>)
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	4413      	add	r3, r2
 80001aa:	781a      	ldrb	r2, [r3, #0]
 80001ac:	492a      	ldr	r1, [pc, #168]	; (8000258 <Button_Reading+0x10c>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	440b      	add	r3, r1
 80001b2:	781b      	ldrb	r3, [r3, #0]
 80001b4:	429a      	cmp	r2, r3
 80001b6:	d12d      	bne.n	8000214 <Button_Reading+0xc8>
 80001b8:	4a27      	ldr	r2, [pc, #156]	; (8000258 <Button_Reading+0x10c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	4413      	add	r3, r2
 80001be:	781a      	ldrb	r2, [r3, #0]
 80001c0:	4926      	ldr	r1, [pc, #152]	; (800025c <Button_Reading+0x110>)
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	440b      	add	r3, r1
 80001c6:	781b      	ldrb	r3, [r3, #0]
 80001c8:	429a      	cmp	r2, r3
 80001ca:	d123      	bne.n	8000214 <Button_Reading+0xc8>
		{
			if(debounceButtonBuffer1[i] != buttonBuffer[i])
 80001cc:	4a24      	ldr	r2, [pc, #144]	; (8000260 <Button_Reading+0x114>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	4413      	add	r3, r2
 80001d2:	781a      	ldrb	r2, [r3, #0]
 80001d4:	4925      	ldr	r1, [pc, #148]	; (800026c <Button_Reading+0x120>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	440b      	add	r3, r1
 80001da:	781b      	ldrb	r3, [r3, #0]
 80001dc:	429a      	cmp	r2, r3
 80001de:	d02e      	beq.n	800023e <Button_Reading+0xf2>
			{
				buttonBuffer[i] = debounceButtonBuffer1[i];
 80001e0:	4a1f      	ldr	r2, [pc, #124]	; (8000260 <Button_Reading+0x114>)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	4413      	add	r3, r2
 80001e6:	7819      	ldrb	r1, [r3, #0]
 80001e8:	4a20      	ldr	r2, [pc, #128]	; (800026c <Button_Reading+0x120>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	4413      	add	r3, r2
 80001ee:	460a      	mov	r2, r1
 80001f0:	701a      	strb	r2, [r3, #0]
						if(buttonBuffer[i] == BUTTON_IS_PRESSED)
 80001f2:	4a1e      	ldr	r2, [pc, #120]	; (800026c <Button_Reading+0x120>)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	4413      	add	r3, r2
 80001f8:	781b      	ldrb	r3, [r3, #0]
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d11f      	bne.n	800023e <Button_Reading+0xf2>
						{
							buttonFlag[i] = 1;
 80001fe:	4a1c      	ldr	r2, [pc, #112]	; (8000270 <Button_Reading+0x124>)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	2101      	movs	r1, #1
 8000204:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							buttonTimeOut[i] = DURATION_FOR_AUTO_INCREASING;
 8000208:	4a1a      	ldr	r2, [pc, #104]	; (8000274 <Button_Reading+0x128>)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	2164      	movs	r1, #100	; 0x64
 800020e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if(debounceButtonBuffer1[i] != buttonBuffer[i])
 8000212:	e014      	b.n	800023e <Button_Reading+0xf2>
						}
			}
		}
		else
		{
			buttonTimeOut[i]--;
 8000214:	4a17      	ldr	r2, [pc, #92]	; (8000274 <Button_Reading+0x128>)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800021c:	1e5a      	subs	r2, r3, #1
 800021e:	4915      	ldr	r1, [pc, #84]	; (8000274 <Button_Reading+0x128>)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(buttonTimeOut[i] <= 0)
 8000226:	4a13      	ldr	r2, [pc, #76]	; (8000274 <Button_Reading+0x128>)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800022e:	2b00      	cmp	r3, #0
 8000230:	dc06      	bgt.n	8000240 <Button_Reading+0xf4>
					buttonBuffer[i] = BUTTON_IS_RELEASED;
 8000232:	4a0e      	ldr	r2, [pc, #56]	; (800026c <Button_Reading+0x120>)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	4413      	add	r3, r2
 8000238:	2201      	movs	r2, #1
 800023a:	701a      	strb	r2, [r3, #0]
 800023c:	e000      	b.n	8000240 <Button_Reading+0xf4>
			if(debounceButtonBuffer1[i] != buttonBuffer[i])
 800023e:	bf00      	nop
	for(int i = 0; i < N0_OF_BUTTONS; i ++)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	3301      	adds	r3, #1
 8000244:	607b      	str	r3, [r7, #4]
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	2b03      	cmp	r3, #3
 800024a:	dd85      	ble.n	8000158 <Button_Reading+0xc>
		}
	}
}
 800024c:	bf00      	nop
 800024e:	bf00      	nop
 8000250:	3708      	adds	r7, #8
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}
 8000256:	bf00      	nop
 8000258:	200000d8 	.word	0x200000d8
 800025c:	200000dc 	.word	0x200000dc
 8000260:	200000d4 	.word	0x200000d4
 8000264:	20000004 	.word	0x20000004
 8000268:	20000014 	.word	0x20000014
 800026c:	20000000 	.word	0x20000000
 8000270:	200000e0 	.word	0x200000e0
 8000274:	200000c4 	.word	0x200000c4

08000278 <Is_Button_Pressed>:

int Is_Button_Pressed(int index)
{
 8000278:	b480      	push	{r7}
 800027a:	b083      	sub	sp, #12
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
	if(index >= N0_OF_BUTTONS || index < 0)	return 0;
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	2b03      	cmp	r3, #3
 8000284:	dc02      	bgt.n	800028c <Is_Button_Pressed+0x14>
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	2b00      	cmp	r3, #0
 800028a:	da01      	bge.n	8000290 <Is_Button_Pressed+0x18>
 800028c:	2300      	movs	r3, #0
 800028e:	e00d      	b.n	80002ac <Is_Button_Pressed+0x34>

		if(buttonFlag[index] == 1)
 8000290:	4a09      	ldr	r2, [pc, #36]	; (80002b8 <Is_Button_Pressed+0x40>)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000298:	2b01      	cmp	r3, #1
 800029a:	d106      	bne.n	80002aa <Is_Button_Pressed+0x32>
		{
			buttonFlag[index] = 0;
 800029c:	4a06      	ldr	r2, [pc, #24]	; (80002b8 <Is_Button_Pressed+0x40>)
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	2100      	movs	r1, #0
 80002a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			return 1;
 80002a6:	2301      	movs	r3, #1
 80002a8:	e000      	b.n	80002ac <Is_Button_Pressed+0x34>
		}
		return 0;
 80002aa:	2300      	movs	r3, #0
}
 80002ac:	4618      	mov	r0, r3
 80002ae:	370c      	adds	r7, #12
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bc80      	pop	{r7}
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	200000e0 	.word	0x200000e0

080002bc <buzzer>:
 */

#include "buzzer.h"

void buzzer(int duty_cycle)
{
 80002bc:	b480      	push	{r7}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
	 htim3.Instance->CCR1 = duty_cycle;
 80002c4:	4b04      	ldr	r3, [pc, #16]	; (80002d8 <buzzer+0x1c>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	687a      	ldr	r2, [r7, #4]
 80002ca:	635a      	str	r2, [r3, #52]	; 0x34
//     __HAL_TIM_SET_AUTORELOAD(&htim3, buzzerValue*2); // Increasing frequency : Auto-Reload Register - ARR
//     __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, buzzerValue); // Increasing duty cycle: Capture/Compare Register - CCR
}
 80002cc:	bf00      	nop
 80002ce:	370c      	adds	r7, #12
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bc80      	pop	{r7}
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	20000110 	.word	0x20000110

080002dc <clearAllLed1>:
 */
#include "main.h"
#include "displayLed.h"

void clearAllLed1()
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 80002e0:	2200      	movs	r2, #0
 80002e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002e6:	4805      	ldr	r0, [pc, #20]	; (80002fc <clearAllLed1+0x20>)
 80002e8:	f001 fec7 	bl	800207a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 80002ec:	2200      	movs	r2, #0
 80002ee:	2108      	movs	r1, #8
 80002f0:	4803      	ldr	r0, [pc, #12]	; (8000300 <clearAllLed1+0x24>)
 80002f2:	f001 fec2 	bl	800207a <HAL_GPIO_WritePin>
}
 80002f6:	bf00      	nop
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	40010800 	.word	0x40010800
 8000300:	40010c00 	.word	0x40010c00

08000304 <clearAllLed2>:

void clearAllLed2()
{
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 8000308:	2200      	movs	r2, #0
 800030a:	2120      	movs	r1, #32
 800030c:	4804      	ldr	r0, [pc, #16]	; (8000320 <clearAllLed2+0x1c>)
 800030e:	f001 feb4 	bl	800207a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8000312:	2200      	movs	r2, #0
 8000314:	2110      	movs	r1, #16
 8000316:	4802      	ldr	r0, [pc, #8]	; (8000320 <clearAllLed2+0x1c>)
 8000318:	f001 feaf 	bl	800207a <HAL_GPIO_WritePin>
}
 800031c:	bf00      	nop
 800031e:	bd80      	pop	{r7, pc}
 8000320:	40010c00 	.word	0x40010c00

08000324 <displayRed1>:
void displayRed1()
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000328:	2201      	movs	r2, #1
 800032a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800032e:	4805      	ldr	r0, [pc, #20]	; (8000344 <displayRed1+0x20>)
 8000330:	f001 fea3 	bl	800207a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8000334:	2200      	movs	r2, #0
 8000336:	2108      	movs	r1, #8
 8000338:	4803      	ldr	r0, [pc, #12]	; (8000348 <displayRed1+0x24>)
 800033a:	f001 fe9e 	bl	800207a <HAL_GPIO_WritePin>

}
 800033e:	bf00      	nop
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	40010800 	.word	0x40010800
 8000348:	40010c00 	.word	0x40010c00

0800034c <displayYellow1>:

void displayYellow1()
{
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000350:	2201      	movs	r2, #1
 8000352:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000356:	4805      	ldr	r0, [pc, #20]	; (800036c <displayYellow1+0x20>)
 8000358:	f001 fe8f 	bl	800207a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 800035c:	2201      	movs	r2, #1
 800035e:	2108      	movs	r1, #8
 8000360:	4803      	ldr	r0, [pc, #12]	; (8000370 <displayYellow1+0x24>)
 8000362:	f001 fe8a 	bl	800207a <HAL_GPIO_WritePin>
}
 8000366:	bf00      	nop
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	40010800 	.word	0x40010800
 8000370:	40010c00 	.word	0x40010c00

08000374 <displayGreen1>:

void displayGreen1()
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8000378:	2200      	movs	r2, #0
 800037a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800037e:	4805      	ldr	r0, [pc, #20]	; (8000394 <displayGreen1+0x20>)
 8000380:	f001 fe7b 	bl	800207a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000384:	2201      	movs	r2, #1
 8000386:	2108      	movs	r1, #8
 8000388:	4803      	ldr	r0, [pc, #12]	; (8000398 <displayGreen1+0x24>)
 800038a:	f001 fe76 	bl	800207a <HAL_GPIO_WritePin>
}
 800038e:	bf00      	nop
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	40010800 	.word	0x40010800
 8000398:	40010c00 	.word	0x40010c00

0800039c <displayRed2>:

void displayRed2()
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 80003a0:	2201      	movs	r2, #1
 80003a2:	2120      	movs	r1, #32
 80003a4:	4804      	ldr	r0, [pc, #16]	; (80003b8 <displayRed2+0x1c>)
 80003a6:	f001 fe68 	bl	800207a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 80003aa:	2200      	movs	r2, #0
 80003ac:	2110      	movs	r1, #16
 80003ae:	4802      	ldr	r0, [pc, #8]	; (80003b8 <displayRed2+0x1c>)
 80003b0:	f001 fe63 	bl	800207a <HAL_GPIO_WritePin>
}
 80003b4:	bf00      	nop
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	40010c00 	.word	0x40010c00

080003bc <displayYellow2>:


void displayYellow2()
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 80003c0:	2201      	movs	r2, #1
 80003c2:	2120      	movs	r1, #32
 80003c4:	4804      	ldr	r0, [pc, #16]	; (80003d8 <displayYellow2+0x1c>)
 80003c6:	f001 fe58 	bl	800207a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 80003ca:	2201      	movs	r2, #1
 80003cc:	2110      	movs	r1, #16
 80003ce:	4802      	ldr	r0, [pc, #8]	; (80003d8 <displayYellow2+0x1c>)
 80003d0:	f001 fe53 	bl	800207a <HAL_GPIO_WritePin>
}
 80003d4:	bf00      	nop
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	40010c00 	.word	0x40010c00

080003dc <displayGreen2>:

void displayGreen2()
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 80003e0:	2200      	movs	r2, #0
 80003e2:	2120      	movs	r1, #32
 80003e4:	4804      	ldr	r0, [pc, #16]	; (80003f8 <displayGreen2+0x1c>)
 80003e6:	f001 fe48 	bl	800207a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 80003ea:	2201      	movs	r2, #1
 80003ec:	2110      	movs	r1, #16
 80003ee:	4802      	ldr	r0, [pc, #8]	; (80003f8 <displayGreen2+0x1c>)
 80003f0:	f001 fe43 	bl	800207a <HAL_GPIO_WritePin>
}
 80003f4:	bf00      	nop
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	40010c00 	.word	0x40010c00

080003fc <toggleRed>:

void toggleRed()
{	// Remember to clear all led before toggle
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(D2_GPIO_Port, D2_Pin);
 8000400:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000404:	4804      	ldr	r0, [pc, #16]	; (8000418 <toggleRed+0x1c>)
 8000406:	f001 fe50 	bl	80020aa <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);
 800040a:	2120      	movs	r1, #32
 800040c:	4803      	ldr	r0, [pc, #12]	; (800041c <toggleRed+0x20>)
 800040e:	f001 fe4c 	bl	80020aa <HAL_GPIO_TogglePin>
}
 8000412:	bf00      	nop
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	40010800 	.word	0x40010800
 800041c:	40010c00 	.word	0x40010c00

08000420 <toggleYellow>:

void toggleYellow()
{	// Remember to clear all led before toggle
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(D2_GPIO_Port, D2_Pin);
 8000424:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000428:	4808      	ldr	r0, [pc, #32]	; (800044c <toggleYellow+0x2c>)
 800042a:	f001 fe3e 	bl	80020aa <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
 800042e:	2108      	movs	r1, #8
 8000430:	4807      	ldr	r0, [pc, #28]	; (8000450 <toggleYellow+0x30>)
 8000432:	f001 fe3a 	bl	80020aa <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);
 8000436:	2120      	movs	r1, #32
 8000438:	4805      	ldr	r0, [pc, #20]	; (8000450 <toggleYellow+0x30>)
 800043a:	f001 fe36 	bl	80020aa <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D5_GPIO_Port, D5_Pin);
 800043e:	2110      	movs	r1, #16
 8000440:	4803      	ldr	r0, [pc, #12]	; (8000450 <toggleYellow+0x30>)
 8000442:	f001 fe32 	bl	80020aa <HAL_GPIO_TogglePin>
}
 8000446:	bf00      	nop
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	40010800 	.word	0x40010800
 8000450:	40010c00 	.word	0x40010c00

08000454 <toggleGreen>:

void toggleGreen()
{	// Remember to clear all led before toggle
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
 8000458:	2108      	movs	r1, #8
 800045a:	4804      	ldr	r0, [pc, #16]	; (800046c <toggleGreen+0x18>)
 800045c:	f001 fe25 	bl	80020aa <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D5_GPIO_Port, D5_Pin);
 8000460:	2110      	movs	r1, #16
 8000462:	4802      	ldr	r0, [pc, #8]	; (800046c <toggleGreen+0x18>)
 8000464:	f001 fe21 	bl	80020aa <HAL_GPIO_TogglePin>
}
 8000468:	bf00      	nop
 800046a:	bd80      	pop	{r7, pc}
 800046c:	40010c00 	.word	0x40010c00

08000470 <clearPedestrian>:

void clearPedestrian()
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8000474:	2200      	movs	r2, #0
 8000476:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800047a:	4805      	ldr	r0, [pc, #20]	; (8000490 <clearPedestrian+0x20>)
 800047c:	f001 fdfd 	bl	800207a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 8000480:	2200      	movs	r2, #0
 8000482:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000486:	4803      	ldr	r0, [pc, #12]	; (8000494 <clearPedestrian+0x24>)
 8000488:	f001 fdf7 	bl	800207a <HAL_GPIO_WritePin>
}
 800048c:	bf00      	nop
 800048e:	bd80      	pop	{r7, pc}
 8000490:	40010c00 	.word	0x40010c00
 8000494:	40010800 	.word	0x40010800

08000498 <displayPedestrianRed>:

void displayPedestrianRed()
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
 800049c:	2201      	movs	r2, #1
 800049e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004a2:	4805      	ldr	r0, [pc, #20]	; (80004b8 <displayPedestrianRed+0x20>)
 80004a4:	f001 fde9 	bl	800207a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 80004a8:	2200      	movs	r2, #0
 80004aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004ae:	4803      	ldr	r0, [pc, #12]	; (80004bc <displayPedestrianRed+0x24>)
 80004b0:	f001 fde3 	bl	800207a <HAL_GPIO_WritePin>
}
 80004b4:	bf00      	nop
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	40010c00 	.word	0x40010c00
 80004bc:	40010800 	.word	0x40010800

080004c0 <displayPedestrianGreen>:
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
}

void displayPedestrianGreen()
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 80004c4:	2200      	movs	r2, #0
 80004c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004ca:	4805      	ldr	r0, [pc, #20]	; (80004e0 <displayPedestrianGreen+0x20>)
 80004cc:	f001 fdd5 	bl	800207a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 80004d0:	2201      	movs	r2, #1
 80004d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004d6:	4803      	ldr	r0, [pc, #12]	; (80004e4 <displayPedestrianGreen+0x24>)
 80004d8:	f001 fdcf 	bl	800207a <HAL_GPIO_WritePin>
}
 80004dc:	bf00      	nop
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	40010c00 	.word	0x40010c00
 80004e4:	40010800 	.word	0x40010800

080004e8 <increase>:
 */

#include "global.h"

void increase()
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
	time1++;
 80004ec:	4b07      	ldr	r3, [pc, #28]	; (800050c <increase+0x24>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	3301      	adds	r3, #1
 80004f2:	4a06      	ldr	r2, [pc, #24]	; (800050c <increase+0x24>)
 80004f4:	6013      	str	r3, [r2, #0]
	if(time1 > 99)
 80004f6:	4b05      	ldr	r3, [pc, #20]	; (800050c <increase+0x24>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	2b63      	cmp	r3, #99	; 0x63
 80004fc:	dd02      	ble.n	8000504 <increase+0x1c>
		time1 = 1;
 80004fe:	4b03      	ldr	r3, [pc, #12]	; (800050c <increase+0x24>)
 8000500:	2201      	movs	r2, #1
 8000502:	601a      	str	r2, [r3, #0]
}
 8000504:	bf00      	nop
 8000506:	46bd      	mov	sp, r7
 8000508:	bc80      	pop	{r7}
 800050a:	4770      	bx	lr
 800050c:	2000010c 	.word	0x2000010c

08000510 <balance>:

void balance(int RED, int AMBER, int GREEN)
{
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
 8000516:	60f8      	str	r0, [r7, #12]
 8000518:	60b9      	str	r1, [r7, #8]
 800051a:	607a      	str	r2, [r7, #4]
	if(RED > timeRed)
 800051c:	4b5c      	ldr	r3, [pc, #368]	; (8000690 <balance+0x180>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	68fa      	ldr	r2, [r7, #12]
 8000522:	429a      	cmp	r2, r3
 8000524:	dd19      	ble.n	800055a <balance+0x4a>
	{
		timeYellow = timeYellow * (RED / timeRed);
 8000526:	4b5a      	ldr	r3, [pc, #360]	; (8000690 <balance+0x180>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	68fa      	ldr	r2, [r7, #12]
 800052c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000530:	4a58      	ldr	r2, [pc, #352]	; (8000694 <balance+0x184>)
 8000532:	6812      	ldr	r2, [r2, #0]
 8000534:	fb02 f303 	mul.w	r3, r2, r3
 8000538:	4a56      	ldr	r2, [pc, #344]	; (8000694 <balance+0x184>)
 800053a:	6013      	str	r3, [r2, #0]
		timeGreen = timeGreen * (RED / timeRed);
 800053c:	4b54      	ldr	r3, [pc, #336]	; (8000690 <balance+0x180>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	68fa      	ldr	r2, [r7, #12]
 8000542:	fb92 f3f3 	sdiv	r3, r2, r3
 8000546:	4a54      	ldr	r2, [pc, #336]	; (8000698 <balance+0x188>)
 8000548:	6812      	ldr	r2, [r2, #0]
 800054a:	fb02 f303 	mul.w	r3, r2, r3
 800054e:	4a52      	ldr	r2, [pc, #328]	; (8000698 <balance+0x188>)
 8000550:	6013      	str	r3, [r2, #0]
		timeRed = RED;
 8000552:	4a4f      	ldr	r2, [pc, #316]	; (8000690 <balance+0x180>)
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	6013      	str	r3, [r2, #0]
	{
		timeRed = (GREEN / 3) * 5;
		timeYellow = (GREEN / 3) * 2;
		timeGreen = GREEN;
	}
}
 8000558:	e094      	b.n	8000684 <balance+0x174>
	else if(AMBER > timeYellow)
 800055a:	4b4e      	ldr	r3, [pc, #312]	; (8000694 <balance+0x184>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	68ba      	ldr	r2, [r7, #8]
 8000560:	429a      	cmp	r2, r3
 8000562:	dd19      	ble.n	8000598 <balance+0x88>
		timeRed = timeRed * (AMBER / timeYellow);
 8000564:	4b4b      	ldr	r3, [pc, #300]	; (8000694 <balance+0x184>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	68ba      	ldr	r2, [r7, #8]
 800056a:	fb92 f3f3 	sdiv	r3, r2, r3
 800056e:	4a48      	ldr	r2, [pc, #288]	; (8000690 <balance+0x180>)
 8000570:	6812      	ldr	r2, [r2, #0]
 8000572:	fb02 f303 	mul.w	r3, r2, r3
 8000576:	4a46      	ldr	r2, [pc, #280]	; (8000690 <balance+0x180>)
 8000578:	6013      	str	r3, [r2, #0]
		timeGreen = timeGreen * (AMBER / timeYellow);
 800057a:	4b46      	ldr	r3, [pc, #280]	; (8000694 <balance+0x184>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	68ba      	ldr	r2, [r7, #8]
 8000580:	fb92 f3f3 	sdiv	r3, r2, r3
 8000584:	4a44      	ldr	r2, [pc, #272]	; (8000698 <balance+0x188>)
 8000586:	6812      	ldr	r2, [r2, #0]
 8000588:	fb02 f303 	mul.w	r3, r2, r3
 800058c:	4a42      	ldr	r2, [pc, #264]	; (8000698 <balance+0x188>)
 800058e:	6013      	str	r3, [r2, #0]
		timeYellow = AMBER;
 8000590:	4a40      	ldr	r2, [pc, #256]	; (8000694 <balance+0x184>)
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	6013      	str	r3, [r2, #0]
}
 8000596:	e075      	b.n	8000684 <balance+0x174>
	else if(GREEN > timeGreen)
 8000598:	4b3f      	ldr	r3, [pc, #252]	; (8000698 <balance+0x188>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	687a      	ldr	r2, [r7, #4]
 800059e:	429a      	cmp	r2, r3
 80005a0:	dd18      	ble.n	80005d4 <balance+0xc4>
		timeRed = timeRed * (GREEN / timeGreen);
 80005a2:	4b3d      	ldr	r3, [pc, #244]	; (8000698 <balance+0x188>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	687a      	ldr	r2, [r7, #4]
 80005a8:	fb92 f3f3 	sdiv	r3, r2, r3
 80005ac:	4a38      	ldr	r2, [pc, #224]	; (8000690 <balance+0x180>)
 80005ae:	6812      	ldr	r2, [r2, #0]
 80005b0:	fb02 f303 	mul.w	r3, r2, r3
 80005b4:	4a36      	ldr	r2, [pc, #216]	; (8000690 <balance+0x180>)
 80005b6:	6013      	str	r3, [r2, #0]
		timeYellow = AMBER * (GREEN / timeGreen);
 80005b8:	4b37      	ldr	r3, [pc, #220]	; (8000698 <balance+0x188>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	687a      	ldr	r2, [r7, #4]
 80005be:	fb92 f3f3 	sdiv	r3, r2, r3
 80005c2:	68ba      	ldr	r2, [r7, #8]
 80005c4:	fb02 f303 	mul.w	r3, r2, r3
 80005c8:	4a32      	ldr	r2, [pc, #200]	; (8000694 <balance+0x184>)
 80005ca:	6013      	str	r3, [r2, #0]
		timeGreen = GREEN;
 80005cc:	4a32      	ldr	r2, [pc, #200]	; (8000698 <balance+0x188>)
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	6013      	str	r3, [r2, #0]
}
 80005d2:	e057      	b.n	8000684 <balance+0x174>
	else if(RED < timeRed)
 80005d4:	4b2e      	ldr	r3, [pc, #184]	; (8000690 <balance+0x180>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	68fa      	ldr	r2, [r7, #12]
 80005da:	429a      	cmp	r2, r3
 80005dc:	da19      	bge.n	8000612 <balance+0x102>
		timeYellow = (RED / 5) * 2;
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	4a2e      	ldr	r2, [pc, #184]	; (800069c <balance+0x18c>)
 80005e2:	fb82 1203 	smull	r1, r2, r2, r3
 80005e6:	1052      	asrs	r2, r2, #1
 80005e8:	17db      	asrs	r3, r3, #31
 80005ea:	1ad3      	subs	r3, r2, r3
 80005ec:	005b      	lsls	r3, r3, #1
 80005ee:	4a29      	ldr	r2, [pc, #164]	; (8000694 <balance+0x184>)
 80005f0:	6013      	str	r3, [r2, #0]
		timeGreen = (RED / 5) * 3;
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	4a29      	ldr	r2, [pc, #164]	; (800069c <balance+0x18c>)
 80005f6:	fb82 1203 	smull	r1, r2, r2, r3
 80005fa:	1052      	asrs	r2, r2, #1
 80005fc:	17db      	asrs	r3, r3, #31
 80005fe:	1ad2      	subs	r2, r2, r3
 8000600:	4613      	mov	r3, r2
 8000602:	005b      	lsls	r3, r3, #1
 8000604:	4413      	add	r3, r2
 8000606:	4a24      	ldr	r2, [pc, #144]	; (8000698 <balance+0x188>)
 8000608:	6013      	str	r3, [r2, #0]
		timeRed = RED;
 800060a:	4a21      	ldr	r2, [pc, #132]	; (8000690 <balance+0x180>)
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	6013      	str	r3, [r2, #0]
}
 8000610:	e038      	b.n	8000684 <balance+0x174>
	else if(AMBER < timeYellow)
 8000612:	4b20      	ldr	r3, [pc, #128]	; (8000694 <balance+0x184>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	68ba      	ldr	r2, [r7, #8]
 8000618:	429a      	cmp	r2, r3
 800061a:	da17      	bge.n	800064c <balance+0x13c>
		timeRed = (AMBER / 2) * 5;
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	0fda      	lsrs	r2, r3, #31
 8000620:	4413      	add	r3, r2
 8000622:	105b      	asrs	r3, r3, #1
 8000624:	461a      	mov	r2, r3
 8000626:	4613      	mov	r3, r2
 8000628:	009b      	lsls	r3, r3, #2
 800062a:	4413      	add	r3, r2
 800062c:	4a18      	ldr	r2, [pc, #96]	; (8000690 <balance+0x180>)
 800062e:	6013      	str	r3, [r2, #0]
		timeGreen = (AMBER / 2) * 3;
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	0fda      	lsrs	r2, r3, #31
 8000634:	4413      	add	r3, r2
 8000636:	105b      	asrs	r3, r3, #1
 8000638:	461a      	mov	r2, r3
 800063a:	4613      	mov	r3, r2
 800063c:	005b      	lsls	r3, r3, #1
 800063e:	4413      	add	r3, r2
 8000640:	4a15      	ldr	r2, [pc, #84]	; (8000698 <balance+0x188>)
 8000642:	6013      	str	r3, [r2, #0]
		timeYellow = AMBER;
 8000644:	4a13      	ldr	r2, [pc, #76]	; (8000694 <balance+0x184>)
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	6013      	str	r3, [r2, #0]
}
 800064a:	e01b      	b.n	8000684 <balance+0x174>
	else if(GREEN < timeGreen)
 800064c:	4b12      	ldr	r3, [pc, #72]	; (8000698 <balance+0x188>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	687a      	ldr	r2, [r7, #4]
 8000652:	429a      	cmp	r2, r3
 8000654:	da16      	bge.n	8000684 <balance+0x174>
		timeRed = (GREEN / 3) * 5;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	4a11      	ldr	r2, [pc, #68]	; (80006a0 <balance+0x190>)
 800065a:	fb82 1203 	smull	r1, r2, r2, r3
 800065e:	17db      	asrs	r3, r3, #31
 8000660:	1ad2      	subs	r2, r2, r3
 8000662:	4613      	mov	r3, r2
 8000664:	009b      	lsls	r3, r3, #2
 8000666:	4413      	add	r3, r2
 8000668:	4a09      	ldr	r2, [pc, #36]	; (8000690 <balance+0x180>)
 800066a:	6013      	str	r3, [r2, #0]
		timeYellow = (GREEN / 3) * 2;
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	4a0c      	ldr	r2, [pc, #48]	; (80006a0 <balance+0x190>)
 8000670:	fb82 1203 	smull	r1, r2, r2, r3
 8000674:	17db      	asrs	r3, r3, #31
 8000676:	1ad3      	subs	r3, r2, r3
 8000678:	005b      	lsls	r3, r3, #1
 800067a:	4a06      	ldr	r2, [pc, #24]	; (8000694 <balance+0x184>)
 800067c:	6013      	str	r3, [r2, #0]
		timeGreen = GREEN;
 800067e:	4a06      	ldr	r2, [pc, #24]	; (8000698 <balance+0x188>)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	6013      	str	r3, [r2, #0]
}
 8000684:	bf00      	nop
 8000686:	3714      	adds	r7, #20
 8000688:	46bd      	mov	sp, r7
 800068a:	bc80      	pop	{r7}
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	20000024 	.word	0x20000024
 8000694:	20000028 	.word	0x20000028
 8000698:	2000002c 	.word	0x2000002c
 800069c:	66666667 	.word	0x66666667
 80006a0:	55555556 	.word	0x55555556

080006a4 <normalState>:

void normalState(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08e      	sub	sp, #56	; 0x38
 80006a8:	af00      	add	r7, sp, #0
	char str[50];
	switch(status)
 80006aa:	4ba4      	ldr	r3, [pc, #656]	; (800093c <normalState+0x298>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	2b0c      	cmp	r3, #12
 80006b0:	f200 83de 	bhi.w	8000e70 <normalState+0x7cc>
 80006b4:	a201      	add	r2, pc, #4	; (adr r2, 80006bc <normalState+0x18>)
 80006b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ba:	bf00      	nop
 80006bc:	080006f1 	.word	0x080006f1
 80006c0:	08000723 	.word	0x08000723
 80006c4:	08000829 	.word	0x08000829
 80006c8:	08000965 	.word	0x08000965
 80006cc:	08000ab7 	.word	0x08000ab7
 80006d0:	08000e71 	.word	0x08000e71
 80006d4:	08000e71 	.word	0x08000e71
 80006d8:	08000e71 	.word	0x08000e71
 80006dc:	08000e71 	.word	0x08000e71
 80006e0:	08000e71 	.word	0x08000e71
 80006e4:	08000c49 	.word	0x08000c49
 80006e8:	08000cfd 	.word	0x08000cfd
 80006ec:	08000db1 	.word	0x08000db1
	{
	case INIT:
		status = RedGreen;
 80006f0:	4b92      	ldr	r3, [pc, #584]	; (800093c <normalState+0x298>)
 80006f2:	2201      	movs	r2, #1
 80006f4:	601a      	str	r2, [r3, #0]
		setTimer(0, timeGreen * 100);
 80006f6:	4b92      	ldr	r3, [pc, #584]	; (8000940 <normalState+0x29c>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	2264      	movs	r2, #100	; 0x64
 80006fc:	fb02 f303 	mul.w	r3, r2, r3
 8000700:	4619      	mov	r1, r3
 8000702:	2000      	movs	r0, #0
 8000704:	f000 ff16 	bl	8001534 <setTimer>
		setTimer(1, 1);
 8000708:	2101      	movs	r1, #1
 800070a:	2001      	movs	r0, #1
 800070c:	f000 ff12 	bl	8001534 <setTimer>
		time1 = timeRed;
 8000710:	4b8c      	ldr	r3, [pc, #560]	; (8000944 <normalState+0x2a0>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a8c      	ldr	r2, [pc, #560]	; (8000948 <normalState+0x2a4>)
 8000716:	6013      	str	r3, [r2, #0]
		time2 = timeGreen;
 8000718:	4b89      	ldr	r3, [pc, #548]	; (8000940 <normalState+0x29c>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a8b      	ldr	r2, [pc, #556]	; (800094c <normalState+0x2a8>)
 800071e:	6013      	str	r3, [r2, #0]
		break;
 8000720:	e3af      	b.n	8000e82 <normalState+0x7de>
	case RedGreen:
		displayRed1();
 8000722:	f7ff fdff 	bl	8000324 <displayRed1>
		displayGreen2();
 8000726:	f7ff fe59 	bl	80003dc <displayGreen2>
		if(isTimerUp(1) == 1)
 800072a:	2001      	movs	r0, #1
 800072c:	f000 feee 	bl	800150c <isTimerUp>
 8000730:	4603      	mov	r3, r0
 8000732:	2b01      	cmp	r3, #1
 8000734:	d12b      	bne.n	800078e <normalState+0xea>
		{	// Update Time
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "\r\n!7SEG1: %d#\r\n",time1), 500);
 8000736:	4b84      	ldr	r3, [pc, #528]	; (8000948 <normalState+0x2a4>)
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	4984      	ldr	r1, [pc, #528]	; (8000950 <normalState+0x2ac>)
 800073e:	4618      	mov	r0, r3
 8000740:	f003 ff78 	bl	8004634 <siprintf>
 8000744:	4603      	mov	r3, r0
 8000746:	b29a      	uxth	r2, r3
 8000748:	1d39      	adds	r1, r7, #4
 800074a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800074e:	4881      	ldr	r0, [pc, #516]	; (8000954 <normalState+0x2b0>)
 8000750:	f003 f8a4 	bl	800389c <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "\r\n!7SEG2: %d#\r\n\n\n",time2), 500);
 8000754:	4b7d      	ldr	r3, [pc, #500]	; (800094c <normalState+0x2a8>)
 8000756:	681a      	ldr	r2, [r3, #0]
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	497f      	ldr	r1, [pc, #508]	; (8000958 <normalState+0x2b4>)
 800075c:	4618      	mov	r0, r3
 800075e:	f003 ff69 	bl	8004634 <siprintf>
 8000762:	4603      	mov	r3, r0
 8000764:	b29a      	uxth	r2, r3
 8000766:	1d39      	adds	r1, r7, #4
 8000768:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800076c:	4879      	ldr	r0, [pc, #484]	; (8000954 <normalState+0x2b0>)
 800076e:	f003 f895 	bl	800389c <HAL_UART_Transmit>
			setTimer(1, 100);
 8000772:	2164      	movs	r1, #100	; 0x64
 8000774:	2001      	movs	r0, #1
 8000776:	f000 fedd 	bl	8001534 <setTimer>
			time1--;
 800077a:	4b73      	ldr	r3, [pc, #460]	; (8000948 <normalState+0x2a4>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	3b01      	subs	r3, #1
 8000780:	4a71      	ldr	r2, [pc, #452]	; (8000948 <normalState+0x2a4>)
 8000782:	6013      	str	r3, [r2, #0]
			time2--;
 8000784:	4b71      	ldr	r3, [pc, #452]	; (800094c <normalState+0x2a8>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	3b01      	subs	r3, #1
 800078a:	4a70      	ldr	r2, [pc, #448]	; (800094c <normalState+0x2a8>)
 800078c:	6013      	str	r3, [r2, #0]
		}

		if(isTimerUp(0) == 1)
 800078e:	2000      	movs	r0, #0
 8000790:	f000 febc 	bl	800150c <isTimerUp>
 8000794:	4603      	mov	r3, r0
 8000796:	2b01      	cmp	r3, #1
 8000798:	d117      	bne.n	80007ca <normalState+0x126>
		{	// Transit State
			status = RedAmber;
 800079a:	4b68      	ldr	r3, [pc, #416]	; (800093c <normalState+0x298>)
 800079c:	2202      	movs	r2, #2
 800079e:	601a      	str	r2, [r3, #0]
			setTimer(0, timeYellow * 100);
 80007a0:	4b6e      	ldr	r3, [pc, #440]	; (800095c <normalState+0x2b8>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	2264      	movs	r2, #100	; 0x64
 80007a6:	fb02 f303 	mul.w	r3, r2, r3
 80007aa:	4619      	mov	r1, r3
 80007ac:	2000      	movs	r0, #0
 80007ae:	f000 fec1 	bl	8001534 <setTimer>
			setTimer(1, 1);
 80007b2:	2101      	movs	r1, #1
 80007b4:	2001      	movs	r0, #1
 80007b6:	f000 febd 	bl	8001534 <setTimer>
			time1 = timeYellow;
 80007ba:	4b68      	ldr	r3, [pc, #416]	; (800095c <normalState+0x2b8>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4a62      	ldr	r2, [pc, #392]	; (8000948 <normalState+0x2a4>)
 80007c0:	6013      	str	r3, [r2, #0]
			time2 = timeYellow;
 80007c2:	4b66      	ldr	r3, [pc, #408]	; (800095c <normalState+0x2b8>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4a61      	ldr	r2, [pc, #388]	; (800094c <normalState+0x2a8>)
 80007c8:	6013      	str	r3, [r2, #0]
		}


		if(Is_Button_Pressed(1))
 80007ca:	2001      	movs	r0, #1
 80007cc:	f7ff fd54 	bl	8000278 <Is_Button_Pressed>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d011      	beq.n	80007fa <normalState+0x156>
		{
			status = ManRed;
 80007d6:	4b59      	ldr	r3, [pc, #356]	; (800093c <normalState+0x298>)
 80007d8:	220a      	movs	r2, #10
 80007da:	601a      	str	r2, [r3, #0]
			time1 = timeRed;
 80007dc:	4b59      	ldr	r3, [pc, #356]	; (8000944 <normalState+0x2a0>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a59      	ldr	r2, [pc, #356]	; (8000948 <normalState+0x2a4>)
 80007e2:	6013      	str	r3, [r2, #0]
			time2 = 2;
 80007e4:	4b59      	ldr	r3, [pc, #356]	; (800094c <normalState+0x2a8>)
 80007e6:	2202      	movs	r2, #2
 80007e8:	601a      	str	r2, [r3, #0]
			clearAllLed1();
 80007ea:	f7ff fd77 	bl	80002dc <clearAllLed1>
			clearAllLed2();
 80007ee:	f7ff fd89 	bl	8000304 <clearAllLed2>
			setTimer(2, 25);
 80007f2:	2119      	movs	r1, #25
 80007f4:	2002      	movs	r0, #2
 80007f6:	f000 fe9d 	bl	8001534 <setTimer>
		}
		if(Is_Button_Pressed(0))
 80007fa:	2000      	movs	r0, #0
 80007fc:	f7ff fd3c 	bl	8000278 <Is_Button_Pressed>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	f000 8336 	beq.w	8000e74 <normalState+0x7d0>
		{
			pedestrian_flag = Pedestrian_RED;
 8000808:	4b55      	ldr	r3, [pc, #340]	; (8000960 <normalState+0x2bc>)
 800080a:	2208      	movs	r2, #8
 800080c:	601a      	str	r2, [r3, #0]
			setTimer(3, (timeRed + timeGreen) * 100);
 800080e:	4b4d      	ldr	r3, [pc, #308]	; (8000944 <normalState+0x2a0>)
 8000810:	681a      	ldr	r2, [r3, #0]
 8000812:	4b4b      	ldr	r3, [pc, #300]	; (8000940 <normalState+0x29c>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4413      	add	r3, r2
 8000818:	2264      	movs	r2, #100	; 0x64
 800081a:	fb02 f303 	mul.w	r3, r2, r3
 800081e:	4619      	mov	r1, r3
 8000820:	2003      	movs	r0, #3
 8000822:	f000 fe87 	bl	8001534 <setTimer>
		}

		break;
 8000826:	e325      	b.n	8000e74 <normalState+0x7d0>
	case RedAmber:
		displayRed1();
 8000828:	f7ff fd7c 	bl	8000324 <displayRed1>
		displayYellow2();
 800082c:	f7ff fdc6 	bl	80003bc <displayYellow2>

		if(isTimerUp(1) == 1)
 8000830:	2001      	movs	r0, #1
 8000832:	f000 fe6b 	bl	800150c <isTimerUp>
 8000836:	4603      	mov	r3, r0
 8000838:	2b01      	cmp	r3, #1
 800083a:	d12b      	bne.n	8000894 <normalState+0x1f0>
		{	// Update Time
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "\r\n!7SEG1: %d#\r\n",time1), 500);
 800083c:	4b42      	ldr	r3, [pc, #264]	; (8000948 <normalState+0x2a4>)
 800083e:	681a      	ldr	r2, [r3, #0]
 8000840:	1d3b      	adds	r3, r7, #4
 8000842:	4943      	ldr	r1, [pc, #268]	; (8000950 <normalState+0x2ac>)
 8000844:	4618      	mov	r0, r3
 8000846:	f003 fef5 	bl	8004634 <siprintf>
 800084a:	4603      	mov	r3, r0
 800084c:	b29a      	uxth	r2, r3
 800084e:	1d39      	adds	r1, r7, #4
 8000850:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000854:	483f      	ldr	r0, [pc, #252]	; (8000954 <normalState+0x2b0>)
 8000856:	f003 f821 	bl	800389c <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "\r\n!7SEG2: %d#\r\n\n\n",time2), 500);
 800085a:	4b3c      	ldr	r3, [pc, #240]	; (800094c <normalState+0x2a8>)
 800085c:	681a      	ldr	r2, [r3, #0]
 800085e:	1d3b      	adds	r3, r7, #4
 8000860:	493d      	ldr	r1, [pc, #244]	; (8000958 <normalState+0x2b4>)
 8000862:	4618      	mov	r0, r3
 8000864:	f003 fee6 	bl	8004634 <siprintf>
 8000868:	4603      	mov	r3, r0
 800086a:	b29a      	uxth	r2, r3
 800086c:	1d39      	adds	r1, r7, #4
 800086e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000872:	4838      	ldr	r0, [pc, #224]	; (8000954 <normalState+0x2b0>)
 8000874:	f003 f812 	bl	800389c <HAL_UART_Transmit>
			time1--;
 8000878:	4b33      	ldr	r3, [pc, #204]	; (8000948 <normalState+0x2a4>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	3b01      	subs	r3, #1
 800087e:	4a32      	ldr	r2, [pc, #200]	; (8000948 <normalState+0x2a4>)
 8000880:	6013      	str	r3, [r2, #0]
			time2--;
 8000882:	4b32      	ldr	r3, [pc, #200]	; (800094c <normalState+0x2a8>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	3b01      	subs	r3, #1
 8000888:	4a30      	ldr	r2, [pc, #192]	; (800094c <normalState+0x2a8>)
 800088a:	6013      	str	r3, [r2, #0]
			setTimer(1, 100);
 800088c:	2164      	movs	r1, #100	; 0x64
 800088e:	2001      	movs	r0, #1
 8000890:	f000 fe50 	bl	8001534 <setTimer>
		}

		if(isTimerUp(0)==1)
 8000894:	2000      	movs	r0, #0
 8000896:	f000 fe39 	bl	800150c <isTimerUp>
 800089a:	4603      	mov	r3, r0
 800089c:	2b01      	cmp	r3, #1
 800089e:	d11e      	bne.n	80008de <normalState+0x23a>
		{	// Transit State
			status = GreenRed;
 80008a0:	4b26      	ldr	r3, [pc, #152]	; (800093c <normalState+0x298>)
 80008a2:	2203      	movs	r2, #3
 80008a4:	601a      	str	r2, [r3, #0]
			setTimer(0, timeGreen * 100);
 80008a6:	4b26      	ldr	r3, [pc, #152]	; (8000940 <normalState+0x29c>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	2264      	movs	r2, #100	; 0x64
 80008ac:	fb02 f303 	mul.w	r3, r2, r3
 80008b0:	4619      	mov	r1, r3
 80008b2:	2000      	movs	r0, #0
 80008b4:	f000 fe3e 	bl	8001534 <setTimer>
			setTimer(1, 1);
 80008b8:	2101      	movs	r1, #1
 80008ba:	2001      	movs	r0, #1
 80008bc:	f000 fe3a 	bl	8001534 <setTimer>
			time1 = timeGreen;
 80008c0:	4b1f      	ldr	r3, [pc, #124]	; (8000940 <normalState+0x29c>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a20      	ldr	r2, [pc, #128]	; (8000948 <normalState+0x2a4>)
 80008c6:	6013      	str	r3, [r2, #0]
			time2 = timeRed;
 80008c8:	4b1e      	ldr	r3, [pc, #120]	; (8000944 <normalState+0x2a0>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a1f      	ldr	r2, [pc, #124]	; (800094c <normalState+0x2a8>)
 80008ce:	6013      	str	r3, [r2, #0]
			if(pedestrian_flag == Pedestrian_RED)
 80008d0:	4b23      	ldr	r3, [pc, #140]	; (8000960 <normalState+0x2bc>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2b08      	cmp	r3, #8
 80008d6:	d102      	bne.n	80008de <normalState+0x23a>
				pedestrian_flag = Pedestrian_GREEN;
 80008d8:	4b21      	ldr	r3, [pc, #132]	; (8000960 <normalState+0x2bc>)
 80008da:	2209      	movs	r2, #9
 80008dc:	601a      	str	r2, [r3, #0]
		}


		if(Is_Button_Pressed(1))
 80008de:	2001      	movs	r0, #1
 80008e0:	f7ff fcca 	bl	8000278 <Is_Button_Pressed>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d011      	beq.n	800090e <normalState+0x26a>
		{
			status = ManRed;
 80008ea:	4b14      	ldr	r3, [pc, #80]	; (800093c <normalState+0x298>)
 80008ec:	220a      	movs	r2, #10
 80008ee:	601a      	str	r2, [r3, #0]
			time1 = timeRed;
 80008f0:	4b14      	ldr	r3, [pc, #80]	; (8000944 <normalState+0x2a0>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a14      	ldr	r2, [pc, #80]	; (8000948 <normalState+0x2a4>)
 80008f6:	6013      	str	r3, [r2, #0]
			time2 = 2;
 80008f8:	4b14      	ldr	r3, [pc, #80]	; (800094c <normalState+0x2a8>)
 80008fa:	2202      	movs	r2, #2
 80008fc:	601a      	str	r2, [r3, #0]
			clearAllLed1();
 80008fe:	f7ff fced 	bl	80002dc <clearAllLed1>
			clearAllLed2();
 8000902:	f7ff fcff 	bl	8000304 <clearAllLed2>
			setTimer(2, 25);
 8000906:	2119      	movs	r1, #25
 8000908:	2002      	movs	r0, #2
 800090a:	f000 fe13 	bl	8001534 <setTimer>
		}

		if(Is_Button_Pressed(0))
 800090e:	2000      	movs	r0, #0
 8000910:	f7ff fcb2 	bl	8000278 <Is_Button_Pressed>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	f000 82ae 	beq.w	8000e78 <normalState+0x7d4>
		{
			pedestrian_flag = Pedestrian_RED;
 800091c:	4b10      	ldr	r3, [pc, #64]	; (8000960 <normalState+0x2bc>)
 800091e:	2208      	movs	r2, #8
 8000920:	601a      	str	r2, [r3, #0]
			setTimer(3, (timeRed + timeGreen) * 100);
 8000922:	4b08      	ldr	r3, [pc, #32]	; (8000944 <normalState+0x2a0>)
 8000924:	681a      	ldr	r2, [r3, #0]
 8000926:	4b06      	ldr	r3, [pc, #24]	; (8000940 <normalState+0x29c>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4413      	add	r3, r2
 800092c:	2264      	movs	r2, #100	; 0x64
 800092e:	fb02 f303 	mul.w	r3, r2, r3
 8000932:	4619      	mov	r1, r3
 8000934:	2003      	movs	r0, #3
 8000936:	f000 fdfd 	bl	8001534 <setTimer>
		}

		break;
 800093a:	e29d      	b.n	8000e78 <normalState+0x7d4>
 800093c:	200000f0 	.word	0x200000f0
 8000940:	2000002c 	.word	0x2000002c
 8000944:	20000024 	.word	0x20000024
 8000948:	2000010c 	.word	0x2000010c
 800094c:	200000f4 	.word	0x200000f4
 8000950:	08004d54 	.word	0x08004d54
 8000954:	200001a0 	.word	0x200001a0
 8000958:	08004d64 	.word	0x08004d64
 800095c:	20000028 	.word	0x20000028
 8000960:	20000030 	.word	0x20000030
	case GreenRed:
		displayGreen1();
 8000964:	f7ff fd06 	bl	8000374 <displayGreen1>
		displayRed2();
 8000968:	f7ff fd18 	bl	800039c <displayRed2>
		if(isTimerUp(1)==1)
 800096c:	2001      	movs	r0, #1
 800096e:	f000 fdcd 	bl	800150c <isTimerUp>
 8000972:	4603      	mov	r3, r0
 8000974:	2b01      	cmp	r3, #1
 8000976:	d12b      	bne.n	80009d0 <normalState+0x32c>
		{	// Update Time
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "\r\n!7SEG1: %d#\r\n",time1), 500);
 8000978:	4ba8      	ldr	r3, [pc, #672]	; (8000c1c <normalState+0x578>)
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	1d3b      	adds	r3, r7, #4
 800097e:	49a8      	ldr	r1, [pc, #672]	; (8000c20 <normalState+0x57c>)
 8000980:	4618      	mov	r0, r3
 8000982:	f003 fe57 	bl	8004634 <siprintf>
 8000986:	4603      	mov	r3, r0
 8000988:	b29a      	uxth	r2, r3
 800098a:	1d39      	adds	r1, r7, #4
 800098c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000990:	48a4      	ldr	r0, [pc, #656]	; (8000c24 <normalState+0x580>)
 8000992:	f002 ff83 	bl	800389c <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "\r\n!7SEG2: %d#\r\n\n\n",time2), 500);
 8000996:	4ba4      	ldr	r3, [pc, #656]	; (8000c28 <normalState+0x584>)
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	1d3b      	adds	r3, r7, #4
 800099c:	49a3      	ldr	r1, [pc, #652]	; (8000c2c <normalState+0x588>)
 800099e:	4618      	mov	r0, r3
 80009a0:	f003 fe48 	bl	8004634 <siprintf>
 80009a4:	4603      	mov	r3, r0
 80009a6:	b29a      	uxth	r2, r3
 80009a8:	1d39      	adds	r1, r7, #4
 80009aa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80009ae:	489d      	ldr	r0, [pc, #628]	; (8000c24 <normalState+0x580>)
 80009b0:	f002 ff74 	bl	800389c <HAL_UART_Transmit>
			setTimer(1, 100);
 80009b4:	2164      	movs	r1, #100	; 0x64
 80009b6:	2001      	movs	r0, #1
 80009b8:	f000 fdbc 	bl	8001534 <setTimer>
			time1--;
 80009bc:	4b97      	ldr	r3, [pc, #604]	; (8000c1c <normalState+0x578>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	3b01      	subs	r3, #1
 80009c2:	4a96      	ldr	r2, [pc, #600]	; (8000c1c <normalState+0x578>)
 80009c4:	6013      	str	r3, [r2, #0]
			time2--;
 80009c6:	4b98      	ldr	r3, [pc, #608]	; (8000c28 <normalState+0x584>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	3b01      	subs	r3, #1
 80009cc:	4a96      	ldr	r2, [pc, #600]	; (8000c28 <normalState+0x584>)
 80009ce:	6013      	str	r3, [r2, #0]
		}

		if(isTimerUp(0) == 1)
 80009d0:	2000      	movs	r0, #0
 80009d2:	f000 fd9b 	bl	800150c <isTimerUp>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d117      	bne.n	8000a0c <normalState+0x368>
		{	// Transit State
			status = AmberRed;
 80009dc:	4b94      	ldr	r3, [pc, #592]	; (8000c30 <normalState+0x58c>)
 80009de:	2204      	movs	r2, #4
 80009e0:	601a      	str	r2, [r3, #0]
			setTimer(0, timeYellow * 100);
 80009e2:	4b94      	ldr	r3, [pc, #592]	; (8000c34 <normalState+0x590>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	2264      	movs	r2, #100	; 0x64
 80009e8:	fb02 f303 	mul.w	r3, r2, r3
 80009ec:	4619      	mov	r1, r3
 80009ee:	2000      	movs	r0, #0
 80009f0:	f000 fda0 	bl	8001534 <setTimer>
			setTimer(1, 1);
 80009f4:	2101      	movs	r1, #1
 80009f6:	2001      	movs	r0, #1
 80009f8:	f000 fd9c 	bl	8001534 <setTimer>
			time1 = timeYellow;
 80009fc:	4b8d      	ldr	r3, [pc, #564]	; (8000c34 <normalState+0x590>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a86      	ldr	r2, [pc, #536]	; (8000c1c <normalState+0x578>)
 8000a02:	6013      	str	r3, [r2, #0]
			time2 = timeYellow;
 8000a04:	4b8b      	ldr	r3, [pc, #556]	; (8000c34 <normalState+0x590>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a87      	ldr	r2, [pc, #540]	; (8000c28 <normalState+0x584>)
 8000a0a:	6013      	str	r3, [r2, #0]
		}

		if(timeYellow < 5 && time1 == 5 - timeYellow)
 8000a0c:	4b89      	ldr	r3, [pc, #548]	; (8000c34 <normalState+0x590>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2b04      	cmp	r3, #4
 8000a12:	dc0b      	bgt.n	8000a2c <normalState+0x388>
 8000a14:	4b87      	ldr	r3, [pc, #540]	; (8000c34 <normalState+0x590>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f1c3 0205 	rsb	r2, r3, #5
 8000a1c:	4b7f      	ldr	r3, [pc, #508]	; (8000c1c <normalState+0x578>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d103      	bne.n	8000a2c <normalState+0x388>
		{
			setTimer(4, 0);
 8000a24:	2100      	movs	r1, #0
 8000a26:	2004      	movs	r0, #4
 8000a28:	f000 fd84 	bl	8001534 <setTimer>
		}

		if(timeYellow < 5 && time1 <= 5 - timeYellow) {
 8000a2c:	4b81      	ldr	r3, [pc, #516]	; (8000c34 <normalState+0x590>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2b04      	cmp	r3, #4
 8000a32:	dc11      	bgt.n	8000a58 <normalState+0x3b4>
 8000a34:	4b7f      	ldr	r3, [pc, #508]	; (8000c34 <normalState+0x590>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f1c3 0205 	rsb	r2, r3, #5
 8000a3c:	4b77      	ldr	r3, [pc, #476]	; (8000c1c <normalState+0x578>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	db09      	blt.n	8000a58 <normalState+0x3b4>
				buzzerValue= 512*(5- timeYellow - time1);
 8000a44:	4b7b      	ldr	r3, [pc, #492]	; (8000c34 <normalState+0x590>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f1c3 0205 	rsb	r2, r3, #5
 8000a4c:	4b73      	ldr	r3, [pc, #460]	; (8000c1c <normalState+0x578>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	1ad3      	subs	r3, r2, r3
 8000a52:	025b      	lsls	r3, r3, #9
 8000a54:	4a78      	ldr	r2, [pc, #480]	; (8000c38 <normalState+0x594>)
 8000a56:	6013      	str	r3, [r2, #0]
		}

		if(Is_Button_Pressed(1))
 8000a58:	2001      	movs	r0, #1
 8000a5a:	f7ff fc0d 	bl	8000278 <Is_Button_Pressed>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d011      	beq.n	8000a88 <normalState+0x3e4>
		{
			status = ManRed;
 8000a64:	4b72      	ldr	r3, [pc, #456]	; (8000c30 <normalState+0x58c>)
 8000a66:	220a      	movs	r2, #10
 8000a68:	601a      	str	r2, [r3, #0]
			time1 = timeRed;
 8000a6a:	4b74      	ldr	r3, [pc, #464]	; (8000c3c <normalState+0x598>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4a6b      	ldr	r2, [pc, #428]	; (8000c1c <normalState+0x578>)
 8000a70:	6013      	str	r3, [r2, #0]
			time2 = 2;
 8000a72:	4b6d      	ldr	r3, [pc, #436]	; (8000c28 <normalState+0x584>)
 8000a74:	2202      	movs	r2, #2
 8000a76:	601a      	str	r2, [r3, #0]
			clearAllLed1();
 8000a78:	f7ff fc30 	bl	80002dc <clearAllLed1>
			clearAllLed2();
 8000a7c:	f7ff fc42 	bl	8000304 <clearAllLed2>
			setTimer(2, 25);
 8000a80:	2119      	movs	r1, #25
 8000a82:	2002      	movs	r0, #2
 8000a84:	f000 fd56 	bl	8001534 <setTimer>
		}

		if(Is_Button_Pressed(0))
 8000a88:	2000      	movs	r0, #0
 8000a8a:	f7ff fbf5 	bl	8000278 <Is_Button_Pressed>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	f000 81f3 	beq.w	8000e7c <normalState+0x7d8>
		{
			pedestrian_flag = Pedestrian_GREEN;
 8000a96:	4b6a      	ldr	r3, [pc, #424]	; (8000c40 <normalState+0x59c>)
 8000a98:	2209      	movs	r2, #9
 8000a9a:	601a      	str	r2, [r3, #0]
			setTimer(3, (timeRed + timeGreen) * 100);
 8000a9c:	4b67      	ldr	r3, [pc, #412]	; (8000c3c <normalState+0x598>)
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	4b68      	ldr	r3, [pc, #416]	; (8000c44 <normalState+0x5a0>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	2264      	movs	r2, #100	; 0x64
 8000aa8:	fb02 f303 	mul.w	r3, r2, r3
 8000aac:	4619      	mov	r1, r3
 8000aae:	2003      	movs	r0, #3
 8000ab0:	f000 fd40 	bl	8001534 <setTimer>
		}

		break;
 8000ab4:	e1e2      	b.n	8000e7c <normalState+0x7d8>
	case AmberRed:
		displayYellow1();
 8000ab6:	f7ff fc49 	bl	800034c <displayYellow1>
		displayRed2();
 8000aba:	f7ff fc6f 	bl	800039c <displayRed2>
		if(isTimerUp(1) == 1)
 8000abe:	2001      	movs	r0, #1
 8000ac0:	f000 fd24 	bl	800150c <isTimerUp>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d12b      	bne.n	8000b22 <normalState+0x47e>
		{	// Update Time
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "\r\n!7SEG1: %d#\r\n",time1), 500);
 8000aca:	4b54      	ldr	r3, [pc, #336]	; (8000c1c <normalState+0x578>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	4953      	ldr	r1, [pc, #332]	; (8000c20 <normalState+0x57c>)
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f003 fdae 	bl	8004634 <siprintf>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	b29a      	uxth	r2, r3
 8000adc:	1d39      	adds	r1, r7, #4
 8000ade:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ae2:	4850      	ldr	r0, [pc, #320]	; (8000c24 <normalState+0x580>)
 8000ae4:	f002 feda 	bl	800389c <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "\r\n!7SEG2: %d#\r\n\n\n",time2), 500);
 8000ae8:	4b4f      	ldr	r3, [pc, #316]	; (8000c28 <normalState+0x584>)
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	1d3b      	adds	r3, r7, #4
 8000aee:	494f      	ldr	r1, [pc, #316]	; (8000c2c <normalState+0x588>)
 8000af0:	4618      	mov	r0, r3
 8000af2:	f003 fd9f 	bl	8004634 <siprintf>
 8000af6:	4603      	mov	r3, r0
 8000af8:	b29a      	uxth	r2, r3
 8000afa:	1d39      	adds	r1, r7, #4
 8000afc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b00:	4848      	ldr	r0, [pc, #288]	; (8000c24 <normalState+0x580>)
 8000b02:	f002 fecb 	bl	800389c <HAL_UART_Transmit>
			time1--;
 8000b06:	4b45      	ldr	r3, [pc, #276]	; (8000c1c <normalState+0x578>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	3b01      	subs	r3, #1
 8000b0c:	4a43      	ldr	r2, [pc, #268]	; (8000c1c <normalState+0x578>)
 8000b0e:	6013      	str	r3, [r2, #0]
			time2--;
 8000b10:	4b45      	ldr	r3, [pc, #276]	; (8000c28 <normalState+0x584>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	3b01      	subs	r3, #1
 8000b16:	4a44      	ldr	r2, [pc, #272]	; (8000c28 <normalState+0x584>)
 8000b18:	6013      	str	r3, [r2, #0]
			setTimer(1, 100);
 8000b1a:	2164      	movs	r1, #100	; 0x64
 8000b1c:	2001      	movs	r0, #1
 8000b1e:	f000 fd09 	bl	8001534 <setTimer>
		}

		if(isTimerUp(0) == 1)
 8000b22:	2000      	movs	r0, #0
 8000b24:	f000 fcf2 	bl	800150c <isTimerUp>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d11e      	bne.n	8000b6c <normalState+0x4c8>
		{	// Transit State
			status = RedGreen;
 8000b2e:	4b40      	ldr	r3, [pc, #256]	; (8000c30 <normalState+0x58c>)
 8000b30:	2201      	movs	r2, #1
 8000b32:	601a      	str	r2, [r3, #0]
			setTimer(0, timeGreen * 100);
 8000b34:	4b43      	ldr	r3, [pc, #268]	; (8000c44 <normalState+0x5a0>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2264      	movs	r2, #100	; 0x64
 8000b3a:	fb02 f303 	mul.w	r3, r2, r3
 8000b3e:	4619      	mov	r1, r3
 8000b40:	2000      	movs	r0, #0
 8000b42:	f000 fcf7 	bl	8001534 <setTimer>
			setTimer(1, 1);
 8000b46:	2101      	movs	r1, #1
 8000b48:	2001      	movs	r0, #1
 8000b4a:	f000 fcf3 	bl	8001534 <setTimer>
			time1 = timeRed;
 8000b4e:	4b3b      	ldr	r3, [pc, #236]	; (8000c3c <normalState+0x598>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a32      	ldr	r2, [pc, #200]	; (8000c1c <normalState+0x578>)
 8000b54:	6013      	str	r3, [r2, #0]
			time2 = timeGreen;
 8000b56:	4b3b      	ldr	r3, [pc, #236]	; (8000c44 <normalState+0x5a0>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4a33      	ldr	r2, [pc, #204]	; (8000c28 <normalState+0x584>)
 8000b5c:	6013      	str	r3, [r2, #0]
			if(pedestrian_flag == Pedestrian_GREEN)
 8000b5e:	4b38      	ldr	r3, [pc, #224]	; (8000c40 <normalState+0x59c>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	2b09      	cmp	r3, #9
 8000b64:	d102      	bne.n	8000b6c <normalState+0x4c8>
				pedestrian_flag = Pedestrian_RED;
 8000b66:	4b36      	ldr	r3, [pc, #216]	; (8000c40 <normalState+0x59c>)
 8000b68:	2208      	movs	r2, #8
 8000b6a:	601a      	str	r2, [r3, #0]
		}

		if (timeYellow >= 5 && time1 == 5)
 8000b6c:	4b31      	ldr	r3, [pc, #196]	; (8000c34 <normalState+0x590>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	2b04      	cmp	r3, #4
 8000b72:	dd07      	ble.n	8000b84 <normalState+0x4e0>
 8000b74:	4b29      	ldr	r3, [pc, #164]	; (8000c1c <normalState+0x578>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2b05      	cmp	r3, #5
 8000b7a:	d103      	bne.n	8000b84 <normalState+0x4e0>
		{
			setTimer(4, 0);
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	2004      	movs	r0, #4
 8000b80:	f000 fcd8 	bl	8001534 <setTimer>
		}

		if (timeYellow >=5 && time1 <=5) {
 8000b84:	4b2b      	ldr	r3, [pc, #172]	; (8000c34 <normalState+0x590>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	2b04      	cmp	r3, #4
 8000b8a:	dd0a      	ble.n	8000ba2 <normalState+0x4fe>
 8000b8c:	4b23      	ldr	r3, [pc, #140]	; (8000c1c <normalState+0x578>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	2b05      	cmp	r3, #5
 8000b92:	dc06      	bgt.n	8000ba2 <normalState+0x4fe>
			buzzerValue= 512*(5 - time1);
 8000b94:	4b21      	ldr	r3, [pc, #132]	; (8000c1c <normalState+0x578>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f1c3 0305 	rsb	r3, r3, #5
 8000b9c:	025b      	lsls	r3, r3, #9
 8000b9e:	4a26      	ldr	r2, [pc, #152]	; (8000c38 <normalState+0x594>)
 8000ba0:	6013      	str	r3, [r2, #0]
		}

		if(timeYellow < 5) {
 8000ba2:	4b24      	ldr	r3, [pc, #144]	; (8000c34 <normalState+0x590>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2b04      	cmp	r3, #4
 8000ba8:	dc09      	bgt.n	8000bbe <normalState+0x51a>
			buzzerValue+=256*(5 - time1);
 8000baa:	4b1c      	ldr	r3, [pc, #112]	; (8000c1c <normalState+0x578>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f1c3 0305 	rsb	r3, r3, #5
 8000bb2:	021a      	lsls	r2, r3, #8
 8000bb4:	4b20      	ldr	r3, [pc, #128]	; (8000c38 <normalState+0x594>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4413      	add	r3, r2
 8000bba:	4a1f      	ldr	r2, [pc, #124]	; (8000c38 <normalState+0x594>)
 8000bbc:	6013      	str	r3, [r2, #0]
		}


		if(Is_Button_Pressed(1))
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	f7ff fb5a 	bl	8000278 <Is_Button_Pressed>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d011      	beq.n	8000bee <normalState+0x54a>
		{
			status = ManRed;
 8000bca:	4b19      	ldr	r3, [pc, #100]	; (8000c30 <normalState+0x58c>)
 8000bcc:	220a      	movs	r2, #10
 8000bce:	601a      	str	r2, [r3, #0]
			time1 = timeRed;
 8000bd0:	4b1a      	ldr	r3, [pc, #104]	; (8000c3c <normalState+0x598>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a11      	ldr	r2, [pc, #68]	; (8000c1c <normalState+0x578>)
 8000bd6:	6013      	str	r3, [r2, #0]
			time2 = 2;
 8000bd8:	4b13      	ldr	r3, [pc, #76]	; (8000c28 <normalState+0x584>)
 8000bda:	2202      	movs	r2, #2
 8000bdc:	601a      	str	r2, [r3, #0]
			clearAllLed1();
 8000bde:	f7ff fb7d 	bl	80002dc <clearAllLed1>
			clearAllLed2();
 8000be2:	f7ff fb8f 	bl	8000304 <clearAllLed2>
			setTimer(2, 25);
 8000be6:	2119      	movs	r1, #25
 8000be8:	2002      	movs	r0, #2
 8000bea:	f000 fca3 	bl	8001534 <setTimer>
		}

		if(Is_Button_Pressed(0))
 8000bee:	2000      	movs	r0, #0
 8000bf0:	f7ff fb42 	bl	8000278 <Is_Button_Pressed>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	f000 8142 	beq.w	8000e80 <normalState+0x7dc>
		{
			pedestrian_flag = Pedestrian_GREEN;
 8000bfc:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <normalState+0x59c>)
 8000bfe:	2209      	movs	r2, #9
 8000c00:	601a      	str	r2, [r3, #0]
			setTimer(3, (timeRed + timeGreen) * 100);
 8000c02:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <normalState+0x598>)
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <normalState+0x5a0>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	2264      	movs	r2, #100	; 0x64
 8000c0e:	fb02 f303 	mul.w	r3, r2, r3
 8000c12:	4619      	mov	r1, r3
 8000c14:	2003      	movs	r0, #3
 8000c16:	f000 fc8d 	bl	8001534 <setTimer>
		}

		break;
 8000c1a:	e131      	b.n	8000e80 <normalState+0x7dc>
 8000c1c:	2000010c 	.word	0x2000010c
 8000c20:	08004d54 	.word	0x08004d54
 8000c24:	200001a0 	.word	0x200001a0
 8000c28:	200000f4 	.word	0x200000f4
 8000c2c:	08004d64 	.word	0x08004d64
 8000c30:	200000f0 	.word	0x200000f0
 8000c34:	20000028 	.word	0x20000028
 8000c38:	200000f8 	.word	0x200000f8
 8000c3c:	20000024 	.word	0x20000024
 8000c40:	20000030 	.word	0x20000030
 8000c44:	2000002c 	.word	0x2000002c
	case ManRed:
		if(isTimerUp(2) == 1)
 8000c48:	2002      	movs	r0, #2
 8000c4a:	f000 fc5f 	bl	800150c <isTimerUp>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d105      	bne.n	8000c60 <normalState+0x5bc>
		{
			setTimer(2, 25);
 8000c54:	2119      	movs	r1, #25
 8000c56:	2002      	movs	r0, #2
 8000c58:	f000 fc6c 	bl	8001534 <setTimer>
			toggleRed();
 8000c5c:	f7ff fbce 	bl	80003fc <toggleRed>
		}
		if(Is_Button_Pressed(2))
 8000c60:	2002      	movs	r0, #2
 8000c62:	f7ff fb09 	bl	8000278 <Is_Button_Pressed>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <normalState+0x5cc>
			increase();
 8000c6c:	f7ff fc3c 	bl	80004e8 <increase>

		if(Is_Button_Pressed(3))
 8000c70:	2003      	movs	r0, #3
 8000c72:	f7ff fb01 	bl	8000278 <Is_Button_Pressed>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d008      	beq.n	8000c8e <normalState+0x5ea>
			balance(time1, timeYellow, timeGreen);
 8000c7c:	4b83      	ldr	r3, [pc, #524]	; (8000e8c <normalState+0x7e8>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a83      	ldr	r2, [pc, #524]	; (8000e90 <normalState+0x7ec>)
 8000c82:	6811      	ldr	r1, [r2, #0]
 8000c84:	4a83      	ldr	r2, [pc, #524]	; (8000e94 <normalState+0x7f0>)
 8000c86:	6812      	ldr	r2, [r2, #0]
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff fc41 	bl	8000510 <balance>

		if(Is_Button_Pressed(1))
 8000c8e:	2001      	movs	r0, #1
 8000c90:	f7ff faf2 	bl	8000278 <Is_Button_Pressed>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d011      	beq.n	8000cbe <normalState+0x61a>
		{
			status = ManAmber;
 8000c9a:	4b7f      	ldr	r3, [pc, #508]	; (8000e98 <normalState+0x7f4>)
 8000c9c:	220b      	movs	r2, #11
 8000c9e:	601a      	str	r2, [r3, #0]
			time1 = timeYellow;
 8000ca0:	4b7b      	ldr	r3, [pc, #492]	; (8000e90 <normalState+0x7ec>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a79      	ldr	r2, [pc, #484]	; (8000e8c <normalState+0x7e8>)
 8000ca6:	6013      	str	r3, [r2, #0]
			time2 = 3;
 8000ca8:	4b7c      	ldr	r3, [pc, #496]	; (8000e9c <normalState+0x7f8>)
 8000caa:	2203      	movs	r2, #3
 8000cac:	601a      	str	r2, [r3, #0]
			clearAllLed1();
 8000cae:	f7ff fb15 	bl	80002dc <clearAllLed1>
			clearAllLed2();
 8000cb2:	f7ff fb27 	bl	8000304 <clearAllLed2>
			setTimer(2, 25);
 8000cb6:	2119      	movs	r1, #25
 8000cb8:	2002      	movs	r0, #2
 8000cba:	f000 fc3b 	bl	8001534 <setTimer>
		}
		HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "\r\n!7SEG1: %d#\r\n",time1), 500);
 8000cbe:	4b73      	ldr	r3, [pc, #460]	; (8000e8c <normalState+0x7e8>)
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	1d3b      	adds	r3, r7, #4
 8000cc4:	4976      	ldr	r1, [pc, #472]	; (8000ea0 <normalState+0x7fc>)
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f003 fcb4 	bl	8004634 <siprintf>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	b29a      	uxth	r2, r3
 8000cd0:	1d39      	adds	r1, r7, #4
 8000cd2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000cd6:	4873      	ldr	r0, [pc, #460]	; (8000ea4 <normalState+0x800>)
 8000cd8:	f002 fde0 	bl	800389c <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "\r\n!7SEG2: %d#\r\n\n\n",time2), 500);
 8000cdc:	4b6f      	ldr	r3, [pc, #444]	; (8000e9c <normalState+0x7f8>)
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	1d3b      	adds	r3, r7, #4
 8000ce2:	4971      	ldr	r1, [pc, #452]	; (8000ea8 <normalState+0x804>)
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f003 fca5 	bl	8004634 <siprintf>
 8000cea:	4603      	mov	r3, r0
 8000cec:	b29a      	uxth	r2, r3
 8000cee:	1d39      	adds	r1, r7, #4
 8000cf0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000cf4:	486b      	ldr	r0, [pc, #428]	; (8000ea4 <normalState+0x800>)
 8000cf6:	f002 fdd1 	bl	800389c <HAL_UART_Transmit>
		break;
 8000cfa:	e0c2      	b.n	8000e82 <normalState+0x7de>
	case ManAmber:
		if(isTimerUp(2) == 1)
 8000cfc:	2002      	movs	r0, #2
 8000cfe:	f000 fc05 	bl	800150c <isTimerUp>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d105      	bne.n	8000d14 <normalState+0x670>
		{
			setTimer(2, 25);
 8000d08:	2119      	movs	r1, #25
 8000d0a:	2002      	movs	r0, #2
 8000d0c:	f000 fc12 	bl	8001534 <setTimer>
			toggleYellow();
 8000d10:	f7ff fb86 	bl	8000420 <toggleYellow>
		}
		if(Is_Button_Pressed(2))
 8000d14:	2002      	movs	r0, #2
 8000d16:	f7ff faaf 	bl	8000278 <Is_Button_Pressed>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <normalState+0x680>
			increase();
 8000d20:	f7ff fbe2 	bl	80004e8 <increase>

		if(Is_Button_Pressed(3))
 8000d24:	2003      	movs	r0, #3
 8000d26:	f7ff faa7 	bl	8000278 <Is_Button_Pressed>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d008      	beq.n	8000d42 <normalState+0x69e>
			balance(timeRed, time1, timeGreen);
 8000d30:	4b5e      	ldr	r3, [pc, #376]	; (8000eac <normalState+0x808>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a55      	ldr	r2, [pc, #340]	; (8000e8c <normalState+0x7e8>)
 8000d36:	6811      	ldr	r1, [r2, #0]
 8000d38:	4a56      	ldr	r2, [pc, #344]	; (8000e94 <normalState+0x7f0>)
 8000d3a:	6812      	ldr	r2, [r2, #0]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff fbe7 	bl	8000510 <balance>

		if(Is_Button_Pressed(1))
 8000d42:	2001      	movs	r0, #1
 8000d44:	f7ff fa98 	bl	8000278 <Is_Button_Pressed>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d011      	beq.n	8000d72 <normalState+0x6ce>
		{
			status = ManGreen;
 8000d4e:	4b52      	ldr	r3, [pc, #328]	; (8000e98 <normalState+0x7f4>)
 8000d50:	220c      	movs	r2, #12
 8000d52:	601a      	str	r2, [r3, #0]
			time1 = timeGreen;
 8000d54:	4b4f      	ldr	r3, [pc, #316]	; (8000e94 <normalState+0x7f0>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a4c      	ldr	r2, [pc, #304]	; (8000e8c <normalState+0x7e8>)
 8000d5a:	6013      	str	r3, [r2, #0]
			time2 = 4;
 8000d5c:	4b4f      	ldr	r3, [pc, #316]	; (8000e9c <normalState+0x7f8>)
 8000d5e:	2204      	movs	r2, #4
 8000d60:	601a      	str	r2, [r3, #0]
			clearAllLed1();
 8000d62:	f7ff fabb 	bl	80002dc <clearAllLed1>
			clearAllLed2();
 8000d66:	f7ff facd 	bl	8000304 <clearAllLed2>
			setTimer(2, 25);
 8000d6a:	2119      	movs	r1, #25
 8000d6c:	2002      	movs	r0, #2
 8000d6e:	f000 fbe1 	bl	8001534 <setTimer>
		}
		HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "\r\n!7SEG1: %d#\r\n",time1), 500);
 8000d72:	4b46      	ldr	r3, [pc, #280]	; (8000e8c <normalState+0x7e8>)
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	1d3b      	adds	r3, r7, #4
 8000d78:	4949      	ldr	r1, [pc, #292]	; (8000ea0 <normalState+0x7fc>)
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f003 fc5a 	bl	8004634 <siprintf>
 8000d80:	4603      	mov	r3, r0
 8000d82:	b29a      	uxth	r2, r3
 8000d84:	1d39      	adds	r1, r7, #4
 8000d86:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d8a:	4846      	ldr	r0, [pc, #280]	; (8000ea4 <normalState+0x800>)
 8000d8c:	f002 fd86 	bl	800389c <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "\r\n!7SEG2: %d#\r\n\n\n",time2), 500);
 8000d90:	4b42      	ldr	r3, [pc, #264]	; (8000e9c <normalState+0x7f8>)
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	1d3b      	adds	r3, r7, #4
 8000d96:	4944      	ldr	r1, [pc, #272]	; (8000ea8 <normalState+0x804>)
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f003 fc4b 	bl	8004634 <siprintf>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	b29a      	uxth	r2, r3
 8000da2:	1d39      	adds	r1, r7, #4
 8000da4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000da8:	483e      	ldr	r0, [pc, #248]	; (8000ea4 <normalState+0x800>)
 8000daa:	f002 fd77 	bl	800389c <HAL_UART_Transmit>
		break;
 8000dae:	e068      	b.n	8000e82 <normalState+0x7de>
	case ManGreen:
		if(isTimerUp(2) == 1)
 8000db0:	2002      	movs	r0, #2
 8000db2:	f000 fbab 	bl	800150c <isTimerUp>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d105      	bne.n	8000dc8 <normalState+0x724>
		{
			setTimer(2, 25);
 8000dbc:	2119      	movs	r1, #25
 8000dbe:	2002      	movs	r0, #2
 8000dc0:	f000 fbb8 	bl	8001534 <setTimer>
			toggleGreen();
 8000dc4:	f7ff fb46 	bl	8000454 <toggleGreen>
		}
		if(Is_Button_Pressed(2))
 8000dc8:	2002      	movs	r0, #2
 8000dca:	f7ff fa55 	bl	8000278 <Is_Button_Pressed>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <normalState+0x734>
			increase();
 8000dd4:	f7ff fb88 	bl	80004e8 <increase>

		if(Is_Button_Pressed(3))
 8000dd8:	2003      	movs	r0, #3
 8000dda:	f7ff fa4d 	bl	8000278 <Is_Button_Pressed>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d008      	beq.n	8000df6 <normalState+0x752>
			balance(timeRed, timeYellow, time1);
 8000de4:	4b31      	ldr	r3, [pc, #196]	; (8000eac <normalState+0x808>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a29      	ldr	r2, [pc, #164]	; (8000e90 <normalState+0x7ec>)
 8000dea:	6811      	ldr	r1, [r2, #0]
 8000dec:	4a27      	ldr	r2, [pc, #156]	; (8000e8c <normalState+0x7e8>)
 8000dee:	6812      	ldr	r2, [r2, #0]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff fb8d 	bl	8000510 <balance>

		if(Is_Button_Pressed(1))
 8000df6:	2001      	movs	r0, #1
 8000df8:	f7ff fa3e 	bl	8000278 <Is_Button_Pressed>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d017      	beq.n	8000e32 <normalState+0x78e>
		{
			status = RedGreen;
 8000e02:	4b25      	ldr	r3, [pc, #148]	; (8000e98 <normalState+0x7f4>)
 8000e04:	2201      	movs	r2, #1
 8000e06:	601a      	str	r2, [r3, #0]
			setTimer(0, timeGreen * 100);
 8000e08:	4b22      	ldr	r3, [pc, #136]	; (8000e94 <normalState+0x7f0>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2264      	movs	r2, #100	; 0x64
 8000e0e:	fb02 f303 	mul.w	r3, r2, r3
 8000e12:	4619      	mov	r1, r3
 8000e14:	2000      	movs	r0, #0
 8000e16:	f000 fb8d 	bl	8001534 <setTimer>
			setTimer(1, 1);
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	2001      	movs	r0, #1
 8000e1e:	f000 fb89 	bl	8001534 <setTimer>
			time1 = timeRed;
 8000e22:	4b22      	ldr	r3, [pc, #136]	; (8000eac <normalState+0x808>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a19      	ldr	r2, [pc, #100]	; (8000e8c <normalState+0x7e8>)
 8000e28:	6013      	str	r3, [r2, #0]
			time2 = timeGreen;
 8000e2a:	4b1a      	ldr	r3, [pc, #104]	; (8000e94 <normalState+0x7f0>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a1b      	ldr	r2, [pc, #108]	; (8000e9c <normalState+0x7f8>)
 8000e30:	6013      	str	r3, [r2, #0]
		}
		HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "\r\n!7SEG1: %d#\r\n",time1), 500);
 8000e32:	4b16      	ldr	r3, [pc, #88]	; (8000e8c <normalState+0x7e8>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	1d3b      	adds	r3, r7, #4
 8000e38:	4919      	ldr	r1, [pc, #100]	; (8000ea0 <normalState+0x7fc>)
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f003 fbfa 	bl	8004634 <siprintf>
 8000e40:	4603      	mov	r3, r0
 8000e42:	b29a      	uxth	r2, r3
 8000e44:	1d39      	adds	r1, r7, #4
 8000e46:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000e4a:	4816      	ldr	r0, [pc, #88]	; (8000ea4 <normalState+0x800>)
 8000e4c:	f002 fd26 	bl	800389c <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "\r\n!7SEG2: %d#\r\n\n\n",time2), 500);
 8000e50:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <normalState+0x7f8>)
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	4914      	ldr	r1, [pc, #80]	; (8000ea8 <normalState+0x804>)
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f003 fbeb 	bl	8004634 <siprintf>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	b29a      	uxth	r2, r3
 8000e62:	1d39      	adds	r1, r7, #4
 8000e64:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000e68:	480e      	ldr	r0, [pc, #56]	; (8000ea4 <normalState+0x800>)
 8000e6a:	f002 fd17 	bl	800389c <HAL_UART_Transmit>
		break;
 8000e6e:	e008      	b.n	8000e82 <normalState+0x7de>
	default:
		break;
 8000e70:	bf00      	nop
 8000e72:	e006      	b.n	8000e82 <normalState+0x7de>
		break;
 8000e74:	bf00      	nop
 8000e76:	e004      	b.n	8000e82 <normalState+0x7de>
		break;
 8000e78:	bf00      	nop
 8000e7a:	e002      	b.n	8000e82 <normalState+0x7de>
		break;
 8000e7c:	bf00      	nop
 8000e7e:	e000      	b.n	8000e82 <normalState+0x7de>
		break;
 8000e80:	bf00      	nop
	}
}
 8000e82:	bf00      	nop
 8000e84:	3738      	adds	r7, #56	; 0x38
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	2000010c 	.word	0x2000010c
 8000e90:	20000028 	.word	0x20000028
 8000e94:	2000002c 	.word	0x2000002c
 8000e98:	200000f0 	.word	0x200000f0
 8000e9c:	200000f4 	.word	0x200000f4
 8000ea0:	08004d54 	.word	0x08004d54
 8000ea4:	200001a0 	.word	0x200001a0
 8000ea8:	08004d64 	.word	0x08004d64
 8000eac:	20000024 	.word	0x20000024

08000eb0 <fsm_pedestrian>:
 */

#include "global.h"

void fsm_pedestrian(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
	switch(pedestrian_flag)
 8000eb4:	4b2c      	ldr	r3, [pc, #176]	; (8000f68 <fsm_pedestrian+0xb8>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2b09      	cmp	r3, #9
 8000eba:	d01e      	beq.n	8000efa <fsm_pedestrian+0x4a>
 8000ebc:	2b09      	cmp	r3, #9
 8000ebe:	dc51      	bgt.n	8000f64 <fsm_pedestrian+0xb4>
 8000ec0:	2b07      	cmp	r3, #7
 8000ec2:	d002      	beq.n	8000eca <fsm_pedestrian+0x1a>
 8000ec4:	2b08      	cmp	r3, #8
 8000ec6:	d006      	beq.n	8000ed6 <fsm_pedestrian+0x26>
			if(isTimerUp(5) == 1)
				buzzer(0);

			break;
	}
}
 8000ec8:	e04c      	b.n	8000f64 <fsm_pedestrian+0xb4>
			clearPedestrian();
 8000eca:	f7ff fad1 	bl	8000470 <clearPedestrian>
			buzzer(0);
 8000ece:	2000      	movs	r0, #0
 8000ed0:	f7ff f9f4 	bl	80002bc <buzzer>
			break;
 8000ed4:	e046      	b.n	8000f64 <fsm_pedestrian+0xb4>
			freq = 30;
 8000ed6:	4b25      	ldr	r3, [pc, #148]	; (8000f6c <fsm_pedestrian+0xbc>)
 8000ed8:	221e      	movs	r2, #30
 8000eda:	601a      	str	r2, [r3, #0]
			if(isTimerUp(3) == 1)
 8000edc:	2003      	movs	r0, #3
 8000ede:	f000 fb15 	bl	800150c <isTimerUp>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d102      	bne.n	8000eee <fsm_pedestrian+0x3e>
				pedestrian_flag = Pedestrian_INIT;
 8000ee8:	4b1f      	ldr	r3, [pc, #124]	; (8000f68 <fsm_pedestrian+0xb8>)
 8000eea:	2207      	movs	r2, #7
 8000eec:	601a      	str	r2, [r3, #0]
			displayPedestrianRed();
 8000eee:	f7ff fad3 	bl	8000498 <displayPedestrianRed>
			buzzer(0);
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f7ff f9e2 	bl	80002bc <buzzer>
			break;
 8000ef8:	e034      	b.n	8000f64 <fsm_pedestrian+0xb4>
			if(isTimerUp(3) == 1)
 8000efa:	2003      	movs	r0, #3
 8000efc:	f000 fb06 	bl	800150c <isTimerUp>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d102      	bne.n	8000f0c <fsm_pedestrian+0x5c>
				pedestrian_flag = Pedestrian_INIT;
 8000f06:	4b18      	ldr	r3, [pc, #96]	; (8000f68 <fsm_pedestrian+0xb8>)
 8000f08:	2207      	movs	r2, #7
 8000f0a:	601a      	str	r2, [r3, #0]
			displayPedestrianGreen();
 8000f0c:	f7ff fad8 	bl	80004c0 <displayPedestrianGreen>
			if(isTimerUp(4) == 1)
 8000f10:	2004      	movs	r0, #4
 8000f12:	f000 fafb 	bl	800150c <isTimerUp>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d10e      	bne.n	8000f3a <fsm_pedestrian+0x8a>
				setTimer(5, freq);
 8000f1c:	4b13      	ldr	r3, [pc, #76]	; (8000f6c <fsm_pedestrian+0xbc>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4619      	mov	r1, r3
 8000f22:	2005      	movs	r0, #5
 8000f24:	f000 fb06 	bl	8001534 <setTimer>
				setTimer(4, 100);
 8000f28:	2164      	movs	r1, #100	; 0x64
 8000f2a:	2004      	movs	r0, #4
 8000f2c:	f000 fb02 	bl	8001534 <setTimer>
				freq += 10;
 8000f30:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <fsm_pedestrian+0xbc>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	330a      	adds	r3, #10
 8000f36:	4a0d      	ldr	r2, [pc, #52]	; (8000f6c <fsm_pedestrian+0xbc>)
 8000f38:	6013      	str	r3, [r2, #0]
			if(isTimerUp(5) == 0)
 8000f3a:	2005      	movs	r0, #5
 8000f3c:	f000 fae6 	bl	800150c <isTimerUp>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d104      	bne.n	8000f50 <fsm_pedestrian+0xa0>
				buzzer(buzzerValue);
 8000f46:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <fsm_pedestrian+0xc0>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff f9b6 	bl	80002bc <buzzer>
			if(isTimerUp(5) == 1)
 8000f50:	2005      	movs	r0, #5
 8000f52:	f000 fadb 	bl	800150c <isTimerUp>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d102      	bne.n	8000f62 <fsm_pedestrian+0xb2>
				buzzer(0);
 8000f5c:	2000      	movs	r0, #0
 8000f5e:	f7ff f9ad 	bl	80002bc <buzzer>
			break;
 8000f62:	bf00      	nop
}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000030 	.word	0x20000030
 8000f6c:	20000034 	.word	0x20000034
 8000f70:	200000f8 	.word	0x200000f8

08000f74 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
	timerRun();
 8000f7c:	f000 faf2 	bl	8001564 <timerRun>
	SCH_Update();
 8000f80:	f000 fa7c 	bl	800147c <SCH_Update>
	Button_Reading();
 8000f84:	f7ff f8e2 	bl	800014c <Button_Reading>
}
 8000f88:	bf00      	nop
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f94:	f000 fcb4 	bl	8001900 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f98:	f000 f824 	bl	8000fe4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f9c:	f000 f950 	bl	8001240 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000fa0:	f000 f8ae 	bl	8001100 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000fa4:	f000 f860 	bl	8001068 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000fa8:	f000 f920 	bl	80011ec <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

 HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000fac:	2100      	movs	r1, #0
 8000fae:	4809      	ldr	r0, [pc, #36]	; (8000fd4 <main+0x44>)
 8000fb0:	f001 fdb8 	bl	8002b24 <HAL_TIM_PWM_Start>
 HAL_TIM_Base_Start_IT(&htim2);
 8000fb4:	4808      	ldr	r0, [pc, #32]	; (8000fd8 <main+0x48>)
 8000fb6:	f001 fd0b 	bl	80029d0 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

// SCH_Add_Task(timerRun, 0, 1);
 SCH_Add_Task(normalState, 1, 1);
 8000fba:	2201      	movs	r2, #1
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	4807      	ldr	r0, [pc, #28]	; (8000fdc <main+0x4c>)
 8000fc0:	f000 fa3e 	bl	8001440 <SCH_Add_Task>
 SCH_Add_Task(fsm_pedestrian, 1, 1);
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <main+0x50>)
 8000fca:	f000 fa39 	bl	8001440 <SCH_Add_Task>

  while (1)
  {
    /* USER CODE END WHILE */
	  SCH_Dispatch_Tasks();
 8000fce:	f000 fa71 	bl	80014b4 <SCH_Dispatch_Tasks>
 8000fd2:	e7fc      	b.n	8000fce <main+0x3e>
 8000fd4:	20000110 	.word	0x20000110
 8000fd8:	20000158 	.word	0x20000158
 8000fdc:	080006a5 	.word	0x080006a5
 8000fe0:	08000eb1 	.word	0x08000eb1

08000fe4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b090      	sub	sp, #64	; 0x40
 8000fe8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fea:	f107 0318 	add.w	r3, r7, #24
 8000fee:	2228      	movs	r2, #40	; 0x28
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f003 fa60 	bl	80044b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff8:	1d3b      	adds	r3, r7, #4
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	605a      	str	r2, [r3, #4]
 8001000:	609a      	str	r2, [r3, #8]
 8001002:	60da      	str	r2, [r3, #12]
 8001004:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001006:	2302      	movs	r3, #2
 8001008:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800100a:	2301      	movs	r3, #1
 800100c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800100e:	2310      	movs	r3, #16
 8001010:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001012:	2302      	movs	r3, #2
 8001014:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001016:	2300      	movs	r3, #0
 8001018:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800101a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800101e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001020:	f107 0318 	add.w	r3, r7, #24
 8001024:	4618      	mov	r0, r3
 8001026:	f001 f875 	bl	8002114 <HAL_RCC_OscConfig>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001030:	f000 f974 	bl	800131c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001034:	230f      	movs	r3, #15
 8001036:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001038:	2302      	movs	r3, #2
 800103a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800103c:	2300      	movs	r3, #0
 800103e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001040:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001044:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001046:	2300      	movs	r3, #0
 8001048:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	2102      	movs	r1, #2
 800104e:	4618      	mov	r0, r3
 8001050:	f001 fae0 	bl	8002614 <HAL_RCC_ClockConfig>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800105a:	f000 f95f 	bl	800131c <Error_Handler>
  }
}
 800105e:	bf00      	nop
 8001060:	3740      	adds	r7, #64	; 0x40
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
	...

08001068 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800106e:	f107 0308 	add.w	r3, r7, #8
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]
 800107a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800107c:	463b      	mov	r3, r7
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001084:	4b1d      	ldr	r3, [pc, #116]	; (80010fc <MX_TIM2_Init+0x94>)
 8001086:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800108a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6399;
 800108c:	4b1b      	ldr	r3, [pc, #108]	; (80010fc <MX_TIM2_Init+0x94>)
 800108e:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8001092:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001094:	4b19      	ldr	r3, [pc, #100]	; (80010fc <MX_TIM2_Init+0x94>)
 8001096:	2200      	movs	r2, #0
 8001098:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 800109a:	4b18      	ldr	r3, [pc, #96]	; (80010fc <MX_TIM2_Init+0x94>)
 800109c:	2263      	movs	r2, #99	; 0x63
 800109e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010a0:	4b16      	ldr	r3, [pc, #88]	; (80010fc <MX_TIM2_Init+0x94>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010a6:	4b15      	ldr	r3, [pc, #84]	; (80010fc <MX_TIM2_Init+0x94>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010ac:	4813      	ldr	r0, [pc, #76]	; (80010fc <MX_TIM2_Init+0x94>)
 80010ae:	f001 fc3f 	bl	8002930 <HAL_TIM_Base_Init>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80010b8:	f000 f930 	bl	800131c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010c2:	f107 0308 	add.w	r3, r7, #8
 80010c6:	4619      	mov	r1, r3
 80010c8:	480c      	ldr	r0, [pc, #48]	; (80010fc <MX_TIM2_Init+0x94>)
 80010ca:	f001 ff97 	bl	8002ffc <HAL_TIM_ConfigClockSource>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80010d4:	f000 f922 	bl	800131c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010d8:	2300      	movs	r3, #0
 80010da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010dc:	2300      	movs	r3, #0
 80010de:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010e0:	463b      	mov	r3, r7
 80010e2:	4619      	mov	r1, r3
 80010e4:	4805      	ldr	r0, [pc, #20]	; (80010fc <MX_TIM2_Init+0x94>)
 80010e6:	f002 fb19 	bl	800371c <HAL_TIMEx_MasterConfigSynchronization>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80010f0:	f000 f914 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010f4:	bf00      	nop
 80010f6:	3718      	adds	r7, #24
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000158 	.word	0x20000158

08001100 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08e      	sub	sp, #56	; 0x38
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001106:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]
 8001110:	609a      	str	r2, [r3, #8]
 8001112:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001114:	f107 0320 	add.w	r3, r7, #32
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]
 800112c:	615a      	str	r2, [r3, #20]
 800112e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001130:	4b2c      	ldr	r3, [pc, #176]	; (80011e4 <MX_TIM3_Init+0xe4>)
 8001132:	4a2d      	ldr	r2, [pc, #180]	; (80011e8 <MX_TIM3_Init+0xe8>)
 8001134:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8001136:	4b2b      	ldr	r3, [pc, #172]	; (80011e4 <MX_TIM3_Init+0xe4>)
 8001138:	223f      	movs	r2, #63	; 0x3f
 800113a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800113c:	4b29      	ldr	r3, [pc, #164]	; (80011e4 <MX_TIM3_Init+0xe4>)
 800113e:	2200      	movs	r2, #0
 8001140:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001142:	4b28      	ldr	r3, [pc, #160]	; (80011e4 <MX_TIM3_Init+0xe4>)
 8001144:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001148:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800114a:	4b26      	ldr	r3, [pc, #152]	; (80011e4 <MX_TIM3_Init+0xe4>)
 800114c:	2200      	movs	r2, #0
 800114e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001150:	4b24      	ldr	r3, [pc, #144]	; (80011e4 <MX_TIM3_Init+0xe4>)
 8001152:	2200      	movs	r2, #0
 8001154:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001156:	4823      	ldr	r0, [pc, #140]	; (80011e4 <MX_TIM3_Init+0xe4>)
 8001158:	f001 fbea 	bl	8002930 <HAL_TIM_Base_Init>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001162:	f000 f8db 	bl	800131c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001166:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800116a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800116c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001170:	4619      	mov	r1, r3
 8001172:	481c      	ldr	r0, [pc, #112]	; (80011e4 <MX_TIM3_Init+0xe4>)
 8001174:	f001 ff42 	bl	8002ffc <HAL_TIM_ConfigClockSource>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800117e:	f000 f8cd 	bl	800131c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001182:	4818      	ldr	r0, [pc, #96]	; (80011e4 <MX_TIM3_Init+0xe4>)
 8001184:	f001 fc76 	bl	8002a74 <HAL_TIM_PWM_Init>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800118e:	f000 f8c5 	bl	800131c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001192:	2300      	movs	r3, #0
 8001194:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001196:	2300      	movs	r3, #0
 8001198:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800119a:	f107 0320 	add.w	r3, r7, #32
 800119e:	4619      	mov	r1, r3
 80011a0:	4810      	ldr	r0, [pc, #64]	; (80011e4 <MX_TIM3_Init+0xe4>)
 80011a2:	f002 fabb 	bl	800371c <HAL_TIMEx_MasterConfigSynchronization>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80011ac:	f000 f8b6 	bl	800131c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011b0:	2360      	movs	r3, #96	; 0x60
 80011b2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011b8:	2300      	movs	r3, #0
 80011ba:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011c0:	1d3b      	adds	r3, r7, #4
 80011c2:	2200      	movs	r2, #0
 80011c4:	4619      	mov	r1, r3
 80011c6:	4807      	ldr	r0, [pc, #28]	; (80011e4 <MX_TIM3_Init+0xe4>)
 80011c8:	f001 fe56 	bl	8002e78 <HAL_TIM_PWM_ConfigChannel>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80011d2:	f000 f8a3 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80011d6:	4803      	ldr	r0, [pc, #12]	; (80011e4 <MX_TIM3_Init+0xe4>)
 80011d8:	f000 fa66 	bl	80016a8 <HAL_TIM_MspPostInit>

}
 80011dc:	bf00      	nop
 80011de:	3738      	adds	r7, #56	; 0x38
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20000110 	.word	0x20000110
 80011e8:	40000400 	.word	0x40000400

080011ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011f0:	4b11      	ldr	r3, [pc, #68]	; (8001238 <MX_USART2_UART_Init+0x4c>)
 80011f2:	4a12      	ldr	r2, [pc, #72]	; (800123c <MX_USART2_UART_Init+0x50>)
 80011f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80011f6:	4b10      	ldr	r3, [pc, #64]	; (8001238 <MX_USART2_UART_Init+0x4c>)
 80011f8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80011fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011fe:	4b0e      	ldr	r3, [pc, #56]	; (8001238 <MX_USART2_UART_Init+0x4c>)
 8001200:	2200      	movs	r2, #0
 8001202:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001204:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <MX_USART2_UART_Init+0x4c>)
 8001206:	2200      	movs	r2, #0
 8001208:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800120a:	4b0b      	ldr	r3, [pc, #44]	; (8001238 <MX_USART2_UART_Init+0x4c>)
 800120c:	2200      	movs	r2, #0
 800120e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001210:	4b09      	ldr	r3, [pc, #36]	; (8001238 <MX_USART2_UART_Init+0x4c>)
 8001212:	220c      	movs	r2, #12
 8001214:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001216:	4b08      	ldr	r3, [pc, #32]	; (8001238 <MX_USART2_UART_Init+0x4c>)
 8001218:	2200      	movs	r2, #0
 800121a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800121c:	4b06      	ldr	r3, [pc, #24]	; (8001238 <MX_USART2_UART_Init+0x4c>)
 800121e:	2200      	movs	r2, #0
 8001220:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001222:	4805      	ldr	r0, [pc, #20]	; (8001238 <MX_USART2_UART_Init+0x4c>)
 8001224:	f002 faea 	bl	80037fc <HAL_UART_Init>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800122e:	f000 f875 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	200001a0 	.word	0x200001a0
 800123c:	40004400 	.word	0x40004400

08001240 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001246:	f107 0308 	add.w	r3, r7, #8
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	609a      	str	r2, [r3, #8]
 8001252:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001254:	4b2e      	ldr	r3, [pc, #184]	; (8001310 <MX_GPIO_Init+0xd0>)
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	4a2d      	ldr	r2, [pc, #180]	; (8001310 <MX_GPIO_Init+0xd0>)
 800125a:	f043 0304 	orr.w	r3, r3, #4
 800125e:	6193      	str	r3, [r2, #24]
 8001260:	4b2b      	ldr	r3, [pc, #172]	; (8001310 <MX_GPIO_Init+0xd0>)
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	f003 0304 	and.w	r3, r3, #4
 8001268:	607b      	str	r3, [r7, #4]
 800126a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800126c:	4b28      	ldr	r3, [pc, #160]	; (8001310 <MX_GPIO_Init+0xd0>)
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	4a27      	ldr	r2, [pc, #156]	; (8001310 <MX_GPIO_Init+0xd0>)
 8001272:	f043 0308 	orr.w	r3, r3, #8
 8001276:	6193      	str	r3, [r2, #24]
 8001278:	4b25      	ldr	r3, [pc, #148]	; (8001310 <MX_GPIO_Init+0xd0>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	f003 0308 	and.w	r3, r3, #8
 8001280:	603b      	str	r3, [r7, #0]
 8001282:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8001284:	2200      	movs	r2, #0
 8001286:	f44f 6187 	mov.w	r1, #1080	; 0x438
 800128a:	4822      	ldr	r0, [pc, #136]	; (8001314 <MX_GPIO_Init+0xd4>)
 800128c:	f000 fef5 	bl	800207a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_Pin|D2_Pin, GPIO_PIN_RESET);
 8001290:	2200      	movs	r2, #0
 8001292:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8001296:	4820      	ldr	r0, [pc, #128]	; (8001318 <MX_GPIO_Init+0xd8>)
 8001298:	f000 feef 	bl	800207a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin;
 800129c:	2313      	movs	r3, #19
 800129e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a0:	2300      	movs	r3, #0
 80012a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a8:	f107 0308 	add.w	r3, r7, #8
 80012ac:	4619      	mov	r1, r3
 80012ae:	481a      	ldr	r0, [pc, #104]	; (8001318 <MX_GPIO_Init+0xd8>)
 80012b0:	f000 fd48 	bl	8001d44 <HAL_GPIO_Init>

  /*Configure GPIO pin : A3_Pin */
  GPIO_InitStruct.Pin = A3_Pin;
 80012b4:	2301      	movs	r3, #1
 80012b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b8:	2300      	movs	r3, #0
 80012ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(A3_GPIO_Port, &GPIO_InitStruct);
 80012c0:	f107 0308 	add.w	r3, r7, #8
 80012c4:	4619      	mov	r1, r3
 80012c6:	4813      	ldr	r0, [pc, #76]	; (8001314 <MX_GPIO_Init+0xd4>)
 80012c8:	f000 fd3c 	bl	8001d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin;
 80012cc:	f44f 6387 	mov.w	r3, #1080	; 0x438
 80012d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d2:	2301      	movs	r3, #1
 80012d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012da:	2302      	movs	r3, #2
 80012dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012de:	f107 0308 	add.w	r3, r7, #8
 80012e2:	4619      	mov	r1, r3
 80012e4:	480b      	ldr	r0, [pc, #44]	; (8001314 <MX_GPIO_Init+0xd4>)
 80012e6:	f000 fd2d 	bl	8001d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D2_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D2_Pin;
 80012ea:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80012ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f0:	2301      	movs	r3, #1
 80012f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f8:	2302      	movs	r3, #2
 80012fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fc:	f107 0308 	add.w	r3, r7, #8
 8001300:	4619      	mov	r1, r3
 8001302:	4805      	ldr	r0, [pc, #20]	; (8001318 <MX_GPIO_Init+0xd8>)
 8001304:	f000 fd1e 	bl	8001d44 <HAL_GPIO_Init>

}
 8001308:	bf00      	nop
 800130a:	3718      	adds	r7, #24
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40021000 	.word	0x40021000
 8001314:	40010c00 	.word	0x40010c00
 8001318:	40010800 	.word	0x40010800

0800131c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001320:	b672      	cpsid	i
}
 8001322:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001324:	e7fe      	b.n	8001324 <Error_Handler+0x8>
	...

08001328 <AddNode>:
{
	head = NULL;
}

void AddNode(sTask NewTask)
{
 8001328:	b590      	push	{r4, r7, lr}
 800132a:	b087      	sub	sp, #28
 800132c:	af00      	add	r7, sp, #0
 800132e:	463c      	mov	r4, r7
 8001330:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	struct Node* NewNode = (struct Node*)malloc(sizeof(struct Node));
 8001334:	2014      	movs	r0, #20
 8001336:	f003 f8af 	bl	8004498 <malloc>
 800133a:	4603      	mov	r3, r0
 800133c:	613b      	str	r3, [r7, #16]
	NewNode -> data.pTask = NewTask.pTask;
 800133e:	683a      	ldr	r2, [r7, #0]
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	601a      	str	r2, [r3, #0]
	NewNode -> data.Delay = NewTask.Delay;
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	605a      	str	r2, [r3, #4]
	NewNode -> data.Period = NewTask.Period;
 800134a:	68ba      	ldr	r2, [r7, #8]
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	609a      	str	r2, [r3, #8]
	NewNode -> data.RunMe = NewTask.RunMe;
 8001350:	7b3a      	ldrb	r2, [r7, #12]
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	731a      	strb	r2, [r3, #12]
	NewNode -> next = NULL;
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	2200      	movs	r2, #0
 800135a:	611a      	str	r2, [r3, #16]

	// List is empty, just addNode
	if(head == NULL)
 800135c:	4b2b      	ldr	r3, [pc, #172]	; (800140c <AddNode+0xe4>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d103      	bne.n	800136c <AddNode+0x44>
	{
		head = NewNode;
 8001364:	4a29      	ldr	r2, [pc, #164]	; (800140c <AddNode+0xe4>)
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	6013      	str	r3, [r2, #0]
		return;
 800136a:	e04c      	b.n	8001406 <AddNode+0xde>
	}
	struct Node* temp = head;
 800136c:	4b27      	ldr	r3, [pc, #156]	; (800140c <AddNode+0xe4>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	617b      	str	r3, [r7, #20]

	// If the list has A5 B3 C2 Adding D3  ->  D3 A2 B3 C2
	if(NewNode -> data.Delay < temp -> data.Delay )
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	685a      	ldr	r2, [r3, #4]
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	429a      	cmp	r2, r3
 800137c:	d21e      	bcs.n	80013bc <AddNode+0x94>
	{
		temp -> data.Delay -= NewNode -> data.Delay;
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	685a      	ldr	r2, [r3, #4]
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	1ad2      	subs	r2, r2, r3
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	605a      	str	r2, [r3, #4]
		NewNode -> next = temp;
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	697a      	ldr	r2, [r7, #20]
 8001390:	611a      	str	r2, [r3, #16]
		head = NewNode;
 8001392:	4a1e      	ldr	r2, [pc, #120]	; (800140c <AddNode+0xe4>)
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	6013      	str	r3, [r2, #0]
		return;
 8001398:	e035      	b.n	8001406 <AddNode+0xde>
	}

	// If the list has A5 B3 C2 Adding D9  ->  A5 B3 D1 C1
	while(temp -> next != NULL)
	{
		NewNode -> data.Delay -= temp -> data.Delay;
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	685a      	ldr	r2, [r3, #4]
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	1ad2      	subs	r2, r2, r3
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	605a      	str	r2, [r3, #4]
		if(NewNode -> data.Delay <= temp -> next -> data.Delay)
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	685a      	ldr	r2, [r3, #4]
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	691b      	ldr	r3, [r3, #16]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d907      	bls.n	80013c6 <AddNode+0x9e>
			break;

		temp = temp -> next;
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	691b      	ldr	r3, [r3, #16]
 80013ba:	617b      	str	r3, [r7, #20]
	while(temp -> next != NULL)
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	691b      	ldr	r3, [r3, #16]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d1ea      	bne.n	800139a <AddNode+0x72>
 80013c4:	e000      	b.n	80013c8 <AddNode+0xa0>
			break;
 80013c6:	bf00      	nop
	}

	// temp current in B3 and D become D1
	if(temp -> next == NULL)
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	691b      	ldr	r3, [r3, #16]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d10a      	bne.n	80013e6 <AddNode+0xbe>
	{
		NewNode -> data.Delay -= temp -> data.Delay;
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	685a      	ldr	r2, [r3, #4]
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	1ad2      	subs	r2, r2, r3
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	605a      	str	r2, [r3, #4]
		temp -> next = NewNode;
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	611a      	str	r2, [r3, #16]
 80013e4:	e00f      	b.n	8001406 <AddNode+0xde>
	}
	else
	{
		temp -> next -> data.Delay -= NewNode -> data.Delay; // convert C2 to C1
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	691b      	ldr	r3, [r3, #16]
 80013ea:	6859      	ldr	r1, [r3, #4]
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	685a      	ldr	r2, [r3, #4]
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	691b      	ldr	r3, [r3, #16]
 80013f4:	1a8a      	subs	r2, r1, r2
 80013f6:	605a      	str	r2, [r3, #4]
		NewNode -> next = temp -> next;
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	691a      	ldr	r2, [r3, #16]
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	611a      	str	r2, [r3, #16]
		temp -> next = NewNode;
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	611a      	str	r2, [r3, #16]
	}
}
 8001406:	371c      	adds	r7, #28
 8001408:	46bd      	mov	sp, r7
 800140a:	bd90      	pop	{r4, r7, pc}
 800140c:	200000fc 	.word	0x200000fc

08001410 <DeleteBegin>:

void DeleteBegin()
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
	struct Node* temp = head;
 8001416:	4b09      	ldr	r3, [pc, #36]	; (800143c <DeleteBegin+0x2c>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	607b      	str	r3, [r7, #4]
	if(temp == NULL) return;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d008      	beq.n	8001434 <DeleteBegin+0x24>
	head = head -> next;
 8001422:	4b06      	ldr	r3, [pc, #24]	; (800143c <DeleteBegin+0x2c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	691b      	ldr	r3, [r3, #16]
 8001428:	4a04      	ldr	r2, [pc, #16]	; (800143c <DeleteBegin+0x2c>)
 800142a:	6013      	str	r3, [r2, #0]
	free(temp);
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f003 f83b 	bl	80044a8 <free>
 8001432:	e000      	b.n	8001436 <DeleteBegin+0x26>
	if(temp == NULL) return;
 8001434:	bf00      	nop
}
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	200000fc 	.word	0x200000fc

08001440 <SCH_Add_Task>:

void SCH_Add_Task(void (*p_function)(), uint32_t DELAY, uint32_t PERIOD)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b088      	sub	sp, #32
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
	sTask NewTask;
	NewTask.pTask = p_function;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	613b      	str	r3, [r7, #16]
	NewTask.Delay = DELAY;
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	617b      	str	r3, [r7, #20]
	NewTask.Period = PERIOD;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	61bb      	str	r3, [r7, #24]

	if(NewTask.Delay == 0)
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d102      	bne.n	8001464 <SCH_Add_Task+0x24>
		NewTask.RunMe = 1;
 800145e:	2301      	movs	r3, #1
 8001460:	773b      	strb	r3, [r7, #28]
 8001462:	e001      	b.n	8001468 <SCH_Add_Task+0x28>
	else
		NewTask.RunMe = 0;
 8001464:	2300      	movs	r3, #0
 8001466:	773b      	strb	r3, [r7, #28]

	AddNode(NewTask);
 8001468:	f107 0310 	add.w	r3, r7, #16
 800146c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800146e:	f7ff ff5b 	bl	8001328 <AddNode>
}
 8001472:	bf00      	nop
 8001474:	3720      	adds	r7, #32
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
	...

0800147c <SCH_Update>:

void SCH_Update(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
	if(head == NULL) return;
 8001480:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <SCH_Update+0x34>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d00f      	beq.n	80014a8 <SCH_Update+0x2c>

	if(head -> data.Delay <= 0)
 8001488:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <SCH_Update+0x34>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d104      	bne.n	800149c <SCH_Update+0x20>
		head -> data.RunMe = 1;
 8001492:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <SCH_Update+0x34>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2201      	movs	r2, #1
 8001498:	731a      	strb	r2, [r3, #12]
 800149a:	e006      	b.n	80014aa <SCH_Update+0x2e>
	else
		head -> data.Delay--;
 800149c:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <SCH_Update+0x34>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	685a      	ldr	r2, [r3, #4]
 80014a2:	3a01      	subs	r2, #1
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	e000      	b.n	80014aa <SCH_Update+0x2e>
	if(head == NULL) return;
 80014a8:	bf00      	nop
}
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bc80      	pop	{r7}
 80014ae:	4770      	bx	lr
 80014b0:	200000fc 	.word	0x200000fc

080014b4 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void)
{
 80014b4:	b590      	push	{r4, r7, lr}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
	if(head == NULL) return;
 80014ba:	4b13      	ldr	r3, [pc, #76]	; (8001508 <SCH_Dispatch_Tasks+0x54>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d01e      	beq.n	8001500 <SCH_Dispatch_Tasks+0x4c>

	if(head -> data.RunMe > 0)
 80014c2:	4b11      	ldr	r3, [pc, #68]	; (8001508 <SCH_Dispatch_Tasks+0x54>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	7b1b      	ldrb	r3, [r3, #12]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d014      	beq.n	80014f6 <SCH_Dispatch_Tasks+0x42>
	{
		(*head -> data.pTask)();
 80014cc:	4b0e      	ldr	r3, [pc, #56]	; (8001508 <SCH_Dispatch_Tasks+0x54>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4798      	blx	r3
		sTask NewTask = head -> data;
 80014d4:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <SCH_Dispatch_Tasks+0x54>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	463c      	mov	r4, r7
 80014da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		DeleteBegin();
 80014e0:	f7ff ff96 	bl	8001410 <DeleteBegin>

		if(NewTask.Period != 0)
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d005      	beq.n	80014f6 <SCH_Dispatch_Tasks+0x42>
			SCH_Add_Task(NewTask.pTask, NewTask.Period, NewTask.Period);
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	68b9      	ldr	r1, [r7, #8]
 80014ee:	68ba      	ldr	r2, [r7, #8]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff ffa5 	bl	8001440 <SCH_Add_Task>
	}

	 HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80014f6:	2101      	movs	r1, #1
 80014f8:	2000      	movs	r0, #0
 80014fa:	f000 fdef 	bl	80020dc <HAL_PWR_EnterSLEEPMode>
 80014fe:	e000      	b.n	8001502 <SCH_Dispatch_Tasks+0x4e>
	if(head == NULL) return;
 8001500:	bf00      	nop
}
 8001502:	3714      	adds	r7, #20
 8001504:	46bd      	mov	sp, r7
 8001506:	bd90      	pop	{r4, r7, pc}
 8001508:	200000fc 	.word	0x200000fc

0800150c <isTimerUp>:

int timer_counter[TIMER];
int timer_flag[TIMER];

int isTimerUp(int timer)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
	return (timer_flag[timer] == 1);
 8001514:	4a06      	ldr	r2, [pc, #24]	; (8001530 <isTimerUp+0x24>)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800151c:	2b01      	cmp	r3, #1
 800151e:	bf0c      	ite	eq
 8001520:	2301      	moveq	r3, #1
 8001522:	2300      	movne	r3, #0
 8001524:	b2db      	uxtb	r3, r3
}
 8001526:	4618      	mov	r0, r3
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr
 8001530:	20000200 	.word	0x20000200

08001534 <setTimer>:

void setTimer(int timer, int duration)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
	timer_counter[timer] = duration;
 800153e:	4907      	ldr	r1, [pc, #28]	; (800155c <setTimer+0x28>)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	683a      	ldr	r2, [r7, #0]
 8001544:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[timer] = 0;
 8001548:	4a05      	ldr	r2, [pc, #20]	; (8001560 <setTimer+0x2c>)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2100      	movs	r1, #0
 800154e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001552:	bf00      	nop
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr
 800155c:	200001e8 	.word	0x200001e8
 8001560:	20000200 	.word	0x20000200

08001564 <timerRun>:
void timerRun(void)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
	for (int timer = 0; timer < TIMER; timer++)
 800156a:	2300      	movs	r3, #0
 800156c:	607b      	str	r3, [r7, #4]
 800156e:	e01c      	b.n	80015aa <timerRun+0x46>
	{
		if(timer_counter[timer] > 0)
 8001570:	4a12      	ldr	r2, [pc, #72]	; (80015bc <timerRun+0x58>)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001578:	2b00      	cmp	r3, #0
 800157a:	dd13      	ble.n	80015a4 <timerRun+0x40>
		{
			timer_counter[timer]--;
 800157c:	4a0f      	ldr	r2, [pc, #60]	; (80015bc <timerRun+0x58>)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001584:	1e5a      	subs	r2, r3, #1
 8001586:	490d      	ldr	r1, [pc, #52]	; (80015bc <timerRun+0x58>)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[timer] == 0)
 800158e:	4a0b      	ldr	r2, [pc, #44]	; (80015bc <timerRun+0x58>)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d104      	bne.n	80015a4 <timerRun+0x40>
				timer_flag[timer] = 1;
 800159a:	4a09      	ldr	r2, [pc, #36]	; (80015c0 <timerRun+0x5c>)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2101      	movs	r1, #1
 80015a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int timer = 0; timer < TIMER; timer++)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	3301      	adds	r3, #1
 80015a8:	607b      	str	r3, [r7, #4]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2b05      	cmp	r3, #5
 80015ae:	dddf      	ble.n	8001570 <timerRun+0xc>
		}
	}
}
 80015b0:	bf00      	nop
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bc80      	pop	{r7}
 80015ba:	4770      	bx	lr
 80015bc:	200001e8 	.word	0x200001e8
 80015c0:	20000200 	.word	0x20000200

080015c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015ca:	4b15      	ldr	r3, [pc, #84]	; (8001620 <HAL_MspInit+0x5c>)
 80015cc:	699b      	ldr	r3, [r3, #24]
 80015ce:	4a14      	ldr	r2, [pc, #80]	; (8001620 <HAL_MspInit+0x5c>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	6193      	str	r3, [r2, #24]
 80015d6:	4b12      	ldr	r3, [pc, #72]	; (8001620 <HAL_MspInit+0x5c>)
 80015d8:	699b      	ldr	r3, [r3, #24]
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	60bb      	str	r3, [r7, #8]
 80015e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015e2:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <HAL_MspInit+0x5c>)
 80015e4:	69db      	ldr	r3, [r3, #28]
 80015e6:	4a0e      	ldr	r2, [pc, #56]	; (8001620 <HAL_MspInit+0x5c>)
 80015e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ec:	61d3      	str	r3, [r2, #28]
 80015ee:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <HAL_MspInit+0x5c>)
 80015f0:	69db      	ldr	r3, [r3, #28]
 80015f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f6:	607b      	str	r3, [r7, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015fa:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <HAL_MspInit+0x60>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	4a04      	ldr	r2, [pc, #16]	; (8001624 <HAL_MspInit+0x60>)
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001616:	bf00      	nop
 8001618:	3714      	adds	r7, #20
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr
 8001620:	40021000 	.word	0x40021000
 8001624:	40010000 	.word	0x40010000

08001628 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001638:	d114      	bne.n	8001664 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800163a:	4b19      	ldr	r3, [pc, #100]	; (80016a0 <HAL_TIM_Base_MspInit+0x78>)
 800163c:	69db      	ldr	r3, [r3, #28]
 800163e:	4a18      	ldr	r2, [pc, #96]	; (80016a0 <HAL_TIM_Base_MspInit+0x78>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	61d3      	str	r3, [r2, #28]
 8001646:	4b16      	ldr	r3, [pc, #88]	; (80016a0 <HAL_TIM_Base_MspInit+0x78>)
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001652:	2200      	movs	r2, #0
 8001654:	2100      	movs	r1, #0
 8001656:	201c      	movs	r0, #28
 8001658:	f000 fa8b 	bl	8001b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800165c:	201c      	movs	r0, #28
 800165e:	f000 faa4 	bl	8001baa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001662:	e018      	b.n	8001696 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a0e      	ldr	r2, [pc, #56]	; (80016a4 <HAL_TIM_Base_MspInit+0x7c>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d113      	bne.n	8001696 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800166e:	4b0c      	ldr	r3, [pc, #48]	; (80016a0 <HAL_TIM_Base_MspInit+0x78>)
 8001670:	69db      	ldr	r3, [r3, #28]
 8001672:	4a0b      	ldr	r2, [pc, #44]	; (80016a0 <HAL_TIM_Base_MspInit+0x78>)
 8001674:	f043 0302 	orr.w	r3, r3, #2
 8001678:	61d3      	str	r3, [r2, #28]
 800167a:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <HAL_TIM_Base_MspInit+0x78>)
 800167c:	69db      	ldr	r3, [r3, #28]
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	60bb      	str	r3, [r7, #8]
 8001684:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001686:	2200      	movs	r2, #0
 8001688:	2100      	movs	r1, #0
 800168a:	201d      	movs	r0, #29
 800168c:	f000 fa71 	bl	8001b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001690:	201d      	movs	r0, #29
 8001692:	f000 fa8a 	bl	8001baa <HAL_NVIC_EnableIRQ>
}
 8001696:	bf00      	nop
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40021000 	.word	0x40021000
 80016a4:	40000400 	.word	0x40000400

080016a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b088      	sub	sp, #32
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b0:	f107 0310 	add.w	r3, r7, #16
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a0f      	ldr	r2, [pc, #60]	; (8001700 <HAL_TIM_MspPostInit+0x58>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d117      	bne.n	80016f8 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c8:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <HAL_TIM_MspPostInit+0x5c>)
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	4a0d      	ldr	r2, [pc, #52]	; (8001704 <HAL_TIM_MspPostInit+0x5c>)
 80016ce:	f043 0304 	orr.w	r3, r3, #4
 80016d2:	6193      	str	r3, [r2, #24]
 80016d4:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <HAL_TIM_MspPostInit+0x5c>)
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	f003 0304 	and.w	r3, r3, #4
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016e0:	2340      	movs	r3, #64	; 0x40
 80016e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e4:	2302      	movs	r3, #2
 80016e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e8:	2302      	movs	r3, #2
 80016ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ec:	f107 0310 	add.w	r3, r7, #16
 80016f0:	4619      	mov	r1, r3
 80016f2:	4805      	ldr	r0, [pc, #20]	; (8001708 <HAL_TIM_MspPostInit+0x60>)
 80016f4:	f000 fb26 	bl	8001d44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80016f8:	bf00      	nop
 80016fa:	3720      	adds	r7, #32
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40000400 	.word	0x40000400
 8001704:	40021000 	.word	0x40021000
 8001708:	40010800 	.word	0x40010800

0800170c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b088      	sub	sp, #32
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001714:	f107 0310 	add.w	r3, r7, #16
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a1f      	ldr	r2, [pc, #124]	; (80017a4 <HAL_UART_MspInit+0x98>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d137      	bne.n	800179c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800172c:	4b1e      	ldr	r3, [pc, #120]	; (80017a8 <HAL_UART_MspInit+0x9c>)
 800172e:	69db      	ldr	r3, [r3, #28]
 8001730:	4a1d      	ldr	r2, [pc, #116]	; (80017a8 <HAL_UART_MspInit+0x9c>)
 8001732:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001736:	61d3      	str	r3, [r2, #28]
 8001738:	4b1b      	ldr	r3, [pc, #108]	; (80017a8 <HAL_UART_MspInit+0x9c>)
 800173a:	69db      	ldr	r3, [r3, #28]
 800173c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001744:	4b18      	ldr	r3, [pc, #96]	; (80017a8 <HAL_UART_MspInit+0x9c>)
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	4a17      	ldr	r2, [pc, #92]	; (80017a8 <HAL_UART_MspInit+0x9c>)
 800174a:	f043 0304 	orr.w	r3, r3, #4
 800174e:	6193      	str	r3, [r2, #24]
 8001750:	4b15      	ldr	r3, [pc, #84]	; (80017a8 <HAL_UART_MspInit+0x9c>)
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	f003 0304 	and.w	r3, r3, #4
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800175c:	2304      	movs	r3, #4
 800175e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001760:	2302      	movs	r3, #2
 8001762:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001764:	2303      	movs	r3, #3
 8001766:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001768:	f107 0310 	add.w	r3, r7, #16
 800176c:	4619      	mov	r1, r3
 800176e:	480f      	ldr	r0, [pc, #60]	; (80017ac <HAL_UART_MspInit+0xa0>)
 8001770:	f000 fae8 	bl	8001d44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001774:	2308      	movs	r3, #8
 8001776:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001780:	f107 0310 	add.w	r3, r7, #16
 8001784:	4619      	mov	r1, r3
 8001786:	4809      	ldr	r0, [pc, #36]	; (80017ac <HAL_UART_MspInit+0xa0>)
 8001788:	f000 fadc 	bl	8001d44 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800178c:	2200      	movs	r2, #0
 800178e:	2100      	movs	r1, #0
 8001790:	2026      	movs	r0, #38	; 0x26
 8001792:	f000 f9ee 	bl	8001b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001796:	2026      	movs	r0, #38	; 0x26
 8001798:	f000 fa07 	bl	8001baa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800179c:	bf00      	nop
 800179e:	3720      	adds	r7, #32
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40004400 	.word	0x40004400
 80017a8:	40021000 	.word	0x40021000
 80017ac:	40010800 	.word	0x40010800

080017b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017b4:	e7fe      	b.n	80017b4 <NMI_Handler+0x4>

080017b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ba:	e7fe      	b.n	80017ba <HardFault_Handler+0x4>

080017bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017c0:	e7fe      	b.n	80017c0 <MemManage_Handler+0x4>

080017c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017c2:	b480      	push	{r7}
 80017c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017c6:	e7fe      	b.n	80017c6 <BusFault_Handler+0x4>

080017c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017cc:	e7fe      	b.n	80017cc <UsageFault_Handler+0x4>

080017ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bc80      	pop	{r7}
 80017d8:	4770      	bx	lr

080017da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017da:	b480      	push	{r7}
 80017dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bc80      	pop	{r7}
 80017e4:	4770      	bx	lr

080017e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017e6:	b480      	push	{r7}
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bc80      	pop	{r7}
 80017f0:	4770      	bx	lr

080017f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017f6:	f000 f8c9 	bl	800198c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
	...

08001800 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001804:	4802      	ldr	r0, [pc, #8]	; (8001810 <TIM2_IRQHandler+0x10>)
 8001806:	f001 fa2f 	bl	8002c68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	20000158 	.word	0x20000158

08001814 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001818:	4802      	ldr	r0, [pc, #8]	; (8001824 <TIM3_IRQHandler+0x10>)
 800181a:	f001 fa25 	bl	8002c68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	20000110 	.word	0x20000110

08001828 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800182c:	4802      	ldr	r0, [pc, #8]	; (8001838 <USART2_IRQHandler+0x10>)
 800182e:	f002 f8b9 	bl	80039a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	200001a0 	.word	0x200001a0

0800183c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001844:	4a14      	ldr	r2, [pc, #80]	; (8001898 <_sbrk+0x5c>)
 8001846:	4b15      	ldr	r3, [pc, #84]	; (800189c <_sbrk+0x60>)
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001850:	4b13      	ldr	r3, [pc, #76]	; (80018a0 <_sbrk+0x64>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d102      	bne.n	800185e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001858:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <_sbrk+0x64>)
 800185a:	4a12      	ldr	r2, [pc, #72]	; (80018a4 <_sbrk+0x68>)
 800185c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800185e:	4b10      	ldr	r3, [pc, #64]	; (80018a0 <_sbrk+0x64>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4413      	add	r3, r2
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	429a      	cmp	r2, r3
 800186a:	d207      	bcs.n	800187c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800186c:	f002 fdea 	bl	8004444 <__errno>
 8001870:	4603      	mov	r3, r0
 8001872:	220c      	movs	r2, #12
 8001874:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001876:	f04f 33ff 	mov.w	r3, #4294967295
 800187a:	e009      	b.n	8001890 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800187c:	4b08      	ldr	r3, [pc, #32]	; (80018a0 <_sbrk+0x64>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001882:	4b07      	ldr	r3, [pc, #28]	; (80018a0 <_sbrk+0x64>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4413      	add	r3, r2
 800188a:	4a05      	ldr	r2, [pc, #20]	; (80018a0 <_sbrk+0x64>)
 800188c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800188e:	68fb      	ldr	r3, [r7, #12]
}
 8001890:	4618      	mov	r0, r3
 8001892:	3718      	adds	r7, #24
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	20005000 	.word	0x20005000
 800189c:	00000400 	.word	0x00000400
 80018a0:	20000100 	.word	0x20000100
 80018a4:	20000230 	.word	0x20000230

080018a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr

080018b4 <Reset_Handler>:
 80018b4:	f7ff fff8 	bl	80018a8 <SystemInit>
 80018b8:	480b      	ldr	r0, [pc, #44]	; (80018e8 <LoopFillZerobss+0xe>)
 80018ba:	490c      	ldr	r1, [pc, #48]	; (80018ec <LoopFillZerobss+0x12>)
 80018bc:	4a0c      	ldr	r2, [pc, #48]	; (80018f0 <LoopFillZerobss+0x16>)
 80018be:	2300      	movs	r3, #0
 80018c0:	e002      	b.n	80018c8 <LoopCopyDataInit>

080018c2 <CopyDataInit>:
 80018c2:	58d4      	ldr	r4, [r2, r3]
 80018c4:	50c4      	str	r4, [r0, r3]
 80018c6:	3304      	adds	r3, #4

080018c8 <LoopCopyDataInit>:
 80018c8:	18c4      	adds	r4, r0, r3
 80018ca:	428c      	cmp	r4, r1
 80018cc:	d3f9      	bcc.n	80018c2 <CopyDataInit>
 80018ce:	4a09      	ldr	r2, [pc, #36]	; (80018f4 <LoopFillZerobss+0x1a>)
 80018d0:	4c09      	ldr	r4, [pc, #36]	; (80018f8 <LoopFillZerobss+0x1e>)
 80018d2:	2300      	movs	r3, #0
 80018d4:	e001      	b.n	80018da <LoopFillZerobss>

080018d6 <FillZerobss>:
 80018d6:	6013      	str	r3, [r2, #0]
 80018d8:	3204      	adds	r2, #4

080018da <LoopFillZerobss>:
 80018da:	42a2      	cmp	r2, r4
 80018dc:	d3fb      	bcc.n	80018d6 <FillZerobss>
 80018de:	f002 fdb7 	bl	8004450 <__libc_init_array>
 80018e2:	f7ff fb55 	bl	8000f90 <main>
 80018e6:	4770      	bx	lr
 80018e8:	20000000 	.word	0x20000000
 80018ec:	200000a8 	.word	0x200000a8
 80018f0:	08004de0 	.word	0x08004de0
 80018f4:	200000a8 	.word	0x200000a8
 80018f8:	2000022c 	.word	0x2000022c

080018fc <ADC1_2_IRQHandler>:
 80018fc:	e7fe      	b.n	80018fc <ADC1_2_IRQHandler>
	...

08001900 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001904:	4b08      	ldr	r3, [pc, #32]	; (8001928 <HAL_Init+0x28>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a07      	ldr	r2, [pc, #28]	; (8001928 <HAL_Init+0x28>)
 800190a:	f043 0310 	orr.w	r3, r3, #16
 800190e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001910:	2003      	movs	r0, #3
 8001912:	f000 f923 	bl	8001b5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001916:	200f      	movs	r0, #15
 8001918:	f000 f808 	bl	800192c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800191c:	f7ff fe52 	bl	80015c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40022000 	.word	0x40022000

0800192c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001934:	4b12      	ldr	r3, [pc, #72]	; (8001980 <HAL_InitTick+0x54>)
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	4b12      	ldr	r3, [pc, #72]	; (8001984 <HAL_InitTick+0x58>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	4619      	mov	r1, r3
 800193e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001942:	fbb3 f3f1 	udiv	r3, r3, r1
 8001946:	fbb2 f3f3 	udiv	r3, r2, r3
 800194a:	4618      	mov	r0, r3
 800194c:	f000 f93b 	bl	8001bc6 <HAL_SYSTICK_Config>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e00e      	b.n	8001978 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2b0f      	cmp	r3, #15
 800195e:	d80a      	bhi.n	8001976 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001960:	2200      	movs	r2, #0
 8001962:	6879      	ldr	r1, [r7, #4]
 8001964:	f04f 30ff 	mov.w	r0, #4294967295
 8001968:	f000 f903 	bl	8001b72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800196c:	4a06      	ldr	r2, [pc, #24]	; (8001988 <HAL_InitTick+0x5c>)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001972:	2300      	movs	r3, #0
 8001974:	e000      	b.n	8001978 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
}
 8001978:	4618      	mov	r0, r3
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	20000038 	.word	0x20000038
 8001984:	20000040 	.word	0x20000040
 8001988:	2000003c 	.word	0x2000003c

0800198c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001990:	4b05      	ldr	r3, [pc, #20]	; (80019a8 <HAL_IncTick+0x1c>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	461a      	mov	r2, r3
 8001996:	4b05      	ldr	r3, [pc, #20]	; (80019ac <HAL_IncTick+0x20>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4413      	add	r3, r2
 800199c:	4a03      	ldr	r2, [pc, #12]	; (80019ac <HAL_IncTick+0x20>)
 800199e:	6013      	str	r3, [r2, #0]
}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr
 80019a8:	20000040 	.word	0x20000040
 80019ac:	20000218 	.word	0x20000218

080019b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  return uwTick;
 80019b4:	4b02      	ldr	r3, [pc, #8]	; (80019c0 <HAL_GetTick+0x10>)
 80019b6:	681b      	ldr	r3, [r3, #0]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bc80      	pop	{r7}
 80019be:	4770      	bx	lr
 80019c0:	20000218 	.word	0x20000218

080019c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019d4:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <__NVIC_SetPriorityGrouping+0x44>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019da:	68ba      	ldr	r2, [r7, #8]
 80019dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019e0:	4013      	ands	r3, r2
 80019e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019f6:	4a04      	ldr	r2, [pc, #16]	; (8001a08 <__NVIC_SetPriorityGrouping+0x44>)
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	60d3      	str	r3, [r2, #12]
}
 80019fc:	bf00      	nop
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bc80      	pop	{r7}
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	e000ed00 	.word	0xe000ed00

08001a0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a10:	4b04      	ldr	r3, [pc, #16]	; (8001a24 <__NVIC_GetPriorityGrouping+0x18>)
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	0a1b      	lsrs	r3, r3, #8
 8001a16:	f003 0307 	and.w	r3, r3, #7
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bc80      	pop	{r7}
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	db0b      	blt.n	8001a52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	f003 021f 	and.w	r2, r3, #31
 8001a40:	4906      	ldr	r1, [pc, #24]	; (8001a5c <__NVIC_EnableIRQ+0x34>)
 8001a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a46:	095b      	lsrs	r3, r3, #5
 8001a48:	2001      	movs	r0, #1
 8001a4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bc80      	pop	{r7}
 8001a5a:	4770      	bx	lr
 8001a5c:	e000e100 	.word	0xe000e100

08001a60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	6039      	str	r1, [r7, #0]
 8001a6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	db0a      	blt.n	8001a8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	490c      	ldr	r1, [pc, #48]	; (8001aac <__NVIC_SetPriority+0x4c>)
 8001a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7e:	0112      	lsls	r2, r2, #4
 8001a80:	b2d2      	uxtb	r2, r2
 8001a82:	440b      	add	r3, r1
 8001a84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a88:	e00a      	b.n	8001aa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	b2da      	uxtb	r2, r3
 8001a8e:	4908      	ldr	r1, [pc, #32]	; (8001ab0 <__NVIC_SetPriority+0x50>)
 8001a90:	79fb      	ldrb	r3, [r7, #7]
 8001a92:	f003 030f 	and.w	r3, r3, #15
 8001a96:	3b04      	subs	r3, #4
 8001a98:	0112      	lsls	r2, r2, #4
 8001a9a:	b2d2      	uxtb	r2, r2
 8001a9c:	440b      	add	r3, r1
 8001a9e:	761a      	strb	r2, [r3, #24]
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bc80      	pop	{r7}
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	e000e100 	.word	0xe000e100
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b089      	sub	sp, #36	; 0x24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	f1c3 0307 	rsb	r3, r3, #7
 8001ace:	2b04      	cmp	r3, #4
 8001ad0:	bf28      	it	cs
 8001ad2:	2304      	movcs	r3, #4
 8001ad4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	3304      	adds	r3, #4
 8001ada:	2b06      	cmp	r3, #6
 8001adc:	d902      	bls.n	8001ae4 <NVIC_EncodePriority+0x30>
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	3b03      	subs	r3, #3
 8001ae2:	e000      	b.n	8001ae6 <NVIC_EncodePriority+0x32>
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	43da      	mvns	r2, r3
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	401a      	ands	r2, r3
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001afc:	f04f 31ff 	mov.w	r1, #4294967295
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	fa01 f303 	lsl.w	r3, r1, r3
 8001b06:	43d9      	mvns	r1, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b0c:	4313      	orrs	r3, r2
         );
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3724      	adds	r7, #36	; 0x24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bc80      	pop	{r7}
 8001b16:	4770      	bx	lr

08001b18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	3b01      	subs	r3, #1
 8001b24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b28:	d301      	bcc.n	8001b2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e00f      	b.n	8001b4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b2e:	4a0a      	ldr	r2, [pc, #40]	; (8001b58 <SysTick_Config+0x40>)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	3b01      	subs	r3, #1
 8001b34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b36:	210f      	movs	r1, #15
 8001b38:	f04f 30ff 	mov.w	r0, #4294967295
 8001b3c:	f7ff ff90 	bl	8001a60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b40:	4b05      	ldr	r3, [pc, #20]	; (8001b58 <SysTick_Config+0x40>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b46:	4b04      	ldr	r3, [pc, #16]	; (8001b58 <SysTick_Config+0x40>)
 8001b48:	2207      	movs	r2, #7
 8001b4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	e000e010 	.word	0xe000e010

08001b5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f7ff ff2d 	bl	80019c4 <__NVIC_SetPriorityGrouping>
}
 8001b6a:	bf00      	nop
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b086      	sub	sp, #24
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	4603      	mov	r3, r0
 8001b7a:	60b9      	str	r1, [r7, #8]
 8001b7c:	607a      	str	r2, [r7, #4]
 8001b7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b80:	2300      	movs	r3, #0
 8001b82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b84:	f7ff ff42 	bl	8001a0c <__NVIC_GetPriorityGrouping>
 8001b88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	68b9      	ldr	r1, [r7, #8]
 8001b8e:	6978      	ldr	r0, [r7, #20]
 8001b90:	f7ff ff90 	bl	8001ab4 <NVIC_EncodePriority>
 8001b94:	4602      	mov	r2, r0
 8001b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b9a:	4611      	mov	r1, r2
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff ff5f 	bl	8001a60 <__NVIC_SetPriority>
}
 8001ba2:	bf00      	nop
 8001ba4:	3718      	adds	r7, #24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b082      	sub	sp, #8
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff ff35 	bl	8001a28 <__NVIC_EnableIRQ>
}
 8001bbe:	bf00      	nop
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b082      	sub	sp, #8
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f7ff ffa2 	bl	8001b18 <SysTick_Config>
 8001bd4:	4603      	mov	r3, r0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bde:	b480      	push	{r7}
 8001be0:	b085      	sub	sp, #20
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001be6:	2300      	movs	r3, #0
 8001be8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d008      	beq.n	8001c08 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2204      	movs	r2, #4
 8001bfa:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e020      	b.n	8001c4a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f022 020e 	bic.w	r2, r2, #14
 8001c16:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f022 0201 	bic.w	r2, r2, #1
 8001c26:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c30:	2101      	movs	r1, #1
 8001c32:	fa01 f202 	lsl.w	r2, r1, r2
 8001c36:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3714      	adds	r7, #20
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr

08001c54 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d005      	beq.n	8001c78 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2204      	movs	r2, #4
 8001c70:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	73fb      	strb	r3, [r7, #15]
 8001c76:	e051      	b.n	8001d1c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f022 020e 	bic.w	r2, r2, #14
 8001c86:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f022 0201 	bic.w	r2, r2, #1
 8001c96:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a22      	ldr	r2, [pc, #136]	; (8001d28 <HAL_DMA_Abort_IT+0xd4>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d029      	beq.n	8001cf6 <HAL_DMA_Abort_IT+0xa2>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a21      	ldr	r2, [pc, #132]	; (8001d2c <HAL_DMA_Abort_IT+0xd8>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d022      	beq.n	8001cf2 <HAL_DMA_Abort_IT+0x9e>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a1f      	ldr	r2, [pc, #124]	; (8001d30 <HAL_DMA_Abort_IT+0xdc>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d01a      	beq.n	8001cec <HAL_DMA_Abort_IT+0x98>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a1e      	ldr	r2, [pc, #120]	; (8001d34 <HAL_DMA_Abort_IT+0xe0>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d012      	beq.n	8001ce6 <HAL_DMA_Abort_IT+0x92>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a1c      	ldr	r2, [pc, #112]	; (8001d38 <HAL_DMA_Abort_IT+0xe4>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d00a      	beq.n	8001ce0 <HAL_DMA_Abort_IT+0x8c>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a1b      	ldr	r2, [pc, #108]	; (8001d3c <HAL_DMA_Abort_IT+0xe8>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d102      	bne.n	8001cda <HAL_DMA_Abort_IT+0x86>
 8001cd4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001cd8:	e00e      	b.n	8001cf8 <HAL_DMA_Abort_IT+0xa4>
 8001cda:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cde:	e00b      	b.n	8001cf8 <HAL_DMA_Abort_IT+0xa4>
 8001ce0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ce4:	e008      	b.n	8001cf8 <HAL_DMA_Abort_IT+0xa4>
 8001ce6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cea:	e005      	b.n	8001cf8 <HAL_DMA_Abort_IT+0xa4>
 8001cec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cf0:	e002      	b.n	8001cf8 <HAL_DMA_Abort_IT+0xa4>
 8001cf2:	2310      	movs	r3, #16
 8001cf4:	e000      	b.n	8001cf8 <HAL_DMA_Abort_IT+0xa4>
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	4a11      	ldr	r2, [pc, #68]	; (8001d40 <HAL_DMA_Abort_IT+0xec>)
 8001cfa:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d003      	beq.n	8001d1c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	4798      	blx	r3
    } 
  }
  return status;
 8001d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40020008 	.word	0x40020008
 8001d2c:	4002001c 	.word	0x4002001c
 8001d30:	40020030 	.word	0x40020030
 8001d34:	40020044 	.word	0x40020044
 8001d38:	40020058 	.word	0x40020058
 8001d3c:	4002006c 	.word	0x4002006c
 8001d40:	40020000 	.word	0x40020000

08001d44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b08b      	sub	sp, #44	; 0x2c
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d52:	2300      	movs	r3, #0
 8001d54:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d56:	e169      	b.n	800202c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d58:	2201      	movs	r2, #1
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	69fa      	ldr	r2, [r7, #28]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	f040 8158 	bne.w	8002026 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	4a9a      	ldr	r2, [pc, #616]	; (8001fe4 <HAL_GPIO_Init+0x2a0>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d05e      	beq.n	8001e3e <HAL_GPIO_Init+0xfa>
 8001d80:	4a98      	ldr	r2, [pc, #608]	; (8001fe4 <HAL_GPIO_Init+0x2a0>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d875      	bhi.n	8001e72 <HAL_GPIO_Init+0x12e>
 8001d86:	4a98      	ldr	r2, [pc, #608]	; (8001fe8 <HAL_GPIO_Init+0x2a4>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d058      	beq.n	8001e3e <HAL_GPIO_Init+0xfa>
 8001d8c:	4a96      	ldr	r2, [pc, #600]	; (8001fe8 <HAL_GPIO_Init+0x2a4>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d86f      	bhi.n	8001e72 <HAL_GPIO_Init+0x12e>
 8001d92:	4a96      	ldr	r2, [pc, #600]	; (8001fec <HAL_GPIO_Init+0x2a8>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d052      	beq.n	8001e3e <HAL_GPIO_Init+0xfa>
 8001d98:	4a94      	ldr	r2, [pc, #592]	; (8001fec <HAL_GPIO_Init+0x2a8>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d869      	bhi.n	8001e72 <HAL_GPIO_Init+0x12e>
 8001d9e:	4a94      	ldr	r2, [pc, #592]	; (8001ff0 <HAL_GPIO_Init+0x2ac>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d04c      	beq.n	8001e3e <HAL_GPIO_Init+0xfa>
 8001da4:	4a92      	ldr	r2, [pc, #584]	; (8001ff0 <HAL_GPIO_Init+0x2ac>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d863      	bhi.n	8001e72 <HAL_GPIO_Init+0x12e>
 8001daa:	4a92      	ldr	r2, [pc, #584]	; (8001ff4 <HAL_GPIO_Init+0x2b0>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d046      	beq.n	8001e3e <HAL_GPIO_Init+0xfa>
 8001db0:	4a90      	ldr	r2, [pc, #576]	; (8001ff4 <HAL_GPIO_Init+0x2b0>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d85d      	bhi.n	8001e72 <HAL_GPIO_Init+0x12e>
 8001db6:	2b12      	cmp	r3, #18
 8001db8:	d82a      	bhi.n	8001e10 <HAL_GPIO_Init+0xcc>
 8001dba:	2b12      	cmp	r3, #18
 8001dbc:	d859      	bhi.n	8001e72 <HAL_GPIO_Init+0x12e>
 8001dbe:	a201      	add	r2, pc, #4	; (adr r2, 8001dc4 <HAL_GPIO_Init+0x80>)
 8001dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dc4:	08001e3f 	.word	0x08001e3f
 8001dc8:	08001e19 	.word	0x08001e19
 8001dcc:	08001e2b 	.word	0x08001e2b
 8001dd0:	08001e6d 	.word	0x08001e6d
 8001dd4:	08001e73 	.word	0x08001e73
 8001dd8:	08001e73 	.word	0x08001e73
 8001ddc:	08001e73 	.word	0x08001e73
 8001de0:	08001e73 	.word	0x08001e73
 8001de4:	08001e73 	.word	0x08001e73
 8001de8:	08001e73 	.word	0x08001e73
 8001dec:	08001e73 	.word	0x08001e73
 8001df0:	08001e73 	.word	0x08001e73
 8001df4:	08001e73 	.word	0x08001e73
 8001df8:	08001e73 	.word	0x08001e73
 8001dfc:	08001e73 	.word	0x08001e73
 8001e00:	08001e73 	.word	0x08001e73
 8001e04:	08001e73 	.word	0x08001e73
 8001e08:	08001e21 	.word	0x08001e21
 8001e0c:	08001e35 	.word	0x08001e35
 8001e10:	4a79      	ldr	r2, [pc, #484]	; (8001ff8 <HAL_GPIO_Init+0x2b4>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d013      	beq.n	8001e3e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e16:	e02c      	b.n	8001e72 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	623b      	str	r3, [r7, #32]
          break;
 8001e1e:	e029      	b.n	8001e74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	3304      	adds	r3, #4
 8001e26:	623b      	str	r3, [r7, #32]
          break;
 8001e28:	e024      	b.n	8001e74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	3308      	adds	r3, #8
 8001e30:	623b      	str	r3, [r7, #32]
          break;
 8001e32:	e01f      	b.n	8001e74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	330c      	adds	r3, #12
 8001e3a:	623b      	str	r3, [r7, #32]
          break;
 8001e3c:	e01a      	b.n	8001e74 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d102      	bne.n	8001e4c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e46:	2304      	movs	r3, #4
 8001e48:	623b      	str	r3, [r7, #32]
          break;
 8001e4a:	e013      	b.n	8001e74 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d105      	bne.n	8001e60 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e54:	2308      	movs	r3, #8
 8001e56:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	69fa      	ldr	r2, [r7, #28]
 8001e5c:	611a      	str	r2, [r3, #16]
          break;
 8001e5e:	e009      	b.n	8001e74 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e60:	2308      	movs	r3, #8
 8001e62:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	69fa      	ldr	r2, [r7, #28]
 8001e68:	615a      	str	r2, [r3, #20]
          break;
 8001e6a:	e003      	b.n	8001e74 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	623b      	str	r3, [r7, #32]
          break;
 8001e70:	e000      	b.n	8001e74 <HAL_GPIO_Init+0x130>
          break;
 8001e72:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	2bff      	cmp	r3, #255	; 0xff
 8001e78:	d801      	bhi.n	8001e7e <HAL_GPIO_Init+0x13a>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	e001      	b.n	8001e82 <HAL_GPIO_Init+0x13e>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	3304      	adds	r3, #4
 8001e82:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	2bff      	cmp	r3, #255	; 0xff
 8001e88:	d802      	bhi.n	8001e90 <HAL_GPIO_Init+0x14c>
 8001e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	e002      	b.n	8001e96 <HAL_GPIO_Init+0x152>
 8001e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e92:	3b08      	subs	r3, #8
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	210f      	movs	r1, #15
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	401a      	ands	r2, r3
 8001ea8:	6a39      	ldr	r1, [r7, #32]
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb0:	431a      	orrs	r2, r3
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f000 80b1 	beq.w	8002026 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ec4:	4b4d      	ldr	r3, [pc, #308]	; (8001ffc <HAL_GPIO_Init+0x2b8>)
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	4a4c      	ldr	r2, [pc, #304]	; (8001ffc <HAL_GPIO_Init+0x2b8>)
 8001eca:	f043 0301 	orr.w	r3, r3, #1
 8001ece:	6193      	str	r3, [r2, #24]
 8001ed0:	4b4a      	ldr	r3, [pc, #296]	; (8001ffc <HAL_GPIO_Init+0x2b8>)
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	f003 0301 	and.w	r3, r3, #1
 8001ed8:	60bb      	str	r3, [r7, #8]
 8001eda:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001edc:	4a48      	ldr	r2, [pc, #288]	; (8002000 <HAL_GPIO_Init+0x2bc>)
 8001ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee0:	089b      	lsrs	r3, r3, #2
 8001ee2:	3302      	adds	r3, #2
 8001ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eec:	f003 0303 	and.w	r3, r3, #3
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	220f      	movs	r2, #15
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	4013      	ands	r3, r2
 8001efe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a40      	ldr	r2, [pc, #256]	; (8002004 <HAL_GPIO_Init+0x2c0>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d013      	beq.n	8001f30 <HAL_GPIO_Init+0x1ec>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a3f      	ldr	r2, [pc, #252]	; (8002008 <HAL_GPIO_Init+0x2c4>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d00d      	beq.n	8001f2c <HAL_GPIO_Init+0x1e8>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4a3e      	ldr	r2, [pc, #248]	; (800200c <HAL_GPIO_Init+0x2c8>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d007      	beq.n	8001f28 <HAL_GPIO_Init+0x1e4>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4a3d      	ldr	r2, [pc, #244]	; (8002010 <HAL_GPIO_Init+0x2cc>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d101      	bne.n	8001f24 <HAL_GPIO_Init+0x1e0>
 8001f20:	2303      	movs	r3, #3
 8001f22:	e006      	b.n	8001f32 <HAL_GPIO_Init+0x1ee>
 8001f24:	2304      	movs	r3, #4
 8001f26:	e004      	b.n	8001f32 <HAL_GPIO_Init+0x1ee>
 8001f28:	2302      	movs	r3, #2
 8001f2a:	e002      	b.n	8001f32 <HAL_GPIO_Init+0x1ee>
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e000      	b.n	8001f32 <HAL_GPIO_Init+0x1ee>
 8001f30:	2300      	movs	r3, #0
 8001f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f34:	f002 0203 	and.w	r2, r2, #3
 8001f38:	0092      	lsls	r2, r2, #2
 8001f3a:	4093      	lsls	r3, r2
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f42:	492f      	ldr	r1, [pc, #188]	; (8002000 <HAL_GPIO_Init+0x2bc>)
 8001f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f46:	089b      	lsrs	r3, r3, #2
 8001f48:	3302      	adds	r3, #2
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d006      	beq.n	8001f6a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f5c:	4b2d      	ldr	r3, [pc, #180]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	492c      	ldr	r1, [pc, #176]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	608b      	str	r3, [r1, #8]
 8001f68:	e006      	b.n	8001f78 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f6a:	4b2a      	ldr	r3, [pc, #168]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f6c:	689a      	ldr	r2, [r3, #8]
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	43db      	mvns	r3, r3
 8001f72:	4928      	ldr	r1, [pc, #160]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f74:	4013      	ands	r3, r2
 8001f76:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d006      	beq.n	8001f92 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f84:	4b23      	ldr	r3, [pc, #140]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f86:	68da      	ldr	r2, [r3, #12]
 8001f88:	4922      	ldr	r1, [pc, #136]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	60cb      	str	r3, [r1, #12]
 8001f90:	e006      	b.n	8001fa0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f92:	4b20      	ldr	r3, [pc, #128]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f94:	68da      	ldr	r2, [r3, #12]
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	491e      	ldr	r1, [pc, #120]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d006      	beq.n	8001fba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fac:	4b19      	ldr	r3, [pc, #100]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001fae:	685a      	ldr	r2, [r3, #4]
 8001fb0:	4918      	ldr	r1, [pc, #96]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	604b      	str	r3, [r1, #4]
 8001fb8:	e006      	b.n	8001fc8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fba:	4b16      	ldr	r3, [pc, #88]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001fbc:	685a      	ldr	r2, [r3, #4]
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	4914      	ldr	r1, [pc, #80]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d021      	beq.n	8002018 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fd4:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	490e      	ldr	r1, [pc, #56]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	600b      	str	r3, [r1, #0]
 8001fe0:	e021      	b.n	8002026 <HAL_GPIO_Init+0x2e2>
 8001fe2:	bf00      	nop
 8001fe4:	10320000 	.word	0x10320000
 8001fe8:	10310000 	.word	0x10310000
 8001fec:	10220000 	.word	0x10220000
 8001ff0:	10210000 	.word	0x10210000
 8001ff4:	10120000 	.word	0x10120000
 8001ff8:	10110000 	.word	0x10110000
 8001ffc:	40021000 	.word	0x40021000
 8002000:	40010000 	.word	0x40010000
 8002004:	40010800 	.word	0x40010800
 8002008:	40010c00 	.word	0x40010c00
 800200c:	40011000 	.word	0x40011000
 8002010:	40011400 	.word	0x40011400
 8002014:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002018:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <HAL_GPIO_Init+0x304>)
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	43db      	mvns	r3, r3
 8002020:	4909      	ldr	r1, [pc, #36]	; (8002048 <HAL_GPIO_Init+0x304>)
 8002022:	4013      	ands	r3, r2
 8002024:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002028:	3301      	adds	r3, #1
 800202a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002032:	fa22 f303 	lsr.w	r3, r2, r3
 8002036:	2b00      	cmp	r3, #0
 8002038:	f47f ae8e 	bne.w	8001d58 <HAL_GPIO_Init+0x14>
  }
}
 800203c:	bf00      	nop
 800203e:	bf00      	nop
 8002040:	372c      	adds	r7, #44	; 0x2c
 8002042:	46bd      	mov	sp, r7
 8002044:	bc80      	pop	{r7}
 8002046:	4770      	bx	lr
 8002048:	40010400 	.word	0x40010400

0800204c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	460b      	mov	r3, r1
 8002056:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	887b      	ldrh	r3, [r7, #2]
 800205e:	4013      	ands	r3, r2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d002      	beq.n	800206a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002064:	2301      	movs	r3, #1
 8002066:	73fb      	strb	r3, [r7, #15]
 8002068:	e001      	b.n	800206e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800206a:	2300      	movs	r3, #0
 800206c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800206e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002070:	4618      	mov	r0, r3
 8002072:	3714      	adds	r7, #20
 8002074:	46bd      	mov	sp, r7
 8002076:	bc80      	pop	{r7}
 8002078:	4770      	bx	lr

0800207a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800207a:	b480      	push	{r7}
 800207c:	b083      	sub	sp, #12
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
 8002082:	460b      	mov	r3, r1
 8002084:	807b      	strh	r3, [r7, #2]
 8002086:	4613      	mov	r3, r2
 8002088:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800208a:	787b      	ldrb	r3, [r7, #1]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d003      	beq.n	8002098 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002090:	887a      	ldrh	r2, [r7, #2]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002096:	e003      	b.n	80020a0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002098:	887b      	ldrh	r3, [r7, #2]
 800209a:	041a      	lsls	r2, r3, #16
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	611a      	str	r2, [r3, #16]
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bc80      	pop	{r7}
 80020a8:	4770      	bx	lr

080020aa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b085      	sub	sp, #20
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
 80020b2:	460b      	mov	r3, r1
 80020b4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020bc:	887a      	ldrh	r2, [r7, #2]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	4013      	ands	r3, r2
 80020c2:	041a      	lsls	r2, r3, #16
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	43d9      	mvns	r1, r3
 80020c8:	887b      	ldrh	r3, [r7, #2]
 80020ca:	400b      	ands	r3, r1
 80020cc:	431a      	orrs	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	611a      	str	r2, [r3, #16]
}
 80020d2:	bf00      	nop
 80020d4:	3714      	adds	r7, #20
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bc80      	pop	{r7}
 80020da:	4770      	bx	lr

080020dc <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	460b      	mov	r3, r1
 80020e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(Regulator);

  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80020e8:	4b09      	ldr	r3, [pc, #36]	; (8002110 <HAL_PWR_EnterSLEEPMode+0x34>)
 80020ea:	691b      	ldr	r3, [r3, #16]
 80020ec:	4a08      	ldr	r2, [pc, #32]	; (8002110 <HAL_PWR_EnterSLEEPMode+0x34>)
 80020ee:	f023 0304 	bic.w	r3, r3, #4
 80020f2:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80020f4:	78fb      	ldrb	r3, [r7, #3]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d101      	bne.n	80020fe <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80020fa:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 80020fc:	e002      	b.n	8002104 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 80020fe:	bf40      	sev
    __WFE();
 8002100:	bf20      	wfe
    __WFE();
 8002102:	bf20      	wfe
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	bc80      	pop	{r7}
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	e000ed00 	.word	0xe000ed00

08002114 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d101      	bne.n	8002126 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e26c      	b.n	8002600 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	2b00      	cmp	r3, #0
 8002130:	f000 8087 	beq.w	8002242 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002134:	4b92      	ldr	r3, [pc, #584]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f003 030c 	and.w	r3, r3, #12
 800213c:	2b04      	cmp	r3, #4
 800213e:	d00c      	beq.n	800215a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002140:	4b8f      	ldr	r3, [pc, #572]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f003 030c 	and.w	r3, r3, #12
 8002148:	2b08      	cmp	r3, #8
 800214a:	d112      	bne.n	8002172 <HAL_RCC_OscConfig+0x5e>
 800214c:	4b8c      	ldr	r3, [pc, #560]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002158:	d10b      	bne.n	8002172 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800215a:	4b89      	ldr	r3, [pc, #548]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d06c      	beq.n	8002240 <HAL_RCC_OscConfig+0x12c>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d168      	bne.n	8002240 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e246      	b.n	8002600 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800217a:	d106      	bne.n	800218a <HAL_RCC_OscConfig+0x76>
 800217c:	4b80      	ldr	r3, [pc, #512]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a7f      	ldr	r2, [pc, #508]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 8002182:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002186:	6013      	str	r3, [r2, #0]
 8002188:	e02e      	b.n	80021e8 <HAL_RCC_OscConfig+0xd4>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d10c      	bne.n	80021ac <HAL_RCC_OscConfig+0x98>
 8002192:	4b7b      	ldr	r3, [pc, #492]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a7a      	ldr	r2, [pc, #488]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 8002198:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800219c:	6013      	str	r3, [r2, #0]
 800219e:	4b78      	ldr	r3, [pc, #480]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a77      	ldr	r2, [pc, #476]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 80021a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021a8:	6013      	str	r3, [r2, #0]
 80021aa:	e01d      	b.n	80021e8 <HAL_RCC_OscConfig+0xd4>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021b4:	d10c      	bne.n	80021d0 <HAL_RCC_OscConfig+0xbc>
 80021b6:	4b72      	ldr	r3, [pc, #456]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a71      	ldr	r2, [pc, #452]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 80021bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021c0:	6013      	str	r3, [r2, #0]
 80021c2:	4b6f      	ldr	r3, [pc, #444]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a6e      	ldr	r2, [pc, #440]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 80021c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021cc:	6013      	str	r3, [r2, #0]
 80021ce:	e00b      	b.n	80021e8 <HAL_RCC_OscConfig+0xd4>
 80021d0:	4b6b      	ldr	r3, [pc, #428]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a6a      	ldr	r2, [pc, #424]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 80021d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021da:	6013      	str	r3, [r2, #0]
 80021dc:	4b68      	ldr	r3, [pc, #416]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a67      	ldr	r2, [pc, #412]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 80021e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d013      	beq.n	8002218 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f0:	f7ff fbde 	bl	80019b0 <HAL_GetTick>
 80021f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021f6:	e008      	b.n	800220a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021f8:	f7ff fbda 	bl	80019b0 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b64      	cmp	r3, #100	; 0x64
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e1fa      	b.n	8002600 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800220a:	4b5d      	ldr	r3, [pc, #372]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d0f0      	beq.n	80021f8 <HAL_RCC_OscConfig+0xe4>
 8002216:	e014      	b.n	8002242 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002218:	f7ff fbca 	bl	80019b0 <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002220:	f7ff fbc6 	bl	80019b0 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b64      	cmp	r3, #100	; 0x64
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e1e6      	b.n	8002600 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002232:	4b53      	ldr	r3, [pc, #332]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1f0      	bne.n	8002220 <HAL_RCC_OscConfig+0x10c>
 800223e:	e000      	b.n	8002242 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002240:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d063      	beq.n	8002316 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800224e:	4b4c      	ldr	r3, [pc, #304]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f003 030c 	and.w	r3, r3, #12
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00b      	beq.n	8002272 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800225a:	4b49      	ldr	r3, [pc, #292]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f003 030c 	and.w	r3, r3, #12
 8002262:	2b08      	cmp	r3, #8
 8002264:	d11c      	bne.n	80022a0 <HAL_RCC_OscConfig+0x18c>
 8002266:	4b46      	ldr	r3, [pc, #280]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d116      	bne.n	80022a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002272:	4b43      	ldr	r3, [pc, #268]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d005      	beq.n	800228a <HAL_RCC_OscConfig+0x176>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d001      	beq.n	800228a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e1ba      	b.n	8002600 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800228a:	4b3d      	ldr	r3, [pc, #244]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	4939      	ldr	r1, [pc, #228]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 800229a:	4313      	orrs	r3, r2
 800229c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800229e:	e03a      	b.n	8002316 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	691b      	ldr	r3, [r3, #16]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d020      	beq.n	80022ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022a8:	4b36      	ldr	r3, [pc, #216]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 80022aa:	2201      	movs	r2, #1
 80022ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ae:	f7ff fb7f 	bl	80019b0 <HAL_GetTick>
 80022b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b4:	e008      	b.n	80022c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022b6:	f7ff fb7b 	bl	80019b0 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d901      	bls.n	80022c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e19b      	b.n	8002600 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c8:	4b2d      	ldr	r3, [pc, #180]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d0f0      	beq.n	80022b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022d4:	4b2a      	ldr	r3, [pc, #168]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	695b      	ldr	r3, [r3, #20]
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	4927      	ldr	r1, [pc, #156]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	600b      	str	r3, [r1, #0]
 80022e8:	e015      	b.n	8002316 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022ea:	4b26      	ldr	r3, [pc, #152]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f0:	f7ff fb5e 	bl	80019b0 <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022f8:	f7ff fb5a 	bl	80019b0 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e17a      	b.n	8002600 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800230a:	4b1d      	ldr	r3, [pc, #116]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1f0      	bne.n	80022f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0308 	and.w	r3, r3, #8
 800231e:	2b00      	cmp	r3, #0
 8002320:	d03a      	beq.n	8002398 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d019      	beq.n	800235e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800232a:	4b17      	ldr	r3, [pc, #92]	; (8002388 <HAL_RCC_OscConfig+0x274>)
 800232c:	2201      	movs	r2, #1
 800232e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002330:	f7ff fb3e 	bl	80019b0 <HAL_GetTick>
 8002334:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002338:	f7ff fb3a 	bl	80019b0 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e15a      	b.n	8002600 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800234a:	4b0d      	ldr	r3, [pc, #52]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 800234c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d0f0      	beq.n	8002338 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002356:	2001      	movs	r0, #1
 8002358:	f000 facc 	bl	80028f4 <RCC_Delay>
 800235c:	e01c      	b.n	8002398 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800235e:	4b0a      	ldr	r3, [pc, #40]	; (8002388 <HAL_RCC_OscConfig+0x274>)
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002364:	f7ff fb24 	bl	80019b0 <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800236a:	e00f      	b.n	800238c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800236c:	f7ff fb20 	bl	80019b0 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d908      	bls.n	800238c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e140      	b.n	8002600 <HAL_RCC_OscConfig+0x4ec>
 800237e:	bf00      	nop
 8002380:	40021000 	.word	0x40021000
 8002384:	42420000 	.word	0x42420000
 8002388:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800238c:	4b9e      	ldr	r3, [pc, #632]	; (8002608 <HAL_RCC_OscConfig+0x4f4>)
 800238e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d1e9      	bne.n	800236c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0304 	and.w	r3, r3, #4
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f000 80a6 	beq.w	80024f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023a6:	2300      	movs	r3, #0
 80023a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023aa:	4b97      	ldr	r3, [pc, #604]	; (8002608 <HAL_RCC_OscConfig+0x4f4>)
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d10d      	bne.n	80023d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023b6:	4b94      	ldr	r3, [pc, #592]	; (8002608 <HAL_RCC_OscConfig+0x4f4>)
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	4a93      	ldr	r2, [pc, #588]	; (8002608 <HAL_RCC_OscConfig+0x4f4>)
 80023bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023c0:	61d3      	str	r3, [r2, #28]
 80023c2:	4b91      	ldr	r3, [pc, #580]	; (8002608 <HAL_RCC_OscConfig+0x4f4>)
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ca:	60bb      	str	r3, [r7, #8]
 80023cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023ce:	2301      	movs	r3, #1
 80023d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d2:	4b8e      	ldr	r3, [pc, #568]	; (800260c <HAL_RCC_OscConfig+0x4f8>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d118      	bne.n	8002410 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023de:	4b8b      	ldr	r3, [pc, #556]	; (800260c <HAL_RCC_OscConfig+0x4f8>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a8a      	ldr	r2, [pc, #552]	; (800260c <HAL_RCC_OscConfig+0x4f8>)
 80023e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ea:	f7ff fae1 	bl	80019b0 <HAL_GetTick>
 80023ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f0:	e008      	b.n	8002404 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023f2:	f7ff fadd 	bl	80019b0 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2b64      	cmp	r3, #100	; 0x64
 80023fe:	d901      	bls.n	8002404 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e0fd      	b.n	8002600 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002404:	4b81      	ldr	r3, [pc, #516]	; (800260c <HAL_RCC_OscConfig+0x4f8>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800240c:	2b00      	cmp	r3, #0
 800240e:	d0f0      	beq.n	80023f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d106      	bne.n	8002426 <HAL_RCC_OscConfig+0x312>
 8002418:	4b7b      	ldr	r3, [pc, #492]	; (8002608 <HAL_RCC_OscConfig+0x4f4>)
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	4a7a      	ldr	r2, [pc, #488]	; (8002608 <HAL_RCC_OscConfig+0x4f4>)
 800241e:	f043 0301 	orr.w	r3, r3, #1
 8002422:	6213      	str	r3, [r2, #32]
 8002424:	e02d      	b.n	8002482 <HAL_RCC_OscConfig+0x36e>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d10c      	bne.n	8002448 <HAL_RCC_OscConfig+0x334>
 800242e:	4b76      	ldr	r3, [pc, #472]	; (8002608 <HAL_RCC_OscConfig+0x4f4>)
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	4a75      	ldr	r2, [pc, #468]	; (8002608 <HAL_RCC_OscConfig+0x4f4>)
 8002434:	f023 0301 	bic.w	r3, r3, #1
 8002438:	6213      	str	r3, [r2, #32]
 800243a:	4b73      	ldr	r3, [pc, #460]	; (8002608 <HAL_RCC_OscConfig+0x4f4>)
 800243c:	6a1b      	ldr	r3, [r3, #32]
 800243e:	4a72      	ldr	r2, [pc, #456]	; (8002608 <HAL_RCC_OscConfig+0x4f4>)
 8002440:	f023 0304 	bic.w	r3, r3, #4
 8002444:	6213      	str	r3, [r2, #32]
 8002446:	e01c      	b.n	8002482 <HAL_RCC_OscConfig+0x36e>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	2b05      	cmp	r3, #5
 800244e:	d10c      	bne.n	800246a <HAL_RCC_OscConfig+0x356>
 8002450:	4b6d      	ldr	r3, [pc, #436]	; (8002608 <HAL_RCC_OscConfig+0x4f4>)
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	4a6c      	ldr	r2, [pc, #432]	; (8002608 <HAL_RCC_OscConfig+0x4f4>)
 8002456:	f043 0304 	orr.w	r3, r3, #4
 800245a:	6213      	str	r3, [r2, #32]
 800245c:	4b6a      	ldr	r3, [pc, #424]	; (8002608 <HAL_RCC_OscConfig+0x4f4>)
 800245e:	6a1b      	ldr	r3, [r3, #32]
 8002460:	4a69      	ldr	r2, [pc, #420]	; (8002608 <HAL_RCC_OscConfig+0x4f4>)
 8002462:	f043 0301 	orr.w	r3, r3, #1
 8002466:	6213      	str	r3, [r2, #32]
 8002468:	e00b      	b.n	8002482 <HAL_RCC_OscConfig+0x36e>
 800246a:	4b67      	ldr	r3, [pc, #412]	; (8002608 <HAL_RCC_OscConfig+0x4f4>)
 800246c:	6a1b      	ldr	r3, [r3, #32]
 800246e:	4a66      	ldr	r2, [pc, #408]	; (8002608 <HAL_RCC_OscConfig+0x4f4>)
 8002470:	f023 0301 	bic.w	r3, r3, #1
 8002474:	6213      	str	r3, [r2, #32]
 8002476:	4b64      	ldr	r3, [pc, #400]	; (8002608 <HAL_RCC_OscConfig+0x4f4>)
 8002478:	6a1b      	ldr	r3, [r3, #32]
 800247a:	4a63      	ldr	r2, [pc, #396]	; (8002608 <HAL_RCC_OscConfig+0x4f4>)
 800247c:	f023 0304 	bic.w	r3, r3, #4
 8002480:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d015      	beq.n	80024b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800248a:	f7ff fa91 	bl	80019b0 <HAL_GetTick>
 800248e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002490:	e00a      	b.n	80024a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002492:	f7ff fa8d 	bl	80019b0 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e0ab      	b.n	8002600 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024a8:	4b57      	ldr	r3, [pc, #348]	; (8002608 <HAL_RCC_OscConfig+0x4f4>)
 80024aa:	6a1b      	ldr	r3, [r3, #32]
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d0ee      	beq.n	8002492 <HAL_RCC_OscConfig+0x37e>
 80024b4:	e014      	b.n	80024e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024b6:	f7ff fa7b 	bl	80019b0 <HAL_GetTick>
 80024ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024bc:	e00a      	b.n	80024d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024be:	f7ff fa77 	bl	80019b0 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e095      	b.n	8002600 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024d4:	4b4c      	ldr	r3, [pc, #304]	; (8002608 <HAL_RCC_OscConfig+0x4f4>)
 80024d6:	6a1b      	ldr	r3, [r3, #32]
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1ee      	bne.n	80024be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024e0:	7dfb      	ldrb	r3, [r7, #23]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d105      	bne.n	80024f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024e6:	4b48      	ldr	r3, [pc, #288]	; (8002608 <HAL_RCC_OscConfig+0x4f4>)
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	4a47      	ldr	r2, [pc, #284]	; (8002608 <HAL_RCC_OscConfig+0x4f4>)
 80024ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	69db      	ldr	r3, [r3, #28]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f000 8081 	beq.w	80025fe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024fc:	4b42      	ldr	r3, [pc, #264]	; (8002608 <HAL_RCC_OscConfig+0x4f4>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f003 030c 	and.w	r3, r3, #12
 8002504:	2b08      	cmp	r3, #8
 8002506:	d061      	beq.n	80025cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	69db      	ldr	r3, [r3, #28]
 800250c:	2b02      	cmp	r3, #2
 800250e:	d146      	bne.n	800259e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002510:	4b3f      	ldr	r3, [pc, #252]	; (8002610 <HAL_RCC_OscConfig+0x4fc>)
 8002512:	2200      	movs	r2, #0
 8002514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002516:	f7ff fa4b 	bl	80019b0 <HAL_GetTick>
 800251a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800251c:	e008      	b.n	8002530 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800251e:	f7ff fa47 	bl	80019b0 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d901      	bls.n	8002530 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e067      	b.n	8002600 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002530:	4b35      	ldr	r3, [pc, #212]	; (8002608 <HAL_RCC_OscConfig+0x4f4>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d1f0      	bne.n	800251e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a1b      	ldr	r3, [r3, #32]
 8002540:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002544:	d108      	bne.n	8002558 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002546:	4b30      	ldr	r3, [pc, #192]	; (8002608 <HAL_RCC_OscConfig+0x4f4>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	492d      	ldr	r1, [pc, #180]	; (8002608 <HAL_RCC_OscConfig+0x4f4>)
 8002554:	4313      	orrs	r3, r2
 8002556:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002558:	4b2b      	ldr	r3, [pc, #172]	; (8002608 <HAL_RCC_OscConfig+0x4f4>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a19      	ldr	r1, [r3, #32]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002568:	430b      	orrs	r3, r1
 800256a:	4927      	ldr	r1, [pc, #156]	; (8002608 <HAL_RCC_OscConfig+0x4f4>)
 800256c:	4313      	orrs	r3, r2
 800256e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002570:	4b27      	ldr	r3, [pc, #156]	; (8002610 <HAL_RCC_OscConfig+0x4fc>)
 8002572:	2201      	movs	r2, #1
 8002574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002576:	f7ff fa1b 	bl	80019b0 <HAL_GetTick>
 800257a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800257c:	e008      	b.n	8002590 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800257e:	f7ff fa17 	bl	80019b0 <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	2b02      	cmp	r3, #2
 800258a:	d901      	bls.n	8002590 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e037      	b.n	8002600 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002590:	4b1d      	ldr	r3, [pc, #116]	; (8002608 <HAL_RCC_OscConfig+0x4f4>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d0f0      	beq.n	800257e <HAL_RCC_OscConfig+0x46a>
 800259c:	e02f      	b.n	80025fe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800259e:	4b1c      	ldr	r3, [pc, #112]	; (8002610 <HAL_RCC_OscConfig+0x4fc>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a4:	f7ff fa04 	bl	80019b0 <HAL_GetTick>
 80025a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025aa:	e008      	b.n	80025be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ac:	f7ff fa00 	bl	80019b0 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d901      	bls.n	80025be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e020      	b.n	8002600 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025be:	4b12      	ldr	r3, [pc, #72]	; (8002608 <HAL_RCC_OscConfig+0x4f4>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1f0      	bne.n	80025ac <HAL_RCC_OscConfig+0x498>
 80025ca:	e018      	b.n	80025fe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	69db      	ldr	r3, [r3, #28]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d101      	bne.n	80025d8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e013      	b.n	8002600 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025d8:	4b0b      	ldr	r3, [pc, #44]	; (8002608 <HAL_RCC_OscConfig+0x4f4>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a1b      	ldr	r3, [r3, #32]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d106      	bne.n	80025fa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d001      	beq.n	80025fe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e000      	b.n	8002600 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3718      	adds	r7, #24
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40021000 	.word	0x40021000
 800260c:	40007000 	.word	0x40007000
 8002610:	42420060 	.word	0x42420060

08002614 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d101      	bne.n	8002628 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e0d0      	b.n	80027ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002628:	4b6a      	ldr	r3, [pc, #424]	; (80027d4 <HAL_RCC_ClockConfig+0x1c0>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0307 	and.w	r3, r3, #7
 8002630:	683a      	ldr	r2, [r7, #0]
 8002632:	429a      	cmp	r2, r3
 8002634:	d910      	bls.n	8002658 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002636:	4b67      	ldr	r3, [pc, #412]	; (80027d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f023 0207 	bic.w	r2, r3, #7
 800263e:	4965      	ldr	r1, [pc, #404]	; (80027d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	4313      	orrs	r3, r2
 8002644:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002646:	4b63      	ldr	r3, [pc, #396]	; (80027d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0307 	and.w	r3, r3, #7
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	429a      	cmp	r2, r3
 8002652:	d001      	beq.n	8002658 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e0b8      	b.n	80027ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d020      	beq.n	80026a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0304 	and.w	r3, r3, #4
 800266c:	2b00      	cmp	r3, #0
 800266e:	d005      	beq.n	800267c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002670:	4b59      	ldr	r3, [pc, #356]	; (80027d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	4a58      	ldr	r2, [pc, #352]	; (80027d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002676:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800267a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0308 	and.w	r3, r3, #8
 8002684:	2b00      	cmp	r3, #0
 8002686:	d005      	beq.n	8002694 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002688:	4b53      	ldr	r3, [pc, #332]	; (80027d8 <HAL_RCC_ClockConfig+0x1c4>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	4a52      	ldr	r2, [pc, #328]	; (80027d8 <HAL_RCC_ClockConfig+0x1c4>)
 800268e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002692:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002694:	4b50      	ldr	r3, [pc, #320]	; (80027d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	494d      	ldr	r1, [pc, #308]	; (80027d8 <HAL_RCC_ClockConfig+0x1c4>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d040      	beq.n	8002734 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d107      	bne.n	80026ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ba:	4b47      	ldr	r3, [pc, #284]	; (80027d8 <HAL_RCC_ClockConfig+0x1c4>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d115      	bne.n	80026f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e07f      	b.n	80027ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d107      	bne.n	80026e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026d2:	4b41      	ldr	r3, [pc, #260]	; (80027d8 <HAL_RCC_ClockConfig+0x1c4>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d109      	bne.n	80026f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e073      	b.n	80027ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026e2:	4b3d      	ldr	r3, [pc, #244]	; (80027d8 <HAL_RCC_ClockConfig+0x1c4>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e06b      	b.n	80027ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026f2:	4b39      	ldr	r3, [pc, #228]	; (80027d8 <HAL_RCC_ClockConfig+0x1c4>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f023 0203 	bic.w	r2, r3, #3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	4936      	ldr	r1, [pc, #216]	; (80027d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002700:	4313      	orrs	r3, r2
 8002702:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002704:	f7ff f954 	bl	80019b0 <HAL_GetTick>
 8002708:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800270a:	e00a      	b.n	8002722 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800270c:	f7ff f950 	bl	80019b0 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	f241 3288 	movw	r2, #5000	; 0x1388
 800271a:	4293      	cmp	r3, r2
 800271c:	d901      	bls.n	8002722 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e053      	b.n	80027ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002722:	4b2d      	ldr	r3, [pc, #180]	; (80027d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f003 020c 	and.w	r2, r3, #12
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	429a      	cmp	r2, r3
 8002732:	d1eb      	bne.n	800270c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002734:	4b27      	ldr	r3, [pc, #156]	; (80027d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0307 	and.w	r3, r3, #7
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	429a      	cmp	r2, r3
 8002740:	d210      	bcs.n	8002764 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002742:	4b24      	ldr	r3, [pc, #144]	; (80027d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f023 0207 	bic.w	r2, r3, #7
 800274a:	4922      	ldr	r1, [pc, #136]	; (80027d4 <HAL_RCC_ClockConfig+0x1c0>)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	4313      	orrs	r3, r2
 8002750:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002752:	4b20      	ldr	r3, [pc, #128]	; (80027d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0307 	and.w	r3, r3, #7
 800275a:	683a      	ldr	r2, [r7, #0]
 800275c:	429a      	cmp	r2, r3
 800275e:	d001      	beq.n	8002764 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e032      	b.n	80027ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0304 	and.w	r3, r3, #4
 800276c:	2b00      	cmp	r3, #0
 800276e:	d008      	beq.n	8002782 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002770:	4b19      	ldr	r3, [pc, #100]	; (80027d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	4916      	ldr	r1, [pc, #88]	; (80027d8 <HAL_RCC_ClockConfig+0x1c4>)
 800277e:	4313      	orrs	r3, r2
 8002780:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0308 	and.w	r3, r3, #8
 800278a:	2b00      	cmp	r3, #0
 800278c:	d009      	beq.n	80027a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800278e:	4b12      	ldr	r3, [pc, #72]	; (80027d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	490e      	ldr	r1, [pc, #56]	; (80027d8 <HAL_RCC_ClockConfig+0x1c4>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027a2:	f000 f821 	bl	80027e8 <HAL_RCC_GetSysClockFreq>
 80027a6:	4602      	mov	r2, r0
 80027a8:	4b0b      	ldr	r3, [pc, #44]	; (80027d8 <HAL_RCC_ClockConfig+0x1c4>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	091b      	lsrs	r3, r3, #4
 80027ae:	f003 030f 	and.w	r3, r3, #15
 80027b2:	490a      	ldr	r1, [pc, #40]	; (80027dc <HAL_RCC_ClockConfig+0x1c8>)
 80027b4:	5ccb      	ldrb	r3, [r1, r3]
 80027b6:	fa22 f303 	lsr.w	r3, r2, r3
 80027ba:	4a09      	ldr	r2, [pc, #36]	; (80027e0 <HAL_RCC_ClockConfig+0x1cc>)
 80027bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027be:	4b09      	ldr	r3, [pc, #36]	; (80027e4 <HAL_RCC_ClockConfig+0x1d0>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff f8b2 	bl	800192c <HAL_InitTick>

  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	40022000 	.word	0x40022000
 80027d8:	40021000 	.word	0x40021000
 80027dc:	08004d78 	.word	0x08004d78
 80027e0:	20000038 	.word	0x20000038
 80027e4:	2000003c 	.word	0x2000003c

080027e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b087      	sub	sp, #28
 80027ec:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027ee:	2300      	movs	r3, #0
 80027f0:	60fb      	str	r3, [r7, #12]
 80027f2:	2300      	movs	r3, #0
 80027f4:	60bb      	str	r3, [r7, #8]
 80027f6:	2300      	movs	r3, #0
 80027f8:	617b      	str	r3, [r7, #20]
 80027fa:	2300      	movs	r3, #0
 80027fc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80027fe:	2300      	movs	r3, #0
 8002800:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002802:	4b1e      	ldr	r3, [pc, #120]	; (800287c <HAL_RCC_GetSysClockFreq+0x94>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f003 030c 	and.w	r3, r3, #12
 800280e:	2b04      	cmp	r3, #4
 8002810:	d002      	beq.n	8002818 <HAL_RCC_GetSysClockFreq+0x30>
 8002812:	2b08      	cmp	r3, #8
 8002814:	d003      	beq.n	800281e <HAL_RCC_GetSysClockFreq+0x36>
 8002816:	e027      	b.n	8002868 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002818:	4b19      	ldr	r3, [pc, #100]	; (8002880 <HAL_RCC_GetSysClockFreq+0x98>)
 800281a:	613b      	str	r3, [r7, #16]
      break;
 800281c:	e027      	b.n	800286e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	0c9b      	lsrs	r3, r3, #18
 8002822:	f003 030f 	and.w	r3, r3, #15
 8002826:	4a17      	ldr	r2, [pc, #92]	; (8002884 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002828:	5cd3      	ldrb	r3, [r2, r3]
 800282a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d010      	beq.n	8002858 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002836:	4b11      	ldr	r3, [pc, #68]	; (800287c <HAL_RCC_GetSysClockFreq+0x94>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	0c5b      	lsrs	r3, r3, #17
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	4a11      	ldr	r2, [pc, #68]	; (8002888 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002842:	5cd3      	ldrb	r3, [r2, r3]
 8002844:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a0d      	ldr	r2, [pc, #52]	; (8002880 <HAL_RCC_GetSysClockFreq+0x98>)
 800284a:	fb02 f203 	mul.w	r2, r2, r3
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	fbb2 f3f3 	udiv	r3, r2, r3
 8002854:	617b      	str	r3, [r7, #20]
 8002856:	e004      	b.n	8002862 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	4a0c      	ldr	r2, [pc, #48]	; (800288c <HAL_RCC_GetSysClockFreq+0xa4>)
 800285c:	fb02 f303 	mul.w	r3, r2, r3
 8002860:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	613b      	str	r3, [r7, #16]
      break;
 8002866:	e002      	b.n	800286e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002868:	4b05      	ldr	r3, [pc, #20]	; (8002880 <HAL_RCC_GetSysClockFreq+0x98>)
 800286a:	613b      	str	r3, [r7, #16]
      break;
 800286c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800286e:	693b      	ldr	r3, [r7, #16]
}
 8002870:	4618      	mov	r0, r3
 8002872:	371c      	adds	r7, #28
 8002874:	46bd      	mov	sp, r7
 8002876:	bc80      	pop	{r7}
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	40021000 	.word	0x40021000
 8002880:	007a1200 	.word	0x007a1200
 8002884:	08004d90 	.word	0x08004d90
 8002888:	08004da0 	.word	0x08004da0
 800288c:	003d0900 	.word	0x003d0900

08002890 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002894:	4b02      	ldr	r3, [pc, #8]	; (80028a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002896:	681b      	ldr	r3, [r3, #0]
}
 8002898:	4618      	mov	r0, r3
 800289a:	46bd      	mov	sp, r7
 800289c:	bc80      	pop	{r7}
 800289e:	4770      	bx	lr
 80028a0:	20000038 	.word	0x20000038

080028a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028a8:	f7ff fff2 	bl	8002890 <HAL_RCC_GetHCLKFreq>
 80028ac:	4602      	mov	r2, r0
 80028ae:	4b05      	ldr	r3, [pc, #20]	; (80028c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	0a1b      	lsrs	r3, r3, #8
 80028b4:	f003 0307 	and.w	r3, r3, #7
 80028b8:	4903      	ldr	r1, [pc, #12]	; (80028c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028ba:	5ccb      	ldrb	r3, [r1, r3]
 80028bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	40021000 	.word	0x40021000
 80028c8:	08004d88 	.word	0x08004d88

080028cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028d0:	f7ff ffde 	bl	8002890 <HAL_RCC_GetHCLKFreq>
 80028d4:	4602      	mov	r2, r0
 80028d6:	4b05      	ldr	r3, [pc, #20]	; (80028ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	0adb      	lsrs	r3, r3, #11
 80028dc:	f003 0307 	and.w	r3, r3, #7
 80028e0:	4903      	ldr	r1, [pc, #12]	; (80028f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028e2:	5ccb      	ldrb	r3, [r1, r3]
 80028e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	40021000 	.word	0x40021000
 80028f0:	08004d88 	.word	0x08004d88

080028f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028fc:	4b0a      	ldr	r3, [pc, #40]	; (8002928 <RCC_Delay+0x34>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a0a      	ldr	r2, [pc, #40]	; (800292c <RCC_Delay+0x38>)
 8002902:	fba2 2303 	umull	r2, r3, r2, r3
 8002906:	0a5b      	lsrs	r3, r3, #9
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	fb02 f303 	mul.w	r3, r2, r3
 800290e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002910:	bf00      	nop
  }
  while (Delay --);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	1e5a      	subs	r2, r3, #1
 8002916:	60fa      	str	r2, [r7, #12]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1f9      	bne.n	8002910 <RCC_Delay+0x1c>
}
 800291c:	bf00      	nop
 800291e:	bf00      	nop
 8002920:	3714      	adds	r7, #20
 8002922:	46bd      	mov	sp, r7
 8002924:	bc80      	pop	{r7}
 8002926:	4770      	bx	lr
 8002928:	20000038 	.word	0x20000038
 800292c:	10624dd3 	.word	0x10624dd3

08002930 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e041      	b.n	80029c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d106      	bne.n	800295c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f7fe fe66 	bl	8001628 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2202      	movs	r2, #2
 8002960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	3304      	adds	r3, #4
 800296c:	4619      	mov	r1, r3
 800296e:	4610      	mov	r0, r2
 8002970:	f000 fc30 	bl	80031d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
	...

080029d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d001      	beq.n	80029e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e03a      	b.n	8002a5e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2202      	movs	r2, #2
 80029ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68da      	ldr	r2, [r3, #12]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f042 0201 	orr.w	r2, r2, #1
 80029fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a18      	ldr	r2, [pc, #96]	; (8002a68 <HAL_TIM_Base_Start_IT+0x98>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d00e      	beq.n	8002a28 <HAL_TIM_Base_Start_IT+0x58>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a12:	d009      	beq.n	8002a28 <HAL_TIM_Base_Start_IT+0x58>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a14      	ldr	r2, [pc, #80]	; (8002a6c <HAL_TIM_Base_Start_IT+0x9c>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d004      	beq.n	8002a28 <HAL_TIM_Base_Start_IT+0x58>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a13      	ldr	r2, [pc, #76]	; (8002a70 <HAL_TIM_Base_Start_IT+0xa0>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d111      	bne.n	8002a4c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f003 0307 	and.w	r3, r3, #7
 8002a32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2b06      	cmp	r3, #6
 8002a38:	d010      	beq.n	8002a5c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f042 0201 	orr.w	r2, r2, #1
 8002a48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a4a:	e007      	b.n	8002a5c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f042 0201 	orr.w	r2, r2, #1
 8002a5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3714      	adds	r7, #20
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bc80      	pop	{r7}
 8002a66:	4770      	bx	lr
 8002a68:	40012c00 	.word	0x40012c00
 8002a6c:	40000400 	.word	0x40000400
 8002a70:	40000800 	.word	0x40000800

08002a74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e041      	b.n	8002b0a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d106      	bne.n	8002aa0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 f839 	bl	8002b12 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	3304      	adds	r3, #4
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	4610      	mov	r0, r2
 8002ab4:	f000 fb8e 	bl	80031d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b12:	b480      	push	{r7}
 8002b14:	b083      	sub	sp, #12
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b1a:	bf00      	nop
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr

08002b24 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d109      	bne.n	8002b48 <HAL_TIM_PWM_Start+0x24>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	bf14      	ite	ne
 8002b40:	2301      	movne	r3, #1
 8002b42:	2300      	moveq	r3, #0
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	e022      	b.n	8002b8e <HAL_TIM_PWM_Start+0x6a>
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	2b04      	cmp	r3, #4
 8002b4c:	d109      	bne.n	8002b62 <HAL_TIM_PWM_Start+0x3e>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	bf14      	ite	ne
 8002b5a:	2301      	movne	r3, #1
 8002b5c:	2300      	moveq	r3, #0
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	e015      	b.n	8002b8e <HAL_TIM_PWM_Start+0x6a>
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	2b08      	cmp	r3, #8
 8002b66:	d109      	bne.n	8002b7c <HAL_TIM_PWM_Start+0x58>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	bf14      	ite	ne
 8002b74:	2301      	movne	r3, #1
 8002b76:	2300      	moveq	r3, #0
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	e008      	b.n	8002b8e <HAL_TIM_PWM_Start+0x6a>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	bf14      	ite	ne
 8002b88:	2301      	movne	r3, #1
 8002b8a:	2300      	moveq	r3, #0
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e05e      	b.n	8002c54 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d104      	bne.n	8002ba6 <HAL_TIM_PWM_Start+0x82>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2202      	movs	r2, #2
 8002ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ba4:	e013      	b.n	8002bce <HAL_TIM_PWM_Start+0xaa>
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	2b04      	cmp	r3, #4
 8002baa:	d104      	bne.n	8002bb6 <HAL_TIM_PWM_Start+0x92>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2202      	movs	r2, #2
 8002bb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bb4:	e00b      	b.n	8002bce <HAL_TIM_PWM_Start+0xaa>
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	2b08      	cmp	r3, #8
 8002bba:	d104      	bne.n	8002bc6 <HAL_TIM_PWM_Start+0xa2>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bc4:	e003      	b.n	8002bce <HAL_TIM_PWM_Start+0xaa>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2202      	movs	r2, #2
 8002bca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	6839      	ldr	r1, [r7, #0]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f000 fd7c 	bl	80036d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a1e      	ldr	r2, [pc, #120]	; (8002c5c <HAL_TIM_PWM_Start+0x138>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d107      	bne.n	8002bf6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bf4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a18      	ldr	r2, [pc, #96]	; (8002c5c <HAL_TIM_PWM_Start+0x138>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d00e      	beq.n	8002c1e <HAL_TIM_PWM_Start+0xfa>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c08:	d009      	beq.n	8002c1e <HAL_TIM_PWM_Start+0xfa>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a14      	ldr	r2, [pc, #80]	; (8002c60 <HAL_TIM_PWM_Start+0x13c>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d004      	beq.n	8002c1e <HAL_TIM_PWM_Start+0xfa>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a12      	ldr	r2, [pc, #72]	; (8002c64 <HAL_TIM_PWM_Start+0x140>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d111      	bne.n	8002c42 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f003 0307 	and.w	r3, r3, #7
 8002c28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2b06      	cmp	r3, #6
 8002c2e:	d010      	beq.n	8002c52 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f042 0201 	orr.w	r2, r2, #1
 8002c3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c40:	e007      	b.n	8002c52 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f042 0201 	orr.w	r2, r2, #1
 8002c50:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3710      	adds	r7, #16
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	40012c00 	.word	0x40012c00
 8002c60:	40000400 	.word	0x40000400
 8002c64:	40000800 	.word	0x40000800

08002c68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d122      	bne.n	8002cc4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d11b      	bne.n	8002cc4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f06f 0202 	mvn.w	r2, #2
 8002c94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	f003 0303 	and.w	r3, r3, #3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d003      	beq.n	8002cb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 fa76 	bl	800319c <HAL_TIM_IC_CaptureCallback>
 8002cb0:	e005      	b.n	8002cbe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 fa69 	bl	800318a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f000 fa78 	bl	80031ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	f003 0304 	and.w	r3, r3, #4
 8002cce:	2b04      	cmp	r3, #4
 8002cd0:	d122      	bne.n	8002d18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	f003 0304 	and.w	r3, r3, #4
 8002cdc:	2b04      	cmp	r3, #4
 8002cde:	d11b      	bne.n	8002d18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f06f 0204 	mvn.w	r2, #4
 8002ce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2202      	movs	r2, #2
 8002cee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 fa4c 	bl	800319c <HAL_TIM_IC_CaptureCallback>
 8002d04:	e005      	b.n	8002d12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 fa3f 	bl	800318a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f000 fa4e 	bl	80031ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	f003 0308 	and.w	r3, r3, #8
 8002d22:	2b08      	cmp	r3, #8
 8002d24:	d122      	bne.n	8002d6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	f003 0308 	and.w	r3, r3, #8
 8002d30:	2b08      	cmp	r3, #8
 8002d32:	d11b      	bne.n	8002d6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f06f 0208 	mvn.w	r2, #8
 8002d3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2204      	movs	r2, #4
 8002d42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	f003 0303 	and.w	r3, r3, #3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d003      	beq.n	8002d5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 fa22 	bl	800319c <HAL_TIM_IC_CaptureCallback>
 8002d58:	e005      	b.n	8002d66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 fa15 	bl	800318a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f000 fa24 	bl	80031ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	f003 0310 	and.w	r3, r3, #16
 8002d76:	2b10      	cmp	r3, #16
 8002d78:	d122      	bne.n	8002dc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	f003 0310 	and.w	r3, r3, #16
 8002d84:	2b10      	cmp	r3, #16
 8002d86:	d11b      	bne.n	8002dc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f06f 0210 	mvn.w	r2, #16
 8002d90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2208      	movs	r2, #8
 8002d96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	69db      	ldr	r3, [r3, #28]
 8002d9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d003      	beq.n	8002dae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 f9f8 	bl	800319c <HAL_TIM_IC_CaptureCallback>
 8002dac:	e005      	b.n	8002dba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 f9eb 	bl	800318a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 f9fa 	bl	80031ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d10e      	bne.n	8002dec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d107      	bne.n	8002dec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f06f 0201 	mvn.w	r2, #1
 8002de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f7fe f8c4 	bl	8000f74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002df6:	2b80      	cmp	r3, #128	; 0x80
 8002df8:	d10e      	bne.n	8002e18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e04:	2b80      	cmp	r3, #128	; 0x80
 8002e06:	d107      	bne.n	8002e18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 fce9 	bl	80037ea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e22:	2b40      	cmp	r3, #64	; 0x40
 8002e24:	d10e      	bne.n	8002e44 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e30:	2b40      	cmp	r3, #64	; 0x40
 8002e32:	d107      	bne.n	8002e44 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 f9be 	bl	80031c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	f003 0320 	and.w	r3, r3, #32
 8002e4e:	2b20      	cmp	r3, #32
 8002e50:	d10e      	bne.n	8002e70 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	f003 0320 	and.w	r3, r3, #32
 8002e5c:	2b20      	cmp	r3, #32
 8002e5e:	d107      	bne.n	8002e70 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f06f 0220 	mvn.w	r2, #32
 8002e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 fcb4 	bl	80037d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e70:	bf00      	nop
 8002e72:	3708      	adds	r7, #8
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e84:	2300      	movs	r3, #0
 8002e86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d101      	bne.n	8002e96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002e92:	2302      	movs	r3, #2
 8002e94:	e0ae      	b.n	8002ff4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2b0c      	cmp	r3, #12
 8002ea2:	f200 809f 	bhi.w	8002fe4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002ea6:	a201      	add	r2, pc, #4	; (adr r2, 8002eac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eac:	08002ee1 	.word	0x08002ee1
 8002eb0:	08002fe5 	.word	0x08002fe5
 8002eb4:	08002fe5 	.word	0x08002fe5
 8002eb8:	08002fe5 	.word	0x08002fe5
 8002ebc:	08002f21 	.word	0x08002f21
 8002ec0:	08002fe5 	.word	0x08002fe5
 8002ec4:	08002fe5 	.word	0x08002fe5
 8002ec8:	08002fe5 	.word	0x08002fe5
 8002ecc:	08002f63 	.word	0x08002f63
 8002ed0:	08002fe5 	.word	0x08002fe5
 8002ed4:	08002fe5 	.word	0x08002fe5
 8002ed8:	08002fe5 	.word	0x08002fe5
 8002edc:	08002fa3 	.word	0x08002fa3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68b9      	ldr	r1, [r7, #8]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f000 f9d6 	bl	8003298 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	699a      	ldr	r2, [r3, #24]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f042 0208 	orr.w	r2, r2, #8
 8002efa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	699a      	ldr	r2, [r3, #24]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f022 0204 	bic.w	r2, r2, #4
 8002f0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	6999      	ldr	r1, [r3, #24]
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	691a      	ldr	r2, [r3, #16]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	619a      	str	r2, [r3, #24]
      break;
 8002f1e:	e064      	b.n	8002fea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68b9      	ldr	r1, [r7, #8]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f000 fa1c 	bl	8003364 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	699a      	ldr	r2, [r3, #24]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	699a      	ldr	r2, [r3, #24]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6999      	ldr	r1, [r3, #24]
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	021a      	lsls	r2, r3, #8
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	619a      	str	r2, [r3, #24]
      break;
 8002f60:	e043      	b.n	8002fea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68b9      	ldr	r1, [r7, #8]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f000 fa65 	bl	8003438 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	69da      	ldr	r2, [r3, #28]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f042 0208 	orr.w	r2, r2, #8
 8002f7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	69da      	ldr	r2, [r3, #28]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f022 0204 	bic.w	r2, r2, #4
 8002f8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	69d9      	ldr	r1, [r3, #28]
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	691a      	ldr	r2, [r3, #16]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	61da      	str	r2, [r3, #28]
      break;
 8002fa0:	e023      	b.n	8002fea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68b9      	ldr	r1, [r7, #8]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f000 faaf 	bl	800350c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	69da      	ldr	r2, [r3, #28]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	69da      	ldr	r2, [r3, #28]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	69d9      	ldr	r1, [r3, #28]
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	021a      	lsls	r2, r3, #8
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	61da      	str	r2, [r3, #28]
      break;
 8002fe2:	e002      	b.n	8002fea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	75fb      	strb	r3, [r7, #23]
      break;
 8002fe8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ff2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3718      	adds	r7, #24
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003006:	2300      	movs	r3, #0
 8003008:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003010:	2b01      	cmp	r3, #1
 8003012:	d101      	bne.n	8003018 <HAL_TIM_ConfigClockSource+0x1c>
 8003014:	2302      	movs	r3, #2
 8003016:	e0b4      	b.n	8003182 <HAL_TIM_ConfigClockSource+0x186>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2202      	movs	r2, #2
 8003024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003036:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800303e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68ba      	ldr	r2, [r7, #8]
 8003046:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003050:	d03e      	beq.n	80030d0 <HAL_TIM_ConfigClockSource+0xd4>
 8003052:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003056:	f200 8087 	bhi.w	8003168 <HAL_TIM_ConfigClockSource+0x16c>
 800305a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800305e:	f000 8086 	beq.w	800316e <HAL_TIM_ConfigClockSource+0x172>
 8003062:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003066:	d87f      	bhi.n	8003168 <HAL_TIM_ConfigClockSource+0x16c>
 8003068:	2b70      	cmp	r3, #112	; 0x70
 800306a:	d01a      	beq.n	80030a2 <HAL_TIM_ConfigClockSource+0xa6>
 800306c:	2b70      	cmp	r3, #112	; 0x70
 800306e:	d87b      	bhi.n	8003168 <HAL_TIM_ConfigClockSource+0x16c>
 8003070:	2b60      	cmp	r3, #96	; 0x60
 8003072:	d050      	beq.n	8003116 <HAL_TIM_ConfigClockSource+0x11a>
 8003074:	2b60      	cmp	r3, #96	; 0x60
 8003076:	d877      	bhi.n	8003168 <HAL_TIM_ConfigClockSource+0x16c>
 8003078:	2b50      	cmp	r3, #80	; 0x50
 800307a:	d03c      	beq.n	80030f6 <HAL_TIM_ConfigClockSource+0xfa>
 800307c:	2b50      	cmp	r3, #80	; 0x50
 800307e:	d873      	bhi.n	8003168 <HAL_TIM_ConfigClockSource+0x16c>
 8003080:	2b40      	cmp	r3, #64	; 0x40
 8003082:	d058      	beq.n	8003136 <HAL_TIM_ConfigClockSource+0x13a>
 8003084:	2b40      	cmp	r3, #64	; 0x40
 8003086:	d86f      	bhi.n	8003168 <HAL_TIM_ConfigClockSource+0x16c>
 8003088:	2b30      	cmp	r3, #48	; 0x30
 800308a:	d064      	beq.n	8003156 <HAL_TIM_ConfigClockSource+0x15a>
 800308c:	2b30      	cmp	r3, #48	; 0x30
 800308e:	d86b      	bhi.n	8003168 <HAL_TIM_ConfigClockSource+0x16c>
 8003090:	2b20      	cmp	r3, #32
 8003092:	d060      	beq.n	8003156 <HAL_TIM_ConfigClockSource+0x15a>
 8003094:	2b20      	cmp	r3, #32
 8003096:	d867      	bhi.n	8003168 <HAL_TIM_ConfigClockSource+0x16c>
 8003098:	2b00      	cmp	r3, #0
 800309a:	d05c      	beq.n	8003156 <HAL_TIM_ConfigClockSource+0x15a>
 800309c:	2b10      	cmp	r3, #16
 800309e:	d05a      	beq.n	8003156 <HAL_TIM_ConfigClockSource+0x15a>
 80030a0:	e062      	b.n	8003168 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6818      	ldr	r0, [r3, #0]
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	6899      	ldr	r1, [r3, #8]
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685a      	ldr	r2, [r3, #4]
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	f000 faf0 	bl	8003696 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80030c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68ba      	ldr	r2, [r7, #8]
 80030cc:	609a      	str	r2, [r3, #8]
      break;
 80030ce:	e04f      	b.n	8003170 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6818      	ldr	r0, [r3, #0]
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	6899      	ldr	r1, [r3, #8]
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685a      	ldr	r2, [r3, #4]
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	f000 fad9 	bl	8003696 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689a      	ldr	r2, [r3, #8]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030f2:	609a      	str	r2, [r3, #8]
      break;
 80030f4:	e03c      	b.n	8003170 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6818      	ldr	r0, [r3, #0]
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	6859      	ldr	r1, [r3, #4]
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	461a      	mov	r2, r3
 8003104:	f000 fa50 	bl	80035a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2150      	movs	r1, #80	; 0x50
 800310e:	4618      	mov	r0, r3
 8003110:	f000 faa7 	bl	8003662 <TIM_ITRx_SetConfig>
      break;
 8003114:	e02c      	b.n	8003170 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6818      	ldr	r0, [r3, #0]
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	6859      	ldr	r1, [r3, #4]
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	461a      	mov	r2, r3
 8003124:	f000 fa6e 	bl	8003604 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2160      	movs	r1, #96	; 0x60
 800312e:	4618      	mov	r0, r3
 8003130:	f000 fa97 	bl	8003662 <TIM_ITRx_SetConfig>
      break;
 8003134:	e01c      	b.n	8003170 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6818      	ldr	r0, [r3, #0]
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	6859      	ldr	r1, [r3, #4]
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	461a      	mov	r2, r3
 8003144:	f000 fa30 	bl	80035a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2140      	movs	r1, #64	; 0x40
 800314e:	4618      	mov	r0, r3
 8003150:	f000 fa87 	bl	8003662 <TIM_ITRx_SetConfig>
      break;
 8003154:	e00c      	b.n	8003170 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4619      	mov	r1, r3
 8003160:	4610      	mov	r0, r2
 8003162:	f000 fa7e 	bl	8003662 <TIM_ITRx_SetConfig>
      break;
 8003166:	e003      	b.n	8003170 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	73fb      	strb	r3, [r7, #15]
      break;
 800316c:	e000      	b.n	8003170 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800316e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003180:	7bfb      	ldrb	r3, [r7, #15]
}
 8003182:	4618      	mov	r0, r3
 8003184:	3710      	adds	r7, #16
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800318a:	b480      	push	{r7}
 800318c:	b083      	sub	sp, #12
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003192:	bf00      	nop
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	bc80      	pop	{r7}
 800319a:	4770      	bx	lr

0800319c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bc80      	pop	{r7}
 80031ac:	4770      	bx	lr

080031ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031ae:	b480      	push	{r7}
 80031b0:	b083      	sub	sp, #12
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031b6:	bf00      	nop
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bc80      	pop	{r7}
 80031be:	4770      	bx	lr

080031c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031c8:	bf00      	nop
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bc80      	pop	{r7}
 80031d0:	4770      	bx	lr
	...

080031d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a29      	ldr	r2, [pc, #164]	; (800328c <TIM_Base_SetConfig+0xb8>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d00b      	beq.n	8003204 <TIM_Base_SetConfig+0x30>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031f2:	d007      	beq.n	8003204 <TIM_Base_SetConfig+0x30>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a26      	ldr	r2, [pc, #152]	; (8003290 <TIM_Base_SetConfig+0xbc>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d003      	beq.n	8003204 <TIM_Base_SetConfig+0x30>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a25      	ldr	r2, [pc, #148]	; (8003294 <TIM_Base_SetConfig+0xc0>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d108      	bne.n	8003216 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800320a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	4313      	orrs	r3, r2
 8003214:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a1c      	ldr	r2, [pc, #112]	; (800328c <TIM_Base_SetConfig+0xb8>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d00b      	beq.n	8003236 <TIM_Base_SetConfig+0x62>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003224:	d007      	beq.n	8003236 <TIM_Base_SetConfig+0x62>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a19      	ldr	r2, [pc, #100]	; (8003290 <TIM_Base_SetConfig+0xbc>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d003      	beq.n	8003236 <TIM_Base_SetConfig+0x62>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a18      	ldr	r2, [pc, #96]	; (8003294 <TIM_Base_SetConfig+0xc0>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d108      	bne.n	8003248 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800323c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	4313      	orrs	r3, r2
 8003246:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	4313      	orrs	r3, r2
 8003254:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	689a      	ldr	r2, [r3, #8]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4a07      	ldr	r2, [pc, #28]	; (800328c <TIM_Base_SetConfig+0xb8>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d103      	bne.n	800327c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	691a      	ldr	r2, [r3, #16]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	615a      	str	r2, [r3, #20]
}
 8003282:	bf00      	nop
 8003284:	3714      	adds	r7, #20
 8003286:	46bd      	mov	sp, r7
 8003288:	bc80      	pop	{r7}
 800328a:	4770      	bx	lr
 800328c:	40012c00 	.word	0x40012c00
 8003290:	40000400 	.word	0x40000400
 8003294:	40000800 	.word	0x40000800

08003298 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003298:	b480      	push	{r7}
 800329a:	b087      	sub	sp, #28
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a1b      	ldr	r3, [r3, #32]
 80032a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a1b      	ldr	r3, [r3, #32]
 80032ac:	f023 0201 	bic.w	r2, r3, #1
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f023 0303 	bic.w	r3, r3, #3
 80032ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	f023 0302 	bic.w	r3, r3, #2
 80032e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	697a      	ldr	r2, [r7, #20]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a1c      	ldr	r2, [pc, #112]	; (8003360 <TIM_OC1_SetConfig+0xc8>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d10c      	bne.n	800330e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	f023 0308 	bic.w	r3, r3, #8
 80032fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	697a      	ldr	r2, [r7, #20]
 8003302:	4313      	orrs	r3, r2
 8003304:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	f023 0304 	bic.w	r3, r3, #4
 800330c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a13      	ldr	r2, [pc, #76]	; (8003360 <TIM_OC1_SetConfig+0xc8>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d111      	bne.n	800333a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800331c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003324:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	4313      	orrs	r3, r2
 800332e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	693a      	ldr	r2, [r7, #16]
 8003336:	4313      	orrs	r3, r2
 8003338:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	685a      	ldr	r2, [r3, #4]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	697a      	ldr	r2, [r7, #20]
 8003352:	621a      	str	r2, [r3, #32]
}
 8003354:	bf00      	nop
 8003356:	371c      	adds	r7, #28
 8003358:	46bd      	mov	sp, r7
 800335a:	bc80      	pop	{r7}
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	40012c00 	.word	0x40012c00

08003364 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003364:	b480      	push	{r7}
 8003366:	b087      	sub	sp, #28
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a1b      	ldr	r3, [r3, #32]
 8003378:	f023 0210 	bic.w	r2, r3, #16
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800339a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	021b      	lsls	r3, r3, #8
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	f023 0320 	bic.w	r3, r3, #32
 80033ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	011b      	lsls	r3, r3, #4
 80033b6:	697a      	ldr	r2, [r7, #20]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a1d      	ldr	r2, [pc, #116]	; (8003434 <TIM_OC2_SetConfig+0xd0>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d10d      	bne.n	80033e0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	011b      	lsls	r3, r3, #4
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a14      	ldr	r2, [pc, #80]	; (8003434 <TIM_OC2_SetConfig+0xd0>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d113      	bne.n	8003410 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	695b      	ldr	r3, [r3, #20]
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	693a      	ldr	r2, [r7, #16]
 8003400:	4313      	orrs	r3, r2
 8003402:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	4313      	orrs	r3, r2
 800340e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685a      	ldr	r2, [r3, #4]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	621a      	str	r2, [r3, #32]
}
 800342a:	bf00      	nop
 800342c:	371c      	adds	r7, #28
 800342e:	46bd      	mov	sp, r7
 8003430:	bc80      	pop	{r7}
 8003432:	4770      	bx	lr
 8003434:	40012c00 	.word	0x40012c00

08003438 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003438:	b480      	push	{r7}
 800343a:	b087      	sub	sp, #28
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a1b      	ldr	r3, [r3, #32]
 8003446:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a1b      	ldr	r3, [r3, #32]
 800344c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	69db      	ldr	r3, [r3, #28]
 800345e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003466:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f023 0303 	bic.w	r3, r3, #3
 800346e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	4313      	orrs	r3, r2
 8003478:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003480:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	021b      	lsls	r3, r3, #8
 8003488:	697a      	ldr	r2, [r7, #20]
 800348a:	4313      	orrs	r3, r2
 800348c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a1d      	ldr	r2, [pc, #116]	; (8003508 <TIM_OC3_SetConfig+0xd0>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d10d      	bne.n	80034b2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800349c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	021b      	lsls	r3, r3, #8
 80034a4:	697a      	ldr	r2, [r7, #20]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a14      	ldr	r2, [pc, #80]	; (8003508 <TIM_OC3_SetConfig+0xd0>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d113      	bne.n	80034e2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	011b      	lsls	r3, r3, #4
 80034d0:	693a      	ldr	r2, [r7, #16]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	011b      	lsls	r3, r3, #4
 80034dc:	693a      	ldr	r2, [r7, #16]
 80034de:	4313      	orrs	r3, r2
 80034e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	685a      	ldr	r2, [r3, #4]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	697a      	ldr	r2, [r7, #20]
 80034fa:	621a      	str	r2, [r3, #32]
}
 80034fc:	bf00      	nop
 80034fe:	371c      	adds	r7, #28
 8003500:	46bd      	mov	sp, r7
 8003502:	bc80      	pop	{r7}
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	40012c00 	.word	0x40012c00

0800350c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800350c:	b480      	push	{r7}
 800350e:	b087      	sub	sp, #28
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a1b      	ldr	r3, [r3, #32]
 8003520:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	69db      	ldr	r3, [r3, #28]
 8003532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800353a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003542:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	021b      	lsls	r3, r3, #8
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	4313      	orrs	r3, r2
 800354e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003556:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	031b      	lsls	r3, r3, #12
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	4313      	orrs	r3, r2
 8003562:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a0f      	ldr	r2, [pc, #60]	; (80035a4 <TIM_OC4_SetConfig+0x98>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d109      	bne.n	8003580 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003572:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	695b      	ldr	r3, [r3, #20]
 8003578:	019b      	lsls	r3, r3, #6
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	4313      	orrs	r3, r2
 800357e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685a      	ldr	r2, [r3, #4]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	621a      	str	r2, [r3, #32]
}
 800359a:	bf00      	nop
 800359c:	371c      	adds	r7, #28
 800359e:	46bd      	mov	sp, r7
 80035a0:	bc80      	pop	{r7}
 80035a2:	4770      	bx	lr
 80035a4:	40012c00 	.word	0x40012c00

080035a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b087      	sub	sp, #28
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6a1b      	ldr	r3, [r3, #32]
 80035be:	f023 0201 	bic.w	r2, r3, #1
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	011b      	lsls	r3, r3, #4
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	4313      	orrs	r3, r2
 80035dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	f023 030a 	bic.w	r3, r3, #10
 80035e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035e6:	697a      	ldr	r2, [r7, #20]
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	693a      	ldr	r2, [r7, #16]
 80035f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	621a      	str	r2, [r3, #32]
}
 80035fa:	bf00      	nop
 80035fc:	371c      	adds	r7, #28
 80035fe:	46bd      	mov	sp, r7
 8003600:	bc80      	pop	{r7}
 8003602:	4770      	bx	lr

08003604 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003604:	b480      	push	{r7}
 8003606:	b087      	sub	sp, #28
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6a1b      	ldr	r3, [r3, #32]
 8003614:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	f023 0210 	bic.w	r2, r3, #16
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800362e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	031b      	lsls	r3, r3, #12
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	4313      	orrs	r3, r2
 8003638:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003640:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	011b      	lsls	r3, r3, #4
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	4313      	orrs	r3, r2
 800364a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	697a      	ldr	r2, [r7, #20]
 8003656:	621a      	str	r2, [r3, #32]
}
 8003658:	bf00      	nop
 800365a:	371c      	adds	r7, #28
 800365c:	46bd      	mov	sp, r7
 800365e:	bc80      	pop	{r7}
 8003660:	4770      	bx	lr

08003662 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003662:	b480      	push	{r7}
 8003664:	b085      	sub	sp, #20
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
 800366a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003678:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800367a:	683a      	ldr	r2, [r7, #0]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	4313      	orrs	r3, r2
 8003680:	f043 0307 	orr.w	r3, r3, #7
 8003684:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	609a      	str	r2, [r3, #8]
}
 800368c:	bf00      	nop
 800368e:	3714      	adds	r7, #20
 8003690:	46bd      	mov	sp, r7
 8003692:	bc80      	pop	{r7}
 8003694:	4770      	bx	lr

08003696 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003696:	b480      	push	{r7}
 8003698:	b087      	sub	sp, #28
 800369a:	af00      	add	r7, sp, #0
 800369c:	60f8      	str	r0, [r7, #12]
 800369e:	60b9      	str	r1, [r7, #8]
 80036a0:	607a      	str	r2, [r7, #4]
 80036a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036b0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	021a      	lsls	r2, r3, #8
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	431a      	orrs	r2, r3
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	4313      	orrs	r3, r2
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	697a      	ldr	r2, [r7, #20]
 80036c8:	609a      	str	r2, [r3, #8]
}
 80036ca:	bf00      	nop
 80036cc:	371c      	adds	r7, #28
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bc80      	pop	{r7}
 80036d2:	4770      	bx	lr

080036d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b087      	sub	sp, #28
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	f003 031f 	and.w	r3, r3, #31
 80036e6:	2201      	movs	r2, #1
 80036e8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6a1a      	ldr	r2, [r3, #32]
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	43db      	mvns	r3, r3
 80036f6:	401a      	ands	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6a1a      	ldr	r2, [r3, #32]
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	f003 031f 	and.w	r3, r3, #31
 8003706:	6879      	ldr	r1, [r7, #4]
 8003708:	fa01 f303 	lsl.w	r3, r1, r3
 800370c:	431a      	orrs	r2, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	621a      	str	r2, [r3, #32]
}
 8003712:	bf00      	nop
 8003714:	371c      	adds	r7, #28
 8003716:	46bd      	mov	sp, r7
 8003718:	bc80      	pop	{r7}
 800371a:	4770      	bx	lr

0800371c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800371c:	b480      	push	{r7}
 800371e:	b085      	sub	sp, #20
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800372c:	2b01      	cmp	r3, #1
 800372e:	d101      	bne.n	8003734 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003730:	2302      	movs	r3, #2
 8003732:	e046      	b.n	80037c2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2202      	movs	r2, #2
 8003740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800375a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	4313      	orrs	r3, r2
 8003764:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a16      	ldr	r2, [pc, #88]	; (80037cc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d00e      	beq.n	8003796 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003780:	d009      	beq.n	8003796 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a12      	ldr	r2, [pc, #72]	; (80037d0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d004      	beq.n	8003796 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a10      	ldr	r2, [pc, #64]	; (80037d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d10c      	bne.n	80037b0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800379c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	68ba      	ldr	r2, [r7, #8]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68ba      	ldr	r2, [r7, #8]
 80037ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3714      	adds	r7, #20
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bc80      	pop	{r7}
 80037ca:	4770      	bx	lr
 80037cc:	40012c00 	.word	0x40012c00
 80037d0:	40000400 	.word	0x40000400
 80037d4:	40000800 	.word	0x40000800

080037d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bc80      	pop	{r7}
 80037e8:	4770      	bx	lr

080037ea <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037ea:	b480      	push	{r7}
 80037ec:	b083      	sub	sp, #12
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037f2:	bf00      	nop
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bc80      	pop	{r7}
 80037fa:	4770      	bx	lr

080037fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d101      	bne.n	800380e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e042      	b.n	8003894 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d106      	bne.n	8003828 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f7fd ff72 	bl	800170c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2224      	movs	r2, #36	; 0x24
 800382c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68da      	ldr	r2, [r3, #12]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800383e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 fd71 	bl	8004328 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	691a      	ldr	r2, [r3, #16]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003854:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	695a      	ldr	r2, [r3, #20]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003864:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68da      	ldr	r2, [r3, #12]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003874:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2220      	movs	r2, #32
 8003880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2220      	movs	r2, #32
 8003888:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3708      	adds	r7, #8
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b08a      	sub	sp, #40	; 0x28
 80038a0:	af02      	add	r7, sp, #8
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	603b      	str	r3, [r7, #0]
 80038a8:	4613      	mov	r3, r2
 80038aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80038ac:	2300      	movs	r3, #0
 80038ae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	2b20      	cmp	r3, #32
 80038ba:	d16d      	bne.n	8003998 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d002      	beq.n	80038c8 <HAL_UART_Transmit+0x2c>
 80038c2:	88fb      	ldrh	r3, [r7, #6]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d101      	bne.n	80038cc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e066      	b.n	800399a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2200      	movs	r2, #0
 80038d0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2221      	movs	r2, #33	; 0x21
 80038d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038da:	f7fe f869 	bl	80019b0 <HAL_GetTick>
 80038de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	88fa      	ldrh	r2, [r7, #6]
 80038e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	88fa      	ldrh	r2, [r7, #6]
 80038ea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038f4:	d108      	bne.n	8003908 <HAL_UART_Transmit+0x6c>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d104      	bne.n	8003908 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80038fe:	2300      	movs	r3, #0
 8003900:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	61bb      	str	r3, [r7, #24]
 8003906:	e003      	b.n	8003910 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800390c:	2300      	movs	r3, #0
 800390e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003910:	e02a      	b.n	8003968 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	9300      	str	r3, [sp, #0]
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	2200      	movs	r2, #0
 800391a:	2180      	movs	r1, #128	; 0x80
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	f000 faf9 	bl	8003f14 <UART_WaitOnFlagUntilTimeout>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d001      	beq.n	800392c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e036      	b.n	800399a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10b      	bne.n	800394a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	881b      	ldrh	r3, [r3, #0]
 8003936:	461a      	mov	r2, r3
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003940:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	3302      	adds	r3, #2
 8003946:	61bb      	str	r3, [r7, #24]
 8003948:	e007      	b.n	800395a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	781a      	ldrb	r2, [r3, #0]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	3301      	adds	r3, #1
 8003958:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800395e:	b29b      	uxth	r3, r3
 8003960:	3b01      	subs	r3, #1
 8003962:	b29a      	uxth	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800396c:	b29b      	uxth	r3, r3
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1cf      	bne.n	8003912 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	9300      	str	r3, [sp, #0]
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	2200      	movs	r2, #0
 800397a:	2140      	movs	r1, #64	; 0x40
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f000 fac9 	bl	8003f14 <UART_WaitOnFlagUntilTimeout>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d001      	beq.n	800398c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e006      	b.n	800399a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2220      	movs	r2, #32
 8003990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003994:	2300      	movs	r3, #0
 8003996:	e000      	b.n	800399a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003998:	2302      	movs	r3, #2
  }
}
 800399a:	4618      	mov	r0, r3
 800399c:	3720      	adds	r7, #32
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
	...

080039a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b0ba      	sub	sp, #232	; 0xe8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80039ca:	2300      	movs	r3, #0
 80039cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80039d0:	2300      	movs	r3, #0
 80039d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80039d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039da:	f003 030f 	and.w	r3, r3, #15
 80039de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80039e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d10f      	bne.n	8003a0a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039ee:	f003 0320 	and.w	r3, r3, #32
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d009      	beq.n	8003a0a <HAL_UART_IRQHandler+0x66>
 80039f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039fa:	f003 0320 	and.w	r3, r3, #32
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d003      	beq.n	8003a0a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 fbd1 	bl	80041aa <UART_Receive_IT>
      return;
 8003a08:	e25b      	b.n	8003ec2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003a0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	f000 80de 	beq.w	8003bd0 <HAL_UART_IRQHandler+0x22c>
 8003a14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a18:	f003 0301 	and.w	r3, r3, #1
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d106      	bne.n	8003a2e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a24:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f000 80d1 	beq.w	8003bd0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00b      	beq.n	8003a52 <HAL_UART_IRQHandler+0xae>
 8003a3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d005      	beq.n	8003a52 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a4a:	f043 0201 	orr.w	r2, r3, #1
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a56:	f003 0304 	and.w	r3, r3, #4
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00b      	beq.n	8003a76 <HAL_UART_IRQHandler+0xd2>
 8003a5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d005      	beq.n	8003a76 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a6e:	f043 0202 	orr.w	r2, r3, #2
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00b      	beq.n	8003a9a <HAL_UART_IRQHandler+0xf6>
 8003a82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d005      	beq.n	8003a9a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a92:	f043 0204 	orr.w	r2, r3, #4
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a9e:	f003 0308 	and.w	r3, r3, #8
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d011      	beq.n	8003aca <HAL_UART_IRQHandler+0x126>
 8003aa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aaa:	f003 0320 	and.w	r3, r3, #32
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d105      	bne.n	8003abe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ab2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d005      	beq.n	8003aca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac2:	f043 0208 	orr.w	r2, r3, #8
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	f000 81f2 	beq.w	8003eb8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ad4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ad8:	f003 0320 	and.w	r3, r3, #32
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d008      	beq.n	8003af2 <HAL_UART_IRQHandler+0x14e>
 8003ae0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ae4:	f003 0320 	and.w	r3, r3, #32
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d002      	beq.n	8003af2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 fb5c 	bl	80041aa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	695b      	ldr	r3, [r3, #20]
 8003af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	bf14      	ite	ne
 8003b00:	2301      	movne	r3, #1
 8003b02:	2300      	moveq	r3, #0
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b0e:	f003 0308 	and.w	r3, r3, #8
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d103      	bne.n	8003b1e <HAL_UART_IRQHandler+0x17a>
 8003b16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d04f      	beq.n	8003bbe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 fa66 	bl	8003ff0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d041      	beq.n	8003bb6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	3314      	adds	r3, #20
 8003b38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b40:	e853 3f00 	ldrex	r3, [r3]
 8003b44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003b48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	3314      	adds	r3, #20
 8003b5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003b5e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003b62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003b6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003b6e:	e841 2300 	strex	r3, r2, [r1]
 8003b72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003b76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1d9      	bne.n	8003b32 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d013      	beq.n	8003bae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b8a:	4a7e      	ldr	r2, [pc, #504]	; (8003d84 <HAL_UART_IRQHandler+0x3e0>)
 8003b8c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7fe f85e 	bl	8001c54 <HAL_DMA_Abort_IT>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d016      	beq.n	8003bcc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003ba8:	4610      	mov	r0, r2
 8003baa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bac:	e00e      	b.n	8003bcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 f99c 	bl	8003eec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bb4:	e00a      	b.n	8003bcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 f998 	bl	8003eec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bbc:	e006      	b.n	8003bcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 f994 	bl	8003eec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003bca:	e175      	b.n	8003eb8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bcc:	bf00      	nop
    return;
 8003bce:	e173      	b.n	8003eb8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	f040 814f 	bne.w	8003e78 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bde:	f003 0310 	and.w	r3, r3, #16
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	f000 8148 	beq.w	8003e78 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003be8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bec:	f003 0310 	and.w	r3, r3, #16
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f000 8141 	beq.w	8003e78 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	60bb      	str	r3, [r7, #8]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	60bb      	str	r3, [r7, #8]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	60bb      	str	r3, [r7, #8]
 8003c0a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	f000 80b6 	beq.w	8003d88 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c28:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f000 8145 	beq.w	8003ebc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	f080 813e 	bcs.w	8003ebc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c46:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	2b20      	cmp	r3, #32
 8003c50:	f000 8088 	beq.w	8003d64 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	330c      	adds	r3, #12
 8003c5a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c62:	e853 3f00 	ldrex	r3, [r3]
 8003c66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003c6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c72:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	330c      	adds	r3, #12
 8003c7c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003c80:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c84:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c88:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003c8c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003c90:	e841 2300 	strex	r3, r2, [r1]
 8003c94:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003c98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d1d9      	bne.n	8003c54 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	3314      	adds	r3, #20
 8003ca6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003caa:	e853 3f00 	ldrex	r3, [r3]
 8003cae:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003cb0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003cb2:	f023 0301 	bic.w	r3, r3, #1
 8003cb6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	3314      	adds	r3, #20
 8003cc0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003cc4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003cc8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cca:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003ccc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003cd0:	e841 2300 	strex	r3, r2, [r1]
 8003cd4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003cd6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1e1      	bne.n	8003ca0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	3314      	adds	r3, #20
 8003ce2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ce6:	e853 3f00 	ldrex	r3, [r3]
 8003cea:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003cec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cf2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	3314      	adds	r3, #20
 8003cfc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003d00:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d02:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d04:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003d06:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d08:	e841 2300 	strex	r3, r2, [r1]
 8003d0c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003d0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d1e3      	bne.n	8003cdc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2220      	movs	r2, #32
 8003d18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	330c      	adds	r3, #12
 8003d28:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d2c:	e853 3f00 	ldrex	r3, [r3]
 8003d30:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003d32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d34:	f023 0310 	bic.w	r3, r3, #16
 8003d38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	330c      	adds	r3, #12
 8003d42:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003d46:	65ba      	str	r2, [r7, #88]	; 0x58
 8003d48:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d4a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d4e:	e841 2300 	strex	r3, r2, [r1]
 8003d52:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003d54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1e3      	bne.n	8003d22 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f7fd ff3d 	bl	8001bde <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2202      	movs	r2, #2
 8003d68:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	4619      	mov	r1, r3
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 f8bf 	bl	8003efe <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d80:	e09c      	b.n	8003ebc <HAL_UART_IRQHandler+0x518>
 8003d82:	bf00      	nop
 8003d84:	080040b5 	.word	0x080040b5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	f000 808e 	beq.w	8003ec0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003da4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	f000 8089 	beq.w	8003ec0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	330c      	adds	r3, #12
 8003db4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db8:	e853 3f00 	ldrex	r3, [r3]
 8003dbc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003dc4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	330c      	adds	r3, #12
 8003dce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003dd2:	647a      	str	r2, [r7, #68]	; 0x44
 8003dd4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003dd8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003dda:	e841 2300 	strex	r3, r2, [r1]
 8003dde:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003de0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1e3      	bne.n	8003dae <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	3314      	adds	r3, #20
 8003dec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df0:	e853 3f00 	ldrex	r3, [r3]
 8003df4:	623b      	str	r3, [r7, #32]
   return(result);
 8003df6:	6a3b      	ldr	r3, [r7, #32]
 8003df8:	f023 0301 	bic.w	r3, r3, #1
 8003dfc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	3314      	adds	r3, #20
 8003e06:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003e0a:	633a      	str	r2, [r7, #48]	; 0x30
 8003e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e12:	e841 2300 	strex	r3, r2, [r1]
 8003e16:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1e3      	bne.n	8003de6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2220      	movs	r2, #32
 8003e22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	330c      	adds	r3, #12
 8003e32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	e853 3f00 	ldrex	r3, [r3]
 8003e3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f023 0310 	bic.w	r3, r3, #16
 8003e42:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	330c      	adds	r3, #12
 8003e4c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003e50:	61fa      	str	r2, [r7, #28]
 8003e52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e54:	69b9      	ldr	r1, [r7, #24]
 8003e56:	69fa      	ldr	r2, [r7, #28]
 8003e58:	e841 2300 	strex	r3, r2, [r1]
 8003e5c:	617b      	str	r3, [r7, #20]
   return(result);
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d1e3      	bne.n	8003e2c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2202      	movs	r2, #2
 8003e68:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e6a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e6e:	4619      	mov	r1, r3
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f000 f844 	bl	8003efe <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e76:	e023      	b.n	8003ec0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d009      	beq.n	8003e98 <HAL_UART_IRQHandler+0x4f4>
 8003e84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d003      	beq.n	8003e98 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 f923 	bl	80040dc <UART_Transmit_IT>
    return;
 8003e96:	e014      	b.n	8003ec2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00e      	beq.n	8003ec2 <HAL_UART_IRQHandler+0x51e>
 8003ea4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d008      	beq.n	8003ec2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f000 f962 	bl	800417a <UART_EndTransmit_IT>
    return;
 8003eb6:	e004      	b.n	8003ec2 <HAL_UART_IRQHandler+0x51e>
    return;
 8003eb8:	bf00      	nop
 8003eba:	e002      	b.n	8003ec2 <HAL_UART_IRQHandler+0x51e>
      return;
 8003ebc:	bf00      	nop
 8003ebe:	e000      	b.n	8003ec2 <HAL_UART_IRQHandler+0x51e>
      return;
 8003ec0:	bf00      	nop
  }
}
 8003ec2:	37e8      	adds	r7, #232	; 0xe8
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ed0:	bf00      	nop
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bc80      	pop	{r7}
 8003ed8:	4770      	bx	lr

08003eda <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b083      	sub	sp, #12
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003ee2:	bf00      	nop
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bc80      	pop	{r7}
 8003eea:	4770      	bx	lr

08003eec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003ef4:	bf00      	nop
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bc80      	pop	{r7}
 8003efc:	4770      	bx	lr

08003efe <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003efe:	b480      	push	{r7}
 8003f00:	b083      	sub	sp, #12
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
 8003f06:	460b      	mov	r3, r1
 8003f08:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f0a:	bf00      	nop
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bc80      	pop	{r7}
 8003f12:	4770      	bx	lr

08003f14 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b090      	sub	sp, #64	; 0x40
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	603b      	str	r3, [r7, #0]
 8003f20:	4613      	mov	r3, r2
 8003f22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f24:	e050      	b.n	8003fc8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f2c:	d04c      	beq.n	8003fc8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d007      	beq.n	8003f44 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f34:	f7fd fd3c 	bl	80019b0 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d241      	bcs.n	8003fc8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	330c      	adds	r3, #12
 8003f4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f4e:	e853 3f00 	ldrex	r3, [r3]
 8003f52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f56:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	330c      	adds	r3, #12
 8003f62:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f64:	637a      	str	r2, [r7, #52]	; 0x34
 8003f66:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f6c:	e841 2300 	strex	r3, r2, [r1]
 8003f70:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1e5      	bne.n	8003f44 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	3314      	adds	r3, #20
 8003f7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	e853 3f00 	ldrex	r3, [r3]
 8003f86:	613b      	str	r3, [r7, #16]
   return(result);
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	f023 0301 	bic.w	r3, r3, #1
 8003f8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	3314      	adds	r3, #20
 8003f96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f98:	623a      	str	r2, [r7, #32]
 8003f9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f9c:	69f9      	ldr	r1, [r7, #28]
 8003f9e:	6a3a      	ldr	r2, [r7, #32]
 8003fa0:	e841 2300 	strex	r3, r2, [r1]
 8003fa4:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d1e5      	bne.n	8003f78 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2220      	movs	r2, #32
 8003fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2220      	movs	r2, #32
 8003fb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	e00f      	b.n	8003fe8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	68ba      	ldr	r2, [r7, #8]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	bf0c      	ite	eq
 8003fd8:	2301      	moveq	r3, #1
 8003fda:	2300      	movne	r3, #0
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	461a      	mov	r2, r3
 8003fe0:	79fb      	ldrb	r3, [r7, #7]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d09f      	beq.n	8003f26 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3740      	adds	r7, #64	; 0x40
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b095      	sub	sp, #84	; 0x54
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	330c      	adds	r3, #12
 8003ffe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004002:	e853 3f00 	ldrex	r3, [r3]
 8004006:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800400a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800400e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	330c      	adds	r3, #12
 8004016:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004018:	643a      	str	r2, [r7, #64]	; 0x40
 800401a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800401c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800401e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004020:	e841 2300 	strex	r3, r2, [r1]
 8004024:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1e5      	bne.n	8003ff8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	3314      	adds	r3, #20
 8004032:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004034:	6a3b      	ldr	r3, [r7, #32]
 8004036:	e853 3f00 	ldrex	r3, [r3]
 800403a:	61fb      	str	r3, [r7, #28]
   return(result);
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	f023 0301 	bic.w	r3, r3, #1
 8004042:	64bb      	str	r3, [r7, #72]	; 0x48
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	3314      	adds	r3, #20
 800404a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800404c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800404e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004050:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004052:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004054:	e841 2300 	strex	r3, r2, [r1]
 8004058:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800405a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405c:	2b00      	cmp	r3, #0
 800405e:	d1e5      	bne.n	800402c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004064:	2b01      	cmp	r3, #1
 8004066:	d119      	bne.n	800409c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	330c      	adds	r3, #12
 800406e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	e853 3f00 	ldrex	r3, [r3]
 8004076:	60bb      	str	r3, [r7, #8]
   return(result);
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	f023 0310 	bic.w	r3, r3, #16
 800407e:	647b      	str	r3, [r7, #68]	; 0x44
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	330c      	adds	r3, #12
 8004086:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004088:	61ba      	str	r2, [r7, #24]
 800408a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408c:	6979      	ldr	r1, [r7, #20]
 800408e:	69ba      	ldr	r2, [r7, #24]
 8004090:	e841 2300 	strex	r3, r2, [r1]
 8004094:	613b      	str	r3, [r7, #16]
   return(result);
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d1e5      	bne.n	8004068 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2220      	movs	r2, #32
 80040a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80040aa:	bf00      	nop
 80040ac:	3754      	adds	r7, #84	; 0x54
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bc80      	pop	{r7}
 80040b2:	4770      	bx	lr

080040b4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	f7ff ff0c 	bl	8003eec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040d4:	bf00      	nop
 80040d6:	3710      	adds	r7, #16
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	2b21      	cmp	r3, #33	; 0x21
 80040ee:	d13e      	bne.n	800416e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040f8:	d114      	bne.n	8004124 <UART_Transmit_IT+0x48>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d110      	bne.n	8004124 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	881b      	ldrh	r3, [r3, #0]
 800410c:	461a      	mov	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004116:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a1b      	ldr	r3, [r3, #32]
 800411c:	1c9a      	adds	r2, r3, #2
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	621a      	str	r2, [r3, #32]
 8004122:	e008      	b.n	8004136 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a1b      	ldr	r3, [r3, #32]
 8004128:	1c59      	adds	r1, r3, #1
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	6211      	str	r1, [r2, #32]
 800412e:	781a      	ldrb	r2, [r3, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800413a:	b29b      	uxth	r3, r3
 800413c:	3b01      	subs	r3, #1
 800413e:	b29b      	uxth	r3, r3
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	4619      	mov	r1, r3
 8004144:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004146:	2b00      	cmp	r3, #0
 8004148:	d10f      	bne.n	800416a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68da      	ldr	r2, [r3, #12]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004158:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68da      	ldr	r2, [r3, #12]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004168:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800416a:	2300      	movs	r3, #0
 800416c:	e000      	b.n	8004170 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800416e:	2302      	movs	r3, #2
  }
}
 8004170:	4618      	mov	r0, r3
 8004172:	3714      	adds	r7, #20
 8004174:	46bd      	mov	sp, r7
 8004176:	bc80      	pop	{r7}
 8004178:	4770      	bx	lr

0800417a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800417a:	b580      	push	{r7, lr}
 800417c:	b082      	sub	sp, #8
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68da      	ldr	r2, [r3, #12]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004190:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2220      	movs	r2, #32
 8004196:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f7ff fe94 	bl	8003ec8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3708      	adds	r7, #8
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b08c      	sub	sp, #48	; 0x30
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2b22      	cmp	r3, #34	; 0x22
 80041bc:	f040 80ae 	bne.w	800431c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041c8:	d117      	bne.n	80041fa <UART_Receive_IT+0x50>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d113      	bne.n	80041fa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80041d2:	2300      	movs	r3, #0
 80041d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041da:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f2:	1c9a      	adds	r2, r3, #2
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	629a      	str	r2, [r3, #40]	; 0x28
 80041f8:	e026      	b.n	8004248 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004200:	2300      	movs	r3, #0
 8004202:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800420c:	d007      	beq.n	800421e <UART_Receive_IT+0x74>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d10a      	bne.n	800422c <UART_Receive_IT+0x82>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d106      	bne.n	800422c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	b2da      	uxtb	r2, r3
 8004226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004228:	701a      	strb	r2, [r3, #0]
 800422a:	e008      	b.n	800423e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	b2db      	uxtb	r3, r3
 8004234:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004238:	b2da      	uxtb	r2, r3
 800423a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800423c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004242:	1c5a      	adds	r2, r3, #1
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800424c:	b29b      	uxth	r3, r3
 800424e:	3b01      	subs	r3, #1
 8004250:	b29b      	uxth	r3, r3
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	4619      	mov	r1, r3
 8004256:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004258:	2b00      	cmp	r3, #0
 800425a:	d15d      	bne.n	8004318 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68da      	ldr	r2, [r3, #12]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f022 0220 	bic.w	r2, r2, #32
 800426a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68da      	ldr	r2, [r3, #12]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800427a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	695a      	ldr	r2, [r3, #20]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f022 0201 	bic.w	r2, r2, #1
 800428a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2220      	movs	r2, #32
 8004290:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d135      	bne.n	800430e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	330c      	adds	r3, #12
 80042ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	e853 3f00 	ldrex	r3, [r3]
 80042b6:	613b      	str	r3, [r7, #16]
   return(result);
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	f023 0310 	bic.w	r3, r3, #16
 80042be:	627b      	str	r3, [r7, #36]	; 0x24
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	330c      	adds	r3, #12
 80042c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042c8:	623a      	str	r2, [r7, #32]
 80042ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042cc:	69f9      	ldr	r1, [r7, #28]
 80042ce:	6a3a      	ldr	r2, [r7, #32]
 80042d0:	e841 2300 	strex	r3, r2, [r1]
 80042d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d1e5      	bne.n	80042a8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0310 	and.w	r3, r3, #16
 80042e6:	2b10      	cmp	r3, #16
 80042e8:	d10a      	bne.n	8004300 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80042ea:	2300      	movs	r3, #0
 80042ec:	60fb      	str	r3, [r7, #12]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	60fb      	str	r3, [r7, #12]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	60fb      	str	r3, [r7, #12]
 80042fe:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004304:	4619      	mov	r1, r3
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f7ff fdf9 	bl	8003efe <HAL_UARTEx_RxEventCallback>
 800430c:	e002      	b.n	8004314 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f7ff fde3 	bl	8003eda <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004314:	2300      	movs	r3, #0
 8004316:	e002      	b.n	800431e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004318:	2300      	movs	r3, #0
 800431a:	e000      	b.n	800431e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800431c:	2302      	movs	r3, #2
  }
}
 800431e:	4618      	mov	r0, r3
 8004320:	3730      	adds	r7, #48	; 0x30
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
	...

08004328 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	68da      	ldr	r2, [r3, #12]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	430a      	orrs	r2, r1
 8004344:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	689a      	ldr	r2, [r3, #8]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	431a      	orrs	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	4313      	orrs	r3, r2
 8004356:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004362:	f023 030c 	bic.w	r3, r3, #12
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	6812      	ldr	r2, [r2, #0]
 800436a:	68b9      	ldr	r1, [r7, #8]
 800436c:	430b      	orrs	r3, r1
 800436e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	699a      	ldr	r2, [r3, #24]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	430a      	orrs	r2, r1
 8004384:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a2c      	ldr	r2, [pc, #176]	; (800443c <UART_SetConfig+0x114>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d103      	bne.n	8004398 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004390:	f7fe fa9c 	bl	80028cc <HAL_RCC_GetPCLK2Freq>
 8004394:	60f8      	str	r0, [r7, #12]
 8004396:	e002      	b.n	800439e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004398:	f7fe fa84 	bl	80028a4 <HAL_RCC_GetPCLK1Freq>
 800439c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	4613      	mov	r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	4413      	add	r3, r2
 80043a6:	009a      	lsls	r2, r3, #2
 80043a8:	441a      	add	r2, r3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b4:	4a22      	ldr	r2, [pc, #136]	; (8004440 <UART_SetConfig+0x118>)
 80043b6:	fba2 2303 	umull	r2, r3, r2, r3
 80043ba:	095b      	lsrs	r3, r3, #5
 80043bc:	0119      	lsls	r1, r3, #4
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	4613      	mov	r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	4413      	add	r3, r2
 80043c6:	009a      	lsls	r2, r3, #2
 80043c8:	441a      	add	r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80043d4:	4b1a      	ldr	r3, [pc, #104]	; (8004440 <UART_SetConfig+0x118>)
 80043d6:	fba3 0302 	umull	r0, r3, r3, r2
 80043da:	095b      	lsrs	r3, r3, #5
 80043dc:	2064      	movs	r0, #100	; 0x64
 80043de:	fb00 f303 	mul.w	r3, r0, r3
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	011b      	lsls	r3, r3, #4
 80043e6:	3332      	adds	r3, #50	; 0x32
 80043e8:	4a15      	ldr	r2, [pc, #84]	; (8004440 <UART_SetConfig+0x118>)
 80043ea:	fba2 2303 	umull	r2, r3, r2, r3
 80043ee:	095b      	lsrs	r3, r3, #5
 80043f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043f4:	4419      	add	r1, r3
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	4613      	mov	r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	4413      	add	r3, r2
 80043fe:	009a      	lsls	r2, r3, #2
 8004400:	441a      	add	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	fbb2 f2f3 	udiv	r2, r2, r3
 800440c:	4b0c      	ldr	r3, [pc, #48]	; (8004440 <UART_SetConfig+0x118>)
 800440e:	fba3 0302 	umull	r0, r3, r3, r2
 8004412:	095b      	lsrs	r3, r3, #5
 8004414:	2064      	movs	r0, #100	; 0x64
 8004416:	fb00 f303 	mul.w	r3, r0, r3
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	011b      	lsls	r3, r3, #4
 800441e:	3332      	adds	r3, #50	; 0x32
 8004420:	4a07      	ldr	r2, [pc, #28]	; (8004440 <UART_SetConfig+0x118>)
 8004422:	fba2 2303 	umull	r2, r3, r2, r3
 8004426:	095b      	lsrs	r3, r3, #5
 8004428:	f003 020f 	and.w	r2, r3, #15
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	440a      	add	r2, r1
 8004432:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004434:	bf00      	nop
 8004436:	3710      	adds	r7, #16
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	40013800 	.word	0x40013800
 8004440:	51eb851f 	.word	0x51eb851f

08004444 <__errno>:
 8004444:	4b01      	ldr	r3, [pc, #4]	; (800444c <__errno+0x8>)
 8004446:	6818      	ldr	r0, [r3, #0]
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	20000044 	.word	0x20000044

08004450 <__libc_init_array>:
 8004450:	b570      	push	{r4, r5, r6, lr}
 8004452:	2600      	movs	r6, #0
 8004454:	4d0c      	ldr	r5, [pc, #48]	; (8004488 <__libc_init_array+0x38>)
 8004456:	4c0d      	ldr	r4, [pc, #52]	; (800448c <__libc_init_array+0x3c>)
 8004458:	1b64      	subs	r4, r4, r5
 800445a:	10a4      	asrs	r4, r4, #2
 800445c:	42a6      	cmp	r6, r4
 800445e:	d109      	bne.n	8004474 <__libc_init_array+0x24>
 8004460:	f000 fc6c 	bl	8004d3c <_init>
 8004464:	2600      	movs	r6, #0
 8004466:	4d0a      	ldr	r5, [pc, #40]	; (8004490 <__libc_init_array+0x40>)
 8004468:	4c0a      	ldr	r4, [pc, #40]	; (8004494 <__libc_init_array+0x44>)
 800446a:	1b64      	subs	r4, r4, r5
 800446c:	10a4      	asrs	r4, r4, #2
 800446e:	42a6      	cmp	r6, r4
 8004470:	d105      	bne.n	800447e <__libc_init_array+0x2e>
 8004472:	bd70      	pop	{r4, r5, r6, pc}
 8004474:	f855 3b04 	ldr.w	r3, [r5], #4
 8004478:	4798      	blx	r3
 800447a:	3601      	adds	r6, #1
 800447c:	e7ee      	b.n	800445c <__libc_init_array+0xc>
 800447e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004482:	4798      	blx	r3
 8004484:	3601      	adds	r6, #1
 8004486:	e7f2      	b.n	800446e <__libc_init_array+0x1e>
 8004488:	08004dd8 	.word	0x08004dd8
 800448c:	08004dd8 	.word	0x08004dd8
 8004490:	08004dd8 	.word	0x08004dd8
 8004494:	08004ddc 	.word	0x08004ddc

08004498 <malloc>:
 8004498:	4b02      	ldr	r3, [pc, #8]	; (80044a4 <malloc+0xc>)
 800449a:	4601      	mov	r1, r0
 800449c:	6818      	ldr	r0, [r3, #0]
 800449e:	f000 b85f 	b.w	8004560 <_malloc_r>
 80044a2:	bf00      	nop
 80044a4:	20000044 	.word	0x20000044

080044a8 <free>:
 80044a8:	4b02      	ldr	r3, [pc, #8]	; (80044b4 <free+0xc>)
 80044aa:	4601      	mov	r1, r0
 80044ac:	6818      	ldr	r0, [r3, #0]
 80044ae:	f000 b80b 	b.w	80044c8 <_free_r>
 80044b2:	bf00      	nop
 80044b4:	20000044 	.word	0x20000044

080044b8 <memset>:
 80044b8:	4603      	mov	r3, r0
 80044ba:	4402      	add	r2, r0
 80044bc:	4293      	cmp	r3, r2
 80044be:	d100      	bne.n	80044c2 <memset+0xa>
 80044c0:	4770      	bx	lr
 80044c2:	f803 1b01 	strb.w	r1, [r3], #1
 80044c6:	e7f9      	b.n	80044bc <memset+0x4>

080044c8 <_free_r>:
 80044c8:	b538      	push	{r3, r4, r5, lr}
 80044ca:	4605      	mov	r5, r0
 80044cc:	2900      	cmp	r1, #0
 80044ce:	d043      	beq.n	8004558 <_free_r+0x90>
 80044d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044d4:	1f0c      	subs	r4, r1, #4
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	bfb8      	it	lt
 80044da:	18e4      	addlt	r4, r4, r3
 80044dc:	f000 f8ca 	bl	8004674 <__malloc_lock>
 80044e0:	4a1e      	ldr	r2, [pc, #120]	; (800455c <_free_r+0x94>)
 80044e2:	6813      	ldr	r3, [r2, #0]
 80044e4:	4610      	mov	r0, r2
 80044e6:	b933      	cbnz	r3, 80044f6 <_free_r+0x2e>
 80044e8:	6063      	str	r3, [r4, #4]
 80044ea:	6014      	str	r4, [r2, #0]
 80044ec:	4628      	mov	r0, r5
 80044ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80044f2:	f000 b8c5 	b.w	8004680 <__malloc_unlock>
 80044f6:	42a3      	cmp	r3, r4
 80044f8:	d90a      	bls.n	8004510 <_free_r+0x48>
 80044fa:	6821      	ldr	r1, [r4, #0]
 80044fc:	1862      	adds	r2, r4, r1
 80044fe:	4293      	cmp	r3, r2
 8004500:	bf01      	itttt	eq
 8004502:	681a      	ldreq	r2, [r3, #0]
 8004504:	685b      	ldreq	r3, [r3, #4]
 8004506:	1852      	addeq	r2, r2, r1
 8004508:	6022      	streq	r2, [r4, #0]
 800450a:	6063      	str	r3, [r4, #4]
 800450c:	6004      	str	r4, [r0, #0]
 800450e:	e7ed      	b.n	80044ec <_free_r+0x24>
 8004510:	461a      	mov	r2, r3
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	b10b      	cbz	r3, 800451a <_free_r+0x52>
 8004516:	42a3      	cmp	r3, r4
 8004518:	d9fa      	bls.n	8004510 <_free_r+0x48>
 800451a:	6811      	ldr	r1, [r2, #0]
 800451c:	1850      	adds	r0, r2, r1
 800451e:	42a0      	cmp	r0, r4
 8004520:	d10b      	bne.n	800453a <_free_r+0x72>
 8004522:	6820      	ldr	r0, [r4, #0]
 8004524:	4401      	add	r1, r0
 8004526:	1850      	adds	r0, r2, r1
 8004528:	4283      	cmp	r3, r0
 800452a:	6011      	str	r1, [r2, #0]
 800452c:	d1de      	bne.n	80044ec <_free_r+0x24>
 800452e:	6818      	ldr	r0, [r3, #0]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	4401      	add	r1, r0
 8004534:	6011      	str	r1, [r2, #0]
 8004536:	6053      	str	r3, [r2, #4]
 8004538:	e7d8      	b.n	80044ec <_free_r+0x24>
 800453a:	d902      	bls.n	8004542 <_free_r+0x7a>
 800453c:	230c      	movs	r3, #12
 800453e:	602b      	str	r3, [r5, #0]
 8004540:	e7d4      	b.n	80044ec <_free_r+0x24>
 8004542:	6820      	ldr	r0, [r4, #0]
 8004544:	1821      	adds	r1, r4, r0
 8004546:	428b      	cmp	r3, r1
 8004548:	bf01      	itttt	eq
 800454a:	6819      	ldreq	r1, [r3, #0]
 800454c:	685b      	ldreq	r3, [r3, #4]
 800454e:	1809      	addeq	r1, r1, r0
 8004550:	6021      	streq	r1, [r4, #0]
 8004552:	6063      	str	r3, [r4, #4]
 8004554:	6054      	str	r4, [r2, #4]
 8004556:	e7c9      	b.n	80044ec <_free_r+0x24>
 8004558:	bd38      	pop	{r3, r4, r5, pc}
 800455a:	bf00      	nop
 800455c:	20000104 	.word	0x20000104

08004560 <_malloc_r>:
 8004560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004562:	1ccd      	adds	r5, r1, #3
 8004564:	f025 0503 	bic.w	r5, r5, #3
 8004568:	3508      	adds	r5, #8
 800456a:	2d0c      	cmp	r5, #12
 800456c:	bf38      	it	cc
 800456e:	250c      	movcc	r5, #12
 8004570:	2d00      	cmp	r5, #0
 8004572:	4606      	mov	r6, r0
 8004574:	db01      	blt.n	800457a <_malloc_r+0x1a>
 8004576:	42a9      	cmp	r1, r5
 8004578:	d903      	bls.n	8004582 <_malloc_r+0x22>
 800457a:	230c      	movs	r3, #12
 800457c:	6033      	str	r3, [r6, #0]
 800457e:	2000      	movs	r0, #0
 8004580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004582:	f000 f877 	bl	8004674 <__malloc_lock>
 8004586:	4921      	ldr	r1, [pc, #132]	; (800460c <_malloc_r+0xac>)
 8004588:	680a      	ldr	r2, [r1, #0]
 800458a:	4614      	mov	r4, r2
 800458c:	b99c      	cbnz	r4, 80045b6 <_malloc_r+0x56>
 800458e:	4f20      	ldr	r7, [pc, #128]	; (8004610 <_malloc_r+0xb0>)
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	b923      	cbnz	r3, 800459e <_malloc_r+0x3e>
 8004594:	4621      	mov	r1, r4
 8004596:	4630      	mov	r0, r6
 8004598:	f000 f83c 	bl	8004614 <_sbrk_r>
 800459c:	6038      	str	r0, [r7, #0]
 800459e:	4629      	mov	r1, r5
 80045a0:	4630      	mov	r0, r6
 80045a2:	f000 f837 	bl	8004614 <_sbrk_r>
 80045a6:	1c43      	adds	r3, r0, #1
 80045a8:	d123      	bne.n	80045f2 <_malloc_r+0x92>
 80045aa:	230c      	movs	r3, #12
 80045ac:	4630      	mov	r0, r6
 80045ae:	6033      	str	r3, [r6, #0]
 80045b0:	f000 f866 	bl	8004680 <__malloc_unlock>
 80045b4:	e7e3      	b.n	800457e <_malloc_r+0x1e>
 80045b6:	6823      	ldr	r3, [r4, #0]
 80045b8:	1b5b      	subs	r3, r3, r5
 80045ba:	d417      	bmi.n	80045ec <_malloc_r+0x8c>
 80045bc:	2b0b      	cmp	r3, #11
 80045be:	d903      	bls.n	80045c8 <_malloc_r+0x68>
 80045c0:	6023      	str	r3, [r4, #0]
 80045c2:	441c      	add	r4, r3
 80045c4:	6025      	str	r5, [r4, #0]
 80045c6:	e004      	b.n	80045d2 <_malloc_r+0x72>
 80045c8:	6863      	ldr	r3, [r4, #4]
 80045ca:	42a2      	cmp	r2, r4
 80045cc:	bf0c      	ite	eq
 80045ce:	600b      	streq	r3, [r1, #0]
 80045d0:	6053      	strne	r3, [r2, #4]
 80045d2:	4630      	mov	r0, r6
 80045d4:	f000 f854 	bl	8004680 <__malloc_unlock>
 80045d8:	f104 000b 	add.w	r0, r4, #11
 80045dc:	1d23      	adds	r3, r4, #4
 80045de:	f020 0007 	bic.w	r0, r0, #7
 80045e2:	1ac2      	subs	r2, r0, r3
 80045e4:	d0cc      	beq.n	8004580 <_malloc_r+0x20>
 80045e6:	1a1b      	subs	r3, r3, r0
 80045e8:	50a3      	str	r3, [r4, r2]
 80045ea:	e7c9      	b.n	8004580 <_malloc_r+0x20>
 80045ec:	4622      	mov	r2, r4
 80045ee:	6864      	ldr	r4, [r4, #4]
 80045f0:	e7cc      	b.n	800458c <_malloc_r+0x2c>
 80045f2:	1cc4      	adds	r4, r0, #3
 80045f4:	f024 0403 	bic.w	r4, r4, #3
 80045f8:	42a0      	cmp	r0, r4
 80045fa:	d0e3      	beq.n	80045c4 <_malloc_r+0x64>
 80045fc:	1a21      	subs	r1, r4, r0
 80045fe:	4630      	mov	r0, r6
 8004600:	f000 f808 	bl	8004614 <_sbrk_r>
 8004604:	3001      	adds	r0, #1
 8004606:	d1dd      	bne.n	80045c4 <_malloc_r+0x64>
 8004608:	e7cf      	b.n	80045aa <_malloc_r+0x4a>
 800460a:	bf00      	nop
 800460c:	20000104 	.word	0x20000104
 8004610:	20000108 	.word	0x20000108

08004614 <_sbrk_r>:
 8004614:	b538      	push	{r3, r4, r5, lr}
 8004616:	2300      	movs	r3, #0
 8004618:	4d05      	ldr	r5, [pc, #20]	; (8004630 <_sbrk_r+0x1c>)
 800461a:	4604      	mov	r4, r0
 800461c:	4608      	mov	r0, r1
 800461e:	602b      	str	r3, [r5, #0]
 8004620:	f7fd f90c 	bl	800183c <_sbrk>
 8004624:	1c43      	adds	r3, r0, #1
 8004626:	d102      	bne.n	800462e <_sbrk_r+0x1a>
 8004628:	682b      	ldr	r3, [r5, #0]
 800462a:	b103      	cbz	r3, 800462e <_sbrk_r+0x1a>
 800462c:	6023      	str	r3, [r4, #0]
 800462e:	bd38      	pop	{r3, r4, r5, pc}
 8004630:	2000021c 	.word	0x2000021c

08004634 <siprintf>:
 8004634:	b40e      	push	{r1, r2, r3}
 8004636:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800463a:	b500      	push	{lr}
 800463c:	b09c      	sub	sp, #112	; 0x70
 800463e:	ab1d      	add	r3, sp, #116	; 0x74
 8004640:	9002      	str	r0, [sp, #8]
 8004642:	9006      	str	r0, [sp, #24]
 8004644:	9107      	str	r1, [sp, #28]
 8004646:	9104      	str	r1, [sp, #16]
 8004648:	4808      	ldr	r0, [pc, #32]	; (800466c <siprintf+0x38>)
 800464a:	4909      	ldr	r1, [pc, #36]	; (8004670 <siprintf+0x3c>)
 800464c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004650:	9105      	str	r1, [sp, #20]
 8004652:	6800      	ldr	r0, [r0, #0]
 8004654:	a902      	add	r1, sp, #8
 8004656:	9301      	str	r3, [sp, #4]
 8004658:	f000 f874 	bl	8004744 <_svfiprintf_r>
 800465c:	2200      	movs	r2, #0
 800465e:	9b02      	ldr	r3, [sp, #8]
 8004660:	701a      	strb	r2, [r3, #0]
 8004662:	b01c      	add	sp, #112	; 0x70
 8004664:	f85d eb04 	ldr.w	lr, [sp], #4
 8004668:	b003      	add	sp, #12
 800466a:	4770      	bx	lr
 800466c:	20000044 	.word	0x20000044
 8004670:	ffff0208 	.word	0xffff0208

08004674 <__malloc_lock>:
 8004674:	4801      	ldr	r0, [pc, #4]	; (800467c <__malloc_lock+0x8>)
 8004676:	f000 bafb 	b.w	8004c70 <__retarget_lock_acquire_recursive>
 800467a:	bf00      	nop
 800467c:	20000224 	.word	0x20000224

08004680 <__malloc_unlock>:
 8004680:	4801      	ldr	r0, [pc, #4]	; (8004688 <__malloc_unlock+0x8>)
 8004682:	f000 baf6 	b.w	8004c72 <__retarget_lock_release_recursive>
 8004686:	bf00      	nop
 8004688:	20000224 	.word	0x20000224

0800468c <__ssputs_r>:
 800468c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004690:	688e      	ldr	r6, [r1, #8]
 8004692:	4682      	mov	sl, r0
 8004694:	429e      	cmp	r6, r3
 8004696:	460c      	mov	r4, r1
 8004698:	4690      	mov	r8, r2
 800469a:	461f      	mov	r7, r3
 800469c:	d838      	bhi.n	8004710 <__ssputs_r+0x84>
 800469e:	898a      	ldrh	r2, [r1, #12]
 80046a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80046a4:	d032      	beq.n	800470c <__ssputs_r+0x80>
 80046a6:	6825      	ldr	r5, [r4, #0]
 80046a8:	6909      	ldr	r1, [r1, #16]
 80046aa:	3301      	adds	r3, #1
 80046ac:	eba5 0901 	sub.w	r9, r5, r1
 80046b0:	6965      	ldr	r5, [r4, #20]
 80046b2:	444b      	add	r3, r9
 80046b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80046b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80046bc:	106d      	asrs	r5, r5, #1
 80046be:	429d      	cmp	r5, r3
 80046c0:	bf38      	it	cc
 80046c2:	461d      	movcc	r5, r3
 80046c4:	0553      	lsls	r3, r2, #21
 80046c6:	d531      	bpl.n	800472c <__ssputs_r+0xa0>
 80046c8:	4629      	mov	r1, r5
 80046ca:	f7ff ff49 	bl	8004560 <_malloc_r>
 80046ce:	4606      	mov	r6, r0
 80046d0:	b950      	cbnz	r0, 80046e8 <__ssputs_r+0x5c>
 80046d2:	230c      	movs	r3, #12
 80046d4:	f04f 30ff 	mov.w	r0, #4294967295
 80046d8:	f8ca 3000 	str.w	r3, [sl]
 80046dc:	89a3      	ldrh	r3, [r4, #12]
 80046de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046e2:	81a3      	strh	r3, [r4, #12]
 80046e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046e8:	464a      	mov	r2, r9
 80046ea:	6921      	ldr	r1, [r4, #16]
 80046ec:	f000 fad0 	bl	8004c90 <memcpy>
 80046f0:	89a3      	ldrh	r3, [r4, #12]
 80046f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80046f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046fa:	81a3      	strh	r3, [r4, #12]
 80046fc:	6126      	str	r6, [r4, #16]
 80046fe:	444e      	add	r6, r9
 8004700:	6026      	str	r6, [r4, #0]
 8004702:	463e      	mov	r6, r7
 8004704:	6165      	str	r5, [r4, #20]
 8004706:	eba5 0509 	sub.w	r5, r5, r9
 800470a:	60a5      	str	r5, [r4, #8]
 800470c:	42be      	cmp	r6, r7
 800470e:	d900      	bls.n	8004712 <__ssputs_r+0x86>
 8004710:	463e      	mov	r6, r7
 8004712:	4632      	mov	r2, r6
 8004714:	4641      	mov	r1, r8
 8004716:	6820      	ldr	r0, [r4, #0]
 8004718:	f000 fac8 	bl	8004cac <memmove>
 800471c:	68a3      	ldr	r3, [r4, #8]
 800471e:	6822      	ldr	r2, [r4, #0]
 8004720:	1b9b      	subs	r3, r3, r6
 8004722:	4432      	add	r2, r6
 8004724:	2000      	movs	r0, #0
 8004726:	60a3      	str	r3, [r4, #8]
 8004728:	6022      	str	r2, [r4, #0]
 800472a:	e7db      	b.n	80046e4 <__ssputs_r+0x58>
 800472c:	462a      	mov	r2, r5
 800472e:	f000 fad7 	bl	8004ce0 <_realloc_r>
 8004732:	4606      	mov	r6, r0
 8004734:	2800      	cmp	r0, #0
 8004736:	d1e1      	bne.n	80046fc <__ssputs_r+0x70>
 8004738:	4650      	mov	r0, sl
 800473a:	6921      	ldr	r1, [r4, #16]
 800473c:	f7ff fec4 	bl	80044c8 <_free_r>
 8004740:	e7c7      	b.n	80046d2 <__ssputs_r+0x46>
	...

08004744 <_svfiprintf_r>:
 8004744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004748:	4698      	mov	r8, r3
 800474a:	898b      	ldrh	r3, [r1, #12]
 800474c:	4607      	mov	r7, r0
 800474e:	061b      	lsls	r3, r3, #24
 8004750:	460d      	mov	r5, r1
 8004752:	4614      	mov	r4, r2
 8004754:	b09d      	sub	sp, #116	; 0x74
 8004756:	d50e      	bpl.n	8004776 <_svfiprintf_r+0x32>
 8004758:	690b      	ldr	r3, [r1, #16]
 800475a:	b963      	cbnz	r3, 8004776 <_svfiprintf_r+0x32>
 800475c:	2140      	movs	r1, #64	; 0x40
 800475e:	f7ff feff 	bl	8004560 <_malloc_r>
 8004762:	6028      	str	r0, [r5, #0]
 8004764:	6128      	str	r0, [r5, #16]
 8004766:	b920      	cbnz	r0, 8004772 <_svfiprintf_r+0x2e>
 8004768:	230c      	movs	r3, #12
 800476a:	603b      	str	r3, [r7, #0]
 800476c:	f04f 30ff 	mov.w	r0, #4294967295
 8004770:	e0d1      	b.n	8004916 <_svfiprintf_r+0x1d2>
 8004772:	2340      	movs	r3, #64	; 0x40
 8004774:	616b      	str	r3, [r5, #20]
 8004776:	2300      	movs	r3, #0
 8004778:	9309      	str	r3, [sp, #36]	; 0x24
 800477a:	2320      	movs	r3, #32
 800477c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004780:	2330      	movs	r3, #48	; 0x30
 8004782:	f04f 0901 	mov.w	r9, #1
 8004786:	f8cd 800c 	str.w	r8, [sp, #12]
 800478a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004930 <_svfiprintf_r+0x1ec>
 800478e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004792:	4623      	mov	r3, r4
 8004794:	469a      	mov	sl, r3
 8004796:	f813 2b01 	ldrb.w	r2, [r3], #1
 800479a:	b10a      	cbz	r2, 80047a0 <_svfiprintf_r+0x5c>
 800479c:	2a25      	cmp	r2, #37	; 0x25
 800479e:	d1f9      	bne.n	8004794 <_svfiprintf_r+0x50>
 80047a0:	ebba 0b04 	subs.w	fp, sl, r4
 80047a4:	d00b      	beq.n	80047be <_svfiprintf_r+0x7a>
 80047a6:	465b      	mov	r3, fp
 80047a8:	4622      	mov	r2, r4
 80047aa:	4629      	mov	r1, r5
 80047ac:	4638      	mov	r0, r7
 80047ae:	f7ff ff6d 	bl	800468c <__ssputs_r>
 80047b2:	3001      	adds	r0, #1
 80047b4:	f000 80aa 	beq.w	800490c <_svfiprintf_r+0x1c8>
 80047b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80047ba:	445a      	add	r2, fp
 80047bc:	9209      	str	r2, [sp, #36]	; 0x24
 80047be:	f89a 3000 	ldrb.w	r3, [sl]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	f000 80a2 	beq.w	800490c <_svfiprintf_r+0x1c8>
 80047c8:	2300      	movs	r3, #0
 80047ca:	f04f 32ff 	mov.w	r2, #4294967295
 80047ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80047d2:	f10a 0a01 	add.w	sl, sl, #1
 80047d6:	9304      	str	r3, [sp, #16]
 80047d8:	9307      	str	r3, [sp, #28]
 80047da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80047de:	931a      	str	r3, [sp, #104]	; 0x68
 80047e0:	4654      	mov	r4, sl
 80047e2:	2205      	movs	r2, #5
 80047e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047e8:	4851      	ldr	r0, [pc, #324]	; (8004930 <_svfiprintf_r+0x1ec>)
 80047ea:	f000 fa43 	bl	8004c74 <memchr>
 80047ee:	9a04      	ldr	r2, [sp, #16]
 80047f0:	b9d8      	cbnz	r0, 800482a <_svfiprintf_r+0xe6>
 80047f2:	06d0      	lsls	r0, r2, #27
 80047f4:	bf44      	itt	mi
 80047f6:	2320      	movmi	r3, #32
 80047f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047fc:	0711      	lsls	r1, r2, #28
 80047fe:	bf44      	itt	mi
 8004800:	232b      	movmi	r3, #43	; 0x2b
 8004802:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004806:	f89a 3000 	ldrb.w	r3, [sl]
 800480a:	2b2a      	cmp	r3, #42	; 0x2a
 800480c:	d015      	beq.n	800483a <_svfiprintf_r+0xf6>
 800480e:	4654      	mov	r4, sl
 8004810:	2000      	movs	r0, #0
 8004812:	f04f 0c0a 	mov.w	ip, #10
 8004816:	9a07      	ldr	r2, [sp, #28]
 8004818:	4621      	mov	r1, r4
 800481a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800481e:	3b30      	subs	r3, #48	; 0x30
 8004820:	2b09      	cmp	r3, #9
 8004822:	d94e      	bls.n	80048c2 <_svfiprintf_r+0x17e>
 8004824:	b1b0      	cbz	r0, 8004854 <_svfiprintf_r+0x110>
 8004826:	9207      	str	r2, [sp, #28]
 8004828:	e014      	b.n	8004854 <_svfiprintf_r+0x110>
 800482a:	eba0 0308 	sub.w	r3, r0, r8
 800482e:	fa09 f303 	lsl.w	r3, r9, r3
 8004832:	4313      	orrs	r3, r2
 8004834:	46a2      	mov	sl, r4
 8004836:	9304      	str	r3, [sp, #16]
 8004838:	e7d2      	b.n	80047e0 <_svfiprintf_r+0x9c>
 800483a:	9b03      	ldr	r3, [sp, #12]
 800483c:	1d19      	adds	r1, r3, #4
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	9103      	str	r1, [sp, #12]
 8004842:	2b00      	cmp	r3, #0
 8004844:	bfbb      	ittet	lt
 8004846:	425b      	neglt	r3, r3
 8004848:	f042 0202 	orrlt.w	r2, r2, #2
 800484c:	9307      	strge	r3, [sp, #28]
 800484e:	9307      	strlt	r3, [sp, #28]
 8004850:	bfb8      	it	lt
 8004852:	9204      	strlt	r2, [sp, #16]
 8004854:	7823      	ldrb	r3, [r4, #0]
 8004856:	2b2e      	cmp	r3, #46	; 0x2e
 8004858:	d10c      	bne.n	8004874 <_svfiprintf_r+0x130>
 800485a:	7863      	ldrb	r3, [r4, #1]
 800485c:	2b2a      	cmp	r3, #42	; 0x2a
 800485e:	d135      	bne.n	80048cc <_svfiprintf_r+0x188>
 8004860:	9b03      	ldr	r3, [sp, #12]
 8004862:	3402      	adds	r4, #2
 8004864:	1d1a      	adds	r2, r3, #4
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	9203      	str	r2, [sp, #12]
 800486a:	2b00      	cmp	r3, #0
 800486c:	bfb8      	it	lt
 800486e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004872:	9305      	str	r3, [sp, #20]
 8004874:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004940 <_svfiprintf_r+0x1fc>
 8004878:	2203      	movs	r2, #3
 800487a:	4650      	mov	r0, sl
 800487c:	7821      	ldrb	r1, [r4, #0]
 800487e:	f000 f9f9 	bl	8004c74 <memchr>
 8004882:	b140      	cbz	r0, 8004896 <_svfiprintf_r+0x152>
 8004884:	2340      	movs	r3, #64	; 0x40
 8004886:	eba0 000a 	sub.w	r0, r0, sl
 800488a:	fa03 f000 	lsl.w	r0, r3, r0
 800488e:	9b04      	ldr	r3, [sp, #16]
 8004890:	3401      	adds	r4, #1
 8004892:	4303      	orrs	r3, r0
 8004894:	9304      	str	r3, [sp, #16]
 8004896:	f814 1b01 	ldrb.w	r1, [r4], #1
 800489a:	2206      	movs	r2, #6
 800489c:	4825      	ldr	r0, [pc, #148]	; (8004934 <_svfiprintf_r+0x1f0>)
 800489e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80048a2:	f000 f9e7 	bl	8004c74 <memchr>
 80048a6:	2800      	cmp	r0, #0
 80048a8:	d038      	beq.n	800491c <_svfiprintf_r+0x1d8>
 80048aa:	4b23      	ldr	r3, [pc, #140]	; (8004938 <_svfiprintf_r+0x1f4>)
 80048ac:	bb1b      	cbnz	r3, 80048f6 <_svfiprintf_r+0x1b2>
 80048ae:	9b03      	ldr	r3, [sp, #12]
 80048b0:	3307      	adds	r3, #7
 80048b2:	f023 0307 	bic.w	r3, r3, #7
 80048b6:	3308      	adds	r3, #8
 80048b8:	9303      	str	r3, [sp, #12]
 80048ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048bc:	4433      	add	r3, r6
 80048be:	9309      	str	r3, [sp, #36]	; 0x24
 80048c0:	e767      	b.n	8004792 <_svfiprintf_r+0x4e>
 80048c2:	460c      	mov	r4, r1
 80048c4:	2001      	movs	r0, #1
 80048c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80048ca:	e7a5      	b.n	8004818 <_svfiprintf_r+0xd4>
 80048cc:	2300      	movs	r3, #0
 80048ce:	f04f 0c0a 	mov.w	ip, #10
 80048d2:	4619      	mov	r1, r3
 80048d4:	3401      	adds	r4, #1
 80048d6:	9305      	str	r3, [sp, #20]
 80048d8:	4620      	mov	r0, r4
 80048da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80048de:	3a30      	subs	r2, #48	; 0x30
 80048e0:	2a09      	cmp	r2, #9
 80048e2:	d903      	bls.n	80048ec <_svfiprintf_r+0x1a8>
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d0c5      	beq.n	8004874 <_svfiprintf_r+0x130>
 80048e8:	9105      	str	r1, [sp, #20]
 80048ea:	e7c3      	b.n	8004874 <_svfiprintf_r+0x130>
 80048ec:	4604      	mov	r4, r0
 80048ee:	2301      	movs	r3, #1
 80048f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80048f4:	e7f0      	b.n	80048d8 <_svfiprintf_r+0x194>
 80048f6:	ab03      	add	r3, sp, #12
 80048f8:	9300      	str	r3, [sp, #0]
 80048fa:	462a      	mov	r2, r5
 80048fc:	4638      	mov	r0, r7
 80048fe:	4b0f      	ldr	r3, [pc, #60]	; (800493c <_svfiprintf_r+0x1f8>)
 8004900:	a904      	add	r1, sp, #16
 8004902:	f3af 8000 	nop.w
 8004906:	1c42      	adds	r2, r0, #1
 8004908:	4606      	mov	r6, r0
 800490a:	d1d6      	bne.n	80048ba <_svfiprintf_r+0x176>
 800490c:	89ab      	ldrh	r3, [r5, #12]
 800490e:	065b      	lsls	r3, r3, #25
 8004910:	f53f af2c 	bmi.w	800476c <_svfiprintf_r+0x28>
 8004914:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004916:	b01d      	add	sp, #116	; 0x74
 8004918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800491c:	ab03      	add	r3, sp, #12
 800491e:	9300      	str	r3, [sp, #0]
 8004920:	462a      	mov	r2, r5
 8004922:	4638      	mov	r0, r7
 8004924:	4b05      	ldr	r3, [pc, #20]	; (800493c <_svfiprintf_r+0x1f8>)
 8004926:	a904      	add	r1, sp, #16
 8004928:	f000 f87c 	bl	8004a24 <_printf_i>
 800492c:	e7eb      	b.n	8004906 <_svfiprintf_r+0x1c2>
 800492e:	bf00      	nop
 8004930:	08004da2 	.word	0x08004da2
 8004934:	08004dac 	.word	0x08004dac
 8004938:	00000000 	.word	0x00000000
 800493c:	0800468d 	.word	0x0800468d
 8004940:	08004da8 	.word	0x08004da8

08004944 <_printf_common>:
 8004944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004948:	4616      	mov	r6, r2
 800494a:	4699      	mov	r9, r3
 800494c:	688a      	ldr	r2, [r1, #8]
 800494e:	690b      	ldr	r3, [r1, #16]
 8004950:	4607      	mov	r7, r0
 8004952:	4293      	cmp	r3, r2
 8004954:	bfb8      	it	lt
 8004956:	4613      	movlt	r3, r2
 8004958:	6033      	str	r3, [r6, #0]
 800495a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800495e:	460c      	mov	r4, r1
 8004960:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004964:	b10a      	cbz	r2, 800496a <_printf_common+0x26>
 8004966:	3301      	adds	r3, #1
 8004968:	6033      	str	r3, [r6, #0]
 800496a:	6823      	ldr	r3, [r4, #0]
 800496c:	0699      	lsls	r1, r3, #26
 800496e:	bf42      	ittt	mi
 8004970:	6833      	ldrmi	r3, [r6, #0]
 8004972:	3302      	addmi	r3, #2
 8004974:	6033      	strmi	r3, [r6, #0]
 8004976:	6825      	ldr	r5, [r4, #0]
 8004978:	f015 0506 	ands.w	r5, r5, #6
 800497c:	d106      	bne.n	800498c <_printf_common+0x48>
 800497e:	f104 0a19 	add.w	sl, r4, #25
 8004982:	68e3      	ldr	r3, [r4, #12]
 8004984:	6832      	ldr	r2, [r6, #0]
 8004986:	1a9b      	subs	r3, r3, r2
 8004988:	42ab      	cmp	r3, r5
 800498a:	dc28      	bgt.n	80049de <_printf_common+0x9a>
 800498c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004990:	1e13      	subs	r3, r2, #0
 8004992:	6822      	ldr	r2, [r4, #0]
 8004994:	bf18      	it	ne
 8004996:	2301      	movne	r3, #1
 8004998:	0692      	lsls	r2, r2, #26
 800499a:	d42d      	bmi.n	80049f8 <_printf_common+0xb4>
 800499c:	4649      	mov	r1, r9
 800499e:	4638      	mov	r0, r7
 80049a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80049a4:	47c0      	blx	r8
 80049a6:	3001      	adds	r0, #1
 80049a8:	d020      	beq.n	80049ec <_printf_common+0xa8>
 80049aa:	6823      	ldr	r3, [r4, #0]
 80049ac:	68e5      	ldr	r5, [r4, #12]
 80049ae:	f003 0306 	and.w	r3, r3, #6
 80049b2:	2b04      	cmp	r3, #4
 80049b4:	bf18      	it	ne
 80049b6:	2500      	movne	r5, #0
 80049b8:	6832      	ldr	r2, [r6, #0]
 80049ba:	f04f 0600 	mov.w	r6, #0
 80049be:	68a3      	ldr	r3, [r4, #8]
 80049c0:	bf08      	it	eq
 80049c2:	1aad      	subeq	r5, r5, r2
 80049c4:	6922      	ldr	r2, [r4, #16]
 80049c6:	bf08      	it	eq
 80049c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049cc:	4293      	cmp	r3, r2
 80049ce:	bfc4      	itt	gt
 80049d0:	1a9b      	subgt	r3, r3, r2
 80049d2:	18ed      	addgt	r5, r5, r3
 80049d4:	341a      	adds	r4, #26
 80049d6:	42b5      	cmp	r5, r6
 80049d8:	d11a      	bne.n	8004a10 <_printf_common+0xcc>
 80049da:	2000      	movs	r0, #0
 80049dc:	e008      	b.n	80049f0 <_printf_common+0xac>
 80049de:	2301      	movs	r3, #1
 80049e0:	4652      	mov	r2, sl
 80049e2:	4649      	mov	r1, r9
 80049e4:	4638      	mov	r0, r7
 80049e6:	47c0      	blx	r8
 80049e8:	3001      	adds	r0, #1
 80049ea:	d103      	bne.n	80049f4 <_printf_common+0xb0>
 80049ec:	f04f 30ff 	mov.w	r0, #4294967295
 80049f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049f4:	3501      	adds	r5, #1
 80049f6:	e7c4      	b.n	8004982 <_printf_common+0x3e>
 80049f8:	2030      	movs	r0, #48	; 0x30
 80049fa:	18e1      	adds	r1, r4, r3
 80049fc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a00:	1c5a      	adds	r2, r3, #1
 8004a02:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a06:	4422      	add	r2, r4
 8004a08:	3302      	adds	r3, #2
 8004a0a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a0e:	e7c5      	b.n	800499c <_printf_common+0x58>
 8004a10:	2301      	movs	r3, #1
 8004a12:	4622      	mov	r2, r4
 8004a14:	4649      	mov	r1, r9
 8004a16:	4638      	mov	r0, r7
 8004a18:	47c0      	blx	r8
 8004a1a:	3001      	adds	r0, #1
 8004a1c:	d0e6      	beq.n	80049ec <_printf_common+0xa8>
 8004a1e:	3601      	adds	r6, #1
 8004a20:	e7d9      	b.n	80049d6 <_printf_common+0x92>
	...

08004a24 <_printf_i>:
 8004a24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a28:	460c      	mov	r4, r1
 8004a2a:	7e27      	ldrb	r7, [r4, #24]
 8004a2c:	4691      	mov	r9, r2
 8004a2e:	2f78      	cmp	r7, #120	; 0x78
 8004a30:	4680      	mov	r8, r0
 8004a32:	469a      	mov	sl, r3
 8004a34:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004a36:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a3a:	d807      	bhi.n	8004a4c <_printf_i+0x28>
 8004a3c:	2f62      	cmp	r7, #98	; 0x62
 8004a3e:	d80a      	bhi.n	8004a56 <_printf_i+0x32>
 8004a40:	2f00      	cmp	r7, #0
 8004a42:	f000 80d9 	beq.w	8004bf8 <_printf_i+0x1d4>
 8004a46:	2f58      	cmp	r7, #88	; 0x58
 8004a48:	f000 80a4 	beq.w	8004b94 <_printf_i+0x170>
 8004a4c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004a50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a54:	e03a      	b.n	8004acc <_printf_i+0xa8>
 8004a56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a5a:	2b15      	cmp	r3, #21
 8004a5c:	d8f6      	bhi.n	8004a4c <_printf_i+0x28>
 8004a5e:	a001      	add	r0, pc, #4	; (adr r0, 8004a64 <_printf_i+0x40>)
 8004a60:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004a64:	08004abd 	.word	0x08004abd
 8004a68:	08004ad1 	.word	0x08004ad1
 8004a6c:	08004a4d 	.word	0x08004a4d
 8004a70:	08004a4d 	.word	0x08004a4d
 8004a74:	08004a4d 	.word	0x08004a4d
 8004a78:	08004a4d 	.word	0x08004a4d
 8004a7c:	08004ad1 	.word	0x08004ad1
 8004a80:	08004a4d 	.word	0x08004a4d
 8004a84:	08004a4d 	.word	0x08004a4d
 8004a88:	08004a4d 	.word	0x08004a4d
 8004a8c:	08004a4d 	.word	0x08004a4d
 8004a90:	08004bdf 	.word	0x08004bdf
 8004a94:	08004b01 	.word	0x08004b01
 8004a98:	08004bc1 	.word	0x08004bc1
 8004a9c:	08004a4d 	.word	0x08004a4d
 8004aa0:	08004a4d 	.word	0x08004a4d
 8004aa4:	08004c01 	.word	0x08004c01
 8004aa8:	08004a4d 	.word	0x08004a4d
 8004aac:	08004b01 	.word	0x08004b01
 8004ab0:	08004a4d 	.word	0x08004a4d
 8004ab4:	08004a4d 	.word	0x08004a4d
 8004ab8:	08004bc9 	.word	0x08004bc9
 8004abc:	680b      	ldr	r3, [r1, #0]
 8004abe:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004ac2:	1d1a      	adds	r2, r3, #4
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	600a      	str	r2, [r1, #0]
 8004ac8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004acc:	2301      	movs	r3, #1
 8004ace:	e0a4      	b.n	8004c1a <_printf_i+0x1f6>
 8004ad0:	6825      	ldr	r5, [r4, #0]
 8004ad2:	6808      	ldr	r0, [r1, #0]
 8004ad4:	062e      	lsls	r6, r5, #24
 8004ad6:	f100 0304 	add.w	r3, r0, #4
 8004ada:	d50a      	bpl.n	8004af2 <_printf_i+0xce>
 8004adc:	6805      	ldr	r5, [r0, #0]
 8004ade:	600b      	str	r3, [r1, #0]
 8004ae0:	2d00      	cmp	r5, #0
 8004ae2:	da03      	bge.n	8004aec <_printf_i+0xc8>
 8004ae4:	232d      	movs	r3, #45	; 0x2d
 8004ae6:	426d      	negs	r5, r5
 8004ae8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004aec:	230a      	movs	r3, #10
 8004aee:	485e      	ldr	r0, [pc, #376]	; (8004c68 <_printf_i+0x244>)
 8004af0:	e019      	b.n	8004b26 <_printf_i+0x102>
 8004af2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004af6:	6805      	ldr	r5, [r0, #0]
 8004af8:	600b      	str	r3, [r1, #0]
 8004afa:	bf18      	it	ne
 8004afc:	b22d      	sxthne	r5, r5
 8004afe:	e7ef      	b.n	8004ae0 <_printf_i+0xbc>
 8004b00:	680b      	ldr	r3, [r1, #0]
 8004b02:	6825      	ldr	r5, [r4, #0]
 8004b04:	1d18      	adds	r0, r3, #4
 8004b06:	6008      	str	r0, [r1, #0]
 8004b08:	0628      	lsls	r0, r5, #24
 8004b0a:	d501      	bpl.n	8004b10 <_printf_i+0xec>
 8004b0c:	681d      	ldr	r5, [r3, #0]
 8004b0e:	e002      	b.n	8004b16 <_printf_i+0xf2>
 8004b10:	0669      	lsls	r1, r5, #25
 8004b12:	d5fb      	bpl.n	8004b0c <_printf_i+0xe8>
 8004b14:	881d      	ldrh	r5, [r3, #0]
 8004b16:	2f6f      	cmp	r7, #111	; 0x6f
 8004b18:	bf0c      	ite	eq
 8004b1a:	2308      	moveq	r3, #8
 8004b1c:	230a      	movne	r3, #10
 8004b1e:	4852      	ldr	r0, [pc, #328]	; (8004c68 <_printf_i+0x244>)
 8004b20:	2100      	movs	r1, #0
 8004b22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b26:	6866      	ldr	r6, [r4, #4]
 8004b28:	2e00      	cmp	r6, #0
 8004b2a:	bfa8      	it	ge
 8004b2c:	6821      	ldrge	r1, [r4, #0]
 8004b2e:	60a6      	str	r6, [r4, #8]
 8004b30:	bfa4      	itt	ge
 8004b32:	f021 0104 	bicge.w	r1, r1, #4
 8004b36:	6021      	strge	r1, [r4, #0]
 8004b38:	b90d      	cbnz	r5, 8004b3e <_printf_i+0x11a>
 8004b3a:	2e00      	cmp	r6, #0
 8004b3c:	d04d      	beq.n	8004bda <_printf_i+0x1b6>
 8004b3e:	4616      	mov	r6, r2
 8004b40:	fbb5 f1f3 	udiv	r1, r5, r3
 8004b44:	fb03 5711 	mls	r7, r3, r1, r5
 8004b48:	5dc7      	ldrb	r7, [r0, r7]
 8004b4a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004b4e:	462f      	mov	r7, r5
 8004b50:	42bb      	cmp	r3, r7
 8004b52:	460d      	mov	r5, r1
 8004b54:	d9f4      	bls.n	8004b40 <_printf_i+0x11c>
 8004b56:	2b08      	cmp	r3, #8
 8004b58:	d10b      	bne.n	8004b72 <_printf_i+0x14e>
 8004b5a:	6823      	ldr	r3, [r4, #0]
 8004b5c:	07df      	lsls	r7, r3, #31
 8004b5e:	d508      	bpl.n	8004b72 <_printf_i+0x14e>
 8004b60:	6923      	ldr	r3, [r4, #16]
 8004b62:	6861      	ldr	r1, [r4, #4]
 8004b64:	4299      	cmp	r1, r3
 8004b66:	bfde      	ittt	le
 8004b68:	2330      	movle	r3, #48	; 0x30
 8004b6a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004b6e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004b72:	1b92      	subs	r2, r2, r6
 8004b74:	6122      	str	r2, [r4, #16]
 8004b76:	464b      	mov	r3, r9
 8004b78:	4621      	mov	r1, r4
 8004b7a:	4640      	mov	r0, r8
 8004b7c:	f8cd a000 	str.w	sl, [sp]
 8004b80:	aa03      	add	r2, sp, #12
 8004b82:	f7ff fedf 	bl	8004944 <_printf_common>
 8004b86:	3001      	adds	r0, #1
 8004b88:	d14c      	bne.n	8004c24 <_printf_i+0x200>
 8004b8a:	f04f 30ff 	mov.w	r0, #4294967295
 8004b8e:	b004      	add	sp, #16
 8004b90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b94:	4834      	ldr	r0, [pc, #208]	; (8004c68 <_printf_i+0x244>)
 8004b96:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004b9a:	680e      	ldr	r6, [r1, #0]
 8004b9c:	6823      	ldr	r3, [r4, #0]
 8004b9e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004ba2:	061f      	lsls	r7, r3, #24
 8004ba4:	600e      	str	r6, [r1, #0]
 8004ba6:	d514      	bpl.n	8004bd2 <_printf_i+0x1ae>
 8004ba8:	07d9      	lsls	r1, r3, #31
 8004baa:	bf44      	itt	mi
 8004bac:	f043 0320 	orrmi.w	r3, r3, #32
 8004bb0:	6023      	strmi	r3, [r4, #0]
 8004bb2:	b91d      	cbnz	r5, 8004bbc <_printf_i+0x198>
 8004bb4:	6823      	ldr	r3, [r4, #0]
 8004bb6:	f023 0320 	bic.w	r3, r3, #32
 8004bba:	6023      	str	r3, [r4, #0]
 8004bbc:	2310      	movs	r3, #16
 8004bbe:	e7af      	b.n	8004b20 <_printf_i+0xfc>
 8004bc0:	6823      	ldr	r3, [r4, #0]
 8004bc2:	f043 0320 	orr.w	r3, r3, #32
 8004bc6:	6023      	str	r3, [r4, #0]
 8004bc8:	2378      	movs	r3, #120	; 0x78
 8004bca:	4828      	ldr	r0, [pc, #160]	; (8004c6c <_printf_i+0x248>)
 8004bcc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004bd0:	e7e3      	b.n	8004b9a <_printf_i+0x176>
 8004bd2:	065e      	lsls	r6, r3, #25
 8004bd4:	bf48      	it	mi
 8004bd6:	b2ad      	uxthmi	r5, r5
 8004bd8:	e7e6      	b.n	8004ba8 <_printf_i+0x184>
 8004bda:	4616      	mov	r6, r2
 8004bdc:	e7bb      	b.n	8004b56 <_printf_i+0x132>
 8004bde:	680b      	ldr	r3, [r1, #0]
 8004be0:	6826      	ldr	r6, [r4, #0]
 8004be2:	1d1d      	adds	r5, r3, #4
 8004be4:	6960      	ldr	r0, [r4, #20]
 8004be6:	600d      	str	r5, [r1, #0]
 8004be8:	0635      	lsls	r5, r6, #24
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	d501      	bpl.n	8004bf2 <_printf_i+0x1ce>
 8004bee:	6018      	str	r0, [r3, #0]
 8004bf0:	e002      	b.n	8004bf8 <_printf_i+0x1d4>
 8004bf2:	0671      	lsls	r1, r6, #25
 8004bf4:	d5fb      	bpl.n	8004bee <_printf_i+0x1ca>
 8004bf6:	8018      	strh	r0, [r3, #0]
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	4616      	mov	r6, r2
 8004bfc:	6123      	str	r3, [r4, #16]
 8004bfe:	e7ba      	b.n	8004b76 <_printf_i+0x152>
 8004c00:	680b      	ldr	r3, [r1, #0]
 8004c02:	1d1a      	adds	r2, r3, #4
 8004c04:	600a      	str	r2, [r1, #0]
 8004c06:	681e      	ldr	r6, [r3, #0]
 8004c08:	2100      	movs	r1, #0
 8004c0a:	4630      	mov	r0, r6
 8004c0c:	6862      	ldr	r2, [r4, #4]
 8004c0e:	f000 f831 	bl	8004c74 <memchr>
 8004c12:	b108      	cbz	r0, 8004c18 <_printf_i+0x1f4>
 8004c14:	1b80      	subs	r0, r0, r6
 8004c16:	6060      	str	r0, [r4, #4]
 8004c18:	6863      	ldr	r3, [r4, #4]
 8004c1a:	6123      	str	r3, [r4, #16]
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c22:	e7a8      	b.n	8004b76 <_printf_i+0x152>
 8004c24:	4632      	mov	r2, r6
 8004c26:	4649      	mov	r1, r9
 8004c28:	4640      	mov	r0, r8
 8004c2a:	6923      	ldr	r3, [r4, #16]
 8004c2c:	47d0      	blx	sl
 8004c2e:	3001      	adds	r0, #1
 8004c30:	d0ab      	beq.n	8004b8a <_printf_i+0x166>
 8004c32:	6823      	ldr	r3, [r4, #0]
 8004c34:	079b      	lsls	r3, r3, #30
 8004c36:	d413      	bmi.n	8004c60 <_printf_i+0x23c>
 8004c38:	68e0      	ldr	r0, [r4, #12]
 8004c3a:	9b03      	ldr	r3, [sp, #12]
 8004c3c:	4298      	cmp	r0, r3
 8004c3e:	bfb8      	it	lt
 8004c40:	4618      	movlt	r0, r3
 8004c42:	e7a4      	b.n	8004b8e <_printf_i+0x16a>
 8004c44:	2301      	movs	r3, #1
 8004c46:	4632      	mov	r2, r6
 8004c48:	4649      	mov	r1, r9
 8004c4a:	4640      	mov	r0, r8
 8004c4c:	47d0      	blx	sl
 8004c4e:	3001      	adds	r0, #1
 8004c50:	d09b      	beq.n	8004b8a <_printf_i+0x166>
 8004c52:	3501      	adds	r5, #1
 8004c54:	68e3      	ldr	r3, [r4, #12]
 8004c56:	9903      	ldr	r1, [sp, #12]
 8004c58:	1a5b      	subs	r3, r3, r1
 8004c5a:	42ab      	cmp	r3, r5
 8004c5c:	dcf2      	bgt.n	8004c44 <_printf_i+0x220>
 8004c5e:	e7eb      	b.n	8004c38 <_printf_i+0x214>
 8004c60:	2500      	movs	r5, #0
 8004c62:	f104 0619 	add.w	r6, r4, #25
 8004c66:	e7f5      	b.n	8004c54 <_printf_i+0x230>
 8004c68:	08004db3 	.word	0x08004db3
 8004c6c:	08004dc4 	.word	0x08004dc4

08004c70 <__retarget_lock_acquire_recursive>:
 8004c70:	4770      	bx	lr

08004c72 <__retarget_lock_release_recursive>:
 8004c72:	4770      	bx	lr

08004c74 <memchr>:
 8004c74:	4603      	mov	r3, r0
 8004c76:	b510      	push	{r4, lr}
 8004c78:	b2c9      	uxtb	r1, r1
 8004c7a:	4402      	add	r2, r0
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	4618      	mov	r0, r3
 8004c80:	d101      	bne.n	8004c86 <memchr+0x12>
 8004c82:	2000      	movs	r0, #0
 8004c84:	e003      	b.n	8004c8e <memchr+0x1a>
 8004c86:	7804      	ldrb	r4, [r0, #0]
 8004c88:	3301      	adds	r3, #1
 8004c8a:	428c      	cmp	r4, r1
 8004c8c:	d1f6      	bne.n	8004c7c <memchr+0x8>
 8004c8e:	bd10      	pop	{r4, pc}

08004c90 <memcpy>:
 8004c90:	440a      	add	r2, r1
 8004c92:	4291      	cmp	r1, r2
 8004c94:	f100 33ff 	add.w	r3, r0, #4294967295
 8004c98:	d100      	bne.n	8004c9c <memcpy+0xc>
 8004c9a:	4770      	bx	lr
 8004c9c:	b510      	push	{r4, lr}
 8004c9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ca2:	4291      	cmp	r1, r2
 8004ca4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ca8:	d1f9      	bne.n	8004c9e <memcpy+0xe>
 8004caa:	bd10      	pop	{r4, pc}

08004cac <memmove>:
 8004cac:	4288      	cmp	r0, r1
 8004cae:	b510      	push	{r4, lr}
 8004cb0:	eb01 0402 	add.w	r4, r1, r2
 8004cb4:	d902      	bls.n	8004cbc <memmove+0x10>
 8004cb6:	4284      	cmp	r4, r0
 8004cb8:	4623      	mov	r3, r4
 8004cba:	d807      	bhi.n	8004ccc <memmove+0x20>
 8004cbc:	1e43      	subs	r3, r0, #1
 8004cbe:	42a1      	cmp	r1, r4
 8004cc0:	d008      	beq.n	8004cd4 <memmove+0x28>
 8004cc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004cc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004cca:	e7f8      	b.n	8004cbe <memmove+0x12>
 8004ccc:	4601      	mov	r1, r0
 8004cce:	4402      	add	r2, r0
 8004cd0:	428a      	cmp	r2, r1
 8004cd2:	d100      	bne.n	8004cd6 <memmove+0x2a>
 8004cd4:	bd10      	pop	{r4, pc}
 8004cd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004cda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004cde:	e7f7      	b.n	8004cd0 <memmove+0x24>

08004ce0 <_realloc_r>:
 8004ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ce2:	4607      	mov	r7, r0
 8004ce4:	4614      	mov	r4, r2
 8004ce6:	460e      	mov	r6, r1
 8004ce8:	b921      	cbnz	r1, 8004cf4 <_realloc_r+0x14>
 8004cea:	4611      	mov	r1, r2
 8004cec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004cf0:	f7ff bc36 	b.w	8004560 <_malloc_r>
 8004cf4:	b922      	cbnz	r2, 8004d00 <_realloc_r+0x20>
 8004cf6:	f7ff fbe7 	bl	80044c8 <_free_r>
 8004cfa:	4625      	mov	r5, r4
 8004cfc:	4628      	mov	r0, r5
 8004cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d00:	f000 f814 	bl	8004d2c <_malloc_usable_size_r>
 8004d04:	42a0      	cmp	r0, r4
 8004d06:	d20f      	bcs.n	8004d28 <_realloc_r+0x48>
 8004d08:	4621      	mov	r1, r4
 8004d0a:	4638      	mov	r0, r7
 8004d0c:	f7ff fc28 	bl	8004560 <_malloc_r>
 8004d10:	4605      	mov	r5, r0
 8004d12:	2800      	cmp	r0, #0
 8004d14:	d0f2      	beq.n	8004cfc <_realloc_r+0x1c>
 8004d16:	4631      	mov	r1, r6
 8004d18:	4622      	mov	r2, r4
 8004d1a:	f7ff ffb9 	bl	8004c90 <memcpy>
 8004d1e:	4631      	mov	r1, r6
 8004d20:	4638      	mov	r0, r7
 8004d22:	f7ff fbd1 	bl	80044c8 <_free_r>
 8004d26:	e7e9      	b.n	8004cfc <_realloc_r+0x1c>
 8004d28:	4635      	mov	r5, r6
 8004d2a:	e7e7      	b.n	8004cfc <_realloc_r+0x1c>

08004d2c <_malloc_usable_size_r>:
 8004d2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d30:	1f18      	subs	r0, r3, #4
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	bfbc      	itt	lt
 8004d36:	580b      	ldrlt	r3, [r1, r0]
 8004d38:	18c0      	addlt	r0, r0, r3
 8004d3a:	4770      	bx	lr

08004d3c <_init>:
 8004d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d3e:	bf00      	nop
 8004d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d42:	bc08      	pop	{r3}
 8004d44:	469e      	mov	lr, r3
 8004d46:	4770      	bx	lr

08004d48 <_fini>:
 8004d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d4a:	bf00      	nop
 8004d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d4e:	bc08      	pop	{r3}
 8004d50:	469e      	mov	lr, r3
 8004d52:	4770      	bx	lr
